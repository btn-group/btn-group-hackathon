(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod2) => function __require2() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __export = (target, all3) => {
    for (var name in all3)
      __defProp(target, name, { get: all3[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));

  // ../../node_modules/jquery/dist/jquery.js
  var require_jquery = __commonJS({
    "../../node_modules/jquery/dist/jquery.js"(exports, module2) {
      (function(global2, factory) {
        "use strict";
        if (typeof module2 === "object" && typeof module2.exports === "object") {
          module2.exports = global2.document ? factory(global2, true) : function(w) {
            if (!w.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
          };
        } else {
          factory(global2);
        }
      })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
        "use strict";
        var arr = [];
        var getProto = Object.getPrototypeOf;
        var slice = arr.slice;
        var flat = arr.flat ? function(array) {
          return arr.flat.call(array);
        } : function(array) {
          return arr.concat.apply([], array);
        };
        var push = arr.push;
        var indexOf = arr.indexOf;
        var class2type = {};
        var toString = class2type.toString;
        var hasOwn = class2type.hasOwnProperty;
        var fnToString = hasOwn.toString;
        var ObjectFunctionString = fnToString.call(Object);
        var support = {};
        var isFunction3 = function isFunction4(obj) {
          return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
        };
        var isWindow = function isWindow2(obj) {
          return obj != null && obj === obj.window;
        };
        var document2 = window2.document;
        var preservedScriptAttributes = {
          type: true,
          src: true,
          nonce: true,
          noModule: true
        };
        function DOMEval(code, node, doc) {
          doc = doc || document2;
          var i, val, script = doc.createElement("script");
          script.text = code;
          if (node) {
            for (i in preservedScriptAttributes) {
              val = node[i] || node.getAttribute && node.getAttribute(i);
              if (val) {
                script.setAttribute(i, val);
              }
            }
          }
          doc.head.appendChild(script).parentNode.removeChild(script);
        }
        function toType2(obj) {
          if (obj == null) {
            return obj + "";
          }
          return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        }
        var version = "3.7.0", rhtmlSuffix = /HTML$/i, jQuery = function(selector, context2) {
          return new jQuery.fn.init(selector, context2);
        };
        jQuery.fn = jQuery.prototype = {
          jquery: version,
          constructor: jQuery,
          length: 0,
          toArray: function() {
            return slice.call(this);
          },
          get: function(num) {
            if (num == null) {
              return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
          },
          pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
          },
          each: function(callback) {
            return jQuery.each(this, callback);
          },
          map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
              return callback.call(elem, i, elem);
            }));
          },
          slice: function() {
            return this.pushStack(slice.apply(this, arguments));
          },
          first: function() {
            return this.eq(0);
          },
          last: function() {
            return this.eq(-1);
          },
          even: function() {
            return this.pushStack(jQuery.grep(this, function(_elem, i) {
              return (i + 1) % 2;
            }));
          },
          odd: function() {
            return this.pushStack(jQuery.grep(this, function(_elem, i) {
              return i % 2;
            }));
          },
          eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
          },
          end: function() {
            return this.prevObject || this.constructor();
          },
          push,
          sort: arr.sort,
          splice: arr.splice
        };
        jQuery.extend = jQuery.fn.extend = function() {
          var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
          }
          if (typeof target !== "object" && !isFunction3(target)) {
            target = {};
          }
          if (i === length) {
            target = this;
            i--;
          }
          for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
              for (name in options) {
                copy = options[name];
                if (name === "__proto__" || target === copy) {
                  continue;
                }
                if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                  src = target[name];
                  if (copyIsArray && !Array.isArray(src)) {
                    clone = [];
                  } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                    clone = {};
                  } else {
                    clone = src;
                  }
                  copyIsArray = false;
                  target[name] = jQuery.extend(deep, clone, copy);
                } else if (copy !== void 0) {
                  target[name] = copy;
                }
              }
            }
          }
          return target;
        };
        jQuery.extend({
          expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
          isReady: true,
          error: function(msg) {
            throw new Error(msg);
          },
          noop: function() {
          },
          isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== "[object Object]") {
              return false;
            }
            proto = getProto(obj);
            if (!proto) {
              return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
          },
          isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
              return false;
            }
            return true;
          },
          globalEval: function(code, options, doc) {
            DOMEval(code, { nonce: options && options.nonce }, doc);
          },
          each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike3(obj)) {
              length = obj.length;
              for (; i < length; i++) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            }
            return obj;
          },
          text: function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
              while (node = elem[i++]) {
                ret += jQuery.text(node);
              }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
              return elem.textContent;
            } else if (nodeType === 3 || nodeType === 4) {
              return elem.nodeValue;
            }
            return ret;
          },
          makeArray: function(arr2, results) {
            var ret = results || [];
            if (arr2 != null) {
              if (isArrayLike3(Object(arr2))) {
                jQuery.merge(
                  ret,
                  typeof arr2 === "string" ? [arr2] : arr2
                );
              } else {
                push.call(ret, arr2);
              }
            }
            return ret;
          },
          inArray: function(elem, arr2, i) {
            return arr2 == null ? -1 : indexOf.call(arr2, elem, i);
          },
          isXMLDoc: function(elem) {
            var namespace = elem && elem.namespaceURI, docElem = elem && (elem.ownerDocument || elem).documentElement;
            return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
          },
          merge: function(first2, second) {
            var len = +second.length, j = 0, i = first2.length;
            for (; j < len; j++) {
              first2[i++] = second[j];
            }
            first2.length = i;
            return first2;
          },
          grep: function(elems, callback, invert2) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert2;
            for (; i < length; i++) {
              callbackInverse = !callback(elems[i], i);
              if (callbackInverse !== callbackExpect) {
                matches.push(elems[i]);
              }
            }
            return matches;
          },
          map: function(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike3(elems)) {
              length = elems.length;
              for (; i < length; i++) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            } else {
              for (i in elems) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            }
            return flat(ret);
          },
          guid: 1,
          support
        });
        if (typeof Symbol === "function") {
          jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
        }
        jQuery.each(
          "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
          function(_i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
          }
        );
        function isArrayLike3(obj) {
          var length = !!obj && "length" in obj && obj.length, type = toType2(obj);
          if (isFunction3(obj) || isWindow(obj)) {
            return false;
          }
          return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
        }
        function nodeName(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        }
        var pop = arr.pop;
        var sort = arr.sort;
        var splice = arr.splice;
        var whitespace = "[\\x20\\t\\r\\n\\f]";
        var rtrimCSS = new RegExp(
          "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
          "g"
        );
        jQuery.contains = function(a, b) {
          var bup = b && b.parentNode;
          return a === bup || !!(bup && bup.nodeType === 1 && (a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
        };
        var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
        function fcssescape(ch, asCodePoint) {
          if (asCodePoint) {
            if (ch === "\0") {
              return "\uFFFD";
            }
            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
          }
          return "\\" + ch;
        }
        jQuery.escapeSelector = function(sel) {
          return (sel + "").replace(rcssescape, fcssescape);
        };
        var preferredDoc = document2, pushNative = push;
        (function() {
          var i, Expr, outermostContext, sortInput, hasDuplicate, push2 = pushNative, document3, documentElement2, documentIsHTML, rbuggyQSA, matches, expando = jQuery.expando, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
              hasDuplicate = true;
            }
            return 0;
          }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + identifier + ")"),
            CLASS: new RegExp("^\\.(" + identifier + ")"),
            TAG: new RegExp("^(" + identifier + "|[*])"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp(
              "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)",
              "i"
            ),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
          }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
            var high = "0x" + escape.slice(1) - 65536;
            if (nonHex) {
              return nonHex;
            }
            return high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
          }, unloadHandler = function() {
            setDocument();
          }, inDisabledFieldset = addCombinator(
            function(elem) {
              return elem.disabled === true && nodeName(elem, "fieldset");
            },
            { dir: "parentNode", next: "legend" }
          );
          function safeActiveElement() {
            try {
              return document3.activeElement;
            } catch (err) {
            }
          }
          try {
            push2.apply(
              arr = slice.call(preferredDoc.childNodes),
              preferredDoc.childNodes
            );
            arr[preferredDoc.childNodes.length].nodeType;
          } catch (e) {
            push2 = {
              apply: function(target, els) {
                pushNative.apply(target, slice.call(els));
              },
              call: function(target) {
                pushNative.apply(target, slice.call(arguments, 1));
              }
            };
          }
          function find(selector, context2, results, seed) {
            var m, i2, elem, nid, match, groups, newSelector, newContext = context2 && context2.ownerDocument, nodeType = context2 ? context2.nodeType : 9;
            results = results || [];
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
              return results;
            }
            if (!seed) {
              setDocument(context2);
              context2 = context2 || document3;
              if (documentIsHTML) {
                if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                  if (m = match[1]) {
                    if (nodeType === 9) {
                      if (elem = context2.getElementById(m)) {
                        if (elem.id === m) {
                          push2.call(results, elem);
                          return results;
                        }
                      } else {
                        return results;
                      }
                    } else {
                      if (newContext && (elem = newContext.getElementById(m)) && find.contains(context2, elem) && elem.id === m) {
                        push2.call(results, elem);
                        return results;
                      }
                    }
                  } else if (match[2]) {
                    push2.apply(results, context2.getElementsByTagName(selector));
                    return results;
                  } else if ((m = match[3]) && context2.getElementsByClassName) {
                    push2.apply(results, context2.getElementsByClassName(m));
                    return results;
                  }
                }
                if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                  newSelector = selector;
                  newContext = context2;
                  if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
                    newContext = rsibling.test(selector) && testContext(context2.parentNode) || context2;
                    if (newContext != context2 || !support.scope) {
                      if (nid = context2.getAttribute("id")) {
                        nid = jQuery.escapeSelector(nid);
                      } else {
                        context2.setAttribute("id", nid = expando);
                      }
                    }
                    groups = tokenize(selector);
                    i2 = groups.length;
                    while (i2--) {
                      groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                    }
                    newSelector = groups.join(",");
                  }
                  try {
                    push2.apply(
                      results,
                      newContext.querySelectorAll(newSelector)
                    );
                    return results;
                  } catch (qsaError) {
                    nonnativeSelectorCache(selector, true);
                  } finally {
                    if (nid === expando) {
                      context2.removeAttribute("id");
                    }
                  }
                }
              }
            }
            return select(selector.replace(rtrimCSS, "$1"), context2, results, seed);
          }
          function createCache() {
            var keys2 = [];
            function cache(key, value) {
              if (keys2.push(key + " ") > Expr.cacheLength) {
                delete cache[keys2.shift()];
              }
              return cache[key + " "] = value;
            }
            return cache;
          }
          function markFunction(fn2) {
            fn2[expando] = true;
            return fn2;
          }
          function assert3(fn2) {
            var el = document3.createElement("fieldset");
            try {
              return !!fn2(el);
            } catch (e) {
              return false;
            } finally {
              if (el.parentNode) {
                el.parentNode.removeChild(el);
              }
              el = null;
            }
          }
          function createInputPseudo(type) {
            return function(elem) {
              return nodeName(elem, "input") && elem.type === type;
            };
          }
          function createButtonPseudo(type) {
            return function(elem) {
              return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
            };
          }
          function createDisabledPseudo(disabled) {
            return function(elem) {
              if ("form" in elem) {
                if (elem.parentNode && elem.disabled === false) {
                  if ("label" in elem) {
                    if ("label" in elem.parentNode) {
                      return elem.parentNode.disabled === disabled;
                    } else {
                      return elem.disabled === disabled;
                    }
                  }
                  return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                }
                return elem.disabled === disabled;
              } else if ("label" in elem) {
                return elem.disabled === disabled;
              }
              return false;
            };
          }
          function createPositionalPseudo(fn2) {
            return markFunction(function(argument) {
              argument = +argument;
              return markFunction(function(seed, matches2) {
                var j, matchIndexes = fn2([], seed.length, argument), i2 = matchIndexes.length;
                while (i2--) {
                  if (seed[j = matchIndexes[i2]]) {
                    seed[j] = !(matches2[j] = seed[j]);
                  }
                }
              });
            });
          }
          function testContext(context2) {
            return context2 && typeof context2.getElementsByTagName !== "undefined" && context2;
          }
          function setDocument(node) {
            var subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
              return document3;
            }
            document3 = doc;
            documentElement2 = document3.documentElement;
            documentIsHTML = !jQuery.isXMLDoc(document3);
            matches = documentElement2.matches || documentElement2.webkitMatchesSelector || documentElement2.msMatchesSelector;
            if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
              subWindow.addEventListener("unload", unloadHandler);
            }
            support.getById = assert3(function(el) {
              documentElement2.appendChild(el).id = jQuery.expando;
              return !document3.getElementsByName || !document3.getElementsByName(jQuery.expando).length;
            });
            support.disconnectedMatch = assert3(function(el) {
              return matches.call(el, "*");
            });
            support.scope = assert3(function() {
              return document3.querySelectorAll(":scope");
            });
            support.cssHas = assert3(function() {
              try {
                document3.querySelector(":has(*,:jqfake)");
                return false;
              } catch (e) {
                return true;
              }
            });
            if (support.getById) {
              Expr.filter.ID = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  return elem.getAttribute("id") === attrId;
                };
              };
              Expr.find.ID = function(id, context2) {
                if (typeof context2.getElementById !== "undefined" && documentIsHTML) {
                  var elem = context2.getElementById(id);
                  return elem ? [elem] : [];
                }
              };
            } else {
              Expr.filter.ID = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                  return node2 && node2.value === attrId;
                };
              };
              Expr.find.ID = function(id, context2) {
                if (typeof context2.getElementById !== "undefined" && documentIsHTML) {
                  var node2, i2, elems, elem = context2.getElementById(id);
                  if (elem) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id) {
                      return [elem];
                    }
                    elems = context2.getElementsByName(id);
                    i2 = 0;
                    while (elem = elems[i2++]) {
                      node2 = elem.getAttributeNode("id");
                      if (node2 && node2.value === id) {
                        return [elem];
                      }
                    }
                  }
                  return [];
                }
              };
            }
            Expr.find.TAG = function(tag, context2) {
              if (typeof context2.getElementsByTagName !== "undefined") {
                return context2.getElementsByTagName(tag);
              } else {
                return context2.querySelectorAll(tag);
              }
            };
            Expr.find.CLASS = function(className, context2) {
              if (typeof context2.getElementsByClassName !== "undefined" && documentIsHTML) {
                return context2.getElementsByClassName(className);
              }
            };
            rbuggyQSA = [];
            assert3(function(el) {
              var input;
              documentElement2.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a><select id='" + expando + "-\r\\' disabled='disabled'><option selected=''></option></select>";
              if (!el.querySelectorAll("[selected]").length) {
                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
              }
              if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                rbuggyQSA.push("~=");
              }
              if (!el.querySelectorAll("a#" + expando + "+*").length) {
                rbuggyQSA.push(".#.+[+~]");
              }
              if (!el.querySelectorAll(":checked").length) {
                rbuggyQSA.push(":checked");
              }
              input = document3.createElement("input");
              input.setAttribute("type", "hidden");
              el.appendChild(input).setAttribute("name", "D");
              documentElement2.appendChild(el).disabled = true;
              if (el.querySelectorAll(":disabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              }
              input = document3.createElement("input");
              input.setAttribute("name", "");
              el.appendChild(input);
              if (!el.querySelectorAll("[name='']").length) {
                rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + `*(?:''|"")`);
              }
            });
            if (!support.cssHas) {
              rbuggyQSA.push(":has");
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            sortOrder = function(a, b) {
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }
              var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }
              compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
              if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                if (a === document3 || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {
                  return -1;
                }
                if (b === document3 || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {
                  return 1;
                }
                return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
              }
              return compare & 4 ? -1 : 1;
            };
            return document3;
          }
          find.matches = function(expr, elements) {
            return find(expr, null, null, elements);
          };
          find.matchesSelector = function(elem, expr) {
            setDocument(elem);
            if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
              try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                  return ret;
                }
              } catch (e) {
                nonnativeSelectorCache(expr, true);
              }
            }
            return find(expr, document3, null, [elem]).length > 0;
          };
          find.contains = function(context2, elem) {
            if ((context2.ownerDocument || context2) != document3) {
              setDocument(context2);
            }
            return jQuery.contains(context2, elem);
          };
          find.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) != document3) {
              setDocument(elem);
            }
            var fn2 = Expr.attrHandle[name.toLowerCase()], val = fn2 && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn2(elem, name, !documentIsHTML) : void 0;
            if (val !== void 0) {
              return val;
            }
            return elem.getAttribute(name);
          };
          find.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
          };
          jQuery.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i2 = 0;
            hasDuplicate = !support.sortStable;
            sortInput = !support.sortStable && slice.call(results, 0);
            sort.call(results, sortOrder);
            if (hasDuplicate) {
              while (elem = results[i2++]) {
                if (elem === results[i2]) {
                  j = duplicates.push(i2);
                }
              }
              while (j--) {
                splice.call(results, duplicates[j], 1);
              }
            }
            sortInput = null;
            return results;
          };
          jQuery.fn.uniqueSort = function() {
            return this.pushStack(jQuery.uniqueSort(slice.apply(this)));
          };
          Expr = jQuery.expr = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
              ">": { dir: "parentNode", first: true },
              " ": { dir: "parentNode" },
              "+": { dir: "previousSibling", first: true },
              "~": { dir: "previousSibling" }
            },
            preFilter: {
              ATTR: function(match) {
                match[1] = match[1].replace(runescape, funescape);
                match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                if (match[2] === "~=") {
                  match[3] = " " + match[3] + " ";
                }
                return match.slice(0, 4);
              },
              CHILD: function(match) {
                match[1] = match[1].toLowerCase();
                if (match[1].slice(0, 3) === "nth") {
                  if (!match[3]) {
                    find.error(match[0]);
                  }
                  match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                  match[5] = +(match[7] + match[8] || match[3] === "odd");
                } else if (match[3]) {
                  find.error(match[0]);
                }
                return match;
              },
              PSEUDO: function(match) {
                var excess, unquoted = !match[6] && match[2];
                if (matchExpr.CHILD.test(match[0])) {
                  return null;
                }
                if (match[3]) {
                  match[2] = match[4] || match[5] || "";
                } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                  match[0] = match[0].slice(0, excess);
                  match[2] = unquoted.slice(0, excess);
                }
                return match.slice(0, 3);
              }
            },
            filter: {
              TAG: function(nodeNameSelector) {
                var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                return nodeNameSelector === "*" ? function() {
                  return true;
                } : function(elem) {
                  return nodeName(elem, expectedNodeName);
                };
              },
              CLASS: function(className) {
                var pattern = classCache[className + " "];
                return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                  return pattern.test(
                    typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || ""
                  );
                });
              },
              ATTR: function(name, operator, check) {
                return function(elem) {
                  var result = find.attr(elem, name);
                  if (result == null) {
                    return operator === "!=";
                  }
                  if (!operator) {
                    return true;
                  }
                  result += "";
                  if (operator === "=") {
                    return result === check;
                  }
                  if (operator === "!=") {
                    return result !== check;
                  }
                  if (operator === "^=") {
                    return check && result.indexOf(check) === 0;
                  }
                  if (operator === "*=") {
                    return check && result.indexOf(check) > -1;
                  }
                  if (operator === "$=") {
                    return check && result.slice(-check.length) === check;
                  }
                  if (operator === "~=") {
                    return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
                  }
                  if (operator === "|=") {
                    return result === check || result.slice(0, check.length + 1) === check + "-";
                  }
                  return false;
                };
              },
              CHILD: function(type, what, _argument, first2, last2) {
                var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                return first2 === 1 && last2 === 0 ? function(elem) {
                  return !!elem.parentNode;
                } : function(elem, _context, xml) {
                  var cache, outerCache, node, nodeIndex, start2, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                  if (parent) {
                    if (simple) {
                      while (dir2) {
                        node = elem;
                        while (node = node[dir2]) {
                          if (ofType ? nodeName(node, name) : node.nodeType === 1) {
                            return false;
                          }
                        }
                        start2 = dir2 = type === "only" && !start2 && "nextSibling";
                      }
                      return true;
                    }
                    start2 = [forward ? parent.firstChild : parent.lastChild];
                    if (forward && useCache) {
                      outerCache = parent[expando] || (parent[expando] = {});
                      cache = outerCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];
                      while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start2.pop()) {
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          outerCache[type] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      if (useCache) {
                        outerCache = elem[expando] || (elem[expando] = {});
                        cache = outerCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex;
                      }
                      if (diff === false) {
                        while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start2.pop()) {
                          if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {
                            if (useCache) {
                              outerCache = node[expando] || (node[expando] = {});
                              outerCache[type] = [dirruns, diff];
                            }
                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    diff -= last2;
                    return diff === first2 || diff % first2 === 0 && diff / first2 >= 0;
                  }
                };
              },
              PSEUDO: function(pseudo, argument) {
                var args, fn2 = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);
                if (fn2[expando]) {
                  return fn2(argument);
                }
                if (fn2.length > 1) {
                  args = [pseudo, pseudo, "", argument];
                  return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
                    var idx, matched = fn2(seed, argument), i2 = matched.length;
                    while (i2--) {
                      idx = indexOf.call(seed, matched[i2]);
                      seed[idx] = !(matches2[idx] = matched[i2]);
                    }
                  }) : function(elem) {
                    return fn2(elem, 0, args);
                  };
                }
                return fn2;
              }
            },
            pseudos: {
              not: markFunction(function(selector) {
                var input = [], results = [], matcher = compile(selector.replace(rtrimCSS, "$1"));
                return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
                  var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                  while (i2--) {
                    if (elem = unmatched[i2]) {
                      seed[i2] = !(matches2[i2] = elem);
                    }
                  }
                }) : function(elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);
                  input[0] = null;
                  return !results.pop();
                };
              }),
              has: markFunction(function(selector) {
                return function(elem) {
                  return find(selector, elem).length > 0;
                };
              }),
              contains: markFunction(function(text) {
                text = text.replace(runescape, funescape);
                return function(elem) {
                  return (elem.textContent || jQuery.text(elem)).indexOf(text) > -1;
                };
              }),
              lang: markFunction(function(lang) {
                if (!ridentifier.test(lang || "")) {
                  find.error("unsupported lang: " + lang);
                }
                lang = lang.replace(runescape, funescape).toLowerCase();
                return function(elem) {
                  var elemLang;
                  do {
                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                      elemLang = elemLang.toLowerCase();
                      return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                    }
                  } while ((elem = elem.parentNode) && elem.nodeType === 1);
                  return false;
                };
              }),
              target: function(elem) {
                var hash4 = window2.location && window2.location.hash;
                return hash4 && hash4.slice(1) === elem.id;
              },
              root: function(elem) {
                return elem === documentElement2;
              },
              focus: function(elem) {
                return elem === safeActiveElement() && document3.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
              },
              enabled: createDisabledPseudo(false),
              disabled: createDisabledPseudo(true),
              checked: function(elem) {
                return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
              },
              selected: function(elem) {
                if (elem.parentNode) {
                  elem.parentNode.selectedIndex;
                }
                return elem.selected === true;
              },
              empty: function(elem) {
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  if (elem.nodeType < 6) {
                    return false;
                  }
                }
                return true;
              },
              parent: function(elem) {
                return !Expr.pseudos.empty(elem);
              },
              header: function(elem) {
                return rheader.test(elem.nodeName);
              },
              input: function(elem) {
                return rinputs.test(elem.nodeName);
              },
              button: function(elem) {
                return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
              },
              text: function(elem) {
                var attr;
                return nodeName(elem, "input") && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
              },
              first: createPositionalPseudo(function() {
                return [0];
              }),
              last: createPositionalPseudo(function(_matchIndexes, length) {
                return [length - 1];
              }),
              eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
                return [argument < 0 ? argument + length : argument];
              }),
              even: createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 0;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              odd: createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 1;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2;
                if (argument < 0) {
                  i2 = argument + length;
                } else if (argument > length) {
                  i2 = length;
                } else {
                  i2 = argument;
                }
                for (; --i2 >= 0; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2 = argument < 0 ? argument + length : argument;
                for (; ++i2 < length; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              })
            }
          };
          Expr.pseudos.nth = Expr.pseudos.eq;
          for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
            Expr.pseudos[i] = createInputPseudo(i);
          }
          for (i in { submit: true, reset: true }) {
            Expr.pseudos[i] = createButtonPseudo(i);
          }
          function setFilters() {
          }
          setFilters.prototype = Expr.filters = Expr.pseudos;
          Expr.setFilters = new setFilters();
          function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
              return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
              if (!matched || (match = rcomma.exec(soFar))) {
                if (match) {
                  soFar = soFar.slice(match[0].length) || soFar;
                }
                groups.push(tokens = []);
              }
              matched = false;
              if (match = rleadingCombinator.exec(soFar)) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: match[0].replace(rtrimCSS, " ")
                });
                soFar = soFar.slice(matched.length);
              }
              for (type in Expr.filter) {
                if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    type,
                    matches: match
                  });
                  soFar = soFar.slice(matched.length);
                }
              }
              if (!matched) {
                break;
              }
            }
            if (parseOnly) {
              return soFar.length;
            }
            return soFar ? find.error(selector) : tokenCache(selector, groups).slice(0);
          }
          function toSelector(tokens) {
            var i2 = 0, len = tokens.length, selector = "";
            for (; i2 < len; i2++) {
              selector += tokens[i2].value;
            }
            return selector;
          }
          function addCombinator(matcher, combinator, base) {
            var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? function(elem, context2, xml) {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context2, xml);
                }
              }
              return false;
            } : function(elem, context2, xml) {
              var oldCache, outerCache, newCache = [dirruns, doneName];
              if (xml) {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context2, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    if (skip && nodeName(elem, skip)) {
                      elem = elem[dir2] || elem;
                    } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                      return newCache[2] = oldCache[2];
                    } else {
                      outerCache[key] = newCache;
                      if (newCache[2] = matcher(elem, context2, xml)) {
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            };
          }
          function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context2, xml) {
              var i2 = matchers.length;
              while (i2--) {
                if (!matchers[i2](elem, context2, xml)) {
                  return false;
                }
              }
              return true;
            } : matchers[0];
          }
          function multipleContexts(selector, contexts, results) {
            var i2 = 0, len = contexts.length;
            for (; i2 < len; i2++) {
              find(selector, contexts[i2], results);
            }
            return results;
          }
          function condense(unmatched, map3, filter2, context2, xml) {
            var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map3 != null;
            for (; i2 < len; i2++) {
              if (elem = unmatched[i2]) {
                if (!filter2 || filter2(elem, context2, xml)) {
                  newUnmatched.push(elem);
                  if (mapped) {
                    map3.push(i2);
                  }
                }
              }
            }
            return newUnmatched;
          }
          function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
              postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
              postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context2, xml) {
              var temp, i2, elem, matcherOut, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(
                selector || "*",
                context2.nodeType ? [context2] : context2,
                []
              ), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context2, xml) : elems;
              if (matcher) {
                matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results;
                matcher(matcherIn, matcherOut, context2, xml);
              } else {
                matcherOut = matcherIn;
              }
              if (postFilter) {
                temp = condense(matcherOut, postMap);
                postFilter(temp, [], context2, xml);
                i2 = temp.length;
                while (i2--) {
                  if (elem = temp[i2]) {
                    matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                  }
                }
              }
              if (seed) {
                if (postFinder || preFilter) {
                  if (postFinder) {
                    temp = [];
                    i2 = matcherOut.length;
                    while (i2--) {
                      if (elem = matcherOut[i2]) {
                        temp.push(matcherIn[i2] = elem);
                      }
                    }
                    postFinder(null, matcherOut = [], temp, xml);
                  }
                  i2 = matcherOut.length;
                  while (i2--) {
                    if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i2]) > -1) {
                      seed[temp] = !(results[temp] = elem);
                    }
                  }
                }
              } else {
                matcherOut = condense(
                  matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut
                );
                if (postFinder) {
                  postFinder(null, results, matcherOut, xml);
                } else {
                  push2.apply(results, matcherOut);
                }
              }
            });
          }
          function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
              return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
              return indexOf.call(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [function(elem, context2, xml) {
              var ret = !leadingRelative && (xml || context2 != outermostContext) || ((checkContext = context2).nodeType ? matchContext(elem, context2, xml) : matchAnyContext(elem, context2, xml));
              checkContext = null;
              return ret;
            }];
            for (; i2 < len; i2++) {
              if (matcher = Expr.relative[tokens[i2].type]) {
                matchers = [addCombinator(elementMatcher(matchers), matcher)];
              } else {
                matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
                if (matcher[expando]) {
                  j = ++i2;
                  for (; j < len; j++) {
                    if (Expr.relative[tokens[j].type]) {
                      break;
                    }
                  }
                  return setMatcher(
                    i2 > 1 && elementMatcher(matchers),
                    i2 > 1 && toSelector(
                      tokens.slice(0, i2 - 1).concat({ value: tokens[i2 - 2].type === " " ? "*" : "" })
                    ).replace(rtrimCSS, "$1"),
                    matcher,
                    i2 < j && matcherFromTokens(tokens.slice(i2, j)),
                    j < len && matcherFromTokens(tokens = tokens.slice(j)),
                    j < len && toSelector(tokens)
                  );
                }
                matchers.push(matcher);
              }
            }
            return elementMatcher(matchers);
          }
          function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context2, xml, results, outermost) {
              var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
              if (outermost) {
                outermostContext = context2 == document3 || context2 || outermost;
              }
              for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
                if (byElement && elem) {
                  j = 0;
                  if (!context2 && elem.ownerDocument != document3) {
                    setDocument(elem);
                    xml = !documentIsHTML;
                  }
                  while (matcher = elementMatchers[j++]) {
                    if (matcher(elem, context2 || document3, xml)) {
                      push2.call(results, elem);
                      break;
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique;
                  }
                }
                if (bySet) {
                  if (elem = !matcher && elem) {
                    matchedCount--;
                  }
                  if (seed) {
                    unmatched.push(elem);
                  }
                }
              }
              matchedCount += i2;
              if (bySet && i2 !== matchedCount) {
                j = 0;
                while (matcher = setMatchers[j++]) {
                  matcher(unmatched, setMatched, context2, xml);
                }
                if (seed) {
                  if (matchedCount > 0) {
                    while (i2--) {
                      if (!(unmatched[i2] || setMatched[i2])) {
                        setMatched[i2] = pop.call(results);
                      }
                    }
                  }
                  setMatched = condense(setMatched);
                }
                push2.apply(results, setMatched);
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                  jQuery.uniqueSort(results);
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
              }
              return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
          }
          function compile(selector, match) {
            var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
              if (!match) {
                match = tokenize(selector);
              }
              i2 = match.length;
              while (i2--) {
                cached = matcherFromTokens(match[i2]);
                if (cached[expando]) {
                  setMatchers.push(cached);
                } else {
                  elementMatchers.push(cached);
                }
              }
              cached = compilerCache(
                selector,
                matcherFromGroupMatchers(elementMatchers, setMatchers)
              );
              cached.selector = selector;
            }
            return cached;
          }
          function select(selector, context2, results, seed) {
            var i2, tokens, token, type, find2, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
              tokens = match[0] = match[0].slice(0);
              if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context2.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                context2 = (Expr.find.ID(
                  token.matches[0].replace(runescape, funescape),
                  context2
                ) || [])[0];
                if (!context2) {
                  return results;
                } else if (compiled) {
                  context2 = context2.parentNode;
                }
                selector = selector.slice(tokens.shift().value.length);
              }
              i2 = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
              while (i2--) {
                token = tokens[i2];
                if (Expr.relative[type = token.type]) {
                  break;
                }
                if (find2 = Expr.find[type]) {
                  if (seed = find2(
                    token.matches[0].replace(runescape, funescape),
                    rsibling.test(tokens[0].type) && testContext(context2.parentNode) || context2
                  )) {
                    tokens.splice(i2, 1);
                    selector = seed.length && toSelector(tokens);
                    if (!selector) {
                      push2.apply(results, seed);
                      return results;
                    }
                    break;
                  }
                }
              }
            }
            (compiled || compile(selector, match))(
              seed,
              context2,
              !documentIsHTML,
              results,
              !context2 || rsibling.test(selector) && testContext(context2.parentNode) || context2
            );
            return results;
          }
          support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
          setDocument();
          support.sortDetached = assert3(function(el) {
            return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
          });
          jQuery.find = find;
          jQuery.expr[":"] = jQuery.expr.pseudos;
          jQuery.unique = jQuery.uniqueSort;
          find.compile = compile;
          find.select = select;
          find.setDocument = setDocument;
          find.escape = jQuery.escapeSelector;
          find.getText = jQuery.text;
          find.isXML = jQuery.isXMLDoc;
          find.selectors = jQuery.expr;
          find.support = jQuery.support;
          find.uniqueSort = jQuery.uniqueSort;
        })();
        var dir = function(elem, dir2, until) {
          var matched = [], truncate = until !== void 0;
          while ((elem = elem[dir2]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        };
        var siblings = function(n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        };
        var rneedsContext = jQuery.expr.match.needsContext;
        var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
        function winnow(elements, qualifier, not) {
          if (isFunction3(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
              return !!qualifier.call(elem, i, elem) !== not;
            });
          }
          if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
              return elem === qualifier !== not;
            });
          }
          if (typeof qualifier !== "string") {
            return jQuery.grep(elements, function(elem) {
              return indexOf.call(qualifier, elem) > -1 !== not;
            });
          }
          return jQuery.filter(qualifier, elements, not);
        }
        jQuery.filter = function(expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ":not(" + expr + ")";
          }
          if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
          }
          return jQuery.find.matches(expr, jQuery.grep(elems, function(elem2) {
            return elem2.nodeType === 1;
          }));
        };
        jQuery.fn.extend({
          find: function(selector) {
            var i, ret, len = this.length, self2 = this;
            if (typeof selector !== "string") {
              return this.pushStack(jQuery(selector).filter(function() {
                for (i = 0; i < len; i++) {
                  if (jQuery.contains(self2[i], this)) {
                    return true;
                  }
                }
              }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
              jQuery.find(selector, self2[i], ret);
            }
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
          },
          filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
          },
          not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
          },
          is: function(selector) {
            return !!winnow(
              this,
              typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [],
              false
            ).length;
          }
        });
        var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init2 = jQuery.fn.init = function(selector, context2, root) {
          var match, elem;
          if (!selector) {
            return this;
          }
          root = root || rootjQuery;
          if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
              match = [null, selector, null];
            } else {
              match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context2)) {
              if (match[1]) {
                context2 = context2 instanceof jQuery ? context2[0] : context2;
                jQuery.merge(this, jQuery.parseHTML(
                  match[1],
                  context2 && context2.nodeType ? context2.ownerDocument || context2 : document2,
                  true
                ));
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context2)) {
                  for (match in context2) {
                    if (isFunction3(this[match])) {
                      this[match](context2[match]);
                    } else {
                      this.attr(match, context2[match]);
                    }
                  }
                }
                return this;
              } else {
                elem = document2.getElementById(match[2]);
                if (elem) {
                  this[0] = elem;
                  this.length = 1;
                }
                return this;
              }
            } else if (!context2 || context2.jquery) {
              return (context2 || root).find(selector);
            } else {
              return this.constructor(context2).find(selector);
            }
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
          } else if (isFunction3(selector)) {
            return root.ready !== void 0 ? root.ready(selector) : selector(jQuery);
          }
          return jQuery.makeArray(selector, this);
        };
        init2.prototype = jQuery.fn;
        rootjQuery = jQuery(document2);
        var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
        jQuery.fn.extend({
          has: function(target) {
            var targets = jQuery(target, this), l15 = targets.length;
            return this.filter(function() {
              var i = 0;
              for (; i < l15; i++) {
                if (jQuery.contains(this, targets[i])) {
                  return true;
                }
              }
            });
          },
          closest: function(selectors, context2) {
            var cur, i = 0, l15 = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
            if (!rneedsContext.test(selectors)) {
              for (; i < l15; i++) {
                for (cur = this[i]; cur && cur !== context2; cur = cur.parentNode) {
                  if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                    matched.push(cur);
                    break;
                  }
                }
              }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
          },
          index: function(elem) {
            if (!elem) {
              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
              return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(
              this,
              elem.jquery ? elem[0] : elem
            );
          },
          add: function(selector, context2) {
            return this.pushStack(
              jQuery.uniqueSort(
                jQuery.merge(this.get(), jQuery(selector, context2))
              )
            );
          },
          addBack: function(selector) {
            return this.add(
              selector == null ? this.prevObject : this.prevObject.filter(selector)
            );
          }
        });
        function sibling(cur, dir2) {
          while ((cur = cur[dir2]) && cur.nodeType !== 1) {
          }
          return cur;
        }
        jQuery.each({
          parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
          },
          parents: function(elem) {
            return dir(elem, "parentNode");
          },
          parentsUntil: function(elem, _i, until) {
            return dir(elem, "parentNode", until);
          },
          next: function(elem) {
            return sibling(elem, "nextSibling");
          },
          prev: function(elem) {
            return sibling(elem, "previousSibling");
          },
          nextAll: function(elem) {
            return dir(elem, "nextSibling");
          },
          prevAll: function(elem) {
            return dir(elem, "previousSibling");
          },
          nextUntil: function(elem, _i, until) {
            return dir(elem, "nextSibling", until);
          },
          prevUntil: function(elem, _i, until) {
            return dir(elem, "previousSibling", until);
          },
          siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
          },
          children: function(elem) {
            return siblings(elem.firstChild);
          },
          contents: function(elem) {
            if (elem.contentDocument != null && getProto(elem.contentDocument)) {
              return elem.contentDocument;
            }
            if (nodeName(elem, "template")) {
              elem = elem.content || elem;
            }
            return jQuery.merge([], elem.childNodes);
          }
        }, function(name, fn2) {
          jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn2, until);
            if (name.slice(-5) !== "Until") {
              selector = until;
            }
            if (selector && typeof selector === "string") {
              matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
              if (!guaranteedUnique[name]) {
                jQuery.uniqueSort(matched);
              }
              if (rparentsprev.test(name)) {
                matched.reverse();
              }
            }
            return this.pushStack(matched);
          };
        });
        var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
        function createOptions(options) {
          var object = {};
          jQuery.each(options.match(rnothtmlwhite) || [], function(_3, flag) {
            object[flag] = true;
          });
          return object;
        }
        jQuery.Callbacks = function(options) {
          options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
          var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
            locked = locked || options.once;
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                  firingIndex = list.length;
                  memory = false;
                }
              }
            }
            if (!options.memory) {
              memory = false;
            }
            firing = false;
            if (locked) {
              if (memory) {
                list = [];
              } else {
                list = "";
              }
            }
          }, self2 = {
            add: function() {
              if (list) {
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory);
                }
                (function add2(args) {
                  jQuery.each(args, function(_3, arg) {
                    if (isFunction3(arg)) {
                      if (!options.unique || !self2.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && toType2(arg) !== "string") {
                      add2(arg);
                    }
                  });
                })(arguments);
                if (memory && !firing) {
                  fire();
                }
              }
              return this;
            },
            remove: function() {
              jQuery.each(arguments, function(_3, arg) {
                var index;
                while ((index = jQuery.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              });
              return this;
            },
            has: function(fn2) {
              return fn2 ? jQuery.inArray(fn2, list) > -1 : list.length > 0;
            },
            empty: function() {
              if (list) {
                list = [];
              }
              return this;
            },
            disable: function() {
              locked = queue = [];
              list = memory = "";
              return this;
            },
            disabled: function() {
              return !list;
            },
            lock: function() {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = "";
              }
              return this;
            },
            locked: function() {
              return !!locked;
            },
            fireWith: function(context2, args) {
              if (!locked) {
                args = args || [];
                args = [context2, args.slice ? args.slice() : args];
                queue.push(args);
                if (!firing) {
                  fire();
                }
              }
              return this;
            },
            fire: function() {
              self2.fireWith(this, arguments);
              return this;
            },
            fired: function() {
              return !!fired;
            }
          };
          return self2;
        };
        function Identity(v3) {
          return v3;
        }
        function Thrower(ex) {
          throw ex;
        }
        function adoptValue(value, resolve, reject, noValue) {
          var method;
          try {
            if (value && isFunction3(method = value.promise)) {
              method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction3(method = value.then)) {
              method.call(value, resolve, reject);
            } else {
              resolve.apply(void 0, [value].slice(noValue));
            }
          } catch (value2) {
            reject.apply(void 0, [value2]);
          }
        }
        jQuery.extend({
          Deferred: function(func) {
            var tuples = [
              [
                "notify",
                "progress",
                jQuery.Callbacks("memory"),
                jQuery.Callbacks("memory"),
                2
              ],
              [
                "resolve",
                "done",
                jQuery.Callbacks("once memory"),
                jQuery.Callbacks("once memory"),
                0,
                "resolved"
              ],
              [
                "reject",
                "fail",
                jQuery.Callbacks("once memory"),
                jQuery.Callbacks("once memory"),
                1,
                "rejected"
              ]
            ], state = "pending", promise = {
              state: function() {
                return state;
              },
              always: function() {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              "catch": function(fn2) {
                return promise.then(null, fn2);
              },
              pipe: function() {
                var fns = arguments;
                return jQuery.Deferred(function(newDefer) {
                  jQuery.each(tuples, function(_i, tuple) {
                    var fn2 = isFunction3(fns[tuple[4]]) && fns[tuple[4]];
                    deferred[tuple[1]](function() {
                      var returned = fn2 && fn2.apply(this, arguments);
                      if (returned && isFunction3(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                      } else {
                        newDefer[tuple[0] + "With"](
                          this,
                          fn2 ? [returned] : arguments
                        );
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },
              then: function(onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth, deferred2, handler, special) {
                  return function() {
                    var that = this, args = arguments, mightThrow = function() {
                      var returned, then;
                      if (depth < maxDepth) {
                        return;
                      }
                      returned = handler.apply(that, args);
                      if (returned === deferred2.promise()) {
                        throw new TypeError("Thenable self-resolution");
                      }
                      then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                      if (isFunction3(then)) {
                        if (special) {
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special)
                          );
                        } else {
                          maxDepth++;
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special),
                            resolve(
                              maxDepth,
                              deferred2,
                              Identity,
                              deferred2.notifyWith
                            )
                          );
                        }
                      } else {
                        if (handler !== Identity) {
                          that = void 0;
                          args = [returned];
                        }
                        (special || deferred2.resolveWith)(that, args);
                      }
                    }, process3 = special ? mightThrow : function() {
                      try {
                        mightThrow();
                      } catch (e) {
                        if (jQuery.Deferred.exceptionHook) {
                          jQuery.Deferred.exceptionHook(
                            e,
                            process3.error
                          );
                        }
                        if (depth + 1 >= maxDepth) {
                          if (handler !== Thrower) {
                            that = void 0;
                            args = [e];
                          }
                          deferred2.rejectWith(that, args);
                        }
                      }
                    };
                    if (depth) {
                      process3();
                    } else {
                      if (jQuery.Deferred.getErrorHook) {
                        process3.error = jQuery.Deferred.getErrorHook();
                      } else if (jQuery.Deferred.getStackHook) {
                        process3.error = jQuery.Deferred.getStackHook();
                      }
                      window2.setTimeout(process3);
                    }
                  };
                }
                return jQuery.Deferred(function(newDefer) {
                  tuples[0][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction3(onProgress) ? onProgress : Identity,
                      newDefer.notifyWith
                    )
                  );
                  tuples[1][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction3(onFulfilled) ? onFulfilled : Identity
                    )
                  );
                  tuples[2][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction3(onRejected) ? onRejected : Thrower
                    )
                  );
                }).promise();
              },
              promise: function(obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise;
              }
            }, deferred = {};
            jQuery.each(tuples, function(i, tuple) {
              var list = tuple[2], stateString = tuple[5];
              promise[tuple[1]] = list.add;
              if (stateString) {
                list.add(
                  function() {
                    state = stateString;
                  },
                  tuples[3 - i][2].disable,
                  tuples[3 - i][3].disable,
                  tuples[0][2].lock,
                  tuples[0][3].lock
                );
              }
              list.add(tuple[3].fire);
              deferred[tuple[0]] = function() {
                deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
                return this;
              };
              deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
              func.call(deferred, deferred);
            }
            return deferred;
          },
          when: function(singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery.Deferred(), updateFunc = function(i2) {
              return function(value) {
                resolveContexts[i2] = this;
                resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value;
                if (!--remaining) {
                  primary.resolveWith(resolveContexts, resolveValues);
                }
              };
            };
            if (remaining <= 1) {
              adoptValue(
                singleValue,
                primary.done(updateFunc(i)).resolve,
                primary.reject,
                !remaining
              );
              if (primary.state() === "pending" || isFunction3(resolveValues[i] && resolveValues[i].then)) {
                return primary.then();
              }
            }
            while (i--) {
              adoptValue(resolveValues[i], updateFunc(i), primary.reject);
            }
            return primary.promise();
          }
        });
        var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
        jQuery.Deferred.exceptionHook = function(error, asyncError) {
          if (window2.console && window2.console.warn && error && rerrorNames.test(error.name)) {
            window2.console.warn(
              "jQuery.Deferred exception: " + error.message,
              error.stack,
              asyncError
            );
          }
        };
        jQuery.readyException = function(error) {
          window2.setTimeout(function() {
            throw error;
          });
        };
        var readyList = jQuery.Deferred();
        jQuery.fn.ready = function(fn2) {
          readyList.then(fn2).catch(function(error) {
            jQuery.readyException(error);
          });
          return this;
        };
        jQuery.extend({
          isReady: false,
          readyWait: 1,
          ready: function(wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
              return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
              return;
            }
            readyList.resolveWith(document2, [jQuery]);
          }
        });
        jQuery.ready.then = readyList.then;
        function completed() {
          document2.removeEventListener("DOMContentLoaded", completed);
          window2.removeEventListener("load", completed);
          jQuery.ready();
        }
        if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
          window2.setTimeout(jQuery.ready);
        } else {
          document2.addEventListener("DOMContentLoaded", completed);
          window2.addEventListener("load", completed);
        }
        var access = function(elems, fn2, key, value, chainable, emptyGet, raw) {
          var i = 0, len = elems.length, bulk = key == null;
          if (toType2(key) === "object") {
            chainable = true;
            for (i in key) {
              access(elems, fn2, i, key[i], true, emptyGet, raw);
            }
          } else if (value !== void 0) {
            chainable = true;
            if (!isFunction3(value)) {
              raw = true;
            }
            if (bulk) {
              if (raw) {
                fn2.call(elems, value);
                fn2 = null;
              } else {
                bulk = fn2;
                fn2 = function(elem, _key, value2) {
                  return bulk.call(jQuery(elem), value2);
                };
              }
            }
            if (fn2) {
              for (; i < len; i++) {
                fn2(
                  elems[i],
                  key,
                  raw ? value : value.call(elems[i], i, fn2(elems[i], key))
                );
              }
            }
          }
          if (chainable) {
            return elems;
          }
          if (bulk) {
            return fn2.call(elems);
          }
          return len ? fn2(elems[0], key) : emptyGet;
        };
        var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
        function fcamelCase(_all, letter) {
          return letter.toUpperCase();
        }
        function camelCase(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        }
        var acceptData = function(owner) {
          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
        };
        function Data3() {
          this.expando = jQuery.expando + Data3.uid++;
        }
        Data3.uid = 1;
        Data3.prototype = {
          cache: function(owner) {
            var value = owner[this.expando];
            if (!value) {
              value = {};
              if (acceptData(owner)) {
                if (owner.nodeType) {
                  owner[this.expando] = value;
                } else {
                  Object.defineProperty(owner, this.expando, {
                    value,
                    configurable: true
                  });
                }
              }
            }
            return value;
          },
          set: function(owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === "string") {
              cache[camelCase(data)] = value;
            } else {
              for (prop in data) {
                cache[camelCase(prop)] = data[prop];
              }
            }
            return cache;
          },
          get: function(owner, key) {
            return key === void 0 ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
          },
          access: function(owner, key, value) {
            if (key === void 0 || key && typeof key === "string" && value === void 0) {
              return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== void 0 ? value : key;
          },
          remove: function(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === void 0) {
              return;
            }
            if (key !== void 0) {
              if (Array.isArray(key)) {
                key = key.map(camelCase);
              } else {
                key = camelCase(key);
                key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
              }
              i = key.length;
              while (i--) {
                delete cache[key[i]];
              }
            }
            if (key === void 0 || jQuery.isEmptyObject(cache)) {
              if (owner.nodeType) {
                owner[this.expando] = void 0;
              } else {
                delete owner[this.expando];
              }
            }
          },
          hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== void 0 && !jQuery.isEmptyObject(cache);
          }
        };
        var dataPriv = new Data3();
        var dataUser = new Data3();
        var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
        function getData(data) {
          if (data === "true") {
            return true;
          }
          if (data === "false") {
            return false;
          }
          if (data === "null") {
            return null;
          }
          if (data === +data + "") {
            return +data;
          }
          if (rbrace.test(data)) {
            return JSON.parse(data);
          }
          return data;
        }
        function dataAttr(elem, key, data) {
          var name;
          if (data === void 0 && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
              try {
                data = getData(data);
              } catch (e) {
              }
              dataUser.set(elem, key, data);
            } else {
              data = void 0;
            }
          }
          return data;
        }
        jQuery.extend({
          hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
          },
          data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
          },
          removeData: function(elem, name) {
            dataUser.remove(elem, name);
          },
          _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
          },
          _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
          }
        });
        jQuery.fn.extend({
          data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === void 0) {
              if (this.length) {
                data = dataUser.get(elem);
                if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                  i = attrs.length;
                  while (i--) {
                    if (attrs[i]) {
                      name = attrs[i].name;
                      if (name.indexOf("data-") === 0) {
                        name = camelCase(name.slice(5));
                        dataAttr(elem, name, data[name]);
                      }
                    }
                  }
                  dataPriv.set(elem, "hasDataAttrs", true);
                }
              }
              return data;
            }
            if (typeof key === "object") {
              return this.each(function() {
                dataUser.set(this, key);
              });
            }
            return access(this, function(value2) {
              var data2;
              if (elem && value2 === void 0) {
                data2 = dataUser.get(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                data2 = dataAttr(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                return;
              }
              this.each(function() {
                dataUser.set(this, key, value2);
              });
            }, null, value, arguments.length > 1, null, true);
          },
          removeData: function(key) {
            return this.each(function() {
              dataUser.remove(this, key);
            });
          }
        });
        jQuery.extend({
          queue: function(elem, type, data) {
            var queue;
            if (elem) {
              type = (type || "fx") + "queue";
              queue = dataPriv.get(elem, type);
              if (data) {
                if (!queue || Array.isArray(data)) {
                  queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                } else {
                  queue.push(data);
                }
              }
              return queue || [];
            }
          },
          dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn2 = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
              jQuery.dequeue(elem, type);
            };
            if (fn2 === "inprogress") {
              fn2 = queue.shift();
              startLength--;
            }
            if (fn2) {
              if (type === "fx") {
                queue.unshift("inprogress");
              }
              delete hooks.stop;
              fn2.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
              hooks.empty.fire();
            }
          },
          _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
              empty: jQuery.Callbacks("once memory").add(function() {
                dataPriv.remove(elem, [type + "queue", key]);
              })
            });
          }
        });
        jQuery.fn.extend({
          queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
              data = type;
              type = "fx";
              setter--;
            }
            if (arguments.length < setter) {
              return jQuery.queue(this[0], type);
            }
            return data === void 0 ? this : this.each(function() {
              var queue = jQuery.queue(this, type, data);
              jQuery._queueHooks(this, type);
              if (type === "fx" && queue[0] !== "inprogress") {
                jQuery.dequeue(this, type);
              }
            });
          },
          dequeue: function(type) {
            return this.each(function() {
              jQuery.dequeue(this, type);
            });
          },
          clearQueue: function(type) {
            return this.queue(type || "fx", []);
          },
          promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
              if (!--count) {
                defer.resolveWith(elements, [elements]);
              }
            };
            if (typeof type !== "string") {
              obj = type;
              type = void 0;
            }
            type = type || "fx";
            while (i--) {
              tmp = dataPriv.get(elements[i], type + "queueHooks");
              if (tmp && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
              }
            }
            resolve();
            return defer.promise(obj);
          }
        });
        var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
        var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
        var cssExpand = ["Top", "Right", "Bottom", "Left"];
        var documentElement = document2.documentElement;
        var isAttached = function(elem) {
          return jQuery.contains(elem.ownerDocument, elem);
        }, composed = { composed: true };
        if (documentElement.getRootNode) {
          isAttached = function(elem) {
            return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
          };
        }
        var isHiddenWithinTree = function(elem, el) {
          elem = el || elem;
          return elem.style.display === "none" || elem.style.display === "" && isAttached(elem) && jQuery.css(elem, "display") === "none";
        };
        function adjustCSS(elem, prop, valueParts, tween) {
          var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
          } : function() {
            return jQuery.css(elem, prop, "");
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
          if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
              jQuery.style(elem, prop, initialInUnit + unit);
              if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                maxIterations = 0;
              }
              initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
          }
          if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
              tween.unit = unit;
              tween.start = initialInUnit;
              tween.end = adjusted;
            }
          }
          return adjusted;
        }
        var defaultDisplayMap = {};
        function getDefaultDisplay(elem) {
          var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
          if (display) {
            return display;
          }
          temp = doc.body.appendChild(doc.createElement(nodeName2));
          display = jQuery.css(temp, "display");
          temp.parentNode.removeChild(temp);
          if (display === "none") {
            display = "block";
          }
          defaultDisplayMap[nodeName2] = display;
          return display;
        }
        function showHide(elements, show) {
          var display, elem, values = [], index = 0, length = elements.length;
          for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
              continue;
            }
            display = elem.style.display;
            if (show) {
              if (display === "none") {
                values[index] = dataPriv.get(elem, "display") || null;
                if (!values[index]) {
                  elem.style.display = "";
                }
              }
              if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                values[index] = getDefaultDisplay(elem);
              }
            } else {
              if (display !== "none") {
                values[index] = "none";
                dataPriv.set(elem, "display", display);
              }
            }
          }
          for (index = 0; index < length; index++) {
            if (values[index] != null) {
              elements[index].style.display = values[index];
            }
          }
          return elements;
        }
        jQuery.fn.extend({
          show: function() {
            return showHide(this, true);
          },
          hide: function() {
            return showHide(this);
          },
          toggle: function(state) {
            if (typeof state === "boolean") {
              return state ? this.show() : this.hide();
            }
            return this.each(function() {
              if (isHiddenWithinTree(this)) {
                jQuery(this).show();
              } else {
                jQuery(this).hide();
              }
            });
          }
        });
        var rcheckableType = /^(?:checkbox|radio)$/i;
        var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
        var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
        (function() {
          var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
          input.setAttribute("type", "radio");
          input.setAttribute("checked", "checked");
          input.setAttribute("name", "t");
          div.appendChild(input);
          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
          div.innerHTML = "<textarea>x</textarea>";
          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
          div.innerHTML = "<option></option>";
          support.option = !!div.lastChild;
        })();
        var wrapMap = {
          thead: [1, "<table>", "</table>"],
          col: [2, "<table><colgroup>", "</colgroup></table>"],
          tr: [2, "<table><tbody>", "</tbody></table>"],
          td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
          _default: [0, "", ""]
        };
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        if (!support.option) {
          wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
        }
        function getAll(context2, tag) {
          var ret;
          if (typeof context2.getElementsByTagName !== "undefined") {
            ret = context2.getElementsByTagName(tag || "*");
          } else if (typeof context2.querySelectorAll !== "undefined") {
            ret = context2.querySelectorAll(tag || "*");
          } else {
            ret = [];
          }
          if (tag === void 0 || tag && nodeName(context2, tag)) {
            return jQuery.merge([context2], ret);
          }
          return ret;
        }
        function setGlobalEval(elems, refElements) {
          var i = 0, l15 = elems.length;
          for (; i < l15; i++) {
            dataPriv.set(
              elems[i],
              "globalEval",
              !refElements || dataPriv.get(refElements[i], "globalEval")
            );
          }
        }
        var rhtml = /<|&#?\w+;/;
        function buildFragment(elems, context2, scripts, selection, ignored) {
          var elem, tmp, tag, wrap, attached, j, fragment = context2.createDocumentFragment(), nodes = [], i = 0, l15 = elems.length;
          for (; i < l15; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              if (toType2(elem) === "object") {
                jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context2.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context2.createElement("div"));
                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                j = wrap[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }
                jQuery.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = "";
              }
            }
          }
          fragment.textContent = "";
          i = 0;
          while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
              if (ignored) {
                ignored.push(elem);
              }
              continue;
            }
            attached = isAttached(elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (attached) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j = 0;
              while (elem = tmp[j++]) {
                if (rscriptType.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        }
        var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
        function returnTrue() {
          return true;
        }
        function returnFalse() {
          return false;
        }
        function on(elem, types2, selector, data, fn2, one) {
          var origFn, type;
          if (typeof types2 === "object") {
            if (typeof selector !== "string") {
              data = data || selector;
              selector = void 0;
            }
            for (type in types2) {
              on(elem, type, selector, data, types2[type], one);
            }
            return elem;
          }
          if (data == null && fn2 == null) {
            fn2 = selector;
            data = selector = void 0;
          } else if (fn2 == null) {
            if (typeof selector === "string") {
              fn2 = data;
              data = void 0;
            } else {
              fn2 = data;
              data = selector;
              selector = void 0;
            }
          }
          if (fn2 === false) {
            fn2 = returnFalse;
          } else if (!fn2) {
            return elem;
          }
          if (one === 1) {
            origFn = fn2;
            fn2 = function(event) {
              jQuery().off(event);
              return origFn.apply(this, arguments);
            };
            fn2.guid = origFn.guid || (origFn.guid = jQuery.guid++);
          }
          return elem.each(function() {
            jQuery.event.add(this, types2, fn2, data, selector);
          });
        }
        jQuery.event = {
          global: {},
          add: function(elem, types2, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events2, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!acceptData(elem)) {
              return;
            }
            if (handler.handler) {
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }
            if (selector) {
              jQuery.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
              handler.guid = jQuery.guid++;
            }
            if (!(events2 = elemData.events)) {
              events2 = elemData.events = /* @__PURE__ */ Object.create(null);
            }
            if (!(eventHandle = elemData.handle)) {
              eventHandle = elemData.handle = function(e) {
                return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
              };
            }
            types2 = (types2 || "").match(rnothtmlwhite) || [""];
            t = types2.length;
            while (t--) {
              tmp = rtypenamespace.exec(types2[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                continue;
              }
              special = jQuery.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              special = jQuery.event.special[type] || {};
              handleObj = jQuery.extend({
                type,
                origType,
                data,
                handler,
                guid: handler.guid,
                selector,
                needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                namespace: namespaces.join(".")
              }, handleObjIn);
              if (!(handlers = events2[type])) {
                handlers = events2[type] = [];
                handlers.delegateCount = 0;
                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                  if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle);
                  }
                }
              }
              if (special.add) {
                special.add.call(elem, handleObj);
                if (!handleObj.handler.guid) {
                  handleObj.handler.guid = handler.guid;
                }
              }
              if (selector) {
                handlers.splice(handlers.delegateCount++, 0, handleObj);
              } else {
                handlers.push(handleObj);
              }
              jQuery.event.global[type] = true;
            }
          },
          remove: function(elem, types2, handler, selector, mappedTypes) {
            var j, origCount, tmp, events2, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events2 = elemData.events)) {
              return;
            }
            types2 = (types2 || "").match(rnothtmlwhite) || [""];
            t = types2.length;
            while (t--) {
              tmp = rtypenamespace.exec(types2[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                for (type in events2) {
                  jQuery.event.remove(elem, type + types2[t], handler, selector, true);
                }
                continue;
              }
              special = jQuery.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              handlers = events2[type] || [];
              tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
              origCount = j = handlers.length;
              while (j--) {
                handleObj = handlers[j];
                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                  handlers.splice(j, 1);
                  if (handleObj.selector) {
                    handlers.delegateCount--;
                  }
                  if (special.remove) {
                    special.remove.call(elem, handleObj);
                  }
                }
              }
              if (origCount && !handlers.length) {
                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                  jQuery.removeEvent(elem, type, elemData.handle);
                }
                delete events2[type];
              }
            }
            if (jQuery.isEmptyObject(events2)) {
              dataPriv.remove(elem, "handle events");
            }
          },
          dispatch: function(nativeEvent) {
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || /* @__PURE__ */ Object.create(null))[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
              args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
              return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
              event.currentTarget = matched.elem;
              j = 0;
              while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                  if (ret !== void 0) {
                    if ((event.result = ret) === false) {
                      event.preventDefault();
                      event.stopPropagation();
                    }
                  }
                }
              }
            }
            if (special.postDispatch) {
              special.postDispatch.call(this, event);
            }
            return event.result;
          },
          handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && !(event.type === "click" && event.button >= 1)) {
              for (; cur !== this; cur = cur.parentNode || this) {
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                  matchedHandlers = [];
                  matchedSelectors = {};
                  for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    if (matchedSelectors[sel] === void 0) {
                      matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                    }
                    if (matchedSelectors[sel]) {
                      matchedHandlers.push(handleObj);
                    }
                  }
                  if (matchedHandlers.length) {
                    handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                  }
                }
              }
            }
            cur = this;
            if (delegateCount < handlers.length) {
              handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
            }
            return handlerQueue;
          },
          addProp: function(name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
              enumerable: true,
              configurable: true,
              get: isFunction3(hook) ? function() {
                if (this.originalEvent) {
                  return hook(this.originalEvent);
                }
              } : function() {
                if (this.originalEvent) {
                  return this.originalEvent[name];
                }
              },
              set: function(value) {
                Object.defineProperty(this, name, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value
                });
              }
            });
          },
          fix: function(originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
          },
          special: {
            load: {
              noBubble: true
            },
            click: {
              setup: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click", true);
                }
                return false;
              },
              trigger: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click");
                }
                return true;
              },
              _default: function(event) {
                var target = event.target;
                return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
              }
            },
            beforeunload: {
              postDispatch: function(event) {
                if (event.result !== void 0 && event.originalEvent) {
                  event.originalEvent.returnValue = event.result;
                }
              }
            }
          }
        };
        function leverageNative(el, type, isSetup) {
          if (!isSetup) {
            if (dataPriv.get(el, type) === void 0) {
              jQuery.event.add(el, type, returnTrue);
            }
            return;
          }
          dataPriv.set(el, type, false);
          jQuery.event.add(el, type, {
            namespace: false,
            handler: function(event) {
              var result, saved = dataPriv.get(this, type);
              if (event.isTrigger & 1 && this[type]) {
                if (!saved) {
                  saved = slice.call(arguments);
                  dataPriv.set(this, type, saved);
                  this[type]();
                  result = dataPriv.get(this, type);
                  dataPriv.set(this, type, false);
                  if (saved !== result) {
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    return result;
                  }
                } else if ((jQuery.event.special[type] || {}).delegateType) {
                  event.stopPropagation();
                }
              } else if (saved) {
                dataPriv.set(this, type, jQuery.event.trigger(
                  saved[0],
                  saved.slice(1),
                  this
                ));
                event.stopPropagation();
                event.isImmediatePropagationStopped = returnTrue;
              }
            }
          });
        }
        jQuery.removeEvent = function(elem, type, handle) {
          if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
          }
        };
        jQuery.Event = function(src, props) {
          if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
          }
          if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
          } else {
            this.type = src;
          }
          if (props) {
            jQuery.extend(this, props);
          }
          this.timeStamp = src && src.timeStamp || Date.now();
          this[jQuery.expando] = true;
        };
        jQuery.Event.prototype = {
          constructor: jQuery.Event,
          isDefaultPrevented: returnFalse,
          isPropagationStopped: returnFalse,
          isImmediatePropagationStopped: returnFalse,
          isSimulated: false,
          preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
              e.preventDefault();
            }
          },
          stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopPropagation();
            }
          },
          stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopImmediatePropagation();
            }
            this.stopPropagation();
          }
        };
        jQuery.each({
          altKey: true,
          bubbles: true,
          cancelable: true,
          changedTouches: true,
          ctrlKey: true,
          detail: true,
          eventPhase: true,
          metaKey: true,
          pageX: true,
          pageY: true,
          shiftKey: true,
          view: true,
          "char": true,
          code: true,
          charCode: true,
          key: true,
          keyCode: true,
          button: true,
          buttons: true,
          clientX: true,
          clientY: true,
          offsetX: true,
          offsetY: true,
          pointerId: true,
          pointerType: true,
          screenX: true,
          screenY: true,
          targetTouches: true,
          toElement: true,
          touches: true,
          which: true
        }, jQuery.event.addProp);
        jQuery.each({ focus: "focusin", blur: "focusout" }, function(type, delegateType) {
          function focusMappedHandler(nativeEvent) {
            if (document2.documentMode) {
              var handle = dataPriv.get(this, "handle"), event = jQuery.event.fix(nativeEvent);
              event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
              event.isSimulated = true;
              handle(nativeEvent);
              if (event.target === event.currentTarget) {
                handle(event);
              }
            } else {
              jQuery.event.simulate(
                delegateType,
                nativeEvent.target,
                jQuery.event.fix(nativeEvent)
              );
            }
          }
          jQuery.event.special[type] = {
            setup: function() {
              var attaches;
              leverageNative(this, type, true);
              if (document2.documentMode) {
                attaches = dataPriv.get(this, delegateType);
                if (!attaches) {
                  this.addEventListener(delegateType, focusMappedHandler);
                }
                dataPriv.set(this, delegateType, (attaches || 0) + 1);
              } else {
                return false;
              }
            },
            trigger: function() {
              leverageNative(this, type);
              return true;
            },
            teardown: function() {
              var attaches;
              if (document2.documentMode) {
                attaches = dataPriv.get(this, delegateType) - 1;
                if (!attaches) {
                  this.removeEventListener(delegateType, focusMappedHandler);
                  dataPriv.remove(this, delegateType);
                } else {
                  dataPriv.set(this, delegateType, attaches);
                }
              } else {
                return false;
              }
            },
            _default: function(event) {
              return dataPriv.get(event.target, type);
            },
            delegateType
          };
          jQuery.event.special[delegateType] = {
            setup: function() {
              var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType);
              if (!attaches) {
                if (document2.documentMode) {
                  this.addEventListener(delegateType, focusMappedHandler);
                } else {
                  doc.addEventListener(type, focusMappedHandler, true);
                }
              }
              dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
            },
            teardown: function() {
              var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType) - 1;
              if (!attaches) {
                if (document2.documentMode) {
                  this.removeEventListener(delegateType, focusMappedHandler);
                } else {
                  doc.removeEventListener(type, focusMappedHandler, true);
                }
                dataPriv.remove(dataHolder, delegateType);
              } else {
                dataPriv.set(dataHolder, delegateType, attaches);
              }
            }
          };
        });
        jQuery.each({
          mouseenter: "mouseover",
          mouseleave: "mouseout",
          pointerenter: "pointerover",
          pointerleave: "pointerout"
        }, function(orig, fix) {
          jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
              var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
              if (!related || related !== target && !jQuery.contains(target, related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(this, arguments);
                event.type = fix;
              }
              return ret;
            }
          };
        });
        jQuery.fn.extend({
          on: function(types2, selector, data, fn2) {
            return on(this, types2, selector, data, fn2);
          },
          one: function(types2, selector, data, fn2) {
            return on(this, types2, selector, data, fn2, 1);
          },
          off: function(types2, selector, fn2) {
            var handleObj, type;
            if (types2 && types2.preventDefault && types2.handleObj) {
              handleObj = types2.handleObj;
              jQuery(types2.delegateTarget).off(
                handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                handleObj.selector,
                handleObj.handler
              );
              return this;
            }
            if (typeof types2 === "object") {
              for (type in types2) {
                this.off(type, selector, types2[type]);
              }
              return this;
            }
            if (selector === false || typeof selector === "function") {
              fn2 = selector;
              selector = void 0;
            }
            if (fn2 === false) {
              fn2 = returnFalse;
            }
            return this.each(function() {
              jQuery.event.remove(this, types2, fn2, selector);
            });
          }
        });
        var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
        function manipulationTarget(elem, content) {
          if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery(elem).children("tbody")[0] || elem;
          }
          return elem;
        }
        function disableScript(elem) {
          elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
          return elem;
        }
        function restoreScript(elem) {
          if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
          } else {
            elem.removeAttribute("type");
          }
          return elem;
        }
        function cloneCopyEvent(src, dest) {
          var i, l15, type, pdataOld, udataOld, udataCur, events2;
          if (dest.nodeType !== 1) {
            return;
          }
          if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events2 = pdataOld.events;
            if (events2) {
              dataPriv.remove(dest, "handle events");
              for (type in events2) {
                for (i = 0, l15 = events2[type].length; i < l15; i++) {
                  jQuery.event.add(dest, type, events2[type][i]);
                }
              }
            }
          }
          if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
          }
        }
        function fixInput(src, dest) {
          var nodeName2 = dest.nodeName.toLowerCase();
          if (nodeName2 === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
          } else if (nodeName2 === "input" || nodeName2 === "textarea") {
            dest.defaultValue = src.defaultValue;
          }
        }
        function domManip(collection, args, callback, ignored) {
          args = flat(args);
          var fragment, first2, scripts, hasScripts, node, doc, i = 0, l15 = collection.length, iNoClone = l15 - 1, value = args[0], valueIsFunction = isFunction3(value);
          if (valueIsFunction || l15 > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function(index) {
              var self2 = collection.eq(index);
              if (valueIsFunction) {
                args[0] = value.call(this, index, self2.html());
              }
              domManip(self2, args, callback, ignored);
            });
          }
          if (l15) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first2 = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first2;
            }
            if (first2 || ignored) {
              scripts = jQuery.map(getAll(fragment, "script"), disableScript);
              hasScripts = scripts.length;
              for (; i < l15; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = jQuery.clone(node, true, true);
                  if (hasScripts) {
                    jQuery.merge(scripts, getAll(node, "script"));
                  }
                }
                callback.call(collection[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery.map(scripts, restoreScript);
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                    if (node.src && (node.type || "").toLowerCase() !== "module") {
                      if (jQuery._evalUrl && !node.noModule) {
                        jQuery._evalUrl(node.src, {
                          nonce: node.nonce || node.getAttribute("nonce")
                        }, doc);
                      }
                    } else {
                      DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                    }
                  }
                }
              }
            }
          }
          return collection;
        }
        function remove(elem, selector, keepData) {
          var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
          for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
              jQuery.cleanData(getAll(node));
            }
            if (node.parentNode) {
              if (keepData && isAttached(node)) {
                setGlobalEval(getAll(node, "script"));
              }
              node.parentNode.removeChild(node);
            }
          }
          return elem;
        }
        jQuery.extend({
          htmlPrefilter: function(html) {
            return html;
          },
          clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l15, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
              destElements = getAll(clone);
              srcElements = getAll(elem);
              for (i = 0, l15 = srcElements.length; i < l15; i++) {
                fixInput(srcElements[i], destElements[i]);
              }
            }
            if (dataAndEvents) {
              if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0, l15 = srcElements.length; i < l15; i++) {
                  cloneCopyEvent(srcElements[i], destElements[i]);
                }
              } else {
                cloneCopyEvent(elem, clone);
              }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
              setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
          },
          cleanData: function(elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for (; (elem = elems[i]) !== void 0; i++) {
              if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                  if (data.events) {
                    for (type in data.events) {
                      if (special[type]) {
                        jQuery.event.remove(elem, type);
                      } else {
                        jQuery.removeEvent(elem, type, data.handle);
                      }
                    }
                  }
                  elem[dataPriv.expando] = void 0;
                }
                if (elem[dataUser.expando]) {
                  elem[dataUser.expando] = void 0;
                }
              }
            }
          }
        });
        jQuery.fn.extend({
          detach: function(selector) {
            return remove(this, selector, true);
          },
          remove: function(selector) {
            return remove(this, selector);
          },
          text: function(value) {
            return access(this, function(value2) {
              return value2 === void 0 ? jQuery.text(this) : this.empty().each(function() {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value2;
                }
              });
            }, null, value, arguments.length);
          },
          append: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.appendChild(elem);
              }
            });
          },
          prepend: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.insertBefore(elem, target.firstChild);
              }
            });
          },
          before: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this);
              }
            });
          },
          after: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this.nextSibling);
              }
            });
          },
          empty: function() {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.textContent = "";
              }
            }
            return this;
          },
          clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
              return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
          },
          html: function(value) {
            return access(this, function(value2) {
              var elem = this[0] || {}, i = 0, l15 = this.length;
              if (value2 === void 0 && elem.nodeType === 1) {
                return elem.innerHTML;
              }
              if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
                value2 = jQuery.htmlPrefilter(value2);
                try {
                  for (; i < l15; i++) {
                    elem = this[i] || {};
                    if (elem.nodeType === 1) {
                      jQuery.cleanData(getAll(elem, false));
                      elem.innerHTML = value2;
                    }
                  }
                  elem = 0;
                } catch (e) {
                }
              }
              if (elem) {
                this.empty().append(value2);
              }
            }, null, value, arguments.length);
          },
          replaceWith: function() {
            var ignored = [];
            return domManip(this, arguments, function(elem) {
              var parent = this.parentNode;
              if (jQuery.inArray(this, ignored) < 0) {
                jQuery.cleanData(getAll(this));
                if (parent) {
                  parent.replaceChild(elem, this);
                }
              }
            }, ignored);
          }
        });
        jQuery.each({
          appendTo: "append",
          prependTo: "prepend",
          insertBefore: "before",
          insertAfter: "after",
          replaceAll: "replaceWith"
        }, function(name, original) {
          jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last2 = insert.length - 1, i = 0;
            for (; i <= last2; i++) {
              elems = i === last2 ? this : this.clone(true);
              jQuery(insert[i])[original](elems);
              push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
          };
        });
        var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
        var rcustomProp = /^--/;
        var getStyles = function(elem) {
          var view = elem.ownerDocument.defaultView;
          if (!view || !view.opener) {
            view = window2;
          }
          return view.getComputedStyle(elem);
        };
        var swap = function(elem, options, callback) {
          var ret, name, old = {};
          for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
          }
          ret = callback.call(elem);
          for (name in options) {
            elem.style[name] = old[name];
          }
          return ret;
        };
        var rboxStyle = new RegExp(cssExpand.join("|"), "i");
        (function() {
          function computeStyleTests() {
            if (!div) {
              return;
            }
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window2.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            div = null;
          }
          function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
          }
          var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
          if (!div.style) {
            return;
          }
          div.style.backgroundClip = "content-box";
          div.cloneNode(true).style.backgroundClip = "";
          support.clearCloneStyle = div.style.backgroundClip === "content-box";
          jQuery.extend(support, {
            boxSizingReliable: function() {
              computeStyleTests();
              return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
              computeStyleTests();
              return pixelBoxStylesVal;
            },
            pixelPosition: function() {
              computeStyleTests();
              return pixelPositionVal;
            },
            reliableMarginLeft: function() {
              computeStyleTests();
              return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
              computeStyleTests();
              return scrollboxSizeVal;
            },
            reliableTrDimensions: function() {
              var table, tr, trChild, trStyle;
              if (reliableTrDimensionsVal == null) {
                table = document2.createElement("table");
                tr = document2.createElement("tr");
                trChild = document2.createElement("div");
                table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                tr.style.cssText = "border:1px solid";
                tr.style.height = "1px";
                trChild.style.height = "9px";
                trChild.style.display = "block";
                documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                trStyle = window2.getComputedStyle(tr);
                reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                documentElement.removeChild(table);
              }
              return reliableTrDimensionsVal;
            }
          });
        })();
        function curCSS(elem, name, computed) {
          var width, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name), style = elem.style;
          computed = computed || getStyles(elem);
          if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (isCustomProp && ret) {
              ret = ret.replace(rtrimCSS, "$1") || void 0;
            }
            if (ret === "" && !isAttached(elem)) {
              ret = jQuery.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
              width = style.width;
              minWidth = style.minWidth;
              maxWidth = style.maxWidth;
              style.minWidth = style.maxWidth = style.width = ret;
              ret = computed.width;
              style.width = width;
              style.minWidth = minWidth;
              style.maxWidth = maxWidth;
            }
          }
          return ret !== void 0 ? ret + "" : ret;
        }
        function addGetHookIf(conditionFn, hookFn) {
          return {
            get: function() {
              if (conditionFn()) {
                delete this.get;
                return;
              }
              return (this.get = hookFn).apply(this, arguments);
            }
          };
        }
        var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
        function vendorPropName(name) {
          var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
          while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
              return name;
            }
          }
        }
        function finalPropName(name) {
          var final = jQuery.cssProps[name] || vendorProps[name];
          if (final) {
            return final;
          }
          if (name in emptyStyle) {
            return name;
          }
          return vendorProps[name] = vendorPropName(name) || name;
        }
        var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
          letterSpacing: "0",
          fontWeight: "400"
        };
        function setPositiveNumber(_elem, value, subtract) {
          var matches = rcssNum.exec(value);
          return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
        }
        function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
          var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0, marginDelta = 0;
          if (box === (isBorderBox ? "border" : "content")) {
            return 0;
          }
          for (; i < 4; i += 2) {
            if (box === "margin") {
              marginDelta += jQuery.css(elem, box + cssExpand[i], true, styles);
            }
            if (!isBorderBox) {
              delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
              if (box !== "padding") {
                delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              } else {
                extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            } else {
              if (box === "content") {
                delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
              }
              if (box !== "margin") {
                delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            }
          }
          if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(
              elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5
            )) || 0;
          }
          return delta + marginDelta;
        }
        function getWidthOrHeight(elem, dimension, extra) {
          var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
          if (rnumnonpx.test(val)) {
            if (!extra) {
              return val;
            }
            val = "auto";
          }
          if ((!support.boxSizingReliable() && isBorderBox || !support.reliableTrDimensions() && nodeName(elem, "tr") || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
              val = elem[offsetProp];
            }
          }
          val = parseFloat(val) || 0;
          return val + boxModelAdjustment(
            elem,
            dimension,
            extra || (isBorderBox ? "border" : "content"),
            valueIsBorderBox,
            styles,
            val
          ) + "px";
        }
        jQuery.extend({
          cssHooks: {
            opacity: {
              get: function(elem, computed) {
                if (computed) {
                  var ret = curCSS(elem, "opacity");
                  return ret === "" ? "1" : ret;
                }
              }
            }
          },
          cssNumber: {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageSlice: true,
            columnCount: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            gridArea: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnStart: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowStart: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            scale: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeMiterlimit: true,
            strokeOpacity: true
          },
          cssProps: {},
          style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
              return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== void 0) {
              type = typeof value;
              if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                value = adjustCSS(elem, name, ret);
                type = "number";
              }
              if (value == null || value !== value) {
                return;
              }
              if (type === "number" && !isCustomProp) {
                value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
              }
              if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                style[name] = "inherit";
              }
              if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
                if (isCustomProp) {
                  style.setProperty(name, value);
                } else {
                  style[name] = value;
                }
              }
            } else {
              if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
                return ret;
              }
              return style[name];
            }
          },
          css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) {
              val = hooks.get(elem, true, extra);
            }
            if (val === void 0) {
              val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
              val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
              num = parseFloat(val);
              return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
          }
        });
        jQuery.each(["height", "width"], function(_i, dimension) {
          jQuery.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
              if (computed) {
                return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                  return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
              }
            },
            set: function(elem, value, extra) {
              var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(
                elem,
                dimension,
                extra,
                isBorderBox,
                styles
              ) : 0;
              if (isBorderBox && scrollboxSizeBuggy) {
                subtract -= Math.ceil(
                  elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5
                );
              }
              if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                elem.style[dimension] = value;
                value = jQuery.css(elem, dimension);
              }
              return setPositiveNumber(elem, value, subtract);
            }
          };
        });
        jQuery.cssHooks.marginLeft = addGetHookIf(
          support.reliableMarginLeft,
          function(elem, computed) {
            if (computed) {
              return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
                return elem.getBoundingClientRect().left;
              })) + "px";
            }
          }
        );
        jQuery.each({
          margin: "",
          padding: "",
          border: "Width"
        }, function(prefix2, suffix) {
          jQuery.cssHooks[prefix2 + suffix] = {
            expand: function(value) {
              var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
              for (; i < 4; i++) {
                expanded[prefix2 + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
              }
              return expanded;
            }
          };
          if (prefix2 !== "margin") {
            jQuery.cssHooks[prefix2 + suffix].set = setPositiveNumber;
          }
        });
        jQuery.fn.extend({
          css: function(name, value) {
            return access(this, function(elem, name2, value2) {
              var styles, len, map3 = {}, i = 0;
              if (Array.isArray(name2)) {
                styles = getStyles(elem);
                len = name2.length;
                for (; i < len; i++) {
                  map3[name2[i]] = jQuery.css(elem, name2[i], false, styles);
                }
                return map3;
              }
              return value2 !== void 0 ? jQuery.style(elem, name2, value2) : jQuery.css(elem, name2);
            }, name, value, arguments.length > 1);
          }
        });
        function Tween(elem, options, prop, end2, easing) {
          return new Tween.prototype.init(elem, options, prop, end2, easing);
        }
        jQuery.Tween = Tween;
        Tween.prototype = {
          constructor: Tween,
          init: function(elem, options, prop, end2, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end2;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
          },
          cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
          },
          run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
              this.pos = eased = jQuery.easing[this.easing](
                percent,
                this.options.duration * percent,
                0,
                1,
                this.options.duration
              );
            } else {
              this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
              this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
              hooks.set(this);
            } else {
              Tween.propHooks._default.set(this);
            }
            return this;
          }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
          _default: {
            get: function(tween) {
              var result;
              if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                return tween.elem[tween.prop];
              }
              result = jQuery.css(tween.elem, tween.prop, "");
              return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
              if (jQuery.fx.step[tween.prop]) {
                jQuery.fx.step[tween.prop](tween);
              } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
              } else {
                tween.elem[tween.prop] = tween.now;
              }
            }
          }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
          set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
              tween.elem[tween.prop] = tween.now;
            }
          }
        };
        jQuery.easing = {
          linear: function(p) {
            return p;
          },
          swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
          },
          _default: "swing"
        };
        jQuery.fx = Tween.prototype.init;
        jQuery.fx.step = {};
        var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
        function schedule() {
          if (inProgress) {
            if (document2.hidden === false && window2.requestAnimationFrame) {
              window2.requestAnimationFrame(schedule);
            } else {
              window2.setTimeout(schedule, jQuery.fx.interval);
            }
            jQuery.fx.tick();
          }
        }
        function createFxNow() {
          window2.setTimeout(function() {
            fxNow = void 0;
          });
          return fxNow = Date.now();
        }
        function genFx(type, includeWidth) {
          var which, i = 0, attrs = { height: type };
          includeWidth = includeWidth ? 1 : 0;
          for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
          }
          if (includeWidth) {
            attrs.opacity = attrs.width = type;
          }
          return attrs;
        }
        function createTween(value, prop, animation) {
          var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
          for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
              return tween;
            }
          }
        }
        function defaultPrefilter(elem, props, opts) {
          var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
          if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
              hooks.unqueued = 0;
              oldfire = hooks.empty.fire;
              hooks.empty.fire = function() {
                if (!hooks.unqueued) {
                  oldfire();
                }
              };
            }
            hooks.unqueued++;
            anim.always(function() {
              anim.always(function() {
                hooks.unqueued--;
                if (!jQuery.queue(elem, "fx").length) {
                  hooks.empty.fire();
                }
              });
            });
          }
          for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
              delete props[prop];
              toggle = toggle || value === "toggle";
              if (value === (hidden ? "hide" : "show")) {
                if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                  hidden = true;
                } else {
                  continue;
                }
              }
              orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
          }
          propTween = !jQuery.isEmptyObject(props);
          if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
          }
          if (isBox && elem.nodeType === 1) {
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
              restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery.css(elem, "display");
            if (display === "none") {
              if (restoreDisplay) {
                display = restoreDisplay;
              } else {
                showHide([elem], true);
                restoreDisplay = elem.style.display || restoreDisplay;
                display = jQuery.css(elem, "display");
                showHide([elem]);
              }
            }
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
              if (jQuery.css(elem, "float") === "none") {
                if (!propTween) {
                  anim.done(function() {
                    style.display = restoreDisplay;
                  });
                  if (restoreDisplay == null) {
                    display = style.display;
                    restoreDisplay = display === "none" ? "" : display;
                  }
                }
                style.display = "inline-block";
              }
            }
          }
          if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }
          propTween = false;
          for (prop in orig) {
            if (!propTween) {
              if (dataShow) {
                if ("hidden" in dataShow) {
                  hidden = dataShow.hidden;
                }
              } else {
                dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
              }
              if (toggle) {
                dataShow.hidden = !hidden;
              }
              if (hidden) {
                showHide([elem], true);
              }
              anim.done(function() {
                if (!hidden) {
                  showHide([elem]);
                }
                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                  jQuery.style(elem, prop, orig[prop]);
                }
              });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = propTween.start;
              if (hidden) {
                propTween.end = propTween.start;
                propTween.start = 0;
              }
            }
          }
        }
        function propFilter(props, specialEasing) {
          var index, name, easing, value, hooks;
          for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
              easing = value[1];
              value = props[index] = value[0];
            }
            if (index !== name) {
              props[name] = value;
              delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
              value = hooks.expand(value);
              delete props[name];
              for (index in value) {
                if (!(index in props)) {
                  props[index] = value[index];
                  specialEasing[index] = easing;
                }
              }
            } else {
              specialEasing[name] = easing;
            }
          }
        }
        function Animation(elem, properties, options) {
          var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
          }), tick = function() {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(percent);
            }
            deferred.notifyWith(elem, [animation, percent, remaining]);
            if (percent < 1 && length2) {
              return remaining;
            }
            if (!length2) {
              deferred.notifyWith(elem, [animation, 1, 0]);
            }
            deferred.resolveWith(elem, [animation]);
            return false;
          }, animation = deferred.promise({
            elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
              specialEasing: {},
              easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end2) {
              var tween = jQuery.Tween(
                elem,
                animation.opts,
                prop,
                end2,
                animation.opts.specialEasing[prop] || animation.opts.easing
              );
              animation.tweens.push(tween);
              return tween;
            },
            stop: function(gotoEnd) {
              var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index2 < length2; index2++) {
                animation.tweens[index2].run(1);
              }
              if (gotoEnd) {
                deferred.notifyWith(elem, [animation, 1, 0]);
                deferred.resolveWith(elem, [animation, gotoEnd]);
              } else {
                deferred.rejectWith(elem, [animation, gotoEnd]);
              }
              return this;
            }
          }), props = animation.props;
          propFilter(props, animation.opts.specialEasing);
          for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
              if (isFunction3(result.stop)) {
                jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
              }
              return result;
            }
          }
          jQuery.map(props, createTween, animation);
          if (isFunction3(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
          }
          animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
          jQuery.fx.timer(
            jQuery.extend(tick, {
              elem,
              anim: animation,
              queue: animation.opts.queue
            })
          );
          return animation;
        }
        jQuery.Animation = jQuery.extend(Animation, {
          tweeners: {
            "*": [function(prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween;
            }]
          },
          tweener: function(props, callback) {
            if (isFunction3(props)) {
              callback = props;
              props = ["*"];
            } else {
              props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
              prop = props[index];
              Animation.tweeners[prop] = Animation.tweeners[prop] || [];
              Animation.tweeners[prop].unshift(callback);
            }
          },
          prefilters: [defaultPrefilter],
          prefilter: function(callback, prepend) {
            if (prepend) {
              Animation.prefilters.unshift(callback);
            } else {
              Animation.prefilters.push(callback);
            }
          }
        });
        jQuery.speed = function(speed, easing, fn2) {
          var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn2 || !fn2 && easing || isFunction3(speed) && speed,
            duration: speed,
            easing: fn2 && easing || easing && !isFunction3(easing) && easing
          };
          if (jQuery.fx.off) {
            opt.duration = 0;
          } else {
            if (typeof opt.duration !== "number") {
              if (opt.duration in jQuery.fx.speeds) {
                opt.duration = jQuery.fx.speeds[opt.duration];
              } else {
                opt.duration = jQuery.fx.speeds._default;
              }
            }
          }
          if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
          }
          opt.old = opt.complete;
          opt.complete = function() {
            if (isFunction3(opt.old)) {
              opt.old.call(this);
            }
            if (opt.queue) {
              jQuery.dequeue(this, opt.queue);
            }
          };
          return opt;
        };
        jQuery.fn.extend({
          fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
          },
          animate: function(prop, speed, easing, callback) {
            var empty2 = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
              var anim = Animation(this, jQuery.extend({}, prop), optall);
              if (empty2 || dataPriv.get(this, "finish")) {
                anim.stop(true);
              }
            };
            doAnimation.finish = doAnimation;
            return empty2 || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
          },
          stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
              var stop = hooks.stop;
              delete hooks.stop;
              stop(gotoEnd);
            };
            if (typeof type !== "string") {
              gotoEnd = clearQueue;
              clearQueue = type;
              type = void 0;
            }
            if (clearQueue) {
              this.queue(type || "fx", []);
            }
            return this.each(function() {
              var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
              if (index) {
                if (data[index] && data[index].stop) {
                  stopQueue(data[index]);
                }
              } else {
                for (index in data) {
                  if (data[index] && data[index].stop && rrun.test(index)) {
                    stopQueue(data[index]);
                  }
                }
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                  timers[index].anim.stop(gotoEnd);
                  dequeue = false;
                  timers.splice(index, 1);
                }
              }
              if (dequeue || !gotoEnd) {
                jQuery.dequeue(this, type);
              }
            });
          },
          finish: function(type) {
            if (type !== false) {
              type = type || "fx";
            }
            return this.each(function() {
              var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
              data.finish = true;
              jQuery.queue(this, type, []);
              if (hooks && hooks.stop) {
                hooks.stop.call(this, true);
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && timers[index].queue === type) {
                  timers[index].anim.stop(true);
                  timers.splice(index, 1);
                }
              }
              for (index = 0; index < length; index++) {
                if (queue[index] && queue[index].finish) {
                  queue[index].finish.call(this);
                }
              }
              delete data.finish;
            });
          }
        });
        jQuery.each(["toggle", "show", "hide"], function(_i, name) {
          var cssFn = jQuery.fn[name];
          jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
          };
        });
        jQuery.each({
          slideDown: genFx("show"),
          slideUp: genFx("hide"),
          slideToggle: genFx("toggle"),
          fadeIn: { opacity: "show" },
          fadeOut: { opacity: "hide" },
          fadeToggle: { opacity: "toggle" }
        }, function(name, props) {
          jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
          };
        });
        jQuery.timers = [];
        jQuery.fx.tick = function() {
          var timer, i = 0, timers = jQuery.timers;
          fxNow = Date.now();
          for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
              timers.splice(i--, 1);
            }
          }
          if (!timers.length) {
            jQuery.fx.stop();
          }
          fxNow = void 0;
        };
        jQuery.fx.timer = function(timer) {
          jQuery.timers.push(timer);
          jQuery.fx.start();
        };
        jQuery.fx.interval = 13;
        jQuery.fx.start = function() {
          if (inProgress) {
            return;
          }
          inProgress = true;
          schedule();
        };
        jQuery.fx.stop = function() {
          inProgress = null;
        };
        jQuery.fx.speeds = {
          slow: 600,
          fast: 200,
          _default: 400
        };
        jQuery.fn.delay = function(time, type) {
          time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
          type = type || "fx";
          return this.queue(type, function(next, hooks) {
            var timeout = window2.setTimeout(next, time);
            hooks.stop = function() {
              window2.clearTimeout(timeout);
            };
          });
        };
        (function() {
          var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
          input.type = "checkbox";
          support.checkOn = input.value !== "";
          support.optSelected = opt.selected;
          input = document2.createElement("input");
          input.value = "t";
          input.type = "radio";
          support.radioValue = input.value === "t";
        })();
        var boolHook, attrHandle = jQuery.expr.attrHandle;
        jQuery.fn.extend({
          attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
          },
          removeAttr: function(name) {
            return this.each(function() {
              jQuery.removeAttr(this, name);
            });
          }
        });
        jQuery.extend({
          attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (typeof elem.getAttribute === "undefined") {
              return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
              hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : void 0);
            }
            if (value !== void 0) {
              if (value === null) {
                jQuery.removeAttr(elem, name);
                return;
              }
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              elem.setAttribute(name, value + "");
              return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            ret = jQuery.find.attr(elem, name);
            return ret == null ? void 0 : ret;
          },
          attrHooks: {
            type: {
              set: function(elem, value) {
                if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                  var val = elem.value;
                  elem.setAttribute("type", value);
                  if (val) {
                    elem.value = val;
                  }
                  return value;
                }
              }
            }
          },
          removeAttr: function(elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
              while (name = attrNames[i++]) {
                elem.removeAttribute(name);
              }
            }
          }
        });
        boolHook = {
          set: function(elem, value, name) {
            if (value === false) {
              jQuery.removeAttr(elem, name);
            } else {
              elem.setAttribute(name, name);
            }
            return name;
          }
        };
        jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(_i, name) {
          var getter = attrHandle[name] || jQuery.find.attr;
          attrHandle[name] = function(elem, name2, isXML) {
            var ret, handle, lowercaseName = name2.toLowerCase();
            if (!isXML) {
              handle = attrHandle[lowercaseName];
              attrHandle[lowercaseName] = ret;
              ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
              attrHandle[lowercaseName] = handle;
            }
            return ret;
          };
        });
        var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
        jQuery.fn.extend({
          prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
          },
          removeProp: function(name) {
            return this.each(function() {
              delete this[jQuery.propFix[name] || name];
            });
          }
        });
        jQuery.extend({
          prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
              name = jQuery.propFix[name] || name;
              hooks = jQuery.propHooks[name];
            }
            if (value !== void 0) {
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            return elem[name];
          },
          propHooks: {
            tabIndex: {
              get: function(elem) {
                var tabindex = jQuery.find.attr(elem, "tabindex");
                if (tabindex) {
                  return parseInt(tabindex, 10);
                }
                if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                  return 0;
                }
                return -1;
              }
            }
          },
          propFix: {
            "for": "htmlFor",
            "class": "className"
          }
        });
        if (!support.optSelected) {
          jQuery.propHooks.selected = {
            get: function(elem) {
              var parent = elem.parentNode;
              if (parent && parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
              return null;
            },
            set: function(elem) {
              var parent = elem.parentNode;
              if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
              }
            }
          };
        }
        jQuery.each([
          "tabIndex",
          "readOnly",
          "maxLength",
          "cellSpacing",
          "cellPadding",
          "rowSpan",
          "colSpan",
          "useMap",
          "frameBorder",
          "contentEditable"
        ], function() {
          jQuery.propFix[this.toLowerCase()] = this;
        });
        function stripAndCollapse(value) {
          var tokens = value.match(rnothtmlwhite) || [];
          return tokens.join(" ");
        }
        function getClass(elem) {
          return elem.getAttribute && elem.getAttribute("class") || "";
        }
        function classesToArray(value) {
          if (Array.isArray(value)) {
            return value;
          }
          if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
          }
          return [];
        }
        jQuery.fn.extend({
          addClass: function(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction3(value)) {
              return this.each(function(j) {
                jQuery(this).addClass(value.call(this, j, getClass(this)));
              });
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    if (cur.indexOf(" " + className + " ") < 0) {
                      cur += className + " ";
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          removeClass: function(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction3(value)) {
              return this.each(function(j) {
                jQuery(this).removeClass(value.call(this, j, getClass(this)));
              });
            }
            if (!arguments.length) {
              return this.attr("class", "");
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    while (cur.indexOf(" " + className + " ") > -1) {
                      cur = cur.replace(" " + className + " ", " ");
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          toggleClass: function(value, stateVal) {
            var classNames, className, i, self2, type = typeof value, isValidValue = type === "string" || Array.isArray(value);
            if (isFunction3(value)) {
              return this.each(function(i2) {
                jQuery(this).toggleClass(
                  value.call(this, i2, getClass(this), stateVal),
                  stateVal
                );
              });
            }
            if (typeof stateVal === "boolean" && isValidValue) {
              return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            classNames = classesToArray(value);
            return this.each(function() {
              if (isValidValue) {
                self2 = jQuery(this);
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  if (self2.hasClass(className)) {
                    self2.removeClass(className);
                  } else {
                    self2.addClass(className);
                  }
                }
              } else if (value === void 0 || type === "boolean") {
                className = getClass(this);
                if (className) {
                  dataPriv.set(this, "__className__", className);
                }
                if (this.setAttribute) {
                  this.setAttribute(
                    "class",
                    className || value === false ? "" : dataPriv.get(this, "__className__") || ""
                  );
                }
              }
            });
          },
          hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while (elem = this[i++]) {
              if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                return true;
              }
            }
            return false;
          }
        });
        var rreturn = /\r/g;
        jQuery.fn.extend({
          val: function(value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
              if (elem) {
                hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                  return ret;
                }
                ret = elem.value;
                if (typeof ret === "string") {
                  return ret.replace(rreturn, "");
                }
                return ret == null ? "" : ret;
              }
              return;
            }
            valueIsFunction = isFunction3(value);
            return this.each(function(i) {
              var val;
              if (this.nodeType !== 1) {
                return;
              }
              if (valueIsFunction) {
                val = value.call(this, i, jQuery(this).val());
              } else {
                val = value;
              }
              if (val == null) {
                val = "";
              } else if (typeof val === "number") {
                val += "";
              } else if (Array.isArray(val)) {
                val = jQuery.map(val, function(value2) {
                  return value2 == null ? "" : value2 + "";
                });
              }
              hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
              if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
                this.value = val;
              }
            });
          }
        });
        jQuery.extend({
          valHooks: {
            option: {
              get: function(elem) {
                var val = jQuery.find.attr(elem, "value");
                return val != null ? val : stripAndCollapse(jQuery.text(elem));
              }
            },
            select: {
              get: function(elem) {
                var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max3 = one ? index + 1 : options.length;
                if (index < 0) {
                  i = max3;
                } else {
                  i = one ? index : 0;
                }
                for (; i < max3; i++) {
                  option = options[i];
                  if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                    value = jQuery(option).val();
                    if (one) {
                      return value;
                    }
                    values.push(value);
                  }
                }
                return values;
              },
              set: function(elem, value) {
                var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                while (i--) {
                  option = options[i];
                  if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                    optionSet = true;
                  }
                }
                if (!optionSet) {
                  elem.selectedIndex = -1;
                }
                return values;
              }
            }
          }
        });
        jQuery.each(["radio", "checkbox"], function() {
          jQuery.valHooks[this] = {
            set: function(elem, value) {
              if (Array.isArray(value)) {
                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
              }
            }
          };
          if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
              return elem.getAttribute("value") === null ? "on" : elem.value;
            };
          }
        });
        var location2 = window2.location;
        var nonce = { guid: Date.now() };
        var rquery = /\?/;
        jQuery.parseXML = function(data) {
          var xml, parserErrorElem;
          if (!data || typeof data !== "string") {
            return null;
          }
          try {
            xml = new window2.DOMParser().parseFromString(data, "text/xml");
          } catch (e) {
          }
          parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
          if (!xml || parserErrorElem) {
            jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function(el) {
              return el.textContent;
            }).join("\n") : data));
          }
          return xml;
        };
        var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
          e.stopPropagation();
        };
        jQuery.extend(jQuery.event, {
          trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document2;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
              return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
              return;
            }
            if (type.indexOf(".") > -1) {
              namespaces = type.split(".");
              type = namespaces.shift();
              namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = void 0;
            if (!event.target) {
              event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
              return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
              bubbleType = special.delegateType || type;
              if (!rfocusMorph.test(bubbleType + type)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }
              if (tmp === (elem.ownerDocument || document2)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
              }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
              lastElement = cur;
              event.type = i > 1 ? bubbleType : special.bindType || type;
              handle = (dataPriv.get(cur, "events") || /* @__PURE__ */ Object.create(null))[event.type] && dataPriv.get(cur, "handle");
              if (handle) {
                handle.apply(cur, data);
              }
              handle = ontype && cur[ontype];
              if (handle && handle.apply && acceptData(cur)) {
                event.result = handle.apply(cur, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                if (ontype && isFunction3(elem[type]) && !isWindow(elem)) {
                  tmp = elem[ontype];
                  if (tmp) {
                    elem[ontype] = null;
                  }
                  jQuery.event.triggered = type;
                  if (event.isPropagationStopped()) {
                    lastElement.addEventListener(type, stopPropagationCallback);
                  }
                  elem[type]();
                  if (event.isPropagationStopped()) {
                    lastElement.removeEventListener(type, stopPropagationCallback);
                  }
                  jQuery.event.triggered = void 0;
                  if (tmp) {
                    elem[ontype] = tmp;
                  }
                }
              }
            }
            return event.result;
          },
          simulate: function(type, elem, event) {
            var e = jQuery.extend(
              new jQuery.Event(),
              event,
              {
                type,
                isSimulated: true
              }
            );
            jQuery.event.trigger(e, null, elem);
          }
        });
        jQuery.fn.extend({
          trigger: function(type, data) {
            return this.each(function() {
              jQuery.event.trigger(type, data, this);
            });
          },
          triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
              return jQuery.event.trigger(type, data, elem, true);
            }
          }
        });
        var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
        function buildParams(prefix2, obj, traditional, add2) {
          var name;
          if (Array.isArray(obj)) {
            jQuery.each(obj, function(i, v3) {
              if (traditional || rbracket.test(prefix2)) {
                add2(prefix2, v3);
              } else {
                buildParams(
                  prefix2 + "[" + (typeof v3 === "object" && v3 != null ? i : "") + "]",
                  v3,
                  traditional,
                  add2
                );
              }
            });
          } else if (!traditional && toType2(obj) === "object") {
            for (name in obj) {
              buildParams(prefix2 + "[" + name + "]", obj[name], traditional, add2);
            }
          } else {
            add2(prefix2, obj);
          }
        }
        jQuery.param = function(a, traditional) {
          var prefix2, s = [], add2 = function(key, valueOrFunction) {
            var value = isFunction3(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
          };
          if (a == null) {
            return "";
          }
          if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function() {
              add2(this.name, this.value);
            });
          } else {
            for (prefix2 in a) {
              buildParams(prefix2, a[prefix2], traditional, add2);
            }
          }
          return s.join("&");
        };
        jQuery.fn.extend({
          serialize: function() {
            return jQuery.param(this.serializeArray());
          },
          serializeArray: function() {
            return this.map(function() {
              var elements = jQuery.prop(this, "elements");
              return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
              var type = this.type;
              return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(_i, elem) {
              var val = jQuery(this).val();
              if (val == null) {
                return null;
              }
              if (Array.isArray(val)) {
                return jQuery.map(val, function(val2) {
                  return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
                });
              }
              return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            }).get();
          }
        });
        var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
        originAnchor.href = location2.href;
        function addToPrefiltersOrTransports(structure) {
          return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
              func = dataTypeExpression;
              dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction3(func)) {
              while (dataType = dataTypes[i++]) {
                if (dataType[0] === "+") {
                  dataType = dataType.slice(1) || "*";
                  (structure[dataType] = structure[dataType] || []).unshift(func);
                } else {
                  (structure[dataType] = structure[dataType] || []).push(func);
                }
              }
            }
          };
        }
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
          var inspected = {}, seekingTransport = structure === transports;
          function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_3, prefilterOrFactory) {
              var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
              if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                options.dataTypes.unshift(dataTypeOrTransport);
                inspect(dataTypeOrTransport);
                return false;
              } else if (seekingTransport) {
                return !(selected = dataTypeOrTransport);
              }
            });
            return selected;
          }
          return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
        }
        function ajaxExtend(target, src) {
          var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
          for (key in src) {
            if (src[key] !== void 0) {
              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
          }
          if (deep) {
            jQuery.extend(true, target, deep);
          }
          return target;
        }
        function ajaxHandleResponses(s, jqXHR, responses) {
          var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
          while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === void 0) {
              ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
          }
          if (ct) {
            for (type in contents) {
              if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
              }
            }
          }
          if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
          } else {
            for (type in responses) {
              if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                finalDataType = type;
                break;
              }
              if (!firstDataType) {
                firstDataType = type;
              }
            }
            finalDataType = finalDataType || firstDataType;
          }
          if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
              dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
          }
        }
        function ajaxConvert(s, response, jqXHR, isSuccess) {
          var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
          if (dataTypes[1]) {
            for (conv in s.converters) {
              converters[conv.toLowerCase()] = s.converters[conv];
            }
          }
          current = dataTypes.shift();
          while (current) {
            if (s.responseFields[current]) {
              jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
              response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
              if (current === "*") {
                current = prev;
              } else if (prev !== "*" && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) {
                  for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                      conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                      if (conv) {
                        if (conv === true) {
                          conv = converters[conv2];
                        } else if (converters[conv2] !== true) {
                          current = tmp[0];
                          dataTypes.unshift(tmp[1]);
                        }
                        break;
                      }
                    }
                  }
                }
                if (conv !== true) {
                  if (conv && s.throws) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e) {
                      return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                      };
                    }
                  }
                }
              }
            }
          }
          return { state: "success", data: response };
        }
        jQuery.extend({
          active: 0,
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: location2.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location2.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
              "*": allTypes,
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript"
            },
            contents: {
              xml: /\bxml\b/,
              html: /\bhtml/,
              json: /\bjson\b/
            },
            responseFields: {
              xml: "responseXML",
              text: "responseText",
              json: "responseJSON"
            },
            converters: {
              "* text": String,
              "text html": true,
              "text json": JSON.parse,
              "text xml": jQuery.parseXML
            },
            flatOptions: {
              url: true,
              context: true
            }
          },
          ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
          },
          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
          ajaxTransport: addToPrefiltersOrTransports(transports),
          ajax: function(url, options) {
            if (typeof url === "object") {
              options = url;
              url = void 0;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
              readyState: 0,
              getResponseHeader: function(key) {
                var match;
                if (completed2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                    }
                  }
                  match = responseHeaders[key.toLowerCase() + " "];
                }
                return match == null ? null : match.join(", ");
              },
              getAllResponseHeaders: function() {
                return completed2 ? responseHeadersString : null;
              },
              setRequestHeader: function(name, value) {
                if (completed2 == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value;
                }
                return this;
              },
              overrideMimeType: function(type) {
                if (completed2 == null) {
                  s.mimeType = type;
                }
                return this;
              },
              statusCode: function(map3) {
                var code;
                if (map3) {
                  if (completed2) {
                    jqXHR.always(map3[jqXHR.status]);
                  } else {
                    for (code in map3) {
                      statusCode[code] = [statusCode[code], map3[code]];
                    }
                  }
                }
                return this;
              },
              abort: function(statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location2.href) + "").replace(rprotocol, location2.protocol + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
            if (s.crossDomain == null) {
              urlAnchor = document2.createElement("a");
              try {
                urlAnchor.href = s.url;
                urlAnchor.href = urlAnchor.href;
                s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
              } catch (e) {
                s.crossDomain = true;
              }
            }
            if (s.data && s.processData && typeof s.data !== "string") {
              s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed2) {
              return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
              jQuery.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, "");
            if (!s.hasContent) {
              uncached = s.url.slice(cacheURL.length);
              if (s.data && (s.processData || typeof s.data === "string")) {
                cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                delete s.data;
              }
              if (s.cache === false) {
                cacheURL = cacheURL.replace(rantiCache, "$1");
                uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
              }
              s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
              s.data = s.data.replace(r20, "+");
            }
            if (s.ifModified) {
              if (jQuery.lastModified[cacheURL]) {
                jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
              }
              if (jQuery.etag[cacheURL]) {
                jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
              }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
              jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader(
              "Accept",
              s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]
            );
            for (i in s.headers) {
              jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
              return jqXHR.abort();
            }
            strAbort = "abort";
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
              done(-1, "No Transport");
            } else {
              jqXHR.readyState = 1;
              if (fireGlobals) {
                globalEventContext.trigger("ajaxSend", [jqXHR, s]);
              }
              if (completed2) {
                return jqXHR;
              }
              if (s.async && s.timeout > 0) {
                timeoutTimer = window2.setTimeout(function() {
                  jqXHR.abort("timeout");
                }, s.timeout);
              }
              try {
                completed2 = false;
                transport.send(requestHeaders, done);
              } catch (e) {
                if (completed2) {
                  throw e;
                }
                done(-1, e);
              }
            }
            function done(status, nativeStatusText, responses, headers) {
              var isSuccess, success, error, response, modified, statusText = nativeStatusText;
              if (completed2) {
                return;
              }
              completed2 = true;
              if (timeoutTimer) {
                window2.clearTimeout(timeoutTimer);
              }
              transport = void 0;
              responseHeadersString = headers || "";
              jqXHR.readyState = status > 0 ? 4 : 0;
              isSuccess = status >= 200 && status < 300 || status === 304;
              if (responses) {
                response = ajaxHandleResponses(s, jqXHR, responses);
              }
              if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
                s.converters["text script"] = function() {
                };
              }
              response = ajaxConvert(s, response, jqXHR, isSuccess);
              if (isSuccess) {
                if (s.ifModified) {
                  modified = jqXHR.getResponseHeader("Last-Modified");
                  if (modified) {
                    jQuery.lastModified[cacheURL] = modified;
                  }
                  modified = jqXHR.getResponseHeader("etag");
                  if (modified) {
                    jQuery.etag[cacheURL] = modified;
                  }
                }
                if (status === 204 || s.type === "HEAD") {
                  statusText = "nocontent";
                } else if (status === 304) {
                  statusText = "notmodified";
                } else {
                  statusText = response.state;
                  success = response.data;
                  error = response.error;
                  isSuccess = !error;
                }
              } else {
                error = statusText;
                if (status || !statusText) {
                  statusText = "error";
                  if (status < 0) {
                    status = 0;
                  }
                }
              }
              jqXHR.status = status;
              jqXHR.statusText = (nativeStatusText || statusText) + "";
              if (isSuccess) {
                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
              } else {
                deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
              }
              jqXHR.statusCode(statusCode);
              statusCode = void 0;
              if (fireGlobals) {
                globalEventContext.trigger(
                  isSuccess ? "ajaxSuccess" : "ajaxError",
                  [jqXHR, s, isSuccess ? success : error]
                );
              }
              completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
              if (fireGlobals) {
                globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                if (!--jQuery.active) {
                  jQuery.event.trigger("ajaxStop");
                }
              }
            }
            return jqXHR;
          },
          getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
          },
          getScript: function(url, callback) {
            return jQuery.get(url, void 0, callback, "script");
          }
        });
        jQuery.each(["get", "post"], function(_i, method) {
          jQuery[method] = function(url, data, callback, type) {
            if (isFunction3(data)) {
              type = type || callback;
              callback = data;
              data = void 0;
            }
            return jQuery.ajax(jQuery.extend({
              url,
              type: method,
              dataType: type,
              data,
              success: callback
            }, jQuery.isPlainObject(url) && url));
          };
        });
        jQuery.ajaxPrefilter(function(s) {
          var i;
          for (i in s.headers) {
            if (i.toLowerCase() === "content-type") {
              s.contentType = s.headers[i] || "";
            }
          }
        });
        jQuery._evalUrl = function(url, options, doc) {
          return jQuery.ajax({
            url,
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            converters: {
              "text script": function() {
              }
            },
            dataFilter: function(response) {
              jQuery.globalEval(response, options, doc);
            }
          });
        };
        jQuery.fn.extend({
          wrapAll: function(html) {
            var wrap;
            if (this[0]) {
              if (isFunction3(html)) {
                html = html.call(this[0]);
              }
              wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
              if (this[0].parentNode) {
                wrap.insertBefore(this[0]);
              }
              wrap.map(function() {
                var elem = this;
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild;
                }
                return elem;
              }).append(this);
            }
            return this;
          },
          wrapInner: function(html) {
            if (isFunction3(html)) {
              return this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
              });
            }
            return this.each(function() {
              var self2 = jQuery(this), contents = self2.contents();
              if (contents.length) {
                contents.wrapAll(html);
              } else {
                self2.append(html);
              }
            });
          },
          wrap: function(html) {
            var htmlIsFunction = isFunction3(html);
            return this.each(function(i) {
              jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
          },
          unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
              jQuery(this).replaceWith(this.childNodes);
            });
            return this;
          }
        });
        jQuery.expr.pseudos.hidden = function(elem) {
          return !jQuery.expr.pseudos.visible(elem);
        };
        jQuery.expr.pseudos.visible = function(elem) {
          return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
        };
        jQuery.ajaxSettings.xhr = function() {
          try {
            return new window2.XMLHttpRequest();
          } catch (e) {
          }
        };
        var xhrSuccessStatus = {
          0: 200,
          1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
        support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
        support.ajax = xhrSupported = !!xhrSupported;
        jQuery.ajaxTransport(function(options) {
          var callback, errorCallback;
          if (support.cors || xhrSupported && !options.crossDomain) {
            return {
              send: function(headers, complete) {
                var i, xhr = options.xhr();
                xhr.open(
                  options.type,
                  options.url,
                  options.async,
                  options.username,
                  options.password
                );
                if (options.xhrFields) {
                  for (i in options.xhrFields) {
                    xhr[i] = options.xhrFields[i];
                  }
                }
                if (options.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(options.mimeType);
                }
                if (!options.crossDomain && !headers["X-Requested-With"]) {
                  headers["X-Requested-With"] = "XMLHttpRequest";
                }
                for (i in headers) {
                  xhr.setRequestHeader(i, headers[i]);
                }
                callback = function(type) {
                  return function() {
                    if (callback) {
                      callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                      if (type === "abort") {
                        xhr.abort();
                      } else if (type === "error") {
                        if (typeof xhr.status !== "number") {
                          complete(0, "error");
                        } else {
                          complete(
                            xhr.status,
                            xhr.statusText
                          );
                        }
                      } else {
                        complete(
                          xhrSuccessStatus[xhr.status] || xhr.status,
                          xhr.statusText,
                          (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText },
                          xhr.getAllResponseHeaders()
                        );
                      }
                    }
                  };
                };
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                if (xhr.onabort !== void 0) {
                  xhr.onabort = errorCallback;
                } else {
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      window2.setTimeout(function() {
                        if (callback) {
                          errorCallback();
                        }
                      });
                    }
                  };
                }
                callback = callback("abort");
                try {
                  xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                  if (callback) {
                    throw e;
                  }
                }
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        jQuery.ajaxPrefilter(function(s) {
          if (s.crossDomain) {
            s.contents.script = false;
          }
        });
        jQuery.ajaxSetup({
          accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
          },
          contents: {
            script: /\b(?:java|ecma)script\b/
          },
          converters: {
            "text script": function(text) {
              jQuery.globalEval(text);
              return text;
            }
          }
        });
        jQuery.ajaxPrefilter("script", function(s) {
          if (s.cache === void 0) {
            s.cache = false;
          }
          if (s.crossDomain) {
            s.type = "GET";
          }
        });
        jQuery.ajaxTransport("script", function(s) {
          if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
              send: function(_3, complete) {
                script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", callback = function(evt) {
                  script.remove();
                  callback = null;
                  if (evt) {
                    complete(evt.type === "error" ? 404 : 200, evt.type);
                  }
                });
                document2.head.appendChild(script[0]);
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
        jQuery.ajaxSetup({
          jsonp: "callback",
          jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
            this[callback] = true;
            return callback;
          }
        });
        jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
          var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
          if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = isFunction3(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
              s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
              s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
              if (!responseContainer) {
                jQuery.error(callbackName + " was not called");
              }
              return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window2[callbackName];
            window2[callbackName] = function() {
              responseContainer = arguments;
            };
            jqXHR.always(function() {
              if (overwritten === void 0) {
                jQuery(window2).removeProp(callbackName);
              } else {
                window2[callbackName] = overwritten;
              }
              if (s[callbackName]) {
                s.jsonpCallback = originalSettings.jsonpCallback;
                oldCallbacks.push(callbackName);
              }
              if (responseContainer && isFunction3(overwritten)) {
                overwritten(responseContainer[0]);
              }
              responseContainer = overwritten = void 0;
            });
            return "script";
          }
        });
        support.createHTMLDocument = function() {
          var body = document2.implementation.createHTMLDocument("").body;
          body.innerHTML = "<form></form><form></form>";
          return body.childNodes.length === 2;
        }();
        jQuery.parseHTML = function(data, context2, keepScripts) {
          if (typeof data !== "string") {
            return [];
          }
          if (typeof context2 === "boolean") {
            keepScripts = context2;
            context2 = false;
          }
          var base, parsed, scripts;
          if (!context2) {
            if (support.createHTMLDocument) {
              context2 = document2.implementation.createHTMLDocument("");
              base = context2.createElement("base");
              base.href = document2.location.href;
              context2.head.appendChild(base);
            } else {
              context2 = document2;
            }
          }
          parsed = rsingleTag.exec(data);
          scripts = !keepScripts && [];
          if (parsed) {
            return [context2.createElement(parsed[1])];
          }
          parsed = buildFragment([data], context2, scripts);
          if (scripts && scripts.length) {
            jQuery(scripts).remove();
          }
          return jQuery.merge([], parsed.childNodes);
        };
        jQuery.fn.load = function(url, params, callback) {
          var selector, type, response, self2 = this, off = url.indexOf(" ");
          if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
          }
          if (isFunction3(params)) {
            callback = params;
            params = void 0;
          } else if (params && typeof params === "object") {
            type = "POST";
          }
          if (self2.length > 0) {
            jQuery.ajax({
              url,
              type: type || "GET",
              dataType: "html",
              data: params
            }).done(function(responseText) {
              response = arguments;
              self2.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).always(callback && function(jqXHR, status) {
              self2.each(function() {
                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
              });
            });
          }
          return this;
        };
        jQuery.expr.pseudos.animated = function(elem) {
          return jQuery.grep(jQuery.timers, function(fn2) {
            return elem === fn2.elem;
          }).length;
        };
        jQuery.offset = {
          setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            if (position === "static") {
              elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
              curPosition = curElem.position();
              curTop = curPosition.top;
              curLeft = curPosition.left;
            } else {
              curTop = parseFloat(curCSSTop) || 0;
              curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction3(options)) {
              options = options.call(elem, i, jQuery.extend({}, curOffset));
            }
            if (options.top != null) {
              props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
              props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
              options.using.call(elem, props);
            } else {
              curElem.css(props);
            }
          }
        };
        jQuery.fn.extend({
          offset: function(options) {
            if (arguments.length) {
              return options === void 0 ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
              });
            }
            var rect, win2, elem = this[0];
            if (!elem) {
              return;
            }
            if (!elem.getClientRects().length) {
              return { top: 0, left: 0 };
            }
            rect = elem.getBoundingClientRect();
            win2 = elem.ownerDocument.defaultView;
            return {
              top: rect.top + win2.pageYOffset,
              left: rect.left + win2.pageXOffset
            };
          },
          position: function() {
            if (!this[0]) {
              return;
            }
            var offsetParent, offset2, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
            if (jQuery.css(elem, "position") === "fixed") {
              offset2 = elem.getBoundingClientRect();
            } else {
              offset2 = this.offset();
              doc = elem.ownerDocument;
              offsetParent = elem.offsetParent || doc.documentElement;
              while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.parentNode;
              }
              if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                parentOffset = jQuery(offsetParent).offset();
                parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
              }
            }
            return {
              top: offset2.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
              left: offset2.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
          },
          offsetParent: function() {
            return this.map(function() {
              var offsetParent = this.offsetParent;
              while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.offsetParent;
              }
              return offsetParent || documentElement;
            });
          }
        });
        jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
          var top2 = "pageYOffset" === prop;
          jQuery.fn[method] = function(val) {
            return access(this, function(elem, method2, val2) {
              var win2;
              if (isWindow(elem)) {
                win2 = elem;
              } else if (elem.nodeType === 9) {
                win2 = elem.defaultView;
              }
              if (val2 === void 0) {
                return win2 ? win2[prop] : elem[method2];
              }
              if (win2) {
                win2.scrollTo(
                  !top2 ? val2 : win2.pageXOffset,
                  top2 ? val2 : win2.pageYOffset
                );
              } else {
                elem[method2] = val2;
              }
            }, method, val, arguments.length);
          };
        });
        jQuery.each(["top", "left"], function(_i, prop) {
          jQuery.cssHooks[prop] = addGetHookIf(
            support.pixelPosition,
            function(elem, computed) {
              if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
              }
            }
          );
        });
        jQuery.each({ Height: "height", Width: "width" }, function(name, type) {
          jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
          }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
              return access(this, function(elem, type2, value2) {
                var doc;
                if (isWindow(elem)) {
                  return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                }
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;
                  return Math.max(
                    elem.body["scroll" + name],
                    doc["scroll" + name],
                    elem.body["offset" + name],
                    doc["offset" + name],
                    doc["client" + name]
                  );
                }
                return value2 === void 0 ? jQuery.css(elem, type2, extra) : jQuery.style(elem, type2, value2, extra);
              }, type, chainable ? margin : void 0, chainable);
            };
          });
        });
        jQuery.each([
          "ajaxStart",
          "ajaxStop",
          "ajaxComplete",
          "ajaxError",
          "ajaxSuccess",
          "ajaxSend"
        ], function(_i, type) {
          jQuery.fn[type] = function(fn2) {
            return this.on(type, fn2);
          };
        });
        jQuery.fn.extend({
          bind: function(types2, data, fn2) {
            return this.on(types2, null, data, fn2);
          },
          unbind: function(types2, fn2) {
            return this.off(types2, null, fn2);
          },
          delegate: function(selector, types2, data, fn2) {
            return this.on(types2, selector, data, fn2);
          },
          undelegate: function(selector, types2, fn2) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types2, selector || "**", fn2);
          },
          hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
          }
        });
        jQuery.each(
          "blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),
          function(_i, name) {
            jQuery.fn[name] = function(data, fn2) {
              return arguments.length > 0 ? this.on(name, null, data, fn2) : this.trigger(name);
            };
          }
        );
        var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
        jQuery.proxy = function(fn2, context2) {
          var tmp, args, proxy;
          if (typeof context2 === "string") {
            tmp = fn2[context2];
            context2 = fn2;
            fn2 = tmp;
          }
          if (!isFunction3(fn2)) {
            return void 0;
          }
          args = slice.call(arguments, 2);
          proxy = function() {
            return fn2.apply(context2 || this, args.concat(slice.call(arguments)));
          };
          proxy.guid = fn2.guid = fn2.guid || jQuery.guid++;
          return proxy;
        };
        jQuery.holdReady = function(hold) {
          if (hold) {
            jQuery.readyWait++;
          } else {
            jQuery.ready(true);
          }
        };
        jQuery.isArray = Array.isArray;
        jQuery.parseJSON = JSON.parse;
        jQuery.nodeName = nodeName;
        jQuery.isFunction = isFunction3;
        jQuery.isWindow = isWindow;
        jQuery.camelCase = camelCase;
        jQuery.type = toType2;
        jQuery.now = Date.now;
        jQuery.isNumeric = function(obj) {
          var type = jQuery.type(obj);
          return (type === "number" || type === "string") && !isNaN(obj - parseFloat(obj));
        };
        jQuery.trim = function(text) {
          return text == null ? "" : (text + "").replace(rtrim, "$1");
        };
        if (typeof define === "function" && define.amd) {
          define("jquery", [], function() {
            return jQuery;
          });
        }
        var _jQuery = window2.jQuery, _$ = window2.$;
        jQuery.noConflict = function(deep) {
          if (window2.$ === jQuery) {
            window2.$ = _$;
          }
          if (deep && window2.jQuery === jQuery) {
            window2.jQuery = _jQuery;
          }
          return jQuery;
        };
        if (typeof noGlobal === "undefined") {
          window2.jQuery = window2.$ = jQuery;
        }
        return jQuery;
      });
    }
  });

  // ../../node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "../../node_modules/lodash/lodash.js"(exports, module2) {
      (function() {
        var undefined2;
        var VERSION2 = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types2 = freeModule && freeModule.require && freeModule.require("util").types;
            if (types2) {
              return types2;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply2(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        function arrayIncludesWith(array, value, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset2 = array.length;
          while (++index < length) {
            array[offset2 + index] = values[index];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result, index = -1, length = array.length;
          while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        function baseTimes(n, iteratee) {
          var index = -1, result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function countHolders(array, placeholder) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr2) {
          return "\\" + stringEscapes[chr2];
        }
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        function iteratorToArray(iterator2) {
          var data, result = [];
          while (!(data = iterator2.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        function mapToArray(map3) {
          var index = -1, result = Array(map3.size);
          map3.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function replaceHolders(array, placeholder) {
          var index = -1, length = array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }
        function setToArray(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }
        function setToPairs(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = [value, value];
          });
          return result;
        }
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return index;
        }
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        function trimmedEndIndex(string) {
          var index = string.length;
          while (index-- && reWhitespace.test(string.charAt(index))) {
          }
          return index;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context2) {
          context2 = context2 == null ? root : _3.defaults(root.Object(), context2, _3.pick(root, contextProps));
          var Array2 = context2.Array, Date2 = context2.Date, Error2 = context2.Error, Function2 = context2.Function, Math2 = context2.Math, Object2 = context2.Object, RegExp2 = context2.RegExp, String2 = context2.String, TypeError2 = context2.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto2 = Object2.prototype;
          var coreJsData = context2["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty = objectProto2.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto2.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2(
            "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
          );
          var Buffer2 = moduleExports ? context2.Buffer : undefined2, Symbol2 = context2.Symbol, Uint8Array2 = context2.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto2.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e) {
            }
          }();
          var ctxClearTimeout = context2.clearTimeout !== root.clearTimeout && context2.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context2.setTimeout !== root.setTimeout && context2.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context2.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context2.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView2 = getNative(context2, "DataView"), Map2 = getNative(context2, "Map"), Promise2 = getNative(context2, "Promise"), Set2 = getNative(context2, "Set"), WeakMap2 = getNative(context2, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray3(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = function() {
            function object() {
            }
            return function(proto) {
              if (!isObject2(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            "escape": reEscape,
            "evaluate": reEvaluate,
            "interpolate": reInterpolate,
            "variable": "",
            "imports": {
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray3(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start2 = view.start, end2 = view.end, length = end2 - start2, index = isRight ? end2 : start2 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array[index];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash2(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
          }
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash2.prototype.clear = hashClear;
          Hash2.prototype["delete"] = hashDelete;
          Hash2.prototype.get = hashGet;
          Hash2.prototype.has = hashHas;
          Hash2.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined2 : data[index][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash2(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash2()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values2[index]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray3(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          function baseAssign(object, source) {
            return object && copyObject(source, keys2(source), object);
          }
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          function baseAt(object, paths) {
            var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
            while (++index < length) {
              result2[index] = skip ? undefined2 : get2(object, paths[index]);
            }
            return result2;
          }
          function baseClamp(number2, lower, upper) {
            if (number2 === number2) {
              if (upper !== undefined2) {
                number2 = number2 <= upper ? number2 : upper;
              }
              if (lower !== undefined2) {
                number2 = number2 >= lower ? number2 : lower;
              }
            }
            return number2;
          }
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject2(value)) {
              return value;
            }
            var isArr = isArray3(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer2(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys2(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values2, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values2, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index, collection2) {
              result2 = !!predicate(value, index, collection2);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
              var value = array[index], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          function baseFill(array, value, start2, end2) {
            var length = array.length;
            start2 = toInteger(start2);
            if (start2 < 0) {
              start2 = -start2 > length ? 0 : length + start2;
            }
            end2 = end2 === undefined2 || end2 > length ? length : toInteger(end2);
            if (end2 < 0) {
              end2 += length;
            }
            end2 = start2 > end2 ? 0 : toLength(end2);
            while (start2 < end2) {
              array[start2++] = value;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index, collection2) {
              if (predicate(value, index, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index < length) {
              var value = array[index];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys2);
          }
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys2);
          }
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction3(object[key]);
            });
          }
          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined2;
          }
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray3(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
          }
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          function baseInRange(number2, start2, end2) {
            return number2 >= nativeMin(start2, end2) && number2 < nativeMax(start2, end2);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
              while (++index < length && result2.length < maxLength) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last2(path))];
            return func == null ? undefined2 : apply2(func, object, args);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray3(object), othIsArr = isArray3(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer2(object)) {
              if (!isBuffer2(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject2(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction3(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity4;
            }
            if (typeof value == "object") {
              return isArray3(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object) {
            if (!isObject2(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection, iteratee2) {
            var index = -1, result2 = isArrayLike3(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get2(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject2(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray3(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray3(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject2(objValue) || isFunction3(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          function baseNth(array, n) {
            var length = array.length;
            if (!length) {
              return;
            }
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray3(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity4];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index, "value": value };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result2 = {};
            while (++index < length) {
              var path = paths[index], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object), value);
              }
            }
            return result2;
          }
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index < length) {
              var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes3) {
            var length = array ? indexes3.length : 0, lastIndex = length - 1;
            while (length--) {
              var index = indexes3[length];
              if (length == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start2, end2, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end2 - start2) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index] = start2;
              start2 += step;
            }
            return result2;
          }
          function baseRepeat(string, n) {
            var result2 = "";
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n % 2) {
                result2 += string;
              }
              n = nativeFloor(n / 2);
              if (n) {
                string += string;
              }
            } while (n);
            return result2;
          }
          function baseRest(func, start2) {
            return setToString(overRest(func, start2, identity4), func + "");
          }
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
          }
          function baseSet(object, path, value, customizer) {
            if (!isObject2(object)) {
              return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
              var key = toKey(path[index]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          var baseSetData = !metaMap ? identity4 : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity4 : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          function baseSlice(array, start2, end2) {
            var index = -1, length = array.length;
            if (start2 < 0) {
              start2 = -start2 > length ? 0 : length + start2;
            }
            end2 = end2 > length ? length : end2;
            if (end2 < 0) {
              end2 += length;
            }
            length = start2 > end2 ? 0 : end2 - start2 >>> 0;
            start2 >>>= 0;
            var result2 = Array2(length);
            while (++index < length) {
              result2[index] = array[index + start2];
            }
            return result2;
          }
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index, collection2) {
              result2 = predicate(value, index, collection2);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity4, retHighest);
          }
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray3(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last2(path))];
          }
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result2 = Array2(length);
            while (++index < length) {
              var array = arrays[index], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index) {
                  result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values2, assignFunc) {
            var index = -1, length = props.length, valsLength = values2.length, result2 = {};
            while (++index < length) {
              var value = index < valsLength ? values2[index] : undefined2;
              assignFunc(result2, props[index], value);
            }
            return result2;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity4;
          }
          function castPath(value, object) {
            if (isArray3(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
          }
          var castRest = baseRest;
          function castSlice(array, start2, end2) {
            var length = array.length;
            end2 = end2 === undefined2 ? length : end2;
            return !start2 && end2 >= length ? array : baseSlice(array, start2, end2);
          }
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
              var result2 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result2) {
                if (index >= ordersLength) {
                  return result2;
                }
                var order2 = orders[index];
                return result2 * (order2 == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset2 = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset2 + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset2 + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array2(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray3(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object, source, index, customizer);
                }
              }
              return object;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike3(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn2.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr2 = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr2[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject2(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
              while (index--) {
                args[index] = arguments[index];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined2,
                  args,
                  holders,
                  undefined2,
                  undefined2,
                  arity - length
                );
              }
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply2(fn2, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike3(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys2(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length;
              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray3(value)) {
                  return wrapper.plant(value).value();
                }
                var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
                while (++index2 < length) {
                  result2 = funcs[index2].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length;
              while (index--) {
                args[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary2,
                  arity - length
                );
              }
              var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn2 = Ctor || createCtor(fn2);
              }
              return fn2.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply2(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply2(fn2, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start2, end2, step) {
              if (step && typeof step != "number" && isIterateeCall(start2, end2, step)) {
                end2 = step = undefined2;
              }
              start2 = toFinite(start2);
              if (end2 === undefined2) {
                end2 = start2;
                start2 = 0;
              } else {
                end2 = toFinite(end2);
              }
              step = step === undefined2 ? start2 < end2 ? 1 : -1 : toFinite(step);
              return baseRange(start2, end2, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number2, precision) {
              number2 = toNumber(number2);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number2)) {
                var pair = (toString(number2) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number2);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop4 : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto2[key]) && !hasOwnProperty.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject2(objValue) && isObject2(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject(value) ? undefined2 : value;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert2 = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert2 || (convert2 = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert2(object), convert2(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys2, getSymbols);
          }
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop4 : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map4, key) {
            var data = map4.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object) {
            var result2 = keys2(object), length = result2.length;
            while (length--) {
              var key = result2[length], value = object[key];
              result2[length] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start2, end2, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
              var data = transforms[index], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start2 += size2;
                  break;
                case "dropRight":
                  end2 -= size2;
                  break;
                case "take":
                  end2 = nativeMin(end2, start2 + size2);
                  break;
                case "takeRight":
                  start2 = nativeMax(start2, end2 - size2);
                  break;
              }
            }
            return { "start": start2, "end": end2 };
          }
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
          }
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result2 = false;
            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index != length) {
              return result2;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray3(object) || isArguments(object));
          }
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray3(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          function isIterateeCall(value, index, object) {
            if (!isObject2(object)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike3(object) && isIndex(index, object.length) : type == "string" && index in object) {
              return eq(object[index], value);
            }
            return false;
          }
          function isKey(value, object) {
            if (isArray3(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction3 : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject2(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize2(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result2.cache;
            return result2;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start2, transform2) {
            start2 = nativeMax(start2 === undefined2 ? func.length - 1 : start2, 0);
            return function() {
              var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array = Array2(length);
              while (++index < length) {
                array[index] = args[start2 + index];
              }
              index = -1;
              var otherArgs = Array2(start2 + 1);
              while (++index < start2) {
                otherArgs[index] = args[index];
              }
              otherArgs[start2] = transform2(array);
              return apply2(func, this, otherArgs);
            };
          }
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          function reorder(array, indexes3) {
            var arrLength = array.length, length = nativeMin(indexes3.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index = indexes3[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array;
          }
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference2, bitmask) {
            var source = reference2 + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size2) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value = array[rand];
              array[rand] = array[index];
              array[index] = value;
            }
            array.length = size2;
            return array;
          }
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match, number2, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {
              }
              try {
                return func + "";
              } catch (e) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index < length) {
              result2[resIndex++] = baseSlice(array, index, index += size2);
            }
            return result2;
          }
          function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          function concat2() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index = length;
            while (index--) {
              args[index - 1] = arguments[index];
            }
            return arrayPush(isArray3(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last2(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last2(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value, start2, end2) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start2 && typeof start2 != "number" && isIterateeCall(array, value, start2)) {
              start2 = 0;
              end2 = length;
            }
            return baseFill(array, value, start2, end2);
          }
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index < length) {
              var pair = pairs[index];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
          }
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last2(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join2(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last2(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes3) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes3);
            basePullAt(array, arrayMap(indexes3, function(index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index = -1, indexes3 = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result2.push(value);
                indexes3.push(index);
              }
            }
            basePullAt(array, indexes3);
            return result2;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice(array, start2, end2) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end2 && typeof end2 != "number" && isIterateeCall(array, start2, end2)) {
              start2 = 0;
              end2 = length;
            } else {
              start2 = start2 == null ? 0 : toInteger(start2);
              end2 = end2 === undefined2 ? length : toInteger(end2);
            }
            return baseSlice(array, start2, end2);
          }
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value);
              if (index < length && eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          function take2(array, n, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last2(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last2(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply2(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last2(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last2(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain2(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          function tap2(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start2 = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
              return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start2)) {
              return this.thru(interceptor);
            }
            value = value.slice(start2, +start2 + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain2(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray2(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone2;
              } else {
                result2 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray3(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter2(collection, predicate) {
            var func = isArray3(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find = createFind(findIndex);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map3(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map3(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map3(collection, iteratee2), depth);
          }
          function forEach(collection, iteratee2) {
            var func = isArray3(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray3(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike3(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result2 = isArrayLike3(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index] = isFunc ? apply2(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map3(collection, iteratee2) {
            var func = isArray3(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray3(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray3(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce2(collection, iteratee2, accumulator) {
            var func = isArray3(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray3(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection, predicate) {
            var func = isArray3(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          function sample(collection) {
            var func = isArray3(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            var func = isArray3(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
          }
          function shuffle(collection) {
            var func = isArray3(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike3(collection)) {
              return isString2(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray3(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now = ctxNow || function() {
            return root.Date.now();
          };
          function after(n, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n, guard) {
            n = guard ? undefined2 : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
          }
          function before(n, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind2 = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind2));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce2(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject2(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result2 : trailingEdge(now());
            }
            function debounced() {
              var time = now(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip2(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize2(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache.set(key, result2) || cache;
              return result2;
            };
            memoized.cache = new (memoize2.Cache || MapCache)();
            return memoized;
          }
          memoize2.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray3(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index = -1, length = nativeMin(args.length, funcsLength);
              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }
              return apply2(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes3) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes3);
          });
          function rest(func, start2) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start2 = start2 === undefined2 ? start2 : toInteger(start2);
            return baseRest(func, start2);
          }
          function spread(func, start2) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start2 = start2 == null ? 0 : nativeMax(toInteger(start2), 0);
            return baseRest(function(args) {
              var array = args[start2], otherArgs = castSlice(args, 0, start2);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply2(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject2(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce2(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray3(value) ? value : [value];
          }
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys2(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray3 = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike3(value) {
            return value != null && isLength(value.length) && !isFunction3(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike3(value);
          }
          function isBoolean2(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer2 = nativeIsBuffer || stubFalse;
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement3(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
          }
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike3(value) && (isArray3(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          function isError(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction3(value) {
            if (!isObject2(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          function isObject2(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          function isNaN2(value) {
            return isNumber2(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull2(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber2(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString2(value) {
            return typeof value == "string" || !isArray3(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined2(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray2(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike3(value)) {
              return isString2(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign2 = value < 0 ? -1 : 1;
              return sign2 * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject2(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject2(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          function toString(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike3(source)) {
              copyObject(source, keys2(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys2(source), object, customizer);
          });
          var at2 = flatRest(baseAt);
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults2 = baseRest(function(object, sources) {
            object = Object2(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto2[key]) && !hasOwnProperty.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply2(mergeWith, undefined2, args);
          });
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys2(object));
          }
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          function get2(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          var invert2 = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity4));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys2(object) {
            return isArrayLike3(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          function keysIn(object) {
            return isArrayLike3(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, iteratee2(value, key, object2), value);
            });
            return result2;
          }
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, key, iteratee2(value, key, object2));
            });
            return result2;
          }
          var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index < length) {
              var value = object == null ? undefined2 : object[toKey(path[index])];
              if (value === undefined2) {
                index = length;
                value = defaultValue;
              }
              object = isFunction3(value) ? value.call(object) : value;
            }
            return object;
          }
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          var toPairs = createToPairs(keys2);
          var toPairsIn = createToPairs(keysIn);
          function transform(object, iteratee2, accumulator) {
            var isArr = isArray3(object), isArrLike = isArr || isBuffer2(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject2(object)) {
                accumulator = isFunction3(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
              return iteratee2(accumulator, value, index, object2);
            });
            return accumulator;
          }
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          function values(object) {
            return object == null ? [] : baseValues(object, keys2(object));
          }
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          function clamp(number2, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number2), lower, upper);
          }
          function inRange(number2, start2, end2) {
            start2 = toFinite(start2);
            if (end2 === undefined2) {
              end2 = start2;
              start2 = 0;
            } else {
              end2 = toFinite(end2);
            }
            number2 = toNumber(number2);
            return baseInRange(number2, start2, end2);
          }
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result2, word, index) {
            word = word.toLowerCase();
            return result2 + (index ? capitalize(word) : word);
          });
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
            var end2 = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end2) == target;
          }
          function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          var kebabCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          function parseInt2(string, radix3, guard) {
            if (guard || radix3 == null) {
              radix3 = 0;
            } else if (radix3) {
              radix3 = +radix3;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix3 || 0);
          }
          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            return baseRepeat(toString(string), n);
          }
          function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "_" : "") + word.toLowerCase();
          });
          function split2(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset2) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index, offset2).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset2 + match.length;
              return match;
            });
            source += "';\n";
            var variable = hasOwnProperty.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value) {
            return toString(value).toLowerCase();
          }
          function toUpper(value) {
            return toString(value).toUpperCase();
          }
          function trim2(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start2 = charsStartIndex(strSymbols, chrSymbols), end2 = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start2, end2).join("");
          }
          function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end2 = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end2).join("");
          }
          function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start2 = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start2).join("");
          }
          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject2(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end2 = length - stringSize(omission);
            if (end2 < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end2).join("") : string.slice(0, end2);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end2 += result2.length - end2;
            }
            if (isRegExp(separator)) {
              if (string.slice(end2).search(separator)) {
                var match, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match = separator.exec(substring)) {
                  var newEnd = match.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end2 : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end2) != end2) {
              var index = result2.lastIndexOf(separator);
              if (index > -1) {
                result2 = result2.slice(0, index);
              }
            }
            return result2 + omission;
          }
          function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          var upperCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply2(func, undefined2, args);
            } catch (e) {
              return isError(e) ? e : new Error2(e);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind2(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index = -1;
              while (++index < length) {
                var pair = pairs[index];
                if (apply2(pair[0], this, args)) {
                  return apply2(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity4(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys2(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys2(source));
            }
            var chain3 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction3(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain3 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop4() {
          }
          function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
              return baseNth(args, n);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n, iteratee2) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index < n) {
              iteratee2(index);
            }
            return result2;
          }
          function toPath(value) {
            if (isArray3(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
          }
          function uniqueId(prefix2) {
            var id = ++idCounter;
            return toString(prefix2) + id;
          }
          var add2 = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max3(array) {
            return array && array.length ? baseExtremum(array, identity4, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity4);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min2(array) {
            return array && array.length ? baseExtremum(array, identity4, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round2 = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity4) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at2;
          lodash.before = before;
          lodash.bind = bind2;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain2;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat2;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce2;
          lodash.defaults = defaults2;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter2;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip2;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert2;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys2;
          lodash.keysIn = keysIn;
          lodash.map = map3;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize2;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split2;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take2;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap2;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray2;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add2;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get2;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity4;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray3;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike3;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean2;
          lodash.isBuffer = isBuffer2;
          lodash.isDate = isDate;
          lodash.isElement = isElement3;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction3;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull2;
          lodash.isNumber = isNumber2;
          lodash.isObject = isObject2;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString2;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined2;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join2;
          lodash.kebabCase = kebabCase;
          lodash.last = last2;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max3;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min2;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop4;
          lodash.now = now;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce2;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round2;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim2;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION2;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
              n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
              var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
              return this.reverse()[methodName](n).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity4);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start2, end2) {
            start2 = toInteger(start2);
            var result2 = this;
            if (result2.__filtered__ && (start2 > 0 || end2 < 0)) {
              return new LazyWrapper(result2);
            }
            if (start2 < 0) {
              result2 = result2.takeRight(-start2);
            } else if (start2) {
              result2 = result2.drop(start2);
            }
            if (end2 !== undefined2) {
              end2 = toInteger(end2);
              result2 = end2 < 0 ? result2.dropRight(-end2) : result2.take(end2 - start2);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray3(value);
              var interceptor = function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray3(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray3(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _3 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _3;
          define(function() {
            return _3;
          });
        } else if (freeModule) {
          (freeModule.exports = _3)._ = _3;
          freeExports._ = _3;
        } else {
          root._ = _3;
        }
      }).call(exports);
    }
  });

  // (disabled):buffer
  var require_buffer = __commonJS({
    "(disabled):buffer"() {
    }
  });

  // ../../node_modules/bn.js/lib/bn.js
  var require_bn = __commonJS({
    "../../node_modules/bn.js/lib/bn.js"(exports, module2) {
      (function(module3, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val)
            throw new Error(msg || "Assertion failed");
        }
        function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN2(number2, base, endian) {
          if (BN2.isBN(number2)) {
            return number2;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number2 !== null) {
            if (base === "le" || base === "be") {
              endian = base;
              base = 10;
            }
            this._init(number2 || 0, base || 10, endian || "be");
          }
        }
        if (typeof module3 === "object") {
          module3.exports = BN2;
        } else {
          exports2.BN = BN2;
        }
        BN2.BN = BN2;
        BN2.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = require_buffer().Buffer;
          }
        } catch (e) {
        }
        BN2.isBN = function isBN(num) {
          if (num instanceof BN2) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
        };
        BN2.max = function max3(left2, right2) {
          if (left2.cmp(right2) > 0)
            return left2;
          return right2;
        };
        BN2.min = function min2(left2, right2) {
          if (left2.cmp(right2) < 0)
            return left2;
          return right2;
        };
        BN2.prototype._init = function init2(number2, base, endian) {
          if (typeof number2 === "number") {
            return this._initNumber(number2, base, endian);
          }
          if (typeof number2 === "object") {
            return this._initArray(number2, base, endian);
          }
          if (base === "hex") {
            base = 16;
          }
          assert3(base === (base | 0) && base >= 2 && base <= 36);
          number2 = number2.toString().replace(/\s+/g, "");
          var start2 = 0;
          if (number2[0] === "-") {
            start2++;
            this.negative = 1;
          }
          if (start2 < number2.length) {
            if (base === 16) {
              this._parseHex(number2, start2, endian);
            } else {
              this._parseBase(number2, base, start2);
              if (endian === "le") {
                this._initArray(this.toArray(), base, endian);
              }
            }
          }
        };
        BN2.prototype._initNumber = function _initNumber(number2, base, endian) {
          if (number2 < 0) {
            this.negative = 1;
            number2 = -number2;
          }
          if (number2 < 67108864) {
            this.words = [number2 & 67108863];
            this.length = 1;
          } else if (number2 < 4503599627370496) {
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number2 < 9007199254740992);
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le")
            return;
          this._initArray(this.toArray(), base, endian);
        };
        BN2.prototype._initArray = function _initArray(number2, base, endian) {
          assert3(typeof number2.length === "number");
          if (number2.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number2.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off = 0;
          if (endian === "be") {
            for (i = number2.length - 1, j = 0; i >= 0; i -= 3) {
              w = number2[i] | number2[i - 1] << 8 | number2[i - 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number2.length; i += 3) {
              w = number2[i] | number2[i + 1] << 8 | number2[i + 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this._strip();
        };
        function parseHex4Bits(string, index) {
          var c2 = string.charCodeAt(index);
          if (c2 >= 48 && c2 <= 57) {
            return c2 - 48;
          } else if (c2 >= 65 && c2 <= 70) {
            return c2 - 55;
          } else if (c2 >= 97 && c2 <= 102) {
            return c2 - 87;
          } else {
            assert3(false, "Invalid character in " + string);
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN2.prototype._parseHex = function _parseHex(number2, start2, endian) {
          this.length = Math.ceil((number2.length - start2) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number2.length - 1; i >= start2; i -= 2) {
              w = parseHexByte(number2, start2, i) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number2.length - start2;
            for (i = parseLength % 2 === 0 ? start2 + 1 : start2; i < number2.length; i += 2) {
              w = parseHexByte(number2, start2, i) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this._strip();
        };
        function parseBase(str, start2, end2, mul) {
          var r = 0;
          var b = 0;
          var len = Math.min(str.length, end2);
          for (var i = start2; i < len; i++) {
            var c2 = str.charCodeAt(i) - 48;
            r *= mul;
            if (c2 >= 49) {
              b = c2 - 49 + 10;
            } else if (c2 >= 17) {
              b = c2 - 17 + 10;
            } else {
              b = c2;
            }
            assert3(c2 >= 0 && b < mul, "Invalid character");
            r += b;
          }
          return r;
        }
        BN2.prototype._parseBase = function _parseBase(number2, base, start2) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base | 0;
          var total = number2.length - start2;
          var mod2 = total % limbLen;
          var end2 = Math.min(total, total - mod2) + start2;
          var word = 0;
          for (var i = start2; i < end2; i += limbLen) {
            word = parseBase(number2, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod2 !== 0) {
            var pow3 = 1;
            word = parseBase(number2, i, number2.length, base);
            for (i = 0; i < mod2; i++) {
              pow3 *= base;
            }
            this.imuln(pow3);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this._strip();
        };
        BN2.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
        }
        BN2.prototype._move = function _move(dest) {
          move(dest, this);
        };
        BN2.prototype.clone = function clone() {
          var r = new BN2(null);
          this.copy(r);
          return r;
        };
        BN2.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN2.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN2.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
          } catch (e) {
            BN2.prototype.inspect = inspect;
          }
        } else {
          BN2.prototype.inspect = inspect;
        }
        function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN2.prototype.toString = function toString(base, padding2) {
          base = base || 10;
          padding2 = padding2 | 0 || 1;
          var out;
          if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off | carry) & 16777215).toString(16);
              carry = w >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding2 !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base === (base | 0) && base >= 2 && base <= 36) {
            var groupSize = groupSizes[base];
            var groupBase = groupBases[base];
            out = "";
            var c2 = this.clone();
            c2.negative = 0;
            while (!c2.isZero()) {
              var r = c2.modrn(groupBase).toString(base);
              c2 = c2.idivn(groupBase);
              if (!c2.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding2 !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN2.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN2.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
        };
        if (Buffer2) {
          BN2.prototype.toBuffer = function toBuffer(endian, length) {
            return this.toArrayLike(Buffer2, endian, length);
          };
        }
        BN2.prototype.toArray = function toArray2(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        var allocate = function allocate2(ArrayType, size) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
          }
          return new ArrayType(size);
        };
        BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();
          var byteLength = this.byteLength();
          var reqLength = length || Math.max(1, byteLength);
          assert3(byteLength <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength);
          return res;
        };
        BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
          var position = 0;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) {
              res[position++] = word >> 8 & 255;
            }
            if (position < res.length) {
              res[position++] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position < res.length) {
                res[position++] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
              res[position++] = 0;
            }
          }
        };
        BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
          var position = res.length - 1;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) {
              res[position--] = word >> 8 & 255;
            }
            if (position >= 0) {
              res[position--] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position >= 0) {
                res[position--] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
              res[position--] = 0;
            }
          }
        };
        if (Math.clz32) {
          BN2.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN2.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN2.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0)
            return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN2.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
          }
          return w;
        }
        BN2.prototype.zeroBits = function zeroBits() {
          if (this.isZero())
            return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26)
              break;
          }
          return r;
        };
        BN2.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN2.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN2.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN2.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN2.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN2.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN2.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this._strip();
        };
        BN2.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN2.prototype.or = function or(num) {
          if (this.length > num.length)
            return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN2.prototype.uor = function uor(num) {
          if (this.length > num.length)
            return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN2.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this._strip();
        };
        BN2.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN2.prototype.and = function and(num) {
          if (this.length > num.length)
            return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN2.prototype.uand = function uand(num) {
          if (this.length > num.length)
            return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN2.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this._strip();
        };
        BN2.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN2.prototype.xor = function xor(num) {
          if (this.length > num.length)
            return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN2.prototype.uxor = function uxor(num) {
          if (this.length > num.length)
            return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN2.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this._strip();
        };
        BN2.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN2.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this._strip();
        };
        BN2.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN2.prototype.add = function add2(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length)
            return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN2.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this._strip();
        };
        BN2.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c2 = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
          c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c2 !== 0) {
            o[19] = c2;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out._strip();
        }
        function jumboMulTo(self2, num, out) {
          return bigMulTo(self2, num, out);
        }
        BN2.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l15 = BN2.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l15, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l15, N) {
          if (x === 0 || x === N - 1)
            return x;
          var rb = 0;
          for (var i = 0; i < l15; i++) {
            rb |= (x & 1) << l15 - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l15 = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l15);
            var itwdf = Math.sin(2 * Math.PI / l15);
            for (var p = 0; p < N; p += l15) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie2 = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie2 + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie2 - io;
                if (j !== l15) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1)
            return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _3 = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _3, rwst, iwst, N, rbt);
          this.transform(nrws, _3, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _3, N, rbt);
          this.conjugate(rmws, _3, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out._strip();
        };
        BN2.prototype.mul = function mul(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN2.prototype.mulf = function mulf(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN2.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN2.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN2.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN2.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN2.prototype.pow = function pow3(num) {
          var w = toBitArray(num);
          if (w.length === 0)
            return new BN2(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0)
              break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0)
                continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN2.prototype.iushln = function iushln(bits2) {
          assert3(typeof bits2 === "number" && bits2 >= 0);
          var r = bits2 % 26;
          var s = (bits2 - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c2 = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c2 | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this._strip();
        };
        BN2.prototype.ishln = function ishln(bits2) {
          assert3(this.negative === 0);
          return this.iushln(bits2);
        };
        BN2.prototype.iushrn = function iushrn(bits2, hint, extended) {
          assert3(typeof bits2 === "number" && bits2 >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits2 % 26;
          var s = Math.min((bits2 - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this._strip();
        };
        BN2.prototype.ishrn = function ishrn(bits2, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits2, hint, extended);
        };
        BN2.prototype.shln = function shln(bits2) {
          return this.clone().ishln(bits2);
        };
        BN2.prototype.ushln = function ushln(bits2) {
          return this.clone().iushln(bits2);
        };
        BN2.prototype.shrn = function shrn(bits2) {
          return this.clone().ishrn(bits2);
        };
        BN2.prototype.ushrn = function ushrn(bits2) {
          return this.clone().iushrn(bits2);
        };
        BN2.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s)
            return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN2.prototype.imaskn = function imaskn(bits2) {
          assert3(typeof bits2 === "number" && bits2 >= 0);
          var r = bits2 % 26;
          var s = (bits2 - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this._strip();
        };
        BN2.prototype.maskn = function maskn(bits2) {
          return this.clone().imaskn(bits2);
        };
        BN2.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0)
            return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN2.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN2.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0)
            return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this._strip();
        };
        BN2.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN2.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN2.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN2.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right2 = (num.words[i] | 0) * mul;
            w -= right2 & 67108863;
            carry = (w >> 26) - (right2 / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0)
            return this._strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this._strip();
        };
        BN2.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN2(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q._strip();
          }
          a._strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN2.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN2(0),
              mod: new BN2(0)
            };
          }
          var div, mod2, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.iadd(num);
              }
            }
            return {
              div,
              mod: mod2
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.isub(num);
              }
            }
            return {
              div: res.div,
              mod: mod2
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN2(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN2(this.modrn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN2.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN2.prototype.mod = function mod2(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN2.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN2.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero())
            return dm.div;
          var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod2.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0)
            return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN2.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return isNegNum ? -acc : acc;
        };
        BN2.prototype.modn = function modn(num) {
          return this.modrn(num);
        };
        BN2.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN2.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN2(1);
          var B = new BN2(0);
          var C = new BN2(0);
          var D = new BN2(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
              ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN2.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN2(1);
          var x2 = new BN2(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
              ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN2.prototype.gcd = function gcd2(num) {
          if (this.isZero())
            return num.abs();
          if (num.isZero())
            return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN2.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN2.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN2.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN2.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN2.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN2.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN2.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative)
            return -1;
          if (this.negative === 0 && negative)
            return 1;
          this._strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN2.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0)
            return -1;
          if (this.negative === 0 && num.negative !== 0)
            return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN2.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length)
            return 1;
          if (this.length < num.length)
            return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b)
              continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN2.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN2.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN2.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN2.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN2.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN2.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN2.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN2.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN2.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN2.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN2.red = function red(num) {
          return new Red(num);
        };
        BN2.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN2.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN2.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN2.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN2.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN2.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN2.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN2.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN2.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN2.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN2.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN2.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN2.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN2.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN2.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN2.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN2.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name, p) {
          this.name = name;
          this.p = new BN2(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN2(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN2(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split2(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits(K256, MPrime);
        K256.prototype.split = function split2(input, output2) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output2.words[i] = input.words[i];
          }
          output2.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output2.words[output2.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN2._prime = function prime6(name) {
          if (primes[name])
            return primes[name];
          var prime7;
          if (name === "k256") {
            prime7 = new K256();
          } else if (name === "p224") {
            prime7 = new P224();
          } else if (name === "p192") {
            prime7 = new P192();
          } else if (name === "p25519") {
            prime7 = new P25519();
          } else {
            throw new Error("Unknown prime " + name);
          }
          primes[name] = prime7;
          return prime7;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime6 = BN2._prime(m);
            this.m = prime6.p;
            this.prime = prime6;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime)
            return this.prime.ireduce(a)._forceRed(this);
          move(a, a.umod(this.m)._forceRed(this));
          return a;
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add2(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero())
            return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow3 = this.m.add(new BN2(1)).iushrn(2);
            return this.pow(a, pow3);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN2(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN2(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c2 = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c2, new BN2(1).iushln(m - i - 1));
            r = r.redMul(b);
            c2 = b.redSqr();
            t = t.redMul(c2);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow3(a, num) {
          if (num.isZero())
            return new BN2(1).toRed(this);
          if (num.cmpn(1) === 0)
            return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN2(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start2 = num.bitLength() % 26;
          if (start2 === 0) {
            start2 = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start2 - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0))
                continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start2 = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN2.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN2(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c2 = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c2).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero())
            return new BN2(0)._forceRed(this);
          var t = a.mul(b);
          var c2 = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c2).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module2 === "undefined" || module2, exports);
    }
  });

  // ../../node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js
  var require_bytes = __commonJS({
    "../../node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js"(exports) {
      exports.lenIn = 171005;
      exports.lenOut = 339466;
      exports.bytes = "";
    }
  });

  // ../../node_modules/eventemitter3/index.js
  var require_eventemitter3 = __commonJS({
    "../../node_modules/eventemitter3/index.js"(exports, module2) {
      "use strict";
      var has = Object.prototype.hasOwnProperty;
      var prefix2 = "~";
      function Events2() {
      }
      if (Object.create) {
        Events2.prototype = /* @__PURE__ */ Object.create(null);
        if (!new Events2().__proto__)
          prefix2 = false;
      }
      function EE(fn2, context2, once) {
        this.fn = fn2;
        this.context = context2;
        this.once = once || false;
      }
      function addListener(emitter, event, fn2, context2, once) {
        if (typeof fn2 !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener = new EE(fn2, context2 || emitter, once), evt = prefix2 ? prefix2 + event : event;
        if (!emitter._events[evt])
          emitter._events[evt] = listener, emitter._eventsCount++;
        else if (!emitter._events[evt].fn)
          emitter._events[evt].push(listener);
        else
          emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0)
          emitter._events = new Events2();
        else
          delete emitter._events[evt];
      }
      function EventEmitter2() {
        this._events = new Events2();
        this._eventsCount = 0;
      }
      EventEmitter2.prototype.eventNames = function eventNames() {
        var names = [], events2, name;
        if (this._eventsCount === 0)
          return names;
        for (name in events2 = this._events) {
          if (has.call(events2, name))
            names.push(prefix2 ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events2));
        }
        return names;
      };
      EventEmitter2.prototype.listeners = function listeners(event) {
        var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
        if (!handlers)
          return [];
        if (handlers.fn)
          return [handlers.fn];
        for (var i = 0, l15 = handlers.length, ee = new Array(l15); i < l15; i++) {
          ee[i] = handlers[i].fn;
        }
        return ee;
      };
      EventEmitter2.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
        if (!listeners)
          return 0;
        if (listeners.fn)
          return 1;
        return listeners.length;
      };
      EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix2 ? prefix2 + event : event;
        if (!this._events[evt])
          return false;
        var listeners = this._events[evt], len = arguments.length, args, i;
        if (listeners.fn) {
          if (listeners.once)
            this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }
          for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j;
          for (i = 0; i < length; i++) {
            if (listeners[i].once)
              this.removeListener(event, listeners[i].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;
              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;
              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;
              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;
              default:
                if (!args)
                  for (j = 1, args = new Array(len - 1); j < len; j++) {
                    args[j - 1] = arguments[j];
                  }
                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter2.prototype.on = function on(event, fn2, context2) {
        return addListener(this, event, fn2, context2, false);
      };
      EventEmitter2.prototype.once = function once(event, fn2, context2) {
        return addListener(this, event, fn2, context2, true);
      };
      EventEmitter2.prototype.removeListener = function removeListener(event, fn2, context2, once) {
        var evt = prefix2 ? prefix2 + event : event;
        if (!this._events[evt])
          return this;
        if (!fn2) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn2 && (!once || listeners.once) && (!context2 || listeners.context === context2)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i = 0, events2 = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn2 || once && !listeners[i].once || context2 && listeners[i].context !== context2) {
              events2.push(listeners[i]);
            }
          }
          if (events2.length)
            this._events[evt] = events2.length === 1 ? events2[0] : events2;
          else
            clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix2 ? prefix2 + event : event;
          if (this._events[evt])
            clearEvent(this, evt);
        } else {
          this._events = new Events2();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
      EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
      EventEmitter2.prefixed = prefix2;
      EventEmitter2.EventEmitter = EventEmitter2;
      if ("undefined" !== typeof module2) {
        module2.exports = EventEmitter2;
      }
    }
  });

  // ../../node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../../node_modules/react/cjs/react.development.js"(exports, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn2(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info6) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info6[0], info6[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config3) {
            {
              if (hasOwnProperty.call(config3, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.ref !== void 0;
          }
          function hasValidKey(config3) {
            {
              if (hasOwnProperty.call(config3, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config3) {
            {
              if (typeof config3.ref === "string" && ReactCurrentOwner.current && config3.__self && ReactCurrentOwner.current.stateNode !== config3.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config3.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config3, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config3 != null) {
              if (hasValidRef(config3)) {
                ref = config3.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config3);
                }
              }
              if (hasValidKey(config3)) {
                {
                  checkKeyStringCoercion(config3.key);
                }
                key = "" + config3.key;
              }
              self2 = config3.__self === void 0 ? null : config3.__self;
              source = config3.__source === void 0 ? null : config3.__source;
              for (propName in config3) {
                if (hasOwnProperty.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config3[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config3, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config3 != null) {
              if (hasValidRef(config3)) {
                ref = config3.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config3)) {
                {
                  checkKeyStringCoercion(config3.key);
                }
                key = "" + config3.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config3) {
                if (hasOwnProperty.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config3[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config3[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey2 = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray3(mappedChild)) {
                var escapedChildKey = "";
                if (childKey2 != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey2) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey2
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray3(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator2 = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator2.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context2) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context2, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext2(defaultValue) {
            var context2 = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context2.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context2
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context2
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context2.Provider;
                  },
                  set: function(_Provider) {
                    context2.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context2._currentValue;
                  },
                  set: function(_currentValue) {
                    context2._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context2._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context2._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context2._threadCount;
                  },
                  set: function(_threadCount) {
                    context2._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context2.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context2.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context2.Consumer = Consumer;
            }
            {
              context2._currentRenderer = null;
              context2._currentRenderer2 = null;
            }
            return context2;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved2 = payload;
                  resolved2._status = Resolved;
                  resolved2._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext2(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState2(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init2);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                  c2--;
                }
                for (; s >= 1 && c2 >= 0; s--, c2--) {
                  if (sampleLines[s] !== controlLines[c2]) {
                    if (s !== 1 || c2 !== 1) {
                      do {
                        s--;
                        c2--;
                        if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info6 = getDeclarationErrorAddendum();
            if (!info6) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info6 = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info6;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray3(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator2 = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator2.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info6 = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info6 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info6 += sourceInfo;
              } else {
                info6 += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray3(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info6 = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info6);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext2;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext2;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect2;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState2;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../../node_modules/react/index.js
  var require_react = __commonJS({
    "../../node_modules/react/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // ../../node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "../../node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                  c2--;
                }
                for (; s >= 1 && c2 >= 0; s--, c2--) {
                  if (sampleLines[s] !== controlLines[c2]) {
                    if (s !== 1 || c2 !== 1) {
                      do {
                        s--;
                        c2--;
                        if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config3) {
            {
              if (hasOwnProperty.call(config3, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.ref !== void 0;
          }
          function hasValidKey(config3) {
            {
              if (hasOwnProperty.call(config3, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config3, self2) {
            {
              if (typeof config3.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config3.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config3, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config3)) {
                {
                  checkKeyStringCoercion(config3.key);
                }
                key = "" + config3.key;
              }
              if (hasValidRef(config3)) {
                ref = config3.ref;
                warnIfStringRefCannotBeAutoConverted(config3, self2);
              }
              for (propName in config3) {
                if (hasOwnProperty.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config3[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info6 = getDeclarationErrorAddendum();
              if (!info6) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info6 = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info6;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray3(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator2 = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator2.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info6 = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info6 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info6 += sourceInfo;
                } else {
                  info6 += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray3(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info6 = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info6);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray3(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx2 = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx2;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // ../../node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "../../node_modules/react/jsx-runtime.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // ../../node_modules/toastr/toastr.js
  var require_toastr = __commonJS({
    "../../node_modules/toastr/toastr.js"(exports, module2) {
      (function(define2) {
        define2(["jquery"], function($3) {
          return function() {
            var $container;
            var listener;
            var toastId = 0;
            var toastType = {
              error: "error",
              info: "info",
              success: "success",
              warning: "warning"
            };
            var toastr2 = {
              clear,
              remove,
              error,
              getContainer,
              info: info6,
              options: {},
              subscribe,
              success,
              version: "2.1.4",
              warning
            };
            var previousToast;
            return toastr2;
            function error(message, title, optionsOverride) {
              return notify({
                type: toastType.error,
                iconClass: getOptions().iconClasses.error,
                message,
                optionsOverride,
                title
              });
            }
            function getContainer(options, create) {
              if (!options) {
                options = getOptions();
              }
              $container = $3("#" + options.containerId);
              if ($container.length) {
                return $container;
              }
              if (create) {
                $container = createContainer(options);
              }
              return $container;
            }
            function info6(message, title, optionsOverride) {
              return notify({
                type: toastType.info,
                iconClass: getOptions().iconClasses.info,
                message,
                optionsOverride,
                title
              });
            }
            function subscribe(callback) {
              listener = callback;
            }
            function success(message, title, optionsOverride) {
              return notify({
                type: toastType.success,
                iconClass: getOptions().iconClasses.success,
                message,
                optionsOverride,
                title
              });
            }
            function warning(message, title, optionsOverride) {
              return notify({
                type: toastType.warning,
                iconClass: getOptions().iconClasses.warning,
                message,
                optionsOverride,
                title
              });
            }
            function clear($toastElement, clearOptions) {
              var options = getOptions();
              if (!$container) {
                getContainer(options);
              }
              if (!clearToast($toastElement, options, clearOptions)) {
                clearContainer(options);
              }
            }
            function remove($toastElement) {
              var options = getOptions();
              if (!$container) {
                getContainer(options);
              }
              if ($toastElement && $3(":focus", $toastElement).length === 0) {
                removeToast($toastElement);
                return;
              }
              if ($container.children().length) {
                $container.remove();
              }
            }
            function clearContainer(options) {
              var toastsToClear = $container.children();
              for (var i = toastsToClear.length - 1; i >= 0; i--) {
                clearToast($3(toastsToClear[i]), options);
              }
            }
            function clearToast($toastElement, options, clearOptions) {
              var force = clearOptions && clearOptions.force ? clearOptions.force : false;
              if ($toastElement && (force || $3(":focus", $toastElement).length === 0)) {
                $toastElement[options.hideMethod]({
                  duration: options.hideDuration,
                  easing: options.hideEasing,
                  complete: function() {
                    removeToast($toastElement);
                  }
                });
                return true;
              }
              return false;
            }
            function createContainer(options) {
              $container = $3("<div/>").attr("id", options.containerId).addClass(options.positionClass);
              $container.appendTo($3(options.target));
              return $container;
            }
            function getDefaults() {
              return {
                tapToDismiss: true,
                toastClass: "toast",
                containerId: "toast-container",
                debug: false,
                showMethod: "fadeIn",
                showDuration: 300,
                showEasing: "swing",
                onShown: void 0,
                hideMethod: "fadeOut",
                hideDuration: 1e3,
                hideEasing: "swing",
                onHidden: void 0,
                closeMethod: false,
                closeDuration: false,
                closeEasing: false,
                closeOnHover: true,
                extendedTimeOut: 1e3,
                iconClasses: {
                  error: "toast-error",
                  info: "toast-info",
                  success: "toast-success",
                  warning: "toast-warning"
                },
                iconClass: "toast-info",
                positionClass: "toast-top-right",
                timeOut: 5e3,
                titleClass: "toast-title",
                messageClass: "toast-message",
                escapeHtml: false,
                target: "body",
                closeHtml: '<button type="button">&times;</button>',
                closeClass: "toast-close-button",
                newestOnTop: true,
                preventDuplicates: false,
                progressBar: false,
                progressClass: "toast-progress",
                rtl: false
              };
            }
            function publish(args) {
              if (!listener) {
                return;
              }
              listener(args);
            }
            function notify(map3) {
              var options = getOptions();
              var iconClass = map3.iconClass || options.iconClass;
              if (typeof map3.optionsOverride !== "undefined") {
                options = $3.extend(options, map3.optionsOverride);
                iconClass = map3.optionsOverride.iconClass || iconClass;
              }
              if (shouldExit(options, map3)) {
                return;
              }
              toastId++;
              $container = getContainer(options, true);
              var intervalId = null;
              var $toastElement = $3("<div/>");
              var $titleElement = $3("<div/>");
              var $messageElement = $3("<div/>");
              var $progressElement = $3("<div/>");
              var $closeElement = $3(options.closeHtml);
              var progressBar = {
                intervalId: null,
                hideEta: null,
                maxHideTime: null
              };
              var response = {
                toastId,
                state: "visible",
                startTime: new Date(),
                options,
                map: map3
              };
              personalizeToast();
              displayToast();
              handleEvents();
              publish(response);
              if (options.debug && console) {
                console.log(response);
              }
              return $toastElement;
              function escapeHtml(source) {
                if (source == null) {
                  source = "";
                }
                return source.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
              }
              function personalizeToast() {
                setIcon();
                setTitle();
                setMessage();
                setCloseButton();
                setProgressBar();
                setRTL();
                setSequence();
                setAria();
              }
              function setAria() {
                var ariaValue = "";
                switch (map3.iconClass) {
                  case "toast-success":
                  case "toast-info":
                    ariaValue = "polite";
                    break;
                  default:
                    ariaValue = "assertive";
                }
                $toastElement.attr("aria-live", ariaValue);
              }
              function handleEvents() {
                if (options.closeOnHover) {
                  $toastElement.hover(stickAround, delayedHideToast);
                }
                if (!options.onclick && options.tapToDismiss) {
                  $toastElement.click(hideToast);
                }
                if (options.closeButton && $closeElement) {
                  $closeElement.click(function(event) {
                    if (event.stopPropagation) {
                      event.stopPropagation();
                    } else if (event.cancelBubble !== void 0 && event.cancelBubble !== true) {
                      event.cancelBubble = true;
                    }
                    if (options.onCloseClick) {
                      options.onCloseClick(event);
                    }
                    hideToast(true);
                  });
                }
                if (options.onclick) {
                  $toastElement.click(function(event) {
                    options.onclick(event);
                    hideToast();
                  });
                }
              }
              function displayToast() {
                $toastElement.hide();
                $toastElement[options.showMethod](
                  { duration: options.showDuration, easing: options.showEasing, complete: options.onShown }
                );
                if (options.timeOut > 0) {
                  intervalId = setTimeout(hideToast, options.timeOut);
                  progressBar.maxHideTime = parseFloat(options.timeOut);
                  progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                  if (options.progressBar) {
                    progressBar.intervalId = setInterval(updateProgress, 10);
                  }
                }
              }
              function setIcon() {
                if (map3.iconClass) {
                  $toastElement.addClass(options.toastClass).addClass(iconClass);
                }
              }
              function setSequence() {
                if (options.newestOnTop) {
                  $container.prepend($toastElement);
                } else {
                  $container.append($toastElement);
                }
              }
              function setTitle() {
                if (map3.title) {
                  var suffix = map3.title;
                  if (options.escapeHtml) {
                    suffix = escapeHtml(map3.title);
                  }
                  $titleElement.append(suffix).addClass(options.titleClass);
                  $toastElement.append($titleElement);
                }
              }
              function setMessage() {
                if (map3.message) {
                  var suffix = map3.message;
                  if (options.escapeHtml) {
                    suffix = escapeHtml(map3.message);
                  }
                  $messageElement.append(suffix).addClass(options.messageClass);
                  $toastElement.append($messageElement);
                }
              }
              function setCloseButton() {
                if (options.closeButton) {
                  $closeElement.addClass(options.closeClass).attr("role", "button");
                  $toastElement.prepend($closeElement);
                }
              }
              function setProgressBar() {
                if (options.progressBar) {
                  $progressElement.addClass(options.progressClass);
                  $toastElement.prepend($progressElement);
                }
              }
              function setRTL() {
                if (options.rtl) {
                  $toastElement.addClass("rtl");
                }
              }
              function shouldExit(options2, map4) {
                if (options2.preventDuplicates) {
                  if (map4.message === previousToast) {
                    return true;
                  } else {
                    previousToast = map4.message;
                  }
                }
                return false;
              }
              function hideToast(override) {
                var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;
                var duration = override && options.closeDuration !== false ? options.closeDuration : options.hideDuration;
                var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;
                if ($3(":focus", $toastElement).length && !override) {
                  return;
                }
                clearTimeout(progressBar.intervalId);
                return $toastElement[method]({
                  duration,
                  easing,
                  complete: function() {
                    removeToast($toastElement);
                    clearTimeout(intervalId);
                    if (options.onHidden && response.state !== "hidden") {
                      options.onHidden();
                    }
                    response.state = "hidden";
                    response.endTime = new Date();
                    publish(response);
                  }
                });
              }
              function delayedHideToast() {
                if (options.timeOut > 0 || options.extendedTimeOut > 0) {
                  intervalId = setTimeout(hideToast, options.extendedTimeOut);
                  progressBar.maxHideTime = parseFloat(options.extendedTimeOut);
                  progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                }
              }
              function stickAround() {
                clearTimeout(intervalId);
                progressBar.hideEta = 0;
                $toastElement.stop(true, true)[options.showMethod](
                  { duration: options.showDuration, easing: options.showEasing }
                );
              }
              function updateProgress() {
                var percentage = (progressBar.hideEta - new Date().getTime()) / progressBar.maxHideTime * 100;
                $progressElement.width(percentage + "%");
              }
            }
            function getOptions() {
              return $3.extend({}, getDefaults(), toastr2.options);
            }
            function removeToast($toastElement) {
              if (!$container) {
                $container = getContainer();
              }
              if ($toastElement.is(":visible")) {
                return;
              }
              $toastElement.remove();
              $toastElement = null;
              if ($container.children().length === 0) {
                $container.remove();
                previousToast = void 0;
              }
            }
          }();
        });
      })(typeof define === "function" && define.amd ? define : function(deps, factory) {
        if (typeof module2 !== "undefined" && module2.exports) {
          module2.exports = factory(require_jquery());
        } else {
          window.toastr = factory(window.jQuery);
        }
      });
    }
  });

  // src/jquery.js
  var import_jquery = __toESM(require_jquery());
  window.jQuery = import_jquery.default;
  window.$ = import_jquery.default;

  // ../../node_modules/@popperjs/core/lib/index.js
  var lib_exports = {};
  __export(lib_exports, {
    afterMain: () => afterMain,
    afterRead: () => afterRead,
    afterWrite: () => afterWrite,
    applyStyles: () => applyStyles_default,
    arrow: () => arrow_default,
    auto: () => auto,
    basePlacements: () => basePlacements,
    beforeMain: () => beforeMain,
    beforeRead: () => beforeRead,
    beforeWrite: () => beforeWrite,
    bottom: () => bottom,
    clippingParents: () => clippingParents,
    computeStyles: () => computeStyles_default,
    createPopper: () => createPopper3,
    createPopperBase: () => createPopper,
    createPopperLite: () => createPopper2,
    detectOverflow: () => detectOverflow,
    end: () => end,
    eventListeners: () => eventListeners_default,
    flip: () => flip_default,
    hide: () => hide_default,
    left: () => left,
    main: () => main,
    modifierPhases: () => modifierPhases,
    offset: () => offset_default,
    placements: () => placements,
    popper: () => popper,
    popperGenerator: () => popperGenerator,
    popperOffsets: () => popperOffsets_default,
    preventOverflow: () => preventOverflow_default,
    read: () => read,
    reference: () => reference,
    right: () => right,
    start: () => start,
    top: () => top,
    variationPlacements: () => variationPlacements,
    viewport: () => viewport,
    write: () => write
  });

  // ../../node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // ../../node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style = styleProperties.reduce(function(style2, property) {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // ../../node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // ../../node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // ../../node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width,
      height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x,
      y
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle2(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle2(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle2(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // ../../node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // ../../node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max3) {
    return max(min2, min(value, max3));
  }
  function withinMaxClamp(min2, value, max3) {
    var v3 = within(min2, value, max3);
    return v3 > max3 ? max3 : v3;
  }

  // ../../node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // ../../node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys2) {
    return keys2.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding2, state) {
    padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding2;
    return mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max3 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max3);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // ../../node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win2) {
    var x = _ref.x, y = _ref.y;
    var dpr = win2.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win2 = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win2 && win2.visualViewport ? win2.visualViewport.height : offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win2 && win2.visualViewport ? win2.visualViewport.width : offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win2.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }

  // ../../node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash2 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash2[matched];
    });
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node) {
    var win2 = getWindow(node);
    var scrollLeft = win2.pageXOffset;
    var scrollTop = win2.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win2 = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win2.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle2(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win2 = getWindow(scrollParent);
    var target = isBody ? [win2].concat(win2.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
  }

  // ../../node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // ../../node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // ../../node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // ../../node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding2 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding: padding2
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks2 = [];
      if (checkMainAxis) {
        checks2.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks2.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks2.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks2);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks3 = checksMap.get(placement2);
          if (checks3) {
            return checks3.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding2 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding: padding2,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow[mainSide];
      var max3 = offset2 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max3, tetherMax) : max3);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // ../../node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map3 = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map3.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map3.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // ../../node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // ../../node_modules/@popperjs/core/lib/createPopper.js
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper4(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }
  var createPopper = /* @__PURE__ */ popperGenerator();

  // ../../node_modules/@popperjs/core/lib/popper-lite.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
  var createPopper2 = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // ../../node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper3 = /* @__PURE__ */ popperGenerator({
    defaultModifiers: defaultModifiers2
  });

  // ../../node_modules/bootstrap/dist/js/bootstrap.esm.js
  var MAX_UID = 1e6;
  var MILLISECONDS_MULTIPLIER = 1e3;
  var TRANSITION_END = "transitionend";
  var toType = (object) => {
    if (object === null || object === void 0) {
      return `${object}`;
    }
    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
  };
  var getUID = (prefix2) => {
    do {
      prefix2 += Math.floor(Math.random() * MAX_UID);
    } while (document.getElementById(prefix2));
    return prefix2;
  };
  var getSelector = (element) => {
    let selector = element.getAttribute("data-bs-target");
    if (!selector || selector === "#") {
      let hrefAttribute = element.getAttribute("href");
      if (!hrefAttribute || !hrefAttribute.includes("#") && !hrefAttribute.startsWith(".")) {
        return null;
      }
      if (hrefAttribute.includes("#") && !hrefAttribute.startsWith("#")) {
        hrefAttribute = `#${hrefAttribute.split("#")[1]}`;
      }
      selector = hrefAttribute && hrefAttribute !== "#" ? hrefAttribute.trim() : null;
    }
    return selector;
  };
  var getSelectorFromElement = (element) => {
    const selector = getSelector(element);
    if (selector) {
      return document.querySelector(selector) ? selector : null;
    }
    return null;
  };
  var getElementFromSelector = (element) => {
    const selector = getSelector(element);
    return selector ? document.querySelector(selector) : null;
  };
  var getTransitionDurationFromElement = (element) => {
    if (!element) {
      return 0;
    }
    let {
      transitionDuration,
      transitionDelay
    } = window.getComputedStyle(element);
    const floatTransitionDuration = Number.parseFloat(transitionDuration);
    const floatTransitionDelay = Number.parseFloat(transitionDelay);
    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    }
    transitionDuration = transitionDuration.split(",")[0];
    transitionDelay = transitionDelay.split(",")[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };
  var triggerTransitionEnd = (element) => {
    element.dispatchEvent(new Event(TRANSITION_END));
  };
  var isElement2 = (object) => {
    if (!object || typeof object !== "object") {
      return false;
    }
    if (typeof object.jquery !== "undefined") {
      object = object[0];
    }
    return typeof object.nodeType !== "undefined";
  };
  var getElement = (object) => {
    if (isElement2(object)) {
      return object.jquery ? object[0] : object;
    }
    if (typeof object === "string" && object.length > 0) {
      return document.querySelector(object);
    }
    return null;
  };
  var isVisible = (element) => {
    if (!isElement2(element) || element.getClientRects().length === 0) {
      return false;
    }
    const elementIsVisible = getComputedStyle(element).getPropertyValue("visibility") === "visible";
    const closedDetails = element.closest("details:not([open])");
    if (!closedDetails) {
      return elementIsVisible;
    }
    if (closedDetails !== element) {
      const summary = element.closest("summary");
      if (summary && summary.parentNode !== closedDetails) {
        return false;
      }
      if (summary === null) {
        return false;
      }
    }
    return elementIsVisible;
  };
  var isDisabled = (element) => {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }
    if (element.classList.contains("disabled")) {
      return true;
    }
    if (typeof element.disabled !== "undefined") {
      return element.disabled;
    }
    return element.hasAttribute("disabled") && element.getAttribute("disabled") !== "false";
  };
  var findShadowRoot = (element) => {
    if (!document.documentElement.attachShadow) {
      return null;
    }
    if (typeof element.getRootNode === "function") {
      const root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    }
    if (element instanceof ShadowRoot) {
      return element;
    }
    if (!element.parentNode) {
      return null;
    }
    return findShadowRoot(element.parentNode);
  };
  var noop = () => {
  };
  var reflow = (element) => {
    element.offsetHeight;
  };
  var getjQuery = () => {
    if (window.jQuery && !document.body.hasAttribute("data-bs-no-jquery")) {
      return window.jQuery;
    }
    return null;
  };
  var DOMContentLoadedCallbacks = [];
  var onDOMContentLoaded = (callback) => {
    if (document.readyState === "loading") {
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener("DOMContentLoaded", () => {
          for (const callback2 of DOMContentLoadedCallbacks) {
            callback2();
          }
        });
      }
      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };
  var isRTL = () => document.documentElement.dir === "rtl";
  var defineJQueryPlugin = (plugin) => {
    onDOMContentLoaded(() => {
      const $3 = getjQuery();
      if ($3) {
        const name = plugin.NAME;
        const JQUERY_NO_CONFLICT = $3.fn[name];
        $3.fn[name] = plugin.jQueryInterface;
        $3.fn[name].Constructor = plugin;
        $3.fn[name].noConflict = () => {
          $3.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface;
        };
      }
    });
  };
  var execute = (callback) => {
    if (typeof callback === "function") {
      callback();
    }
  };
  var executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
    if (!waitForTransition) {
      execute(callback);
      return;
    }
    const durationPadding = 5;
    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    let called = false;
    const handler = ({
      target
    }) => {
      if (target !== transitionElement) {
        return;
      }
      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };
    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(() => {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };
  var getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
    const listLength = list.length;
    let index = list.indexOf(activeElement);
    if (index === -1) {
      return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
    }
    index += shouldGetNext ? 1 : -1;
    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }
    return list[Math.max(0, Math.min(index, listLength - 1))];
  };
  var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  var stripNameRegex = /\..*/;
  var stripUidRegex = /::\d+$/;
  var eventRegistry = {};
  var uidEvent = 1;
  var customEvents = {
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  };
  var nativeEvents = /* @__PURE__ */ new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);
  function makeEventUid(element, uid) {
    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
  }
  function getElementEvents(element) {
    const uid = makeEventUid(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
  }
  function bootstrapHandler(element, fn2) {
    return function handler(event) {
      hydrateObj(event, {
        delegateTarget: element
      });
      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn2);
      }
      return fn2.apply(element, [event]);
    };
  }
  function bootstrapDelegationHandler(element, selector, fn2) {
    return function handler(event) {
      const domElements = element.querySelectorAll(selector);
      for (let {
        target
      } = event; target && target !== this; target = target.parentNode) {
        for (const domElement of domElements) {
          if (domElement !== target) {
            continue;
          }
          hydrateObj(event, {
            delegateTarget: target
          });
          if (handler.oneOff) {
            EventHandler.off(element, event.type, selector, fn2);
          }
          return fn2.apply(target, [event]);
        }
      }
    };
  }
  function findHandler(events2, callable, delegationSelector = null) {
    return Object.values(events2).find((event) => event.callable === callable && event.delegationSelector === delegationSelector);
  }
  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
    const isDelegated = typeof handler === "string";
    const callable = isDelegated ? delegationFunction : handler || delegationFunction;
    let typeEvent = getTypeEvent(originalTypeEvent);
    if (!nativeEvents.has(typeEvent)) {
      typeEvent = originalTypeEvent;
    }
    return [isDelegated, callable, typeEvent];
  }
  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
    if (typeof originalTypeEvent !== "string" || !element) {
      return;
    }
    let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
    if (originalTypeEvent in customEvents) {
      const wrapFunction = (fn3) => {
        return function(event) {
          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
            return fn3.call(this, event);
          }
        };
      };
      callable = wrapFunction(callable);
    }
    const events2 = getElementEvents(element);
    const handlers = events2[typeEvent] || (events2[typeEvent] = {});
    const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
    if (previousFunction) {
      previousFunction.oneOff = previousFunction.oneOff && oneOff;
      return;
    }
    const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ""));
    const fn2 = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
    fn2.delegationSelector = isDelegated ? handler : null;
    fn2.callable = callable;
    fn2.oneOff = oneOff;
    fn2.uidEvent = uid;
    handlers[uid] = fn2;
    element.addEventListener(typeEvent, fn2, isDelegated);
  }
  function removeHandler(element, events2, typeEvent, handler, delegationSelector) {
    const fn2 = findHandler(events2[typeEvent], handler, delegationSelector);
    if (!fn2) {
      return;
    }
    element.removeEventListener(typeEvent, fn2, Boolean(delegationSelector));
    delete events2[typeEvent][fn2.uidEvent];
  }
  function removeNamespacedHandlers(element, events2, typeEvent, namespace) {
    const storeElementEvent = events2[typeEvent] || {};
    for (const handlerKey of Object.keys(storeElementEvent)) {
      if (handlerKey.includes(namespace)) {
        const event = storeElementEvent[handlerKey];
        removeHandler(element, events2, typeEvent, event.callable, event.delegationSelector);
      }
    }
  }
  function getTypeEvent(event) {
    event = event.replace(stripNameRegex, "");
    return customEvents[event] || event;
  }
  var EventHandler = {
    on(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, false);
    },
    one(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, true);
    },
    off(element, originalTypeEvent, handler, delegationFunction) {
      if (typeof originalTypeEvent !== "string" || !element) {
        return;
      }
      const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
      const inNamespace = typeEvent !== originalTypeEvent;
      const events2 = getElementEvents(element);
      const storeElementEvent = events2[typeEvent] || {};
      const isNamespace = originalTypeEvent.startsWith(".");
      if (typeof callable !== "undefined") {
        if (!Object.keys(storeElementEvent).length) {
          return;
        }
        removeHandler(element, events2, typeEvent, callable, isDelegated ? handler : null);
        return;
      }
      if (isNamespace) {
        for (const elementEvent of Object.keys(events2)) {
          removeNamespacedHandlers(element, events2, elementEvent, originalTypeEvent.slice(1));
        }
      }
      for (const keyHandlers of Object.keys(storeElementEvent)) {
        const handlerKey = keyHandlers.replace(stripUidRegex, "");
        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          const event = storeElementEvent[keyHandlers];
          removeHandler(element, events2, typeEvent, event.callable, event.delegationSelector);
        }
      }
    },
    trigger(element, event, args) {
      if (typeof event !== "string" || !element) {
        return null;
      }
      const $3 = getjQuery();
      const typeEvent = getTypeEvent(event);
      const inNamespace = event !== typeEvent;
      let jQueryEvent = null;
      let bubbles = true;
      let nativeDispatch = true;
      let defaultPrevented = false;
      if (inNamespace && $3) {
        jQueryEvent = $3.Event(event, args);
        $3(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }
      let evt = new Event(event, {
        bubbles,
        cancelable: true
      });
      evt = hydrateObj(evt, args);
      if (defaultPrevented) {
        evt.preventDefault();
      }
      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }
      if (evt.defaultPrevented && jQueryEvent) {
        jQueryEvent.preventDefault();
      }
      return evt;
    }
  };
  function hydrateObj(obj, meta) {
    for (const [key, value] of Object.entries(meta || {})) {
      try {
        obj[key] = value;
      } catch (_unused) {
        Object.defineProperty(obj, key, {
          configurable: true,
          get() {
            return value;
          }
        });
      }
    }
    return obj;
  }
  var elementMap = /* @__PURE__ */ new Map();
  var Data = {
    set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, /* @__PURE__ */ new Map());
      }
      const instanceMap = elementMap.get(element);
      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
        return;
      }
      instanceMap.set(key, instance);
    },
    get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null;
      }
      return null;
    },
    remove(element, key) {
      if (!elementMap.has(element)) {
        return;
      }
      const instanceMap = elementMap.get(element);
      instanceMap.delete(key);
      if (instanceMap.size === 0) {
        elementMap.delete(element);
      }
    }
  };
  function normalizeData(value) {
    if (value === "true") {
      return true;
    }
    if (value === "false") {
      return false;
    }
    if (value === Number(value).toString()) {
      return Number(value);
    }
    if (value === "" || value === "null") {
      return null;
    }
    if (typeof value !== "string") {
      return value;
    }
    try {
      return JSON.parse(decodeURIComponent(value));
    } catch (_unused) {
      return value;
    }
  }
  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, (chr2) => `-${chr2.toLowerCase()}`);
  }
  var Manipulator = {
    setDataAttribute(element, key, value) {
      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
    },
    removeDataAttribute(element, key) {
      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
    },
    getDataAttributes(element) {
      if (!element) {
        return {};
      }
      const attributes = {};
      const bsKeys = Object.keys(element.dataset).filter((key) => key.startsWith("bs") && !key.startsWith("bsConfig"));
      for (const key of bsKeys) {
        let pureKey = key.replace(/^bs/, "");
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
        attributes[pureKey] = normalizeData(element.dataset[key]);
      }
      return attributes;
    },
    getDataAttribute(element, key) {
      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
    }
  };
  var Config = class {
    static get Default() {
      return {};
    }
    static get DefaultType() {
      return {};
    }
    static get NAME() {
      throw new Error('You have to implement the static method "NAME", for each component!');
    }
    _getConfig(config3) {
      config3 = this._mergeConfigObj(config3);
      config3 = this._configAfterMerge(config3);
      this._typeCheckConfig(config3);
      return config3;
    }
    _configAfterMerge(config3) {
      return config3;
    }
    _mergeConfigObj(config3, element) {
      const jsonConfig = isElement2(element) ? Manipulator.getDataAttribute(element, "config") : {};
      return {
        ...this.constructor.Default,
        ...typeof jsonConfig === "object" ? jsonConfig : {},
        ...isElement2(element) ? Manipulator.getDataAttributes(element) : {},
        ...typeof config3 === "object" ? config3 : {}
      };
    }
    _typeCheckConfig(config3, configTypes = this.constructor.DefaultType) {
      for (const property of Object.keys(configTypes)) {
        const expectedTypes = configTypes[property];
        const value = config3[property];
        const valueType = isElement2(value) ? "element" : toType(value);
        if (!new RegExp(expectedTypes).test(valueType)) {
          throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
        }
      }
    }
  };
  var VERSION = "5.2.3";
  var BaseComponent = class extends Config {
    constructor(element, config3) {
      super();
      element = getElement(element);
      if (!element) {
        return;
      }
      this._element = element;
      this._config = this._getConfig(config3);
      Data.set(this._element, this.constructor.DATA_KEY, this);
    }
    dispose() {
      Data.remove(this._element, this.constructor.DATA_KEY);
      EventHandler.off(this._element, this.constructor.EVENT_KEY);
      for (const propertyName of Object.getOwnPropertyNames(this)) {
        this[propertyName] = null;
      }
    }
    _queueCallback(callback, element, isAnimated = true) {
      executeAfterTransition(callback, element, isAnimated);
    }
    _getConfig(config3) {
      config3 = this._mergeConfigObj(config3, this._element);
      config3 = this._configAfterMerge(config3);
      this._typeCheckConfig(config3);
      return config3;
    }
    static getInstance(element) {
      return Data.get(getElement(element), this.DATA_KEY);
    }
    static getOrCreateInstance(element, config3 = {}) {
      return this.getInstance(element) || new this(element, typeof config3 === "object" ? config3 : null);
    }
    static get VERSION() {
      return VERSION;
    }
    static get DATA_KEY() {
      return `bs.${this.NAME}`;
    }
    static get EVENT_KEY() {
      return `.${this.DATA_KEY}`;
    }
    static eventName(name) {
      return `${name}${this.EVENT_KEY}`;
    }
  };
  var enableDismissTrigger = (component, method = "hide") => {
    const clickEvent = `click.dismiss${component.EVENT_KEY}`;
    const name = component.NAME;
    EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function(event) {
      if (["A", "AREA"].includes(this.tagName)) {
        event.preventDefault();
      }
      if (isDisabled(this)) {
        return;
      }
      const target = getElementFromSelector(this) || this.closest(`.${name}`);
      const instance = component.getOrCreateInstance(target);
      instance[method]();
    });
  };
  var NAME$f = "alert";
  var DATA_KEY$a = "bs.alert";
  var EVENT_KEY$b = `.${DATA_KEY$a}`;
  var EVENT_CLOSE = `close${EVENT_KEY$b}`;
  var EVENT_CLOSED = `closed${EVENT_KEY$b}`;
  var CLASS_NAME_FADE$5 = "fade";
  var CLASS_NAME_SHOW$8 = "show";
  var Alert = class extends BaseComponent {
    static get NAME() {
      return NAME$f;
    }
    close() {
      const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
      if (closeEvent.defaultPrevented) {
        return;
      }
      this._element.classList.remove(CLASS_NAME_SHOW$8);
      const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
      this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
    }
    _destroyElement() {
      this._element.remove();
      EventHandler.trigger(this._element, EVENT_CLOSED);
      this.dispose();
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = Alert.getOrCreateInstance(this);
        if (typeof config3 !== "string") {
          return;
        }
        if (data[config3] === void 0 || config3.startsWith("_") || config3 === "constructor") {
          throw new TypeError(`No method named "${config3}"`);
        }
        data[config3](this);
      });
    }
  };
  enableDismissTrigger(Alert, "close");
  defineJQueryPlugin(Alert);
  var NAME$e = "button";
  var DATA_KEY$9 = "bs.button";
  var EVENT_KEY$a = `.${DATA_KEY$9}`;
  var DATA_API_KEY$6 = ".data-api";
  var CLASS_NAME_ACTIVE$3 = "active";
  var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
  var EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
  var Button = class extends BaseComponent {
    static get NAME() {
      return NAME$e;
    }
    toggle() {
      this._element.setAttribute("aria-pressed", this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = Button.getOrCreateInstance(this);
        if (config3 === "toggle") {
          data[config3]();
        }
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event) => {
    event.preventDefault();
    const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    const data = Button.getOrCreateInstance(button);
    data.toggle();
  });
  defineJQueryPlugin(Button);
  var SelectorEngine = {
    find(selector, element = document.documentElement) {
      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
    },
    findOne(selector, element = document.documentElement) {
      return Element.prototype.querySelector.call(element, selector);
    },
    children(element, selector) {
      return [].concat(...element.children).filter((child) => child.matches(selector));
    },
    parents(element, selector) {
      const parents = [];
      let ancestor = element.parentNode.closest(selector);
      while (ancestor) {
        parents.push(ancestor);
        ancestor = ancestor.parentNode.closest(selector);
      }
      return parents;
    },
    prev(element, selector) {
      let previous = element.previousElementSibling;
      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }
        previous = previous.previousElementSibling;
      }
      return [];
    },
    next(element, selector) {
      let next = element.nextElementSibling;
      while (next) {
        if (next.matches(selector)) {
          return [next];
        }
        next = next.nextElementSibling;
      }
      return [];
    },
    focusableChildren(element) {
      const focusables = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", '[contenteditable="true"]'].map((selector) => `${selector}:not([tabindex^="-"])`).join(",");
      return this.find(focusables, element).filter((el) => !isDisabled(el) && isVisible(el));
    }
  };
  var NAME$d = "swipe";
  var EVENT_KEY$9 = ".bs.swipe";
  var EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
  var EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
  var EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
  var EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
  var EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
  var POINTER_TYPE_TOUCH = "touch";
  var POINTER_TYPE_PEN = "pen";
  var CLASS_NAME_POINTER_EVENT = "pointer-event";
  var SWIPE_THRESHOLD = 40;
  var Default$c = {
    endCallback: null,
    leftCallback: null,
    rightCallback: null
  };
  var DefaultType$c = {
    endCallback: "(function|null)",
    leftCallback: "(function|null)",
    rightCallback: "(function|null)"
  };
  var Swipe = class extends Config {
    constructor(element, config3) {
      super();
      this._element = element;
      if (!element || !Swipe.isSupported()) {
        return;
      }
      this._config = this._getConfig(config3);
      this._deltaX = 0;
      this._supportPointerEvents = Boolean(window.PointerEvent);
      this._initEvents();
    }
    static get Default() {
      return Default$c;
    }
    static get DefaultType() {
      return DefaultType$c;
    }
    static get NAME() {
      return NAME$d;
    }
    dispose() {
      EventHandler.off(this._element, EVENT_KEY$9);
    }
    _start(event) {
      if (!this._supportPointerEvents) {
        this._deltaX = event.touches[0].clientX;
        return;
      }
      if (this._eventIsPointerPenTouch(event)) {
        this._deltaX = event.clientX;
      }
    }
    _end(event) {
      if (this._eventIsPointerPenTouch(event)) {
        this._deltaX = event.clientX - this._deltaX;
      }
      this._handleSwipe();
      execute(this._config.endCallback);
    }
    _move(event) {
      this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
    }
    _handleSwipe() {
      const absDeltaX = Math.abs(this._deltaX);
      if (absDeltaX <= SWIPE_THRESHOLD) {
        return;
      }
      const direction = absDeltaX / this._deltaX;
      this._deltaX = 0;
      if (!direction) {
        return;
      }
      execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
    }
    _initEvents() {
      if (this._supportPointerEvents) {
        EventHandler.on(this._element, EVENT_POINTERDOWN, (event) => this._start(event));
        EventHandler.on(this._element, EVENT_POINTERUP, (event) => this._end(event));
        this._element.classList.add(CLASS_NAME_POINTER_EVENT);
      } else {
        EventHandler.on(this._element, EVENT_TOUCHSTART, (event) => this._start(event));
        EventHandler.on(this._element, EVENT_TOUCHMOVE, (event) => this._move(event));
        EventHandler.on(this._element, EVENT_TOUCHEND, (event) => this._end(event));
      }
    }
    _eventIsPointerPenTouch(event) {
      return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
    }
    static isSupported() {
      return "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
    }
  };
  var NAME$c = "carousel";
  var DATA_KEY$8 = "bs.carousel";
  var EVENT_KEY$8 = `.${DATA_KEY$8}`;
  var DATA_API_KEY$5 = ".data-api";
  var ARROW_LEFT_KEY$1 = "ArrowLeft";
  var ARROW_RIGHT_KEY$1 = "ArrowRight";
  var TOUCHEVENT_COMPAT_WAIT = 500;
  var ORDER_NEXT = "next";
  var ORDER_PREV = "prev";
  var DIRECTION_LEFT = "left";
  var DIRECTION_RIGHT = "right";
  var EVENT_SLIDE = `slide${EVENT_KEY$8}`;
  var EVENT_SLID = `slid${EVENT_KEY$8}`;
  var EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
  var EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
  var EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
  var EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
  var EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
  var EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
  var CLASS_NAME_CAROUSEL = "carousel";
  var CLASS_NAME_ACTIVE$2 = "active";
  var CLASS_NAME_SLIDE = "slide";
  var CLASS_NAME_END = "carousel-item-end";
  var CLASS_NAME_START = "carousel-item-start";
  var CLASS_NAME_NEXT = "carousel-item-next";
  var CLASS_NAME_PREV = "carousel-item-prev";
  var SELECTOR_ACTIVE = ".active";
  var SELECTOR_ITEM = ".carousel-item";
  var SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
  var SELECTOR_ITEM_IMG = ".carousel-item img";
  var SELECTOR_INDICATORS = ".carousel-indicators";
  var SELECTOR_DATA_SLIDE = "[data-bs-slide], [data-bs-slide-to]";
  var SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
  var KEY_TO_DIRECTION = {
    [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,
    [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT
  };
  var Default$b = {
    interval: 5e3,
    keyboard: true,
    pause: "hover",
    ride: false,
    touch: true,
    wrap: true
  };
  var DefaultType$b = {
    interval: "(number|boolean)",
    keyboard: "boolean",
    pause: "(string|boolean)",
    ride: "(boolean|string)",
    touch: "boolean",
    wrap: "boolean"
  };
  var Carousel = class extends BaseComponent {
    constructor(element, config3) {
      super(element, config3);
      this._interval = null;
      this._activeElement = null;
      this._isSliding = false;
      this.touchTimeout = null;
      this._swipeHelper = null;
      this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
      this._addEventListeners();
      if (this._config.ride === CLASS_NAME_CAROUSEL) {
        this.cycle();
      }
    }
    static get Default() {
      return Default$b;
    }
    static get DefaultType() {
      return DefaultType$b;
    }
    static get NAME() {
      return NAME$c;
    }
    next() {
      this._slide(ORDER_NEXT);
    }
    nextWhenVisible() {
      if (!document.hidden && isVisible(this._element)) {
        this.next();
      }
    }
    prev() {
      this._slide(ORDER_PREV);
    }
    pause() {
      if (this._isSliding) {
        triggerTransitionEnd(this._element);
      }
      this._clearInterval();
    }
    cycle() {
      this._clearInterval();
      this._updateInterval();
      this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);
    }
    _maybeEnableCycle() {
      if (!this._config.ride) {
        return;
      }
      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, () => this.cycle());
        return;
      }
      this.cycle();
    }
    to(index) {
      const items = this._getItems();
      if (index > items.length - 1 || index < 0) {
        return;
      }
      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, () => this.to(index));
        return;
      }
      const activeIndex = this._getItemIndex(this._getActive());
      if (activeIndex === index) {
        return;
      }
      const order2 = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
      this._slide(order2, items[index]);
    }
    dispose() {
      if (this._swipeHelper) {
        this._swipeHelper.dispose();
      }
      super.dispose();
    }
    _configAfterMerge(config3) {
      config3.defaultInterval = config3.interval;
      return config3;
    }
    _addEventListeners() {
      if (this._config.keyboard) {
        EventHandler.on(this._element, EVENT_KEYDOWN$1, (event) => this._keydown(event));
      }
      if (this._config.pause === "hover") {
        EventHandler.on(this._element, EVENT_MOUSEENTER$1, () => this.pause());
        EventHandler.on(this._element, EVENT_MOUSELEAVE$1, () => this._maybeEnableCycle());
      }
      if (this._config.touch && Swipe.isSupported()) {
        this._addTouchEventListeners();
      }
    }
    _addTouchEventListeners() {
      for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {
        EventHandler.on(img, EVENT_DRAG_START, (event) => event.preventDefault());
      }
      const endCallBack = () => {
        if (this._config.pause !== "hover") {
          return;
        }
        this.pause();
        if (this.touchTimeout) {
          clearTimeout(this.touchTimeout);
        }
        this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
      };
      const swipeConfig = {
        leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),
        rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),
        endCallback: endCallBack
      };
      this._swipeHelper = new Swipe(this._element, swipeConfig);
    }
    _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }
      const direction = KEY_TO_DIRECTION[event.key];
      if (direction) {
        event.preventDefault();
        this._slide(this._directionToOrder(direction));
      }
    }
    _getItemIndex(element) {
      return this._getItems().indexOf(element);
    }
    _setActiveIndicatorElement(index) {
      if (!this._indicatorsElement) {
        return;
      }
      const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
      activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
      activeIndicator.removeAttribute("aria-current");
      const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index}"]`, this._indicatorsElement);
      if (newActiveIndicator) {
        newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
        newActiveIndicator.setAttribute("aria-current", "true");
      }
    }
    _updateInterval() {
      const element = this._activeElement || this._getActive();
      if (!element) {
        return;
      }
      const elementInterval = Number.parseInt(element.getAttribute("data-bs-interval"), 10);
      this._config.interval = elementInterval || this._config.defaultInterval;
    }
    _slide(order2, element = null) {
      if (this._isSliding) {
        return;
      }
      const activeElement = this._getActive();
      const isNext = order2 === ORDER_NEXT;
      const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
      if (nextElement === activeElement) {
        return;
      }
      const nextElementIndex = this._getItemIndex(nextElement);
      const triggerEvent = (eventName) => {
        return EventHandler.trigger(this._element, eventName, {
          relatedTarget: nextElement,
          direction: this._orderToDirection(order2),
          from: this._getItemIndex(activeElement),
          to: nextElementIndex
        });
      };
      const slideEvent = triggerEvent(EVENT_SLIDE);
      if (slideEvent.defaultPrevented) {
        return;
      }
      if (!activeElement || !nextElement) {
        return;
      }
      const isCycling = Boolean(this._interval);
      this.pause();
      this._isSliding = true;
      this._setActiveIndicatorElement(nextElementIndex);
      this._activeElement = nextElement;
      const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
      const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
      nextElement.classList.add(orderClassName);
      reflow(nextElement);
      activeElement.classList.add(directionalClassName);
      nextElement.classList.add(directionalClassName);
      const completeCallBack = () => {
        nextElement.classList.remove(directionalClassName, orderClassName);
        nextElement.classList.add(CLASS_NAME_ACTIVE$2);
        activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
        this._isSliding = false;
        triggerEvent(EVENT_SLID);
      };
      this._queueCallback(completeCallBack, activeElement, this._isAnimated());
      if (isCycling) {
        this.cycle();
      }
    }
    _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_SLIDE);
    }
    _getActive() {
      return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
    }
    _getItems() {
      return SelectorEngine.find(SELECTOR_ITEM, this._element);
    }
    _clearInterval() {
      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }
    }
    _directionToOrder(direction) {
      if (isRTL()) {
        return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
      }
      return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
    }
    _orderToDirection(order2) {
      if (isRTL()) {
        return order2 === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
      }
      return order2 === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = Carousel.getOrCreateInstance(this, config3);
        if (typeof config3 === "number") {
          data.to(config3);
          return;
        }
        if (typeof config3 === "string") {
          if (data[config3] === void 0 || config3.startsWith("_") || config3 === "constructor") {
            throw new TypeError(`No method named "${config3}"`);
          }
          data[config3]();
        }
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {
    const target = getElementFromSelector(this);
    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
      return;
    }
    event.preventDefault();
    const carousel = Carousel.getOrCreateInstance(target);
    const slideIndex = this.getAttribute("data-bs-slide-to");
    if (slideIndex) {
      carousel.to(slideIndex);
      carousel._maybeEnableCycle();
      return;
    }
    if (Manipulator.getDataAttribute(this, "slide") === "next") {
      carousel.next();
      carousel._maybeEnableCycle();
      return;
    }
    carousel.prev();
    carousel._maybeEnableCycle();
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$3, () => {
    const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
    for (const carousel of carousels) {
      Carousel.getOrCreateInstance(carousel);
    }
  });
  defineJQueryPlugin(Carousel);
  var NAME$b = "collapse";
  var DATA_KEY$7 = "bs.collapse";
  var EVENT_KEY$7 = `.${DATA_KEY$7}`;
  var DATA_API_KEY$4 = ".data-api";
  var EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
  var EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
  var EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
  var EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
  var EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
  var CLASS_NAME_SHOW$7 = "show";
  var CLASS_NAME_COLLAPSE = "collapse";
  var CLASS_NAME_COLLAPSING = "collapsing";
  var CLASS_NAME_COLLAPSED = "collapsed";
  var CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
  var CLASS_NAME_HORIZONTAL = "collapse-horizontal";
  var WIDTH = "width";
  var HEIGHT = "height";
  var SELECTOR_ACTIVES = ".collapse.show, .collapse.collapsing";
  var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
  var Default$a = {
    parent: null,
    toggle: true
  };
  var DefaultType$a = {
    parent: "(null|element)",
    toggle: "boolean"
  };
  var Collapse = class extends BaseComponent {
    constructor(element, config3) {
      super(element, config3);
      this._isTransitioning = false;
      this._triggerArray = [];
      const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
      for (const elem of toggleList) {
        const selector = getSelectorFromElement(elem);
        const filterElement = SelectorEngine.find(selector).filter((foundElement) => foundElement === this._element);
        if (selector !== null && filterElement.length) {
          this._triggerArray.push(elem);
        }
      }
      this._initializeChildren();
      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
      }
      if (this._config.toggle) {
        this.toggle();
      }
    }
    static get Default() {
      return Default$a;
    }
    static get DefaultType() {
      return DefaultType$a;
    }
    static get NAME() {
      return NAME$b;
    }
    toggle() {
      if (this._isShown()) {
        this.hide();
      } else {
        this.show();
      }
    }
    show() {
      if (this._isTransitioning || this._isShown()) {
        return;
      }
      let activeChildren = [];
      if (this._config.parent) {
        activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element) => element !== this._element).map((element) => Collapse.getOrCreateInstance(element, {
          toggle: false
        }));
      }
      if (activeChildren.length && activeChildren[0]._isTransitioning) {
        return;
      }
      const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
      if (startEvent.defaultPrevented) {
        return;
      }
      for (const activeInstance of activeChildren) {
        activeInstance.hide();
      }
      const dimension = this._getDimension();
      this._element.classList.remove(CLASS_NAME_COLLAPSE);
      this._element.classList.add(CLASS_NAME_COLLAPSING);
      this._element.style[dimension] = 0;
      this._addAriaAndCollapsedClass(this._triggerArray, true);
      this._isTransitioning = true;
      const complete = () => {
        this._isTransitioning = false;
        this._element.classList.remove(CLASS_NAME_COLLAPSING);
        this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
        this._element.style[dimension] = "";
        EventHandler.trigger(this._element, EVENT_SHOWN$6);
      };
      const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      const scrollSize = `scroll${capitalizedDimension}`;
      this._queueCallback(complete, this._element, true);
      this._element.style[dimension] = `${this._element[scrollSize]}px`;
    }
    hide() {
      if (this._isTransitioning || !this._isShown()) {
        return;
      }
      const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
      if (startEvent.defaultPrevented) {
        return;
      }
      const dimension = this._getDimension();
      this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_COLLAPSING);
      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
      for (const trigger of this._triggerArray) {
        const element = getElementFromSelector(trigger);
        if (element && !this._isShown(element)) {
          this._addAriaAndCollapsedClass([trigger], false);
        }
      }
      this._isTransitioning = true;
      const complete = () => {
        this._isTransitioning = false;
        this._element.classList.remove(CLASS_NAME_COLLAPSING);
        this._element.classList.add(CLASS_NAME_COLLAPSE);
        EventHandler.trigger(this._element, EVENT_HIDDEN$6);
      };
      this._element.style[dimension] = "";
      this._queueCallback(complete, this._element, true);
    }
    _isShown(element = this._element) {
      return element.classList.contains(CLASS_NAME_SHOW$7);
    }
    _configAfterMerge(config3) {
      config3.toggle = Boolean(config3.toggle);
      config3.parent = getElement(config3.parent);
      return config3;
    }
    _getDimension() {
      return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
    }
    _initializeChildren() {
      if (!this._config.parent) {
        return;
      }
      const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
      for (const element of children) {
        const selected = getElementFromSelector(element);
        if (selected) {
          this._addAriaAndCollapsedClass([element], this._isShown(selected));
        }
      }
    }
    _getFirstLevelChildren(selector) {
      const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
      return SelectorEngine.find(selector, this._config.parent).filter((element) => !children.includes(element));
    }
    _addAriaAndCollapsedClass(triggerArray, isOpen) {
      if (!triggerArray.length) {
        return;
      }
      for (const element of triggerArray) {
        element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
        element.setAttribute("aria-expanded", isOpen);
      }
    }
    static jQueryInterface(config3) {
      const _config = {};
      if (typeof config3 === "string" && /show|hide/.test(config3)) {
        _config.toggle = false;
      }
      return this.each(function() {
        const data = Collapse.getOrCreateInstance(this, _config);
        if (typeof config3 === "string") {
          if (typeof data[config3] === "undefined") {
            throw new TypeError(`No method named "${config3}"`);
          }
          data[config3]();
        }
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {
    if (event.target.tagName === "A" || event.delegateTarget && event.delegateTarget.tagName === "A") {
      event.preventDefault();
    }
    const selector = getSelectorFromElement(this);
    const selectorElements = SelectorEngine.find(selector);
    for (const element of selectorElements) {
      Collapse.getOrCreateInstance(element, {
        toggle: false
      }).toggle();
    }
  });
  defineJQueryPlugin(Collapse);
  var NAME$a = "dropdown";
  var DATA_KEY$6 = "bs.dropdown";
  var EVENT_KEY$6 = `.${DATA_KEY$6}`;
  var DATA_API_KEY$3 = ".data-api";
  var ESCAPE_KEY$2 = "Escape";
  var TAB_KEY$1 = "Tab";
  var ARROW_UP_KEY$1 = "ArrowUp";
  var ARROW_DOWN_KEY$1 = "ArrowDown";
  var RIGHT_MOUSE_BUTTON = 2;
  var EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
  var EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
  var EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
  var EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
  var EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
  var EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
  var EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
  var CLASS_NAME_SHOW$6 = "show";
  var CLASS_NAME_DROPUP = "dropup";
  var CLASS_NAME_DROPEND = "dropend";
  var CLASS_NAME_DROPSTART = "dropstart";
  var CLASS_NAME_DROPUP_CENTER = "dropup-center";
  var CLASS_NAME_DROPDOWN_CENTER = "dropdown-center";
  var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
  var SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
  var SELECTOR_MENU = ".dropdown-menu";
  var SELECTOR_NAVBAR = ".navbar";
  var SELECTOR_NAVBAR_NAV = ".navbar-nav";
  var SELECTOR_VISIBLE_ITEMS = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
  var PLACEMENT_TOP = isRTL() ? "top-end" : "top-start";
  var PLACEMENT_TOPEND = isRTL() ? "top-start" : "top-end";
  var PLACEMENT_BOTTOM = isRTL() ? "bottom-end" : "bottom-start";
  var PLACEMENT_BOTTOMEND = isRTL() ? "bottom-start" : "bottom-end";
  var PLACEMENT_RIGHT = isRTL() ? "left-start" : "right-start";
  var PLACEMENT_LEFT = isRTL() ? "right-start" : "left-start";
  var PLACEMENT_TOPCENTER = "top";
  var PLACEMENT_BOTTOMCENTER = "bottom";
  var Default$9 = {
    autoClose: true,
    boundary: "clippingParents",
    display: "dynamic",
    offset: [0, 2],
    popperConfig: null,
    reference: "toggle"
  };
  var DefaultType$9 = {
    autoClose: "(boolean|string)",
    boundary: "(string|element)",
    display: "string",
    offset: "(array|string|function)",
    popperConfig: "(null|object|function)",
    reference: "(string|element|object)"
  };
  var Dropdown = class extends BaseComponent {
    constructor(element, config3) {
      super(element, config3);
      this._popper = null;
      this._parent = this._element.parentNode;
      this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);
      this._inNavbar = this._detectNavbar();
    }
    static get Default() {
      return Default$9;
    }
    static get DefaultType() {
      return DefaultType$9;
    }
    static get NAME() {
      return NAME$a;
    }
    toggle() {
      return this._isShown() ? this.hide() : this.show();
    }
    show() {
      if (isDisabled(this._element) || this._isShown()) {
        return;
      }
      const relatedTarget = {
        relatedTarget: this._element
      };
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
      if (showEvent.defaultPrevented) {
        return;
      }
      this._createPopper();
      if ("ontouchstart" in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, "mouseover", noop);
        }
      }
      this._element.focus();
      this._element.setAttribute("aria-expanded", true);
      this._menu.classList.add(CLASS_NAME_SHOW$6);
      this._element.classList.add(CLASS_NAME_SHOW$6);
      EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
    }
    hide() {
      if (isDisabled(this._element) || !this._isShown()) {
        return;
      }
      const relatedTarget = {
        relatedTarget: this._element
      };
      this._completeHide(relatedTarget);
    }
    dispose() {
      if (this._popper) {
        this._popper.destroy();
      }
      super.dispose();
    }
    update() {
      this._inNavbar = this._detectNavbar();
      if (this._popper) {
        this._popper.update();
      }
    }
    _completeHide(relatedTarget) {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
      if (hideEvent.defaultPrevented) {
        return;
      }
      if ("ontouchstart" in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, "mouseover", noop);
        }
      }
      if (this._popper) {
        this._popper.destroy();
      }
      this._menu.classList.remove(CLASS_NAME_SHOW$6);
      this._element.classList.remove(CLASS_NAME_SHOW$6);
      this._element.setAttribute("aria-expanded", "false");
      Manipulator.removeDataAttribute(this._menu, "popper");
      EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
    }
    _getConfig(config3) {
      config3 = super._getConfig(config3);
      if (typeof config3.reference === "object" && !isElement2(config3.reference) && typeof config3.reference.getBoundingClientRect !== "function") {
        throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
      }
      return config3;
    }
    _createPopper() {
      if (typeof lib_exports === "undefined") {
        throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
      }
      let referenceElement = this._element;
      if (this._config.reference === "parent") {
        referenceElement = this._parent;
      } else if (isElement2(this._config.reference)) {
        referenceElement = getElement(this._config.reference);
      } else if (typeof this._config.reference === "object") {
        referenceElement = this._config.reference;
      }
      const popperConfig = this._getPopperConfig();
      this._popper = createPopper3(referenceElement, this._menu, popperConfig);
    }
    _isShown() {
      return this._menu.classList.contains(CLASS_NAME_SHOW$6);
    }
    _getPlacement() {
      const parentDropdown = this._parent;
      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
        return PLACEMENT_RIGHT;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
        return PLACEMENT_LEFT;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
        return PLACEMENT_TOPCENTER;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
        return PLACEMENT_BOTTOMCENTER;
      }
      const isEnd = getComputedStyle(this._menu).getPropertyValue("--bs-position").trim() === "end";
      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
      }
      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
    }
    _detectNavbar() {
      return this._element.closest(SELECTOR_NAVBAR) !== null;
    }
    _getOffset() {
      const {
        offset: offset2
      } = this._config;
      if (typeof offset2 === "string") {
        return offset2.split(",").map((value) => Number.parseInt(value, 10));
      }
      if (typeof offset2 === "function") {
        return (popperData) => offset2(popperData, this._element);
      }
      return offset2;
    }
    _getPopperConfig() {
      const defaultBsPopperConfig = {
        placement: this._getPlacement(),
        modifiers: [{
          name: "preventOverflow",
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: "offset",
          options: {
            offset: this._getOffset()
          }
        }]
      };
      if (this._inNavbar || this._config.display === "static") {
        Manipulator.setDataAttribute(this._menu, "popper", "static");
        defaultBsPopperConfig.modifiers = [{
          name: "applyStyles",
          enabled: false
        }];
      }
      return {
        ...defaultBsPopperConfig,
        ...typeof this._config.popperConfig === "function" ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
      };
    }
    _selectMenuItem({
      key,
      target
    }) {
      const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element) => isVisible(element));
      if (!items.length) {
        return;
      }
      getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = Dropdown.getOrCreateInstance(this, config3);
        if (typeof config3 !== "string") {
          return;
        }
        if (typeof data[config3] === "undefined") {
          throw new TypeError(`No method named "${config3}"`);
        }
        data[config3]();
      });
    }
    static clearMenus(event) {
      if (event.button === RIGHT_MOUSE_BUTTON || event.type === "keyup" && event.key !== TAB_KEY$1) {
        return;
      }
      const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
      for (const toggle of openToggles) {
        const context2 = Dropdown.getInstance(toggle);
        if (!context2 || context2._config.autoClose === false) {
          continue;
        }
        const composedPath = event.composedPath();
        const isMenuTarget = composedPath.includes(context2._menu);
        if (composedPath.includes(context2._element) || context2._config.autoClose === "inside" && !isMenuTarget || context2._config.autoClose === "outside" && isMenuTarget) {
          continue;
        }
        if (context2._menu.contains(event.target) && (event.type === "keyup" && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
          continue;
        }
        const relatedTarget = {
          relatedTarget: context2._element
        };
        if (event.type === "click") {
          relatedTarget.clickEvent = event;
        }
        context2._completeHide(relatedTarget);
      }
    }
    static dataApiKeydownHandler(event) {
      const isInput = /input|textarea/i.test(event.target.tagName);
      const isEscapeEvent = event.key === ESCAPE_KEY$2;
      const isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);
      if (!isUpOrDownEvent && !isEscapeEvent) {
        return;
      }
      if (isInput && !isEscapeEvent) {
        return;
      }
      event.preventDefault();
      const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
      const instance = Dropdown.getOrCreateInstance(getToggleButton);
      if (isUpOrDownEvent) {
        event.stopPropagation();
        instance.show();
        instance._selectMenuItem(event);
        return;
      }
      if (instance._isShown()) {
        event.stopPropagation();
        instance.hide();
        getToggleButton.focus();
      }
    }
  };
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });
  defineJQueryPlugin(Dropdown);
  var SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
  var SELECTOR_STICKY_CONTENT = ".sticky-top";
  var PROPERTY_PADDING = "padding-right";
  var PROPERTY_MARGIN = "margin-right";
  var ScrollBarHelper = class {
    constructor() {
      this._element = document.body;
    }
    getWidth() {
      const documentWidth = document.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }
    hide() {
      const width = this.getWidth();
      this._disableOverFlow();
      this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
      this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
      this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue) => calculatedValue - width);
    }
    reset() {
      this._resetElementAttributes(this._element, "overflow");
      this._resetElementAttributes(this._element, PROPERTY_PADDING);
      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
    }
    isOverflowing() {
      return this.getWidth() > 0;
    }
    _disableOverFlow() {
      this._saveInitialAttribute(this._element, "overflow");
      this._element.style.overflow = "hidden";
    }
    _setElementAttributes(selector, styleProperty, callback) {
      const scrollbarWidth = this.getWidth();
      const manipulationCallBack = (element) => {
        if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
          return;
        }
        this._saveInitialAttribute(element, styleProperty);
        const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
        element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
      };
      this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _saveInitialAttribute(element, styleProperty) {
      const actualValue = element.style.getPropertyValue(styleProperty);
      if (actualValue) {
        Manipulator.setDataAttribute(element, styleProperty, actualValue);
      }
    }
    _resetElementAttributes(selector, styleProperty) {
      const manipulationCallBack = (element) => {
        const value = Manipulator.getDataAttribute(element, styleProperty);
        if (value === null) {
          element.style.removeProperty(styleProperty);
          return;
        }
        Manipulator.removeDataAttribute(element, styleProperty);
        element.style.setProperty(styleProperty, value);
      };
      this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _applyManipulationCallback(selector, callBack) {
      if (isElement2(selector)) {
        callBack(selector);
        return;
      }
      for (const sel of SelectorEngine.find(selector, this._element)) {
        callBack(sel);
      }
    }
  };
  var NAME$9 = "backdrop";
  var CLASS_NAME_FADE$4 = "fade";
  var CLASS_NAME_SHOW$5 = "show";
  var EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
  var Default$8 = {
    className: "modal-backdrop",
    clickCallback: null,
    isAnimated: false,
    isVisible: true,
    rootElement: "body"
  };
  var DefaultType$8 = {
    className: "string",
    clickCallback: "(function|null)",
    isAnimated: "boolean",
    isVisible: "boolean",
    rootElement: "(element|string)"
  };
  var Backdrop = class extends Config {
    constructor(config3) {
      super();
      this._config = this._getConfig(config3);
      this._isAppended = false;
      this._element = null;
    }
    static get Default() {
      return Default$8;
    }
    static get DefaultType() {
      return DefaultType$8;
    }
    static get NAME() {
      return NAME$9;
    }
    show(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }
      this._append();
      const element = this._getElement();
      if (this._config.isAnimated) {
        reflow(element);
      }
      element.classList.add(CLASS_NAME_SHOW$5);
      this._emulateAnimation(() => {
        execute(callback);
      });
    }
    hide(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }
      this._getElement().classList.remove(CLASS_NAME_SHOW$5);
      this._emulateAnimation(() => {
        this.dispose();
        execute(callback);
      });
    }
    dispose() {
      if (!this._isAppended) {
        return;
      }
      EventHandler.off(this._element, EVENT_MOUSEDOWN);
      this._element.remove();
      this._isAppended = false;
    }
    _getElement() {
      if (!this._element) {
        const backdrop = document.createElement("div");
        backdrop.className = this._config.className;
        if (this._config.isAnimated) {
          backdrop.classList.add(CLASS_NAME_FADE$4);
        }
        this._element = backdrop;
      }
      return this._element;
    }
    _configAfterMerge(config3) {
      config3.rootElement = getElement(config3.rootElement);
      return config3;
    }
    _append() {
      if (this._isAppended) {
        return;
      }
      const element = this._getElement();
      this._config.rootElement.append(element);
      EventHandler.on(element, EVENT_MOUSEDOWN, () => {
        execute(this._config.clickCallback);
      });
      this._isAppended = true;
    }
    _emulateAnimation(callback) {
      executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
    }
  };
  var NAME$8 = "focustrap";
  var DATA_KEY$5 = "bs.focustrap";
  var EVENT_KEY$5 = `.${DATA_KEY$5}`;
  var EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
  var EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
  var TAB_KEY = "Tab";
  var TAB_NAV_FORWARD = "forward";
  var TAB_NAV_BACKWARD = "backward";
  var Default$7 = {
    autofocus: true,
    trapElement: null
  };
  var DefaultType$7 = {
    autofocus: "boolean",
    trapElement: "element"
  };
  var FocusTrap = class extends Config {
    constructor(config3) {
      super();
      this._config = this._getConfig(config3);
      this._isActive = false;
      this._lastTabNavDirection = null;
    }
    static get Default() {
      return Default$7;
    }
    static get DefaultType() {
      return DefaultType$7;
    }
    static get NAME() {
      return NAME$8;
    }
    activate() {
      if (this._isActive) {
        return;
      }
      if (this._config.autofocus) {
        this._config.trapElement.focus();
      }
      EventHandler.off(document, EVENT_KEY$5);
      EventHandler.on(document, EVENT_FOCUSIN$2, (event) => this._handleFocusin(event));
      EventHandler.on(document, EVENT_KEYDOWN_TAB, (event) => this._handleKeydown(event));
      this._isActive = true;
    }
    deactivate() {
      if (!this._isActive) {
        return;
      }
      this._isActive = false;
      EventHandler.off(document, EVENT_KEY$5);
    }
    _handleFocusin(event) {
      const {
        trapElement
      } = this._config;
      if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
        return;
      }
      const elements = SelectorEngine.focusableChildren(trapElement);
      if (elements.length === 0) {
        trapElement.focus();
      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
        elements[elements.length - 1].focus();
      } else {
        elements[0].focus();
      }
    }
    _handleKeydown(event) {
      if (event.key !== TAB_KEY) {
        return;
      }
      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
    }
  };
  var NAME$7 = "modal";
  var DATA_KEY$4 = "bs.modal";
  var EVENT_KEY$4 = `.${DATA_KEY$4}`;
  var DATA_API_KEY$2 = ".data-api";
  var ESCAPE_KEY$1 = "Escape";
  var EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
  var EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
  var EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
  var EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
  var EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
  var EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
  var EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;
  var EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
  var EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
  var EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
  var CLASS_NAME_OPEN = "modal-open";
  var CLASS_NAME_FADE$3 = "fade";
  var CLASS_NAME_SHOW$4 = "show";
  var CLASS_NAME_STATIC = "modal-static";
  var OPEN_SELECTOR$1 = ".modal.show";
  var SELECTOR_DIALOG = ".modal-dialog";
  var SELECTOR_MODAL_BODY = ".modal-body";
  var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
  var Default$6 = {
    backdrop: true,
    focus: true,
    keyboard: true
  };
  var DefaultType$6 = {
    backdrop: "(boolean|string)",
    focus: "boolean",
    keyboard: "boolean"
  };
  var Modal = class extends BaseComponent {
    constructor(element, config3) {
      super(element, config3);
      this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();
      this._isShown = false;
      this._isTransitioning = false;
      this._scrollBar = new ScrollBarHelper();
      this._addEventListeners();
    }
    static get Default() {
      return Default$6;
    }
    static get DefaultType() {
      return DefaultType$6;
    }
    static get NAME() {
      return NAME$7;
    }
    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
      if (this._isShown || this._isTransitioning) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
        relatedTarget
      });
      if (showEvent.defaultPrevented) {
        return;
      }
      this._isShown = true;
      this._isTransitioning = true;
      this._scrollBar.hide();
      document.body.classList.add(CLASS_NAME_OPEN);
      this._adjustDialog();
      this._backdrop.show(() => this._showElement(relatedTarget));
    }
    hide() {
      if (!this._isShown || this._isTransitioning) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
      if (hideEvent.defaultPrevented) {
        return;
      }
      this._isShown = false;
      this._isTransitioning = true;
      this._focustrap.deactivate();
      this._element.classList.remove(CLASS_NAME_SHOW$4);
      this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());
    }
    dispose() {
      for (const htmlElement of [window, this._dialog]) {
        EventHandler.off(htmlElement, EVENT_KEY$4);
      }
      this._backdrop.dispose();
      this._focustrap.deactivate();
      super.dispose();
    }
    handleUpdate() {
      this._adjustDialog();
    }
    _initializeBackDrop() {
      return new Backdrop({
        isVisible: Boolean(this._config.backdrop),
        isAnimated: this._isAnimated()
      });
    }
    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
    _showElement(relatedTarget) {
      if (!document.body.contains(this._element)) {
        document.body.append(this._element);
      }
      this._element.style.display = "block";
      this._element.removeAttribute("aria-hidden");
      this._element.setAttribute("aria-modal", true);
      this._element.setAttribute("role", "dialog");
      this._element.scrollTop = 0;
      const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
      if (modalBody) {
        modalBody.scrollTop = 0;
      }
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_SHOW$4);
      const transitionComplete = () => {
        if (this._config.focus) {
          this._focustrap.activate();
        }
        this._isTransitioning = false;
        EventHandler.trigger(this._element, EVENT_SHOWN$4, {
          relatedTarget
        });
      };
      this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
    }
    _addEventListeners() {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event) => {
        if (event.key !== ESCAPE_KEY$1) {
          return;
        }
        if (this._config.keyboard) {
          event.preventDefault();
          this.hide();
          return;
        }
        this._triggerBackdropTransition();
      });
      EventHandler.on(window, EVENT_RESIZE$1, () => {
        if (this._isShown && !this._isTransitioning) {
          this._adjustDialog();
        }
      });
      EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event) => {
        EventHandler.one(this._element, EVENT_CLICK_DISMISS, (event2) => {
          if (this._element !== event.target || this._element !== event2.target) {
            return;
          }
          if (this._config.backdrop === "static") {
            this._triggerBackdropTransition();
            return;
          }
          if (this._config.backdrop) {
            this.hide();
          }
        });
      });
    }
    _hideModal() {
      this._element.style.display = "none";
      this._element.setAttribute("aria-hidden", true);
      this._element.removeAttribute("aria-modal");
      this._element.removeAttribute("role");
      this._isTransitioning = false;
      this._backdrop.hide(() => {
        document.body.classList.remove(CLASS_NAME_OPEN);
        this._resetAdjustments();
        this._scrollBar.reset();
        EventHandler.trigger(this._element, EVENT_HIDDEN$4);
      });
    }
    _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_FADE$3);
    }
    _triggerBackdropTransition() {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
      if (hideEvent.defaultPrevented) {
        return;
      }
      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
      const initialOverflowY = this._element.style.overflowY;
      if (initialOverflowY === "hidden" || this._element.classList.contains(CLASS_NAME_STATIC)) {
        return;
      }
      if (!isModalOverflowing) {
        this._element.style.overflowY = "hidden";
      }
      this._element.classList.add(CLASS_NAME_STATIC);
      this._queueCallback(() => {
        this._element.classList.remove(CLASS_NAME_STATIC);
        this._queueCallback(() => {
          this._element.style.overflowY = initialOverflowY;
        }, this._dialog);
      }, this._dialog);
      this._element.focus();
    }
    _adjustDialog() {
      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
      const scrollbarWidth = this._scrollBar.getWidth();
      const isBodyOverflowing = scrollbarWidth > 0;
      if (isBodyOverflowing && !isModalOverflowing) {
        const property = isRTL() ? "paddingLeft" : "paddingRight";
        this._element.style[property] = `${scrollbarWidth}px`;
      }
      if (!isBodyOverflowing && isModalOverflowing) {
        const property = isRTL() ? "paddingRight" : "paddingLeft";
        this._element.style[property] = `${scrollbarWidth}px`;
      }
    }
    _resetAdjustments() {
      this._element.style.paddingLeft = "";
      this._element.style.paddingRight = "";
    }
    static jQueryInterface(config3, relatedTarget) {
      return this.each(function() {
        const data = Modal.getOrCreateInstance(this, config3);
        if (typeof config3 !== "string") {
          return;
        }
        if (typeof data[config3] === "undefined") {
          throw new TypeError(`No method named "${config3}"`);
        }
        data[config3](relatedTarget);
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
    const target = getElementFromSelector(this);
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    EventHandler.one(target, EVENT_SHOW$4, (showEvent) => {
      if (showEvent.defaultPrevented) {
        return;
      }
      EventHandler.one(target, EVENT_HIDDEN$4, () => {
        if (isVisible(this)) {
          this.focus();
        }
      });
    });
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
    if (alreadyOpen) {
      Modal.getInstance(alreadyOpen).hide();
    }
    const data = Modal.getOrCreateInstance(target);
    data.toggle(this);
  });
  enableDismissTrigger(Modal);
  defineJQueryPlugin(Modal);
  var NAME$6 = "offcanvas";
  var DATA_KEY$3 = "bs.offcanvas";
  var EVENT_KEY$3 = `.${DATA_KEY$3}`;
  var DATA_API_KEY$1 = ".data-api";
  var EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
  var ESCAPE_KEY = "Escape";
  var CLASS_NAME_SHOW$3 = "show";
  var CLASS_NAME_SHOWING$1 = "showing";
  var CLASS_NAME_HIDING = "hiding";
  var CLASS_NAME_BACKDROP = "offcanvas-backdrop";
  var OPEN_SELECTOR = ".offcanvas.show";
  var EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
  var EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
  var EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
  var EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
  var EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
  var EVENT_RESIZE = `resize${EVENT_KEY$3}`;
  var EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
  var EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
  var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
  var Default$5 = {
    backdrop: true,
    keyboard: true,
    scroll: false
  };
  var DefaultType$5 = {
    backdrop: "(boolean|string)",
    keyboard: "boolean",
    scroll: "boolean"
  };
  var Offcanvas = class extends BaseComponent {
    constructor(element, config3) {
      super(element, config3);
      this._isShown = false;
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();
      this._addEventListeners();
    }
    static get Default() {
      return Default$5;
    }
    static get DefaultType() {
      return DefaultType$5;
    }
    static get NAME() {
      return NAME$6;
    }
    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
      if (this._isShown) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
        relatedTarget
      });
      if (showEvent.defaultPrevented) {
        return;
      }
      this._isShown = true;
      this._backdrop.show();
      if (!this._config.scroll) {
        new ScrollBarHelper().hide();
      }
      this._element.setAttribute("aria-modal", true);
      this._element.setAttribute("role", "dialog");
      this._element.classList.add(CLASS_NAME_SHOWING$1);
      const completeCallBack = () => {
        if (!this._config.scroll || this._config.backdrop) {
          this._focustrap.activate();
        }
        this._element.classList.add(CLASS_NAME_SHOW$3);
        this._element.classList.remove(CLASS_NAME_SHOWING$1);
        EventHandler.trigger(this._element, EVENT_SHOWN$3, {
          relatedTarget
        });
      };
      this._queueCallback(completeCallBack, this._element, true);
    }
    hide() {
      if (!this._isShown) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
      if (hideEvent.defaultPrevented) {
        return;
      }
      this._focustrap.deactivate();
      this._element.blur();
      this._isShown = false;
      this._element.classList.add(CLASS_NAME_HIDING);
      this._backdrop.hide();
      const completeCallback = () => {
        this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
        this._element.removeAttribute("aria-modal");
        this._element.removeAttribute("role");
        if (!this._config.scroll) {
          new ScrollBarHelper().reset();
        }
        EventHandler.trigger(this._element, EVENT_HIDDEN$3);
      };
      this._queueCallback(completeCallback, this._element, true);
    }
    dispose() {
      this._backdrop.dispose();
      this._focustrap.deactivate();
      super.dispose();
    }
    _initializeBackDrop() {
      const clickCallback = () => {
        if (this._config.backdrop === "static") {
          EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
          return;
        }
        this.hide();
      };
      const isVisible2 = Boolean(this._config.backdrop);
      return new Backdrop({
        className: CLASS_NAME_BACKDROP,
        isVisible: isVisible2,
        isAnimated: true,
        rootElement: this._element.parentNode,
        clickCallback: isVisible2 ? clickCallback : null
      });
    }
    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
    _addEventListeners() {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event) => {
        if (event.key !== ESCAPE_KEY) {
          return;
        }
        if (!this._config.keyboard) {
          EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
          return;
        }
        this.hide();
      });
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = Offcanvas.getOrCreateInstance(this, config3);
        if (typeof config3 !== "string") {
          return;
        }
        if (data[config3] === void 0 || config3.startsWith("_") || config3 === "constructor") {
          throw new TypeError(`No method named "${config3}"`);
        }
        data[config3](this);
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
    const target = getElementFromSelector(this);
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    EventHandler.one(target, EVENT_HIDDEN$3, () => {
      if (isVisible(this)) {
        this.focus();
      }
    });
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
    if (alreadyOpen && alreadyOpen !== target) {
      Offcanvas.getInstance(alreadyOpen).hide();
    }
    const data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
    for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {
      Offcanvas.getOrCreateInstance(selector).show();
    }
  });
  EventHandler.on(window, EVENT_RESIZE, () => {
    for (const element of SelectorEngine.find("[aria-modal][class*=show][class*=offcanvas-]")) {
      if (getComputedStyle(element).position !== "fixed") {
        Offcanvas.getOrCreateInstance(element).hide();
      }
    }
  });
  enableDismissTrigger(Offcanvas);
  defineJQueryPlugin(Offcanvas);
  var uriAttributes = /* @__PURE__ */ new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]);
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
  var allowedAttribute = (attribute, allowedAttributeList) => {
    const attributeName = attribute.nodeName.toLowerCase();
    if (allowedAttributeList.includes(attributeName)) {
      if (uriAttributes.has(attributeName)) {
        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
      }
      return true;
    }
    return allowedAttributeList.filter((attributeRegex) => attributeRegex instanceof RegExp).some((regex) => regex.test(attributeName));
  };
  var DefaultAllowlist = {
    "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
    a: ["target", "href", "title", "rel"],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ["src", "srcset", "alt", "title", "width", "height"],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
    if (!unsafeHtml.length) {
      return unsafeHtml;
    }
    if (sanitizeFunction && typeof sanitizeFunction === "function") {
      return sanitizeFunction(unsafeHtml);
    }
    const domParser = new window.DOMParser();
    const createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
    const elements = [].concat(...createdDocument.body.querySelectorAll("*"));
    for (const element of elements) {
      const elementName = element.nodeName.toLowerCase();
      if (!Object.keys(allowList).includes(elementName)) {
        element.remove();
        continue;
      }
      const attributeList = [].concat(...element.attributes);
      const allowedAttributes = [].concat(allowList["*"] || [], allowList[elementName] || []);
      for (const attribute of attributeList) {
        if (!allowedAttribute(attribute, allowedAttributes)) {
          element.removeAttribute(attribute.nodeName);
        }
      }
    }
    return createdDocument.body.innerHTML;
  }
  var NAME$5 = "TemplateFactory";
  var Default$4 = {
    allowList: DefaultAllowlist,
    content: {},
    extraClass: "",
    html: false,
    sanitize: true,
    sanitizeFn: null,
    template: "<div></div>"
  };
  var DefaultType$4 = {
    allowList: "object",
    content: "object",
    extraClass: "(string|function)",
    html: "boolean",
    sanitize: "boolean",
    sanitizeFn: "(null|function)",
    template: "string"
  };
  var DefaultContentType = {
    entry: "(string|element|function|null)",
    selector: "(string|element)"
  };
  var TemplateFactory = class extends Config {
    constructor(config3) {
      super();
      this._config = this._getConfig(config3);
    }
    static get Default() {
      return Default$4;
    }
    static get DefaultType() {
      return DefaultType$4;
    }
    static get NAME() {
      return NAME$5;
    }
    getContent() {
      return Object.values(this._config.content).map((config3) => this._resolvePossibleFunction(config3)).filter(Boolean);
    }
    hasContent() {
      return this.getContent().length > 0;
    }
    changeContent(content) {
      this._checkContent(content);
      this._config.content = {
        ...this._config.content,
        ...content
      };
      return this;
    }
    toHtml() {
      const templateWrapper = document.createElement("div");
      templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
      for (const [selector, text] of Object.entries(this._config.content)) {
        this._setContent(templateWrapper, text, selector);
      }
      const template = templateWrapper.children[0];
      const extraClass = this._resolvePossibleFunction(this._config.extraClass);
      if (extraClass) {
        template.classList.add(...extraClass.split(" "));
      }
      return template;
    }
    _typeCheckConfig(config3) {
      super._typeCheckConfig(config3);
      this._checkContent(config3.content);
    }
    _checkContent(arg) {
      for (const [selector, content] of Object.entries(arg)) {
        super._typeCheckConfig({
          selector,
          entry: content
        }, DefaultContentType);
      }
    }
    _setContent(template, content, selector) {
      const templateElement = SelectorEngine.findOne(selector, template);
      if (!templateElement) {
        return;
      }
      content = this._resolvePossibleFunction(content);
      if (!content) {
        templateElement.remove();
        return;
      }
      if (isElement2(content)) {
        this._putElementInTemplate(getElement(content), templateElement);
        return;
      }
      if (this._config.html) {
        templateElement.innerHTML = this._maybeSanitize(content);
        return;
      }
      templateElement.textContent = content;
    }
    _maybeSanitize(arg) {
      return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
    }
    _resolvePossibleFunction(arg) {
      return typeof arg === "function" ? arg(this) : arg;
    }
    _putElementInTemplate(element, templateElement) {
      if (this._config.html) {
        templateElement.innerHTML = "";
        templateElement.append(element);
        return;
      }
      templateElement.textContent = element.textContent;
    }
  };
  var NAME$4 = "tooltip";
  var DISALLOWED_ATTRIBUTES = /* @__PURE__ */ new Set(["sanitize", "allowList", "sanitizeFn"]);
  var CLASS_NAME_FADE$2 = "fade";
  var CLASS_NAME_MODAL = "modal";
  var CLASS_NAME_SHOW$2 = "show";
  var SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
  var SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
  var EVENT_MODAL_HIDE = "hide.bs.modal";
  var TRIGGER_HOVER = "hover";
  var TRIGGER_FOCUS = "focus";
  var TRIGGER_CLICK = "click";
  var TRIGGER_MANUAL = "manual";
  var EVENT_HIDE$2 = "hide";
  var EVENT_HIDDEN$2 = "hidden";
  var EVENT_SHOW$2 = "show";
  var EVENT_SHOWN$2 = "shown";
  var EVENT_INSERTED = "inserted";
  var EVENT_CLICK$1 = "click";
  var EVENT_FOCUSIN$1 = "focusin";
  var EVENT_FOCUSOUT$1 = "focusout";
  var EVENT_MOUSEENTER = "mouseenter";
  var EVENT_MOUSELEAVE = "mouseleave";
  var AttachmentMap = {
    AUTO: "auto",
    TOP: "top",
    RIGHT: isRTL() ? "left" : "right",
    BOTTOM: "bottom",
    LEFT: isRTL() ? "right" : "left"
  };
  var Default$3 = {
    allowList: DefaultAllowlist,
    animation: true,
    boundary: "clippingParents",
    container: false,
    customClass: "",
    delay: 0,
    fallbackPlacements: ["top", "right", "bottom", "left"],
    html: false,
    offset: [0, 0],
    placement: "top",
    popperConfig: null,
    sanitize: true,
    sanitizeFn: null,
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    title: "",
    trigger: "hover focus"
  };
  var DefaultType$3 = {
    allowList: "object",
    animation: "boolean",
    boundary: "(string|element)",
    container: "(string|element|boolean)",
    customClass: "(string|function)",
    delay: "(number|object)",
    fallbackPlacements: "array",
    html: "boolean",
    offset: "(array|string|function)",
    placement: "(string|function)",
    popperConfig: "(null|object|function)",
    sanitize: "boolean",
    sanitizeFn: "(null|function)",
    selector: "(string|boolean)",
    template: "string",
    title: "(string|element|function)",
    trigger: "string"
  };
  var Tooltip = class extends BaseComponent {
    constructor(element, config3) {
      if (typeof lib_exports === "undefined") {
        throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
      }
      super(element, config3);
      this._isEnabled = true;
      this._timeout = 0;
      this._isHovered = null;
      this._activeTrigger = {};
      this._popper = null;
      this._templateFactory = null;
      this._newContent = null;
      this.tip = null;
      this._setListeners();
      if (!this._config.selector) {
        this._fixTitle();
      }
    }
    static get Default() {
      return Default$3;
    }
    static get DefaultType() {
      return DefaultType$3;
    }
    static get NAME() {
      return NAME$4;
    }
    enable() {
      this._isEnabled = true;
    }
    disable() {
      this._isEnabled = false;
    }
    toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }
    toggle() {
      if (!this._isEnabled) {
        return;
      }
      this._activeTrigger.click = !this._activeTrigger.click;
      if (this._isShown()) {
        this._leave();
        return;
      }
      this._enter();
    }
    dispose() {
      clearTimeout(this._timeout);
      EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
      if (this._element.getAttribute("data-bs-original-title")) {
        this._element.setAttribute("title", this._element.getAttribute("data-bs-original-title"));
      }
      this._disposePopper();
      super.dispose();
    }
    show() {
      if (this._element.style.display === "none") {
        throw new Error("Please use show on visible elements");
      }
      if (!(this._isWithContent() && this._isEnabled)) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
      const shadowRoot = findShadowRoot(this._element);
      const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
      if (showEvent.defaultPrevented || !isInTheDom) {
        return;
      }
      this._disposePopper();
      const tip = this._getTipElement();
      this._element.setAttribute("aria-describedby", tip.getAttribute("id"));
      const {
        container
      } = this._config;
      if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
        container.append(tip);
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
      }
      this._popper = this._createPopper(tip);
      tip.classList.add(CLASS_NAME_SHOW$2);
      if ("ontouchstart" in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, "mouseover", noop);
        }
      }
      const complete = () => {
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));
        if (this._isHovered === false) {
          this._leave();
        }
        this._isHovered = false;
      };
      this._queueCallback(complete, this.tip, this._isAnimated());
    }
    hide() {
      if (!this._isShown()) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
      if (hideEvent.defaultPrevented) {
        return;
      }
      const tip = this._getTipElement();
      tip.classList.remove(CLASS_NAME_SHOW$2);
      if ("ontouchstart" in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, "mouseover", noop);
        }
      }
      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;
      this._isHovered = null;
      const complete = () => {
        if (this._isWithActiveTrigger()) {
          return;
        }
        if (!this._isHovered) {
          this._disposePopper();
        }
        this._element.removeAttribute("aria-describedby");
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
      };
      this._queueCallback(complete, this.tip, this._isAnimated());
    }
    update() {
      if (this._popper) {
        this._popper.update();
      }
    }
    _isWithContent() {
      return Boolean(this._getTitle());
    }
    _getTipElement() {
      if (!this.tip) {
        this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
      }
      return this.tip;
    }
    _createTipElement(content) {
      const tip = this._getTemplateFactory(content).toHtml();
      if (!tip) {
        return null;
      }
      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
      tip.classList.add(`bs-${this.constructor.NAME}-auto`);
      const tipId = getUID(this.constructor.NAME).toString();
      tip.setAttribute("id", tipId);
      if (this._isAnimated()) {
        tip.classList.add(CLASS_NAME_FADE$2);
      }
      return tip;
    }
    setContent(content) {
      this._newContent = content;
      if (this._isShown()) {
        this._disposePopper();
        this.show();
      }
    }
    _getTemplateFactory(content) {
      if (this._templateFactory) {
        this._templateFactory.changeContent(content);
      } else {
        this._templateFactory = new TemplateFactory({
          ...this._config,
          content,
          extraClass: this._resolvePossibleFunction(this._config.customClass)
        });
      }
      return this._templateFactory;
    }
    _getContentForTemplate() {
      return {
        [SELECTOR_TOOLTIP_INNER]: this._getTitle()
      };
    }
    _getTitle() {
      return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute("data-bs-original-title");
    }
    _initializeOnDelegatedTarget(event) {
      return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
    }
    _isAnimated() {
      return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
    }
    _isShown() {
      return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
    }
    _createPopper(tip) {
      const placement = typeof this._config.placement === "function" ? this._config.placement.call(this, tip, this._element) : this._config.placement;
      const attachment = AttachmentMap[placement.toUpperCase()];
      return createPopper3(this._element, tip, this._getPopperConfig(attachment));
    }
    _getOffset() {
      const {
        offset: offset2
      } = this._config;
      if (typeof offset2 === "string") {
        return offset2.split(",").map((value) => Number.parseInt(value, 10));
      }
      if (typeof offset2 === "function") {
        return (popperData) => offset2(popperData, this._element);
      }
      return offset2;
    }
    _resolvePossibleFunction(arg) {
      return typeof arg === "function" ? arg.call(this._element) : arg;
    }
    _getPopperConfig(attachment) {
      const defaultBsPopperConfig = {
        placement: attachment,
        modifiers: [{
          name: "flip",
          options: {
            fallbackPlacements: this._config.fallbackPlacements
          }
        }, {
          name: "offset",
          options: {
            offset: this._getOffset()
          }
        }, {
          name: "preventOverflow",
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: "arrow",
          options: {
            element: `.${this.constructor.NAME}-arrow`
          }
        }, {
          name: "preSetPlacement",
          enabled: true,
          phase: "beforeMain",
          fn: (data) => {
            this._getTipElement().setAttribute("data-popper-placement", data.state.placement);
          }
        }]
      };
      return {
        ...defaultBsPopperConfig,
        ...typeof this._config.popperConfig === "function" ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
      };
    }
    _setListeners() {
      const triggers = this._config.trigger.split(" ");
      for (const trigger of triggers) {
        if (trigger === "click") {
          EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event) => {
            const context2 = this._initializeOnDelegatedTarget(event);
            context2.toggle();
          });
        } else if (trigger !== TRIGGER_MANUAL) {
          const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
          const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
          EventHandler.on(this._element, eventIn, this._config.selector, (event) => {
            const context2 = this._initializeOnDelegatedTarget(event);
            context2._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
            context2._enter();
          });
          EventHandler.on(this._element, eventOut, this._config.selector, (event) => {
            const context2 = this._initializeOnDelegatedTarget(event);
            context2._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = context2._element.contains(event.relatedTarget);
            context2._leave();
          });
        }
      }
      this._hideModalHandler = () => {
        if (this._element) {
          this.hide();
        }
      };
      EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
    }
    _fixTitle() {
      const title = this._element.getAttribute("title");
      if (!title) {
        return;
      }
      if (!this._element.getAttribute("aria-label") && !this._element.textContent.trim()) {
        this._element.setAttribute("aria-label", title);
      }
      this._element.setAttribute("data-bs-original-title", title);
      this._element.removeAttribute("title");
    }
    _enter() {
      if (this._isShown() || this._isHovered) {
        this._isHovered = true;
        return;
      }
      this._isHovered = true;
      this._setTimeout(() => {
        if (this._isHovered) {
          this.show();
        }
      }, this._config.delay.show);
    }
    _leave() {
      if (this._isWithActiveTrigger()) {
        return;
      }
      this._isHovered = false;
      this._setTimeout(() => {
        if (!this._isHovered) {
          this.hide();
        }
      }, this._config.delay.hide);
    }
    _setTimeout(handler, timeout) {
      clearTimeout(this._timeout);
      this._timeout = setTimeout(handler, timeout);
    }
    _isWithActiveTrigger() {
      return Object.values(this._activeTrigger).includes(true);
    }
    _getConfig(config3) {
      const dataAttributes = Manipulator.getDataAttributes(this._element);
      for (const dataAttribute of Object.keys(dataAttributes)) {
        if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
          delete dataAttributes[dataAttribute];
        }
      }
      config3 = {
        ...dataAttributes,
        ...typeof config3 === "object" && config3 ? config3 : {}
      };
      config3 = this._mergeConfigObj(config3);
      config3 = this._configAfterMerge(config3);
      this._typeCheckConfig(config3);
      return config3;
    }
    _configAfterMerge(config3) {
      config3.container = config3.container === false ? document.body : getElement(config3.container);
      if (typeof config3.delay === "number") {
        config3.delay = {
          show: config3.delay,
          hide: config3.delay
        };
      }
      if (typeof config3.title === "number") {
        config3.title = config3.title.toString();
      }
      if (typeof config3.content === "number") {
        config3.content = config3.content.toString();
      }
      return config3;
    }
    _getDelegateConfig() {
      const config3 = {};
      for (const key in this._config) {
        if (this.constructor.Default[key] !== this._config[key]) {
          config3[key] = this._config[key];
        }
      }
      config3.selector = false;
      config3.trigger = "manual";
      return config3;
    }
    _disposePopper() {
      if (this._popper) {
        this._popper.destroy();
        this._popper = null;
      }
      if (this.tip) {
        this.tip.remove();
        this.tip = null;
      }
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = Tooltip.getOrCreateInstance(this, config3);
        if (typeof config3 !== "string") {
          return;
        }
        if (typeof data[config3] === "undefined") {
          throw new TypeError(`No method named "${config3}"`);
        }
        data[config3]();
      });
    }
  };
  defineJQueryPlugin(Tooltip);
  var NAME$3 = "popover";
  var SELECTOR_TITLE = ".popover-header";
  var SELECTOR_CONTENT = ".popover-body";
  var Default$2 = {
    ...Tooltip.Default,
    content: "",
    offset: [0, 8],
    placement: "right",
    template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
    trigger: "click"
  };
  var DefaultType$2 = {
    ...Tooltip.DefaultType,
    content: "(null|string|element|function)"
  };
  var Popover = class extends Tooltip {
    static get Default() {
      return Default$2;
    }
    static get DefaultType() {
      return DefaultType$2;
    }
    static get NAME() {
      return NAME$3;
    }
    _isWithContent() {
      return this._getTitle() || this._getContent();
    }
    _getContentForTemplate() {
      return {
        [SELECTOR_TITLE]: this._getTitle(),
        [SELECTOR_CONTENT]: this._getContent()
      };
    }
    _getContent() {
      return this._resolvePossibleFunction(this._config.content);
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = Popover.getOrCreateInstance(this, config3);
        if (typeof config3 !== "string") {
          return;
        }
        if (typeof data[config3] === "undefined") {
          throw new TypeError(`No method named "${config3}"`);
        }
        data[config3]();
      });
    }
  };
  defineJQueryPlugin(Popover);
  var NAME$2 = "scrollspy";
  var DATA_KEY$2 = "bs.scrollspy";
  var EVENT_KEY$2 = `.${DATA_KEY$2}`;
  var DATA_API_KEY = ".data-api";
  var EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
  var EVENT_CLICK = `click${EVENT_KEY$2}`;
  var EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
  var CLASS_NAME_DROPDOWN_ITEM = "dropdown-item";
  var CLASS_NAME_ACTIVE$1 = "active";
  var SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
  var SELECTOR_TARGET_LINKS = "[href]";
  var SELECTOR_NAV_LIST_GROUP = ".nav, .list-group";
  var SELECTOR_NAV_LINKS = ".nav-link";
  var SELECTOR_NAV_ITEMS = ".nav-item";
  var SELECTOR_LIST_ITEMS = ".list-group-item";
  var SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
  var SELECTOR_DROPDOWN = ".dropdown";
  var SELECTOR_DROPDOWN_TOGGLE$1 = ".dropdown-toggle";
  var Default$1 = {
    offset: null,
    rootMargin: "0px 0px -25%",
    smoothScroll: false,
    target: null,
    threshold: [0.1, 0.5, 1]
  };
  var DefaultType$1 = {
    offset: "(number|null)",
    rootMargin: "string",
    smoothScroll: "boolean",
    target: "element",
    threshold: "array"
  };
  var ScrollSpy = class extends BaseComponent {
    constructor(element, config3) {
      super(element, config3);
      this._targetLinks = /* @__PURE__ */ new Map();
      this._observableSections = /* @__PURE__ */ new Map();
      this._rootElement = getComputedStyle(this._element).overflowY === "visible" ? null : this._element;
      this._activeTarget = null;
      this._observer = null;
      this._previousScrollData = {
        visibleEntryTop: 0,
        parentScrollTop: 0
      };
      this.refresh();
    }
    static get Default() {
      return Default$1;
    }
    static get DefaultType() {
      return DefaultType$1;
    }
    static get NAME() {
      return NAME$2;
    }
    refresh() {
      this._initializeTargetsAndObservables();
      this._maybeEnableSmoothScroll();
      if (this._observer) {
        this._observer.disconnect();
      } else {
        this._observer = this._getNewObserver();
      }
      for (const section2 of this._observableSections.values()) {
        this._observer.observe(section2);
      }
    }
    dispose() {
      this._observer.disconnect();
      super.dispose();
    }
    _configAfterMerge(config3) {
      config3.target = getElement(config3.target) || document.body;
      config3.rootMargin = config3.offset ? `${config3.offset}px 0px -30%` : config3.rootMargin;
      if (typeof config3.threshold === "string") {
        config3.threshold = config3.threshold.split(",").map((value) => Number.parseFloat(value));
      }
      return config3;
    }
    _maybeEnableSmoothScroll() {
      if (!this._config.smoothScroll) {
        return;
      }
      EventHandler.off(this._config.target, EVENT_CLICK);
      EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event) => {
        const observableSection = this._observableSections.get(event.target.hash);
        if (observableSection) {
          event.preventDefault();
          const root = this._rootElement || window;
          const height = observableSection.offsetTop - this._element.offsetTop;
          if (root.scrollTo) {
            root.scrollTo({
              top: height,
              behavior: "smooth"
            });
            return;
          }
          root.scrollTop = height;
        }
      });
    }
    _getNewObserver() {
      const options = {
        root: this._rootElement,
        threshold: this._config.threshold,
        rootMargin: this._config.rootMargin
      };
      return new IntersectionObserver((entries) => this._observerCallback(entries), options);
    }
    _observerCallback(entries) {
      const targetElement = (entry) => this._targetLinks.get(`#${entry.target.id}`);
      const activate = (entry) => {
        this._previousScrollData.visibleEntryTop = entry.target.offsetTop;
        this._process(targetElement(entry));
      };
      const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
      const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
      this._previousScrollData.parentScrollTop = parentScrollTop;
      for (const entry of entries) {
        if (!entry.isIntersecting) {
          this._activeTarget = null;
          this._clearActiveClass(targetElement(entry));
          continue;
        }
        const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;
        if (userScrollsDown && entryIsLowerThanPrevious) {
          activate(entry);
          if (!parentScrollTop) {
            return;
          }
          continue;
        }
        if (!userScrollsDown && !entryIsLowerThanPrevious) {
          activate(entry);
        }
      }
    }
    _initializeTargetsAndObservables() {
      this._targetLinks = /* @__PURE__ */ new Map();
      this._observableSections = /* @__PURE__ */ new Map();
      const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
      for (const anchor of targetLinks) {
        if (!anchor.hash || isDisabled(anchor)) {
          continue;
        }
        const observableSection = SelectorEngine.findOne(anchor.hash, this._element);
        if (isVisible(observableSection)) {
          this._targetLinks.set(anchor.hash, anchor);
          this._observableSections.set(anchor.hash, observableSection);
        }
      }
    }
    _process(target) {
      if (this._activeTarget === target) {
        return;
      }
      this._clearActiveClass(this._config.target);
      this._activeTarget = target;
      target.classList.add(CLASS_NAME_ACTIVE$1);
      this._activateParents(target);
      EventHandler.trigger(this._element, EVENT_ACTIVATE, {
        relatedTarget: target
      });
    }
    _activateParents(target) {
      if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
        return;
      }
      for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {
        for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {
          item.classList.add(CLASS_NAME_ACTIVE$1);
        }
      }
    }
    _clearActiveClass(parent) {
      parent.classList.remove(CLASS_NAME_ACTIVE$1);
      const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);
      for (const node of activeNodes) {
        node.classList.remove(CLASS_NAME_ACTIVE$1);
      }
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = ScrollSpy.getOrCreateInstance(this, config3);
        if (typeof config3 !== "string") {
          return;
        }
        if (data[config3] === void 0 || config3.startsWith("_") || config3 === "constructor") {
          throw new TypeError(`No method named "${config3}"`);
        }
        data[config3]();
      });
    }
  };
  EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => {
    for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {
      ScrollSpy.getOrCreateInstance(spy);
    }
  });
  defineJQueryPlugin(ScrollSpy);
  var NAME$1 = "tab";
  var DATA_KEY$1 = "bs.tab";
  var EVENT_KEY$1 = `.${DATA_KEY$1}`;
  var EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
  var EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
  var EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
  var EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
  var EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
  var EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
  var EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
  var ARROW_LEFT_KEY = "ArrowLeft";
  var ARROW_RIGHT_KEY = "ArrowRight";
  var ARROW_UP_KEY = "ArrowUp";
  var ARROW_DOWN_KEY = "ArrowDown";
  var CLASS_NAME_ACTIVE = "active";
  var CLASS_NAME_FADE$1 = "fade";
  var CLASS_NAME_SHOW$1 = "show";
  var CLASS_DROPDOWN = "dropdown";
  var SELECTOR_DROPDOWN_TOGGLE = ".dropdown-toggle";
  var SELECTOR_DROPDOWN_MENU = ".dropdown-menu";
  var NOT_SELECTOR_DROPDOWN_TOGGLE = ":not(.dropdown-toggle)";
  var SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
  var SELECTOR_OUTER = ".nav-item, .list-group-item";
  var SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
  var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
  var SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
  var SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;
  var Tab = class extends BaseComponent {
    constructor(element) {
      super(element);
      this._parent = this._element.closest(SELECTOR_TAB_PANEL);
      if (!this._parent) {
        return;
      }
      this._setInitialAttributes(this._parent, this._getChildren());
      EventHandler.on(this._element, EVENT_KEYDOWN, (event) => this._keydown(event));
    }
    static get NAME() {
      return NAME$1;
    }
    show() {
      const innerElem = this._element;
      if (this._elemIsActive(innerElem)) {
        return;
      }
      const active = this._getActiveElem();
      const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
        relatedTarget: innerElem
      }) : null;
      const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
        relatedTarget: active
      });
      if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
        return;
      }
      this._deactivate(active, innerElem);
      this._activate(innerElem, active);
    }
    _activate(element, relatedElem) {
      if (!element) {
        return;
      }
      element.classList.add(CLASS_NAME_ACTIVE);
      this._activate(getElementFromSelector(element));
      const complete = () => {
        if (element.getAttribute("role") !== "tab") {
          element.classList.add(CLASS_NAME_SHOW$1);
          return;
        }
        element.removeAttribute("tabindex");
        element.setAttribute("aria-selected", true);
        this._toggleDropDown(element, true);
        EventHandler.trigger(element, EVENT_SHOWN$1, {
          relatedTarget: relatedElem
        });
      };
      this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _deactivate(element, relatedElem) {
      if (!element) {
        return;
      }
      element.classList.remove(CLASS_NAME_ACTIVE);
      element.blur();
      this._deactivate(getElementFromSelector(element));
      const complete = () => {
        if (element.getAttribute("role") !== "tab") {
          element.classList.remove(CLASS_NAME_SHOW$1);
          return;
        }
        element.setAttribute("aria-selected", false);
        element.setAttribute("tabindex", "-1");
        this._toggleDropDown(element, false);
        EventHandler.trigger(element, EVENT_HIDDEN$1, {
          relatedTarget: relatedElem
        });
      };
      this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _keydown(event) {
      if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
      const nextActiveElement = getNextActiveElement(this._getChildren().filter((element) => !isDisabled(element)), event.target, isNext, true);
      if (nextActiveElement) {
        nextActiveElement.focus({
          preventScroll: true
        });
        Tab.getOrCreateInstance(nextActiveElement).show();
      }
    }
    _getChildren() {
      return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
    }
    _getActiveElem() {
      return this._getChildren().find((child) => this._elemIsActive(child)) || null;
    }
    _setInitialAttributes(parent, children) {
      this._setAttributeIfNotExists(parent, "role", "tablist");
      for (const child of children) {
        this._setInitialAttributesOnChild(child);
      }
    }
    _setInitialAttributesOnChild(child) {
      child = this._getInnerElement(child);
      const isActive = this._elemIsActive(child);
      const outerElem = this._getOuterElement(child);
      child.setAttribute("aria-selected", isActive);
      if (outerElem !== child) {
        this._setAttributeIfNotExists(outerElem, "role", "presentation");
      }
      if (!isActive) {
        child.setAttribute("tabindex", "-1");
      }
      this._setAttributeIfNotExists(child, "role", "tab");
      this._setInitialAttributesOnTargetPanel(child);
    }
    _setInitialAttributesOnTargetPanel(child) {
      const target = getElementFromSelector(child);
      if (!target) {
        return;
      }
      this._setAttributeIfNotExists(target, "role", "tabpanel");
      if (child.id) {
        this._setAttributeIfNotExists(target, "aria-labelledby", `#${child.id}`);
      }
    }
    _toggleDropDown(element, open) {
      const outerElem = this._getOuterElement(element);
      if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
        return;
      }
      const toggle = (selector, className) => {
        const element2 = SelectorEngine.findOne(selector, outerElem);
        if (element2) {
          element2.classList.toggle(className, open);
        }
      };
      toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
      toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
      outerElem.setAttribute("aria-expanded", open);
    }
    _setAttributeIfNotExists(element, attribute, value) {
      if (!element.hasAttribute(attribute)) {
        element.setAttribute(attribute, value);
      }
    }
    _elemIsActive(elem) {
      return elem.classList.contains(CLASS_NAME_ACTIVE);
    }
    _getInnerElement(elem) {
      return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
    }
    _getOuterElement(elem) {
      return elem.closest(SELECTOR_OUTER) || elem;
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = Tab.getOrCreateInstance(this);
        if (typeof config3 !== "string") {
          return;
        }
        if (data[config3] === void 0 || config3.startsWith("_") || config3 === "constructor") {
          throw new TypeError(`No method named "${config3}"`);
        }
        data[config3]();
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    Tab.getOrCreateInstance(this).show();
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
    for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {
      Tab.getOrCreateInstance(element);
    }
  });
  defineJQueryPlugin(Tab);
  var NAME = "toast";
  var DATA_KEY = "bs.toast";
  var EVENT_KEY = `.${DATA_KEY}`;
  var EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
  var EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
  var EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
  var EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
  var EVENT_HIDE = `hide${EVENT_KEY}`;
  var EVENT_HIDDEN = `hidden${EVENT_KEY}`;
  var EVENT_SHOW = `show${EVENT_KEY}`;
  var EVENT_SHOWN = `shown${EVENT_KEY}`;
  var CLASS_NAME_FADE = "fade";
  var CLASS_NAME_HIDE = "hide";
  var CLASS_NAME_SHOW = "show";
  var CLASS_NAME_SHOWING = "showing";
  var DefaultType = {
    animation: "boolean",
    autohide: "boolean",
    delay: "number"
  };
  var Default = {
    animation: true,
    autohide: true,
    delay: 5e3
  };
  var Toast = class extends BaseComponent {
    constructor(element, config3) {
      super(element, config3);
      this._timeout = null;
      this._hasMouseInteraction = false;
      this._hasKeyboardInteraction = false;
      this._setListeners();
    }
    static get Default() {
      return Default;
    }
    static get DefaultType() {
      return DefaultType;
    }
    static get NAME() {
      return NAME;
    }
    show() {
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
      if (showEvent.defaultPrevented) {
        return;
      }
      this._clearTimeout();
      if (this._config.animation) {
        this._element.classList.add(CLASS_NAME_FADE);
      }
      const complete = () => {
        this._element.classList.remove(CLASS_NAME_SHOWING);
        EventHandler.trigger(this._element, EVENT_SHOWN);
        this._maybeScheduleHide();
      };
      this._element.classList.remove(CLASS_NAME_HIDE);
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
      this._queueCallback(complete, this._element, this._config.animation);
    }
    hide() {
      if (!this.isShown()) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
      if (hideEvent.defaultPrevented) {
        return;
      }
      const complete = () => {
        this._element.classList.add(CLASS_NAME_HIDE);
        this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
        EventHandler.trigger(this._element, EVENT_HIDDEN);
      };
      this._element.classList.add(CLASS_NAME_SHOWING);
      this._queueCallback(complete, this._element, this._config.animation);
    }
    dispose() {
      this._clearTimeout();
      if (this.isShown()) {
        this._element.classList.remove(CLASS_NAME_SHOW);
      }
      super.dispose();
    }
    isShown() {
      return this._element.classList.contains(CLASS_NAME_SHOW);
    }
    _maybeScheduleHide() {
      if (!this._config.autohide) {
        return;
      }
      if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
        return;
      }
      this._timeout = setTimeout(() => {
        this.hide();
      }, this._config.delay);
    }
    _onInteraction(event, isInteracting) {
      switch (event.type) {
        case "mouseover":
        case "mouseout": {
          this._hasMouseInteraction = isInteracting;
          break;
        }
        case "focusin":
        case "focusout": {
          this._hasKeyboardInteraction = isInteracting;
          break;
        }
      }
      if (isInteracting) {
        this._clearTimeout();
        return;
      }
      const nextElement = event.relatedTarget;
      if (this._element === nextElement || this._element.contains(nextElement)) {
        return;
      }
      this._maybeScheduleHide();
    }
    _setListeners() {
      EventHandler.on(this._element, EVENT_MOUSEOVER, (event) => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_MOUSEOUT, (event) => this._onInteraction(event, false));
      EventHandler.on(this._element, EVENT_FOCUSIN, (event) => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_FOCUSOUT, (event) => this._onInteraction(event, false));
    }
    _clearTimeout() {
      clearTimeout(this._timeout);
      this._timeout = null;
    }
    static jQueryInterface(config3) {
      return this.each(function() {
        const data = Toast.getOrCreateInstance(this, config3);
        if (typeof config3 === "string") {
          if (typeof data[config3] === "undefined") {
            throw new TypeError(`No method named "${config3}"`);
          }
          data[config3](this);
        }
      });
    }
  };
  enableDismissTrigger(Toast);
  defineJQueryPlugin(Toast);

  // src/lodash.js
  var import_lodash = __toESM(require_lodash());
  window._ = import_lodash.default;

  // ../../node_modules/@polkadot/x-global/index.js
  function evaluateThis(fn2) {
    return fn2("return this");
  }
  var xglobal = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis(Function);
  function extractGlobal(name, fallback) {
    return typeof xglobal[name] === "undefined" ? fallback : xglobal[name];
  }

  // ../../node_modules/@polkadot/x-textdecoder/fallback.js
  var TextDecoder2 = class {
    constructor(_3) {
    }
    decode(value) {
      let result = "";
      for (let i = 0; i < value.length; i++) {
        result += String.fromCharCode(value[i]);
      }
      return result;
    }
  };

  // ../../node_modules/@polkadot/x-textdecoder/browser.js
  var TextDecoder3 = /* @__PURE__ */ extractGlobal("TextDecoder", TextDecoder2);

  // ../../node_modules/@polkadot/x-textencoder/fallback.js
  var TextEncoder2 = class {
    encode(value) {
      const count = value.length;
      const u8a2 = new Uint8Array(count);
      for (let i = 0; i < count; i++) {
        u8a2[i] = value.charCodeAt(i);
      }
      return u8a2;
    }
  };

  // ../../node_modules/@polkadot/x-textencoder/browser.js
  var TextEncoder3 = /* @__PURE__ */ extractGlobal("TextEncoder", TextEncoder2);

  // ../../node_modules/@polkadot/util/is/function.js
  function isFunction(value) {
    return typeof value === "function";
  }

  // ../../node_modules/@polkadot/util/array/chunk.js
  function arrayChunk(array, chunkSize) {
    const outputSize = Math.ceil(array.length / chunkSize);
    if (outputSize === 1) {
      return [array];
    }
    const output2 = Array(outputSize);
    for (let i = 0; i < outputSize; i++) {
      const offset2 = i * chunkSize;
      output2[i] = array.slice(offset2, offset2 + chunkSize);
    }
    return output2;
  }

  // ../../node_modules/@polkadot/util/array/flatten.js
  function arrayFlatten(arrays) {
    if (arrays.length === 0) {
      return [];
    } else if (arrays.length === 1) {
      return arrays[0];
    }
    let size = 0;
    for (let i2 = 0; i2 < arrays.length; i2++) {
      size += arrays[i2].length;
    }
    const output2 = new Array(size);
    let i = -1;
    for (let j = 0; j < arrays.length; j++) {
      const a = arrays[j];
      for (let e = 0; e < a.length; e++) {
        output2[++i] = a[e];
      }
    }
    return output2;
  }

  // ../../node_modules/@polkadot/util/assert.js
  function assert(condition, message) {
    if (!condition) {
      throw new Error(isFunction(message) ? message() : message);
    }
  }
  function assertReturn(value, message) {
    assert(value !== void 0 && value !== null, message);
    return value;
  }
  function assertUnreachable(x) {
    throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
  }

  // ../../node_modules/@polkadot/util/bi/helpers.js
  function createCmp(cmp) {
    return (...items) => {
      if (items.length === 0) {
        throw new Error("Must provide one or more arguments");
      }
      let result = items[0];
      for (let i = 1; i < items.length; i++) {
        if (cmp(items[i], result)) {
          result = items[i];
        }
      }
      return result;
    };
  }

  // ../../node_modules/@polkadot/x-bigint/index.js
  function invalidFallback() {
    return Number.NaN;
  }
  var BigInt2 = /* @__PURE__ */ extractGlobal("BigInt", invalidFallback);

  // ../../node_modules/@polkadot/util/bi/consts.js
  var _0n = /* @__PURE__ */ BigInt2(0);
  var _1n = /* @__PURE__ */ BigInt2(1);
  var _1Bn = /* @__PURE__ */ BigInt2(1e9);
  var _1Qn = _1Bn * _1Bn;
  var _2pow53n = /* @__PURE__ */ BigInt2(Number.MAX_SAFE_INTEGER);

  // ../../node_modules/@polkadot/util/hex/toU8a.js
  var CHR = "0123456789abcdef";
  var U8 = new Uint8Array(256);
  var U16 = new Uint8Array(256 * 256);
  for (let i = 0; i < CHR.length; i++) {
    U8[CHR[i].charCodeAt(0) | 0] = i | 0;
    if (i > 9) {
      U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
    }
  }
  for (let i = 0; i < 256; i++) {
    const s = i << 8;
    for (let j = 0; j < 256; j++) {
      U16[s | j] = U8[i] << 4 | U8[j];
    }
  }
  function hexToU8a(value, bitLength = -1) {
    if (!value) {
      return new Uint8Array();
    }
    let s = value.startsWith("0x") ? 2 : 0;
    const decLength = Math.ceil((value.length - s) / 2);
    const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
    const result = new Uint8Array(endLength);
    const offset2 = endLength > decLength ? endLength - decLength : 0;
    for (let i = offset2; i < endLength; i++, s += 2) {
      result[i] = U16[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
    }
    return result;
  }

  // ../../node_modules/@polkadot/util/bn/bn.js
  var import_bn = __toESM(require_bn(), 1);

  // ../../node_modules/@polkadot/util/is/bn.js
  function isBn(value) {
    return import_bn.default.isBN(value);
  }

  // ../../node_modules/@polkadot/util/is/hex.js
  var REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
  var REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
  function isHex(value, bitLength = -1, ignoreLength) {
    return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
  }

  // ../../node_modules/@polkadot/util/is/object.js
  function isObject(value) {
    return !!value && typeof value === "object";
  }

  // ../../node_modules/@polkadot/util/is/helpers.js
  function isOn(...fns) {
    return (value) => (isObject(value) || isFunction(value)) && fns.every((f) => isFunction(value[f]));
  }
  function isOnFunction(...fns) {
    return (value) => isFunction(value) && fns.every((f) => isFunction(value[f]));
  }
  function isOnObject(...fns) {
    return (value) => isObject(value) && fns.every((f) => isFunction(value[f]));
  }

  // ../../node_modules/@polkadot/util/is/toBigInt.js
  var isToBigInt = /* @__PURE__ */ isOn("toBigInt");

  // ../../node_modules/@polkadot/util/is/toBn.js
  var isToBn = /* @__PURE__ */ isOn("toBn");

  // ../../node_modules/@polkadot/util/has.js
  var hasBigInt = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
  var hasBuffer = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
  var hasProcess = typeof xglobal.process === "object";

  // ../../node_modules/@polkadot/util/is/buffer.js
  function isBuffer(value) {
    return hasBuffer && !!value && isFunction(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
  }

  // ../../node_modules/@polkadot/util/is/u8a.js
  function isU8a(value) {
    return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
  }

  // ../../node_modules/@polkadot/util/string/toU8a.js
  var encoder = new TextEncoder3();
  function stringToU8a(value) {
    return value ? encoder.encode(value.toString()) : new Uint8Array();
  }

  // ../../node_modules/@polkadot/util/u8a/toU8a.js
  function u8aToU8a(value) {
    return isU8a(value) ? isBuffer(value) ? new Uint8Array(value) : value : isHex(value) ? hexToU8a(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a(value);
  }

  // ../../node_modules/@polkadot/util/u8a/concat.js
  function u8aConcat(...list) {
    const count = list.length;
    const u8as = new Array(count);
    let length = 0;
    for (let i = 0; i < count; i++) {
      u8as[i] = u8aToU8a(list[i]);
      length += u8as[i].length;
    }
    return u8aConcatStrict(u8as, length);
  }
  function u8aConcatStrict(u8as, length = 0) {
    let offset2 = 0;
    if (!length) {
      for (let i = 0; i < u8as.length; i++) {
        length += u8as[i].length;
      }
    }
    const result = new Uint8Array(length);
    for (let i = 0; i < u8as.length; i++) {
      result.set(u8as[i], offset2);
      offset2 += u8as[i].length;
    }
    return result;
  }

  // ../../node_modules/@polkadot/util/u8a/eq.js
  function u8aEq(a, b) {
    const u8aa = u8aToU8a(a);
    const u8ab = u8aToU8a(b);
    if (u8aa.length === u8ab.length) {
      const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
      const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
      const mod2 = u8aa.length % 4 | 0;
      const length = u8aa.length - mod2 | 0;
      for (let i = 0; i < length; i += 4) {
        if (dvA.getUint32(i) !== dvB.getUint32(i)) {
          return false;
        }
      }
      for (let i = length; i < u8aa.length; i++) {
        if (u8aa[i] !== u8ab[i]) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  // ../../node_modules/@polkadot/util/u8a/toBn.js
  function u8aToBn(value, { isLe = true, isNegative = false } = {}) {
    const count = value.length;
    if (isNegative) {
      if (isLe) {
        switch (count) {
          case 0:
            return new import_bn.default(0);
          case 1:
            return new import_bn.default((value[0] ^ 255) * -1 - 1);
          case 2:
            return new import_bn.default((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
          case 3:
            return new import_bn.default((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
          case 4:
            return new import_bn.default((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
          case 5:
            return new import_bn.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
          case 6:
            return new import_bn.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
          default:
            return new import_bn.default(value, "le").fromTwos(value.length * 8);
        }
      }
      if (count === 0) {
        return new import_bn.default(0);
      } else if (count > 6) {
        return new import_bn.default(value, "be").fromTwos(value.length * 8);
      }
      let result2 = 0;
      for (let i = 0; i < count; i++) {
        result2 = result2 * 256 + (value[i] ^ 255);
      }
      return new import_bn.default(result2 * -1 - 1);
    }
    if (isLe) {
      switch (count) {
        case 0:
          return new import_bn.default(0);
        case 1:
          return new import_bn.default(value[0]);
        case 2:
          return new import_bn.default(value[0] + (value[1] << 8));
        case 3:
          return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16));
        case 4:
          return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
        case 5:
          return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
        case 6:
          return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
        default:
          return new import_bn.default(value, "le");
      }
    }
    if (count === 0) {
      return new import_bn.default(0);
    } else if (count > 6) {
      return new import_bn.default(value, "be");
    }
    let result = 0;
    for (let i = 0; i < count; i++) {
      result = result * 256 + value[i];
    }
    return new import_bn.default(result);
  }

  // ../../node_modules/@polkadot/util/u8a/toFloat.js
  function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
      throw new Error("Invalid bitLength provided, expected 32 or 64");
    } else if (value.length < bitLength / 8) {
      throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
    }
    const dv = new DataView(value.buffer, value.byteOffset);
    return bitLength === 32 ? dv.getFloat32(0, isLe) : dv.getFloat64(0, isLe);
  }

  // ../../node_modules/@polkadot/util/u8a/toHex.js
  var U82 = new Array(256);
  var U162 = new Array(256 * 256);
  for (let n = 0; n < 256; n++) {
    U82[n] = n.toString(16).padStart(2, "0");
  }
  for (let i = 0; i < 256; i++) {
    const s = i << 8;
    for (let j = 0; j < 256; j++) {
      U162[s | j] = U82[i] + U82[j];
    }
  }
  function hex(value, result) {
    const mod2 = value.length % 2 | 0;
    const length = value.length - mod2 | 0;
    for (let i = 0; i < length; i += 2) {
      result += U162[value[i] << 8 | value[i + 1]];
    }
    if (mod2) {
      result += U82[value[length] | 0];
    }
    return result;
  }
  function u8aToHex(value, bitLength = -1, isPrefixed = true) {
    const empty2 = isPrefixed ? "0x" : "";
    if (!value || !value.length) {
      return empty2;
    } else if (bitLength > 0) {
      const length = Math.ceil(bitLength / 8);
      if (value.length > length) {
        return `${hex(value.subarray(0, length / 2), empty2)}\u2026${hex(value.subarray(value.length - length / 2), "")}`;
      }
    }
    return hex(value, empty2);
  }

  // ../../node_modules/@polkadot/util/u8a/toNumber.js
  function u8aToNumber(value, { isNegative = false } = {}) {
    const count = value.length;
    if (isNegative) {
      switch (count) {
        case 0:
          return 0;
        case 1:
          return (value[0] ^ 255) * -1 - 1;
        case 2:
          return (value[0] + (value[1] << 8) ^ 65535) * -1 - 1;
        case 3:
          return (value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1;
        case 4:
          return (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1;
        case 5:
          return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1;
        case 6:
          return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1;
        default:
          throw new Error("Value more than 48-bits cannot be reliably converted");
      }
    }
    switch (count) {
      case 0:
        return 0;
      case 1:
        return value[0];
      case 2:
        return value[0] + (value[1] << 8);
      case 3:
        return value[0] + (value[1] << 8) + (value[2] << 16);
      case 4:
        return value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216;
      case 5:
        return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216;
      case 6:
        return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216;
      default:
        throw new Error("Value more than 48-bits cannot be reliably converted");
    }
  }

  // ../../node_modules/@polkadot/util/u8a/toString.js
  var decoder = new TextDecoder3("utf-8");
  function u8aToString(value) {
    return value ? decoder.decode(value) : "";
  }

  // ../../node_modules/@polkadot/util/hex/stripPrefix.js
  function hexStripPrefix(value) {
    if (!value || value === "0x") {
      return "";
    } else if (REGEX_HEX_PREFIXED.test(value)) {
      return value.substring(2);
    } else if (REGEX_HEX_NOPREFIX.test(value)) {
      return value;
    }
    throw new Error(`Expected hex value to convert, found '${value}'`);
  }

  // ../../node_modules/@polkadot/util/hex/toBn.js
  function hexToBn(value, { isLe = false, isNegative = false } = {}) {
    if (!value || value === "0x") {
      return new import_bn.default(0);
    }
    const stripped = hexStripPrefix(value);
    const bn = new import_bn.default(stripped, 16, isLe ? "le" : "be");
    return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
  }

  // ../../node_modules/@polkadot/util/bn/min.js
  var bnMax = /* @__PURE__ */ createCmp((a, b) => a.gt(b));
  var bnMin = /* @__PURE__ */ createCmp((a, b) => a.lt(b));

  // ../../node_modules/@polkadot/util/bn/consts.js
  var BN_ZERO = /* @__PURE__ */ new import_bn.default(0);
  var BN_ONE = /* @__PURE__ */ new import_bn.default(1);
  var BN_TWO = /* @__PURE__ */ new import_bn.default(2);
  var BN_HUNDRED = /* @__PURE__ */ new import_bn.default(100);
  var BN_MILLION = /* @__PURE__ */ new import_bn.default(1e6);
  var BN_BILLION = /* @__PURE__ */ new import_bn.default(1e9);
  var BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
  var BN_MAX_INTEGER = /* @__PURE__ */ new import_bn.default(Number.MAX_SAFE_INTEGER);
  var BN_SQRT_MAX_INTEGER = /* @__PURE__ */ new import_bn.default(94906265);

  // ../../node_modules/@polkadot/util/is/bigInt.js
  function isBigInt(value) {
    return typeof value === "bigint";
  }

  // ../../node_modules/@polkadot/util/bn/toBn.js
  function bnToBn(value) {
    return value ? import_bn.default.isBN(value) ? value : isHex(value) ? hexToBn(value.toString()) : isBigInt(value) ? new import_bn.default(value.toString()) : isToBn(value) ? value.toBn() : isToBigInt(value) ? new import_bn.default(value.toBigInt().toString()) : new import_bn.default(value) : new import_bn.default(0);
  }

  // ../../node_modules/@polkadot/util/bn/sqrt.js
  function bnSqrt(value) {
    const n = bnToBn(value);
    if (n.isNeg()) {
      throw new Error("square root of negative numbers is not supported");
    }
    if (n.lte(BN_MAX_INTEGER)) {
      return new import_bn.default(~~Math.sqrt(n.toNumber()));
    }
    let x0 = BN_SQRT_MAX_INTEGER.clone();
    while (true) {
      const x1 = n.div(x0).iadd(x0).ishrn(1);
      if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
        return x0;
      }
      x0 = x1;
    }
  }

  // ../../node_modules/@polkadot/util/bn/toU8a.js
  var DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };
  function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
    const valueBn = bnToBn(value);
    const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
    if (!value) {
      return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
    }
    const output2 = new Uint8Array(byteLength);
    const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
    output2.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
    return output2;
  }

  // ../../node_modules/@polkadot/util/bn/toHex.js
  function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
    return u8aToHex(bnToU8a(value, { bitLength, isLe, isNegative }));
  }

  // ../../node_modules/@polkadot/util/compact/toU8a.js
  var MAX_U8 = BN_TWO.pow(new import_bn.default(8 - 2)).isub(BN_ONE);
  var MAX_U16 = BN_TWO.pow(new import_bn.default(16 - 2)).isub(BN_ONE);
  var MAX_U32 = BN_TWO.pow(new import_bn.default(32 - 2)).isub(BN_ONE);
  var BL_16 = { bitLength: 16 };
  var BL_32 = { bitLength: 32 };
  function compactToU8a(value) {
    const bn = bnToBn(value);
    if (bn.lte(MAX_U8)) {
      return new Uint8Array([bn.toNumber() << 2]);
    } else if (bn.lte(MAX_U16)) {
      return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);
    } else if (bn.lte(MAX_U32)) {
      return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);
    }
    const u8a2 = bnToU8a(bn);
    let length = u8a2.length;
    while (u8a2[length - 1] === 0) {
      length--;
    }
    if (length < 4) {
      throw new Error("Invalid length, previous checks match anything less than 2^30");
    }
    return u8aConcatStrict([
      new Uint8Array([(length - 4 << 2) + 3]),
      u8a2.subarray(0, length)
    ]);
  }

  // ../../node_modules/@polkadot/util/compact/addLength.js
  function compactAddLength(input) {
    return u8aConcatStrict([
      compactToU8a(input.length),
      input
    ]);
  }

  // ../../node_modules/@polkadot/util/compact/fromU8a.js
  function compactFromU8a(input) {
    const u8a2 = u8aToU8a(input);
    switch (u8a2[0] & 3) {
      case 0:
        return [1, new import_bn.default(u8a2[0] >>> 2)];
      case 1:
        return [2, new import_bn.default(u8a2[0] + (u8a2[1] << 8) >>> 2)];
      case 2:
        return [4, new import_bn.default(u8a2[0] + (u8a2[1] << 8) + (u8a2[2] << 16) + u8a2[3] * 16777216 >>> 2)];
      default: {
        const offset2 = (u8a2[0] >>> 2) + 5;
        switch (offset2) {
          case 5:
            return [5, new import_bn.default(u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + u8a2[4] * 16777216)];
          case 6:
            return [6, new import_bn.default(u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + (u8a2[4] + (u8a2[5] << 8)) * 16777216)];
          case 7:
            return [7, new import_bn.default(u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + (u8a2[4] + (u8a2[5] << 8) + (u8a2[6] << 16)) * 16777216)];
          default:
            return [offset2, u8aToBn(u8a2.subarray(1, offset2))];
        }
      }
    }
  }
  function compactFromU8aLim(u8a2) {
    switch (u8a2[0] & 3) {
      case 0:
        return [1, u8a2[0] >>> 2];
      case 1:
        return [2, u8a2[0] + (u8a2[1] << 8) >>> 2];
      case 2:
        return [4, u8a2[0] + (u8a2[1] << 8) + (u8a2[2] << 16) + u8a2[3] * 16777216 >>> 2];
      default: {
        switch ((u8a2[0] >>> 2) + 5) {
          case 5:
            return [5, u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + u8a2[4] * 16777216];
          case 6:
            return [6, u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + (u8a2[4] + (u8a2[5] << 8)) * 16777216];
          case 7:
            return [7, u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + (u8a2[4] + (u8a2[5] << 8) + (u8a2[6] << 16)) * 16777216];
          default:
            throw new Error("Compact input is > Number.MAX_SAFE_INTEGER");
        }
      }
    }
  }

  // ../../node_modules/@polkadot/util/compact/stripLength.js
  function compactStripLength(input) {
    const [offset2, length] = compactFromU8a(input);
    const total = offset2 + length.toNumber();
    return [
      total,
      input.subarray(offset2, total)
    ];
  }

  // ../../node_modules/@polkadot/util/float/toU8a.js
  function floatToU8a(value = 0, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
      throw new Error("Invalid bitLength provided, expected 32 or 64");
    }
    const result = new Uint8Array(bitLength / 8);
    const dv = new DataView(result.buffer, result.byteOffset);
    if (bitLength === 32) {
      dv.setFloat32(0, Number(value), isLe);
    } else {
      dv.setFloat64(0, Number(value), isLe);
    }
    return result;
  }

  // ../../node_modules/@polkadot/util/is/boolean.js
  function isBoolean(value) {
    return typeof value === "boolean";
  }

  // ../../node_modules/@polkadot/util/format/formatDecimal.js
  var NUMBER_REGEX = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
  function formatDecimal(value, separator = ",") {
    const isNegative = value[0].startsWith("-");
    const matched = isNegative ? value.substring(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
    return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
  }

  // ../../node_modules/@polkadot/util/format/getSeparator.js
  function getSeparator(locale) {
    return {
      decimal: 0.1 .toLocaleString(locale).substring(1, 2),
      thousand: 1e3 .toLocaleString(locale).substring(1, 2)
    };
  }

  // ../../node_modules/@polkadot/util/format/si.js
  var SI_MID = 8;
  var SI = [
    { power: -24, text: "yocto", value: "y" },
    { power: -21, text: "zepto", value: "z" },
    { power: -18, text: "atto", value: "a" },
    { power: -15, text: "femto", value: "f" },
    { power: -12, text: "pico", value: "p" },
    { power: -9, text: "nano", value: "n" },
    { power: -6, text: "micro", value: "\xB5" },
    { power: -3, text: "milli", value: "m" },
    { power: 0, text: "Unit", value: "-" },
    { power: 3, text: "Kilo", value: "k" },
    { power: 6, text: "Mill", value: "M" },
    { power: 9, text: "Bill", value: "B" },
    { power: 12, text: "Tril", value: "T" },
    { power: 15, text: "Peta", value: "P" },
    { power: 18, text: "Exa", value: "E" },
    { power: 21, text: "Zeta", value: "Z" },
    { power: 24, text: "Yotta", value: "Y" }
  ];
  function findSi(type) {
    for (let i = 0; i < SI.length; i++) {
      if (SI[i].value === type) {
        return SI[i];
      }
    }
    return SI[SI_MID];
  }
  function calcSi(text, decimals, forceUnit) {
    if (forceUnit) {
      return findSi(forceUnit);
    }
    const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
  }

  // ../../node_modules/@polkadot/util/format/formatBalance.js
  var DEFAULT_DECIMALS = 0;
  var DEFAULT_UNIT = SI[SI_MID].text;
  var defaultDecimals = DEFAULT_DECIMALS;
  var defaultUnit = DEFAULT_UNIT;
  function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
    let text = bnToBn(input).toString();
    if (text.length === 0 || text === "0") {
      return "0";
    }
    let sign2 = "";
    if (text[0].startsWith("-")) {
      sign2 = "-";
      text = text.substring(1);
    }
    const si = calcSi(text, decimals, forceUnit);
    const mid = text.length - (decimals + si.power);
    const pre = mid <= 0 ? "0" : text.substring(0, mid);
    let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
    if (!withZero) {
      let end2 = post.length - 1;
      do {
        if (post[end2] === "0") {
          end2--;
        }
      } while (post[end2] === "0");
      post = post.substring(0, end2 + 1);
    }
    const unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;
    const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
    const { decimal, thousand } = getSeparator(locale);
    return `${sign2}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;
  }
  var formatBalance = _formatBalance;
  formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);
  formatBalance.findSi = findSi;
  formatBalance.getDefaults = () => {
    return {
      decimals: defaultDecimals,
      unit: defaultUnit
    };
  };
  formatBalance.getOptions = (decimals = defaultDecimals) => {
    return SI.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
  };
  formatBalance.setDefaults = ({ decimals, unit }) => {
    defaultDecimals = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals;
    defaultUnit = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit;
    SI[SI_MID].text = defaultUnit;
  };

  // ../../node_modules/@polkadot/util/format/formatDate.js
  function zeroPad(value) {
    return value.toString().padStart(2, "0");
  }
  function formatDate(date) {
    const year = date.getFullYear().toString();
    const month = zeroPad(date.getMonth() + 1);
    const day = zeroPad(date.getDate());
    const hour = zeroPad(date.getHours());
    const minute = zeroPad(date.getMinutes());
    const second = zeroPad(date.getSeconds());
    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
  }

  // ../../node_modules/@polkadot/util/format/formatNumber.js
  function formatNumber(value, { locale = "en" } = {}) {
    const { thousand } = getSeparator(locale);
    return formatDecimal(bnToBn(value).toString(), thousand);
  }

  // ../../node_modules/@polkadot/util/is/string.js
  function isString(value) {
    return typeof value === "string" || value instanceof String;
  }

  // ../../node_modules/@polkadot/util/is/ascii.js
  function isAsciiStr(str) {
    const count = str.length | 0;
    for (let i = 0; i < count; i++) {
      const b = str.charCodeAt(i);
      if (b < 32 || b > 126) {
        return false;
      }
    }
    return true;
  }
  function isAsciiBytes(u8a2) {
    const count = u8a2.length | 0;
    for (let i = 0; i < count; i++) {
      const b = u8a2[i] | 0;
      if (b < 32 || b > 126) {
        return false;
      }
    }
    return true;
  }
  function isAscii(value) {
    return isString(value) ? isHex(value) ? isAsciiBytes(u8aToU8a(value)) : isAsciiStr(value) : value ? isAsciiBytes(value) : false;
  }

  // ../../node_modules/@polkadot/util/is/class.js
  var isClass = /* @__PURE__ */ isOnFunction("isPrototypeOf", "hasOwnProperty");

  // ../../node_modules/@polkadot/util/is/childClass.js
  function isChildClass(Parent, Child) {
    return isClass(Child) && isClass(Parent) ? Parent === Child || Parent.isPrototypeOf(Child) : false;
  }

  // ../../node_modules/@polkadot/util/is/codec.js
  var checkCodec = /* @__PURE__ */ isOnObject("toHex", "toHuman", "toU8a");
  var checkRegistry = /* @__PURE__ */ isOnObject("get");
  function isCodec(value) {
    return checkCodec(value) && checkRegistry(value.registry);
  }

  // ../../node_modules/@polkadot/util/is/compact.js
  var isCompact = /* @__PURE__ */ isOnObject("toBigInt", "toBn", "toNumber", "unwrap");

  // ../../node_modules/@polkadot/util/stringify.js
  function replacer(_3, v3) {
    return isBigInt(v3) ? v3.toString() : v3;
  }
  function stringify(value, space) {
    return JSON.stringify(value, replacer, space);
  }

  // ../../node_modules/@polkadot/util/is/null.js
  function isNull(value) {
    return value === null;
  }

  // ../../node_modules/@polkadot/util/is/number.js
  function isNumber(value) {
    return typeof value === "number";
  }

  // ../../node_modules/@polkadot/util/is/undefined.js
  function isUndefined(value) {
    return value === void 0;
  }

  // ../../node_modules/@polkadot/util/is/utf8.js
  function isUtf8(value) {
    if (!value) {
      return isString(value);
    }
    const u8a2 = u8aToU8a(value);
    const len = u8a2.length;
    let i = 0;
    while (i < len) {
      if (u8a2[i] <= 127) {
        i += 1;
      } else if (u8a2[i] >= 194 && u8a2[i] <= 223) {
        if (i + 1 < len) {
          if (u8a2[i + 1] < 128 || u8a2[i + 1] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i += 2;
      } else if (u8a2[i] === 224) {
        if (i + 2 < len) {
          if (u8a2[i + 1] < 160 || u8a2[i + 1] > 191) {
            return false;
          }
          if (u8a2[i + 2] < 128 || u8a2[i + 2] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i += 3;
      } else if (u8a2[i] >= 225 && u8a2[i] <= 236) {
        if (i + 2 < len) {
          if (u8a2[i + 1] < 128 || u8a2[i + 1] > 191) {
            return false;
          }
          if (u8a2[i + 2] < 128 || u8a2[i + 2] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i += 3;
      } else if (u8a2[i] === 237) {
        if (i + 2 < len) {
          if (u8a2[i + 1] < 128 || u8a2[i + 1] > 159) {
            return false;
          }
          if (u8a2[i + 2] < 128 || u8a2[i + 2] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i += 3;
      } else if (u8a2[i] >= 238 && u8a2[i] <= 239) {
        if (i + 2 < len) {
          if (u8a2[i + 1] < 128 || u8a2[i + 1] > 191) {
            return false;
          }
          if (u8a2[i + 2] < 128 || u8a2[i + 2] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i += 3;
      } else if (u8a2[i] === 240) {
        if (i + 3 < len) {
          if (u8a2[i + 1] < 144 || u8a2[i + 1] > 191) {
            return false;
          }
          if (u8a2[i + 2] < 128 || u8a2[i + 2] > 191) {
            return false;
          }
          if (u8a2[i + 3] < 128 || u8a2[i + 3] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i += 4;
      } else if (u8a2[i] >= 241 && u8a2[i] <= 243) {
        if (i + 3 < len) {
          if (u8a2[i + 1] < 128 || u8a2[i + 1] > 191) {
            return false;
          }
          if (u8a2[i + 2] < 128 || u8a2[i + 2] > 191) {
            return false;
          }
          if (u8a2[i + 3] < 128 || u8a2[i + 3] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i += 4;
      } else if (u8a2[i] === 244) {
        if (i + 3 < len) {
          if (u8a2[i + 1] < 128 || u8a2[i + 1] > 143) {
            return false;
          }
          if (u8a2[i + 2] < 128 || u8a2[i + 2] > 191) {
            return false;
          }
          if (u8a2[i + 3] < 128 || u8a2[i + 3] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i += 4;
      } else {
        return false;
      }
    }
    return true;
  }

  // ../../node_modules/@polkadot/util/lazy.js
  function lazyMethod(result, item, creator, getName, index = 0) {
    const name = getName ? getName(item, index) : item.toString();
    let value;
    Object.defineProperty(result, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        if (value === void 0) {
          value = creator(item, index, this);
          try {
            Object.defineProperty(this, name, { value });
          } catch {
          }
        }
        return value;
      }
    });
  }
  function lazyMethods(result, items, creator, getName) {
    for (let i = 0; i < items.length; i++) {
      lazyMethod(result, items[i], creator, getName, i);
    }
    return result;
  }

  // ../../node_modules/@polkadot/util/noop.js
  function identity(value) {
    return value;
  }
  function noop2() {
  }

  // ../../node_modules/@polkadot/util/logger.js
  var logTo = {
    debug: "log",
    error: "error",
    log: "log",
    warn: "warn"
  };
  function formatOther(value) {
    if (value && isObject(value) && value.constructor === Object) {
      const result = {};
      for (const [k, v3] of Object.entries(value)) {
        result[k] = loggerFormat(v3);
      }
      return result;
    }
    return value;
  }
  function loggerFormat(value) {
    if (Array.isArray(value)) {
      return value.map(loggerFormat);
    } else if (isBn(value)) {
      return value.toString();
    } else if (isU8a(value) || isBuffer(value)) {
      return u8aToHex(u8aToU8a(value));
    }
    return formatOther(value);
  }
  function formatWithLength(maxLength) {
    return (v3) => {
      if (maxLength <= 0) {
        return v3;
      }
      const r = `${v3}`;
      return r.length < maxLength ? v3 : `${r.substring(0, maxLength)} ...`;
    };
  }
  function apply(log, type, values, maxSize = -1) {
    if (values.length === 1 && isFunction(values[0])) {
      const fnResult = values[0]();
      return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
    }
    console[logTo[log]](formatDate(new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
  }
  function isDebugOn(e, type) {
    return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
  }
  function isDebugOff(e, type) {
    return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
  }
  function getDebugFlag(env, type) {
    let flag = false;
    for (const e of env) {
      if (isDebugOn(e, type)) {
        flag = true;
      } else if (isDebugOff(e, type)) {
        flag = false;
      }
    }
    return flag;
  }
  function parseEnv(type) {
    const env = (hasProcess ? xglobal.process : {}).env || {};
    const maxSize = parseInt(env.DEBUG_MAX || "-1", 10);
    return [
      getDebugFlag((env.DEBUG || "").toLowerCase().split(","), type),
      isNaN(maxSize) ? -1 : maxSize
    ];
  }
  function logger(origin) {
    const type = `${origin.toUpperCase()}:`.padStart(16);
    const [isDebug, maxSize] = parseEnv(origin.toLowerCase());
    return {
      debug: isDebug ? (...values) => apply("debug", type, values, maxSize) : noop2,
      error: (...values) => apply("error", type, values),
      log: (...values) => apply("log", type, values),
      noop: noop2,
      warn: (...values) => apply("warn", type, values)
    };
  }

  // ../../node_modules/@polkadot/util/memoize.js
  function defaultGetId() {
    return "none";
  }
  function memoize(fn2, { getInstanceId = defaultGetId } = {}) {
    const cache = {};
    const memoized = (...args) => {
      const stringParams = stringify(args);
      const instanceId = getInstanceId();
      if (!cache[instanceId]) {
        cache[instanceId] = {};
      }
      if (cache[instanceId][stringParams] === void 0) {
        cache[instanceId][stringParams] = fn2(...args);
      }
      return cache[instanceId][stringParams];
    };
    memoized.unmemoize = (...args) => {
      const stringParams = stringify(args);
      const instanceId = getInstanceId();
      if (cache[instanceId] && cache[instanceId][stringParams] !== void 0) {
        delete cache[instanceId][stringParams];
      }
    };
    return memoized;
  }

  // ../../node_modules/@polkadot/util/nextTick.js
  function nextTick(onExec, onError) {
    setTimeout(() => {
      Promise.resolve().then(() => {
        onExec();
      }).catch((error) => {
        if (onError) {
          onError(error);
        } else {
          console.error(error);
        }
      });
    }, 0);
  }

  // ../../node_modules/@polkadot/util/object/clear.js
  function objectClear(value) {
    const keys2 = Object.keys(value);
    for (let i = 0; i < keys2.length; i++) {
      delete value[keys2[i]];
    }
    return value;
  }

  // ../../node_modules/@polkadot/util/object/spread.js
  function objectSpread(dest, ...sources) {
    for (let i = 0; i < sources.length; i++) {
      const src = sources[i];
      if (src) {
        if (typeof src.entries === "function") {
          for (const [key, value] of src.entries()) {
            dest[key] = value;
          }
        } else {
          Object.assign(dest, src);
        }
      }
    }
    return dest;
  }

  // ../../node_modules/@polkadot/util/object/property.js
  function objectProperty(that, key, getter, getName, index = 0) {
    const name = getName ? getName(key, index) : key;
    if (!(name in that)) {
      Object.defineProperty(that, name, {
        enumerable: true,
        get: function() {
          return getter(key, index, this);
        }
      });
    }
  }
  function objectProperties(that, keys2, getter, getName) {
    for (let i = 0; i < keys2.length; i++) {
      objectProperty(that, keys2[i], getter, getName, i);
    }
  }

  // ../../node_modules/@polkadot/util/string/camelCase.js
  var CC_TO_UP = new Array(256);
  var CC_TO_LO = new Array(256);
  for (let i = 0; i < CC_TO_UP.length; i++) {
    CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
    CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
  }
  function formatAllCaps(w) {
    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
  }
  function converter(format) {
    return (value) => {
      const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
      const count = parts.length;
      let result = "";
      for (let i = 0; i < count; i++) {
        const w = parts[i];
        result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
      }
      return result;
    };
  }
  var stringCamelCase = /* @__PURE__ */ converter((w, i) => (i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
  var stringPascalCase = /* @__PURE__ */ converter((w) => CC_TO_UP[w.charCodeAt(0)] + w.slice(1));

  // ../../node_modules/@polkadot/util/string/lowerFirst.js
  function converter2(map3) {
    return (value) => value ? map3[value.charCodeAt(0)] + value.slice(1) : "";
  }
  var stringUpperFirst = /* @__PURE__ */ converter2(CC_TO_UP);

  // ../../node_modules/@polkadot/util/string/toHex.js
  function stringToHex(value) {
    return u8aToHex(stringToU8a(value));
  }

  // ../../node_modules/@polkadot/api/packageInfo.js
  var import_meta = {};
  var packageInfo = { name: "@polkadot/api", path: import_meta && import_meta.url ? new URL(import_meta.url).pathname.substring(0, new URL(import_meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.7.2" };

  // ../../node_modules/@polkadot/x-randomvalues/browser.js
  var crypto = xglobal.crypto;
  function getRandomValues(arr) {
    return crypto.getRandomValues(arr);
  }

  // ../../node_modules/@polkadot/wasm-bridge/wbg.js
  var DEFAULT_CRYPTO = { getRandomValues };
  var DEFAULT_SELF = { crypto: DEFAULT_CRYPTO };
  var Wbg = class {
    constructor(bridge2) {
      this.abort = () => {
        throw new Error("abort");
      };
      this.__wbindgen_is_undefined = (idx) => {
        return this.__internal__bridge.getObject(idx) === void 0;
      };
      this.__wbindgen_throw = (ptr, len) => {
        throw new Error(this.__internal__bridge.getString(ptr, len));
      };
      this.__wbg_self_1b7a39e3a92c949c = () => {
        return this.__internal__bridge.addObject(DEFAULT_SELF);
      };
      this.__wbg_require_604837428532a733 = (ptr, len) => {
        throw new Error(`Unable to require ${this.__internal__bridge.getString(ptr, len)}`);
      };
      this.__wbg_crypto_968f1772287e2df0 = (_idx) => {
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO);
      };
      this.__wbg_getRandomValues_a3d34b4fee3c2869 = (_idx) => {
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
      };
      this.__wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len) => {
        DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(ptr, len));
      };
      this.__wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len) => {
        throw new Error("randomFillsync is not available");
      };
      this.__wbindgen_object_drop_ref = (idx) => {
        this.__internal__bridge.takeObject(idx);
      };
      this.__internal__bridge = bridge2;
    }
  };

  // ../../node_modules/@polkadot/wasm-bridge/bridge.js
  var Bridge = class {
    constructor(createWasm2) {
      this.__internal__createWasm = createWasm2;
      this.__internal__cachegetInt32 = null;
      this.__internal__cachegetUint8 = null;
      this.__internal__heap = new Array(32).fill(void 0).concat(void 0, null, true, false);
      this.__internal__heapNext = this.__internal__heap.length;
      this.__internal__type = "none";
      this.__internal__wasm = null;
      this.__internal__wasmError = null;
      this.__internal__wasmPromise = null;
      this.__internal__wbg = { ...new Wbg(this) };
    }
    get error() {
      return this.__internal__wasmError;
    }
    get type() {
      return this.__internal__type;
    }
    get wasm() {
      return this.__internal__wasm;
    }
    async init(createWasm2) {
      if (!this.__internal__wasmPromise || createWasm2) {
        this.__internal__wasmPromise = (createWasm2 || this.__internal__createWasm)(this.__internal__wbg);
      }
      const { error, type, wasm } = await this.__internal__wasmPromise;
      this.__internal__type = type;
      this.__internal__wasm = wasm;
      this.__internal__wasmError = error;
      return this.__internal__wasm;
    }
    getObject(idx) {
      return this.__internal__heap[idx];
    }
    dropObject(idx) {
      if (idx < 36) {
        return;
      }
      this.__internal__heap[idx] = this.__internal__heapNext;
      this.__internal__heapNext = idx;
    }
    takeObject(idx) {
      const ret = this.getObject(idx);
      this.dropObject(idx);
      return ret;
    }
    addObject(obj) {
      if (this.__internal__heapNext === this.__internal__heap.length) {
        this.__internal__heap.push(this.__internal__heap.length + 1);
      }
      const idx = this.__internal__heapNext;
      this.__internal__heapNext = this.__internal__heap[idx];
      this.__internal__heap[idx] = obj;
      return idx;
    }
    getInt32() {
      if (this.__internal__cachegetInt32 === null || this.__internal__cachegetInt32.buffer !== this.__internal__wasm.memory.buffer) {
        this.__internal__cachegetInt32 = new Int32Array(this.__internal__wasm.memory.buffer);
      }
      return this.__internal__cachegetInt32;
    }
    getUint8() {
      if (this.__internal__cachegetUint8 === null || this.__internal__cachegetUint8.buffer !== this.__internal__wasm.memory.buffer) {
        this.__internal__cachegetUint8 = new Uint8Array(this.__internal__wasm.memory.buffer);
      }
      return this.__internal__cachegetUint8;
    }
    getU8a(ptr, len) {
      return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
    }
    getString(ptr, len) {
      return u8aToString(this.getU8a(ptr, len));
    }
    allocU8a(arg) {
      const ptr = this.__internal__wasm.__wbindgen_malloc(arg.length * 1);
      this.getUint8().set(arg, ptr / 1);
      return [ptr, arg.length];
    }
    allocString(arg) {
      return this.allocU8a(stringToU8a(arg));
    }
    resultU8a() {
      const r0 = this.getInt32()[8 / 4 + 0];
      const r1 = this.getInt32()[8 / 4 + 1];
      const ret = this.getU8a(r0, r1).slice();
      this.__internal__wasm.__wbindgen_free(r0, r1 * 1);
      return ret;
    }
    resultString() {
      return u8aToString(this.resultU8a());
    }
  };

  // ../../node_modules/@polkadot/wasm-bridge/init.js
  function createWasmFn(root, wasmBytes2, asmFn) {
    return async (wbg) => {
      const result = {
        error: null,
        type: "none",
        wasm: null
      };
      try {
        if (!wasmBytes2 || !wasmBytes2.length) {
          throw new Error("No WebAssembly provided for initialization");
        } else if (typeof WebAssembly !== "object" || typeof WebAssembly.instantiate !== "function") {
          throw new Error("WebAssembly is not available in your environment");
        }
        const source = await WebAssembly.instantiate(wasmBytes2, { wbg });
        result.wasm = source.instance.exports;
        result.type = "wasm";
      } catch (error) {
        if (typeof asmFn === "function") {
          result.wasm = asmFn(wbg);
          result.type = "asm";
        } else {
          result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;
          console.error(result.error);
        }
      }
      return result;
    };
  }

  // ../../node_modules/@polkadot/wasm-util/base64.js
  var chr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var map = new Array(256);
  for (let i = 0, count = chr.length; i < count; i++) {
    map[chr.charCodeAt(i)] = i;
  }
  function base64Decode(data, out) {
    let byte = 0;
    let bits2 = 0;
    let pos = -1;
    for (let i = 0, count = out.length; pos < count; i++) {
      byte = byte << 6 | map[data.charCodeAt(i)];
      if ((bits2 += 6) >= 8) {
        out[++pos] = byte >>> (bits2 -= 8) & 255;
      }
    }
    return out;
  }

  // ../../node_modules/@polkadot/wasm-util/fflate.js
  var u8 = Uint8Array;
  var u16 = Uint16Array;
  var u32 = Uint32Array;
  var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);
  var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);
  var freb = (eb, start2) => {
    const b = new u16(31);
    for (let i = 0; i < 31; ++i) {
      b[i] = start2 += 1 << eb[i - 1];
    }
    const r = new u32(b[30]);
    for (let i = 1; i < 30; ++i) {
      for (let j = b[i]; j < b[i + 1]; ++j) {
        r[j] = j - b[i] << 5 | i;
      }
    }
    return [b, r];
  };
  var [fl, revfl] = freb(fleb, 2);
  fl[28] = 258, revfl[258] = 28;
  var [fd] = freb(fdeb, 0);
  var rev = new u16(32768);
  for (let i = 0; i < 32768; ++i) {
    let x = (i & 43690) >>> 1 | (i & 21845) << 1;
    x = (x & 52428) >>> 2 | (x & 13107) << 2;
    x = (x & 61680) >>> 4 | (x & 3855) << 4;
    rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
  }
  var hMap = (cd, mb, r) => {
    const s = cd.length;
    let i = 0;
    const l15 = new u16(mb);
    for (; i < s; ++i)
      ++l15[cd[i] - 1];
    const le = new u16(mb);
    for (i = 0; i < mb; ++i) {
      le[i] = le[i - 1] + l15[i - 1] << 1;
    }
    let co;
    if (r) {
      co = new u16(1 << mb);
      const rvb = 15 - mb;
      for (i = 0; i < s; ++i) {
        if (cd[i]) {
          const sv = i << 4 | cd[i];
          const r2 = mb - cd[i];
          let v3 = le[cd[i] - 1]++ << r2;
          for (const m = v3 | (1 << r2) - 1; v3 <= m; ++v3) {
            co[rev[v3] >>> rvb] = sv;
          }
        }
      }
    } else {
      co = new u16(s);
      for (i = 0; i < s; ++i)
        co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
    }
    return co;
  };
  var flt = new u8(288);
  for (let i = 0; i < 144; ++i)
    flt[i] = 8;
  for (let i = 144; i < 256; ++i)
    flt[i] = 9;
  for (let i = 256; i < 280; ++i)
    flt[i] = 7;
  for (let i = 280; i < 288; ++i)
    flt[i] = 8;
  var fdt = new u8(32);
  for (let i = 0; i < 32; ++i)
    fdt[i] = 5;
  var flrm = hMap(flt, 9, 1);
  var fdrm = hMap(fdt, 5, 1);
  var bits = (d, p, m) => {
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
  };
  var bits16 = (d, p) => {
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
  };
  var shft = (p) => (p >>> 3) + (p & 7 && 1);
  var slc = (v3, s, e) => {
    if (s == null || s < 0)
      s = 0;
    if (e == null || e > v3.length)
      e = v3.length;
    const n = new (v3 instanceof u16 ? u16 : v3 instanceof u32 ? u32 : u8)(e - s);
    n.set(v3.subarray(s, e));
    return n;
  };
  var max2 = (a) => {
    let m = a[0];
    for (let i = 1, count = a.length; i < count; ++i) {
      if (a[i] > m)
        m = a[i];
    }
    return m;
  };
  var inflt = (dat, buf, st) => {
    const noSt = !st || st.i;
    if (!st)
      st = {};
    const sl = dat.length;
    const noBuf = !buf || !noSt;
    if (!buf)
      buf = new u8(sl * 3);
    const cbuf = (l15) => {
      let bl = buf.length;
      if (l15 > bl) {
        const nbuf = new u8(Math.max(bl << 1, l15));
        nbuf.set(buf);
        buf = nbuf;
      }
    };
    let final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    if (final && !lm)
      return buf;
    const tbts = sl << 3;
    do {
      if (!lm) {
        st.f = final = bits(dat, pos, 1);
        const type = bits(dat, pos + 1, 3);
        pos += 3;
        if (!type) {
          const s = shft(pos) + 4, l15 = dat[s - 4] | dat[s - 3] << 8, t = s + l15;
          if (t > sl) {
            if (noSt)
              throw "unexpected EOF";
            break;
          }
          if (noBuf)
            cbuf(bt + l15);
          buf.set(dat.subarray(s, t), bt);
          st.b = bt += l15, st.p = pos = t << 3;
          continue;
        } else if (type == 1)
          lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
        else if (type == 2) {
          const hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
          const tl = hLit + bits(dat, pos + 5, 31) + 1;
          pos += 14;
          const ldt = new u8(tl);
          const clt = new u8(19);
          for (let i = 0; i < hcLen; ++i) {
            clt[clim[i]] = bits(dat, pos + i * 3, 7);
          }
          pos += hcLen * 3;
          const clb = max2(clt), clbmsk = (1 << clb) - 1;
          if (!noSt && pos + tl * (clb + 7) > tbts)
            break;
          const clm = hMap(clt, clb, 1);
          for (let i = 0; i < tl; ) {
            const r = clm[bits(dat, pos, clbmsk)];
            pos += r & 15;
            const s = r >>> 4;
            if (s < 16) {
              ldt[i++] = s;
            } else {
              let c2 = 0, n = 0;
              if (s == 16)
                n = 3 + bits(dat, pos, 3), pos += 2, c2 = ldt[i - 1];
              else if (s == 17)
                n = 3 + bits(dat, pos, 7), pos += 3;
              else if (s == 18)
                n = 11 + bits(dat, pos, 127), pos += 7;
              while (n--)
                ldt[i++] = c2;
            }
          }
          const lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
          lbt = max2(lt);
          dbt = max2(dt);
          lm = hMap(lt, lbt, 1);
          dm = hMap(dt, dbt, 1);
        } else
          throw "invalid block type";
        if (pos > tbts)
          throw "unexpected EOF";
      }
      if (noBuf)
        cbuf(bt + 131072);
      const lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
      const mxa = lbt + dbt + 18;
      while (noSt || pos + mxa < tbts) {
        const c2 = lm[bits16(dat, pos) & lms], sym = c2 >>> 4;
        pos += c2 & 15;
        if (pos > tbts)
          throw "unexpected EOF";
        if (!c2)
          throw "invalid length/literal";
        if (sym < 256)
          buf[bt++] = sym;
        else if (sym == 256) {
          lm = void 0;
          break;
        } else {
          let add2 = sym - 254;
          if (sym > 264) {
            const i = sym - 257, b = fleb[i];
            add2 = bits(dat, pos, (1 << b) - 1) + fl[i];
            pos += b;
          }
          const d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
          if (!d)
            throw "invalid distance";
          pos += d & 15;
          let dt = fd[dsym];
          if (dsym > 3) {
            const b = fdeb[dsym];
            dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
          }
          if (pos > tbts)
            throw "unexpected EOF";
          if (noBuf)
            cbuf(bt + 131072);
          const end2 = bt + add2;
          for (; bt < end2; bt += 4) {
            buf[bt] = buf[bt - dt];
            buf[bt + 1] = buf[bt + 1 - dt];
            buf[bt + 2] = buf[bt + 2 - dt];
            buf[bt + 3] = buf[bt + 3 - dt];
          }
          bt = end2;
        }
      }
      st.l = lm, st.p = pos, st.b = bt;
      if (lm)
        final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
  };
  var zlv = (d) => {
    if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31)
      throw "invalid zlib data";
    if (d[1] & 32)
      throw "invalid zlib data: preset dictionaries not supported";
  };
  function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
  }

  // ../../node_modules/@polkadot/wasm-crypto-wasm/bundle.js
  var import_bytes = __toESM(require_bytes(), 1);
  var wasmBytes = /* @__PURE__ */ unzlibSync(base64Decode(import_bytes.bytes, new Uint8Array(import_bytes.lenIn)), new Uint8Array(import_bytes.lenOut));

  // ../../node_modules/@polkadot/wasm-crypto-init/wasm.js
  var createWasm = /* @__PURE__ */ createWasmFn("crypto", wasmBytes, null);

  // ../../node_modules/@polkadot/wasm-crypto/init.js
  var bridge = new Bridge(createWasm);
  async function initBridge(createWasm2) {
    return bridge.init(createWasm2);
  }

  // ../../node_modules/@polkadot/wasm-crypto/bundle.js
  function withWasm(fn2) {
    return (...params) => {
      if (!bridge.wasm) {
        throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");
      }
      return fn2(bridge.wasm, ...params);
    };
  }
  var secp256k1Expand = /* @__PURE__ */ withWasm((wasm, pubkey) => {
    wasm.ext_secp_pub_expand(8, ...bridge.allocU8a(pubkey));
    return bridge.resultU8a();
  });
  var blake2b = /* @__PURE__ */ withWasm((wasm, data, key, size) => {
    wasm.ext_blake2b(8, ...bridge.allocU8a(data), ...bridge.allocU8a(key), size);
    return bridge.resultU8a();
  });
  var keccak256 = /* @__PURE__ */ withWasm((wasm, data) => {
    wasm.ext_keccak256(8, ...bridge.allocU8a(data));
    return bridge.resultU8a();
  });
  var keccak512 = /* @__PURE__ */ withWasm((wasm, data) => {
    wasm.ext_keccak512(8, ...bridge.allocU8a(data));
    return bridge.resultU8a();
  });
  var twox = /* @__PURE__ */ withWasm((wasm, data, rounds) => {
    wasm.ext_twox(8, ...bridge.allocU8a(data), rounds);
    return bridge.resultU8a();
  });
  function isReady() {
    return !!bridge.wasm;
  }
  async function waitReady() {
    try {
      const wasm = await initBridge();
      return !!wasm;
    } catch {
      return false;
    }
  }

  // ../../node_modules/@polkadot/util-crypto/crypto.js
  function cryptoWaitReady() {
    return waitReady().then(() => {
      if (!isReady()) {
        throw new Error("Unable to initialize @polkadot/util-crypto");
      }
      return true;
    }).catch(() => false);
  }

  // ../../node_modules/@scure/base/lib/esm/index.js
  function assertNumber(n) {
    if (!Number.isSafeInteger(n))
      throw new Error(`Wrong integer: ${n}`);
  }
  function chain(...args) {
    const wrap = (a, b) => (c2) => a(b(c2));
    const encode = Array.from(args).reverse().reduce((acc, i) => acc ? wrap(acc, i.encode) : i.encode, void 0);
    const decode2 = args.reduce((acc, i) => acc ? wrap(acc, i.decode) : i.decode, void 0);
    return { encode, decode: decode2 };
  }
  function alphabet(alphabet2) {
    return {
      encode: (digits) => {
        if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
          throw new Error("alphabet.encode input should be an array of numbers");
        return digits.map((i) => {
          assertNumber(i);
          if (i < 0 || i >= alphabet2.length)
            throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet2.length})`);
          return alphabet2[i];
        });
      },
      decode: (input) => {
        if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
          throw new Error("alphabet.decode input should be array of strings");
        return input.map((letter) => {
          if (typeof letter !== "string")
            throw new Error(`alphabet.decode: not string element=${letter}`);
          const index = alphabet2.indexOf(letter);
          if (index === -1)
            throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
          return index;
        });
      }
    };
  }
  function join(separator = "") {
    if (typeof separator !== "string")
      throw new Error("join separator should be string");
    return {
      encode: (from2) => {
        if (!Array.isArray(from2) || from2.length && typeof from2[0] !== "string")
          throw new Error("join.encode input should be array of strings");
        for (let i of from2)
          if (typeof i !== "string")
            throw new Error(`join.encode: non-string input=${i}`);
        return from2.join(separator);
      },
      decode: (to) => {
        if (typeof to !== "string")
          throw new Error("join.decode input should be string");
        return to.split(separator);
      }
    };
  }
  function padding(bits2, chr2 = "=") {
    assertNumber(bits2);
    if (typeof chr2 !== "string")
      throw new Error("padding chr should be string");
    return {
      encode(data) {
        if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
          throw new Error("padding.encode input should be array of strings");
        for (let i of data)
          if (typeof i !== "string")
            throw new Error(`padding.encode: non-string input=${i}`);
        while (data.length * bits2 % 8)
          data.push(chr2);
        return data;
      },
      decode(input) {
        if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
          throw new Error("padding.encode input should be array of strings");
        for (let i of input)
          if (typeof i !== "string")
            throw new Error(`padding.decode: non-string input=${i}`);
        let end2 = input.length;
        if (end2 * bits2 % 8)
          throw new Error("Invalid padding: string should have whole number of bytes");
        for (; end2 > 0 && input[end2 - 1] === chr2; end2--) {
          if (!((end2 - 1) * bits2 % 8))
            throw new Error("Invalid padding: string has too much padding");
        }
        return input.slice(0, end2);
      }
    };
  }
  function normalize(fn2) {
    if (typeof fn2 !== "function")
      throw new Error("normalize fn should be function");
    return { encode: (from2) => from2, decode: (to) => fn2(to) };
  }
  function convertRadix(data, from2, to) {
    if (from2 < 2)
      throw new Error(`convertRadix: wrong from=${from2}, base cannot be less than 2`);
    if (to < 2)
      throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
    if (!Array.isArray(data))
      throw new Error("convertRadix: data should be array");
    if (!data.length)
      return [];
    let pos = 0;
    const res = [];
    const digits = Array.from(data);
    digits.forEach((d) => {
      assertNumber(d);
      if (d < 0 || d >= from2)
        throw new Error(`Wrong integer: ${d}`);
    });
    while (true) {
      let carry = 0;
      let done = true;
      for (let i = pos; i < digits.length; i++) {
        const digit = digits[i];
        const digitBase = from2 * carry + digit;
        if (!Number.isSafeInteger(digitBase) || from2 * carry / from2 !== carry || digitBase - digit !== from2 * carry) {
          throw new Error("convertRadix: carry overflow");
        }
        carry = digitBase % to;
        digits[i] = Math.floor(digitBase / to);
        if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)
          throw new Error("convertRadix: carry overflow");
        if (!done)
          continue;
        else if (!digits[i])
          pos = i;
        else
          done = false;
      }
      res.push(carry);
      if (done)
        break;
    }
    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
      res.push(0);
    return res.reverse();
  }
  var gcd = (a, b) => !b ? a : gcd(b, a % b);
  var radix2carry = (from2, to) => from2 + (to - gcd(from2, to));
  function convertRadix2(data, from2, to, padding2) {
    if (!Array.isArray(data))
      throw new Error("convertRadix2: data should be array");
    if (from2 <= 0 || from2 > 32)
      throw new Error(`convertRadix2: wrong from=${from2}`);
    if (to <= 0 || to > 32)
      throw new Error(`convertRadix2: wrong to=${to}`);
    if (radix2carry(from2, to) > 32) {
      throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${radix2carry(from2, to)}`);
    }
    let carry = 0;
    let pos = 0;
    const mask = 2 ** to - 1;
    const res = [];
    for (const n of data) {
      assertNumber(n);
      if (n >= 2 ** from2)
        throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
      carry = carry << from2 | n;
      if (pos + from2 > 32)
        throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
      pos += from2;
      for (; pos >= to; pos -= to)
        res.push((carry >> pos - to & mask) >>> 0);
      carry &= 2 ** pos - 1;
    }
    carry = carry << to - pos & mask;
    if (!padding2 && pos >= from2)
      throw new Error("Excess padding");
    if (!padding2 && carry)
      throw new Error(`Non-zero padding: ${carry}`);
    if (padding2 && pos > 0)
      res.push(carry >>> 0);
    return res;
  }
  function radix(num) {
    assertNumber(num);
    return {
      encode: (bytes3) => {
        if (!(bytes3 instanceof Uint8Array))
          throw new Error("radix.encode input should be Uint8Array");
        return convertRadix(Array.from(bytes3), 2 ** 8, num);
      },
      decode: (digits) => {
        if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
          throw new Error("radix.decode input should be array of strings");
        return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
      }
    };
  }
  function radix2(bits2, revPadding = false) {
    assertNumber(bits2);
    if (bits2 <= 0 || bits2 > 32)
      throw new Error("radix2: bits should be in (0..32]");
    if (radix2carry(8, bits2) > 32 || radix2carry(bits2, 8) > 32)
      throw new Error("radix2: carry overflow");
    return {
      encode: (bytes3) => {
        if (!(bytes3 instanceof Uint8Array))
          throw new Error("radix2.encode input should be Uint8Array");
        return convertRadix2(Array.from(bytes3), 8, bits2, !revPadding);
      },
      decode: (digits) => {
        if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
          throw new Error("radix2.decode input should be array of strings");
        return Uint8Array.from(convertRadix2(digits, bits2, 8, revPadding));
      }
    };
  }
  function unsafeWrapper(fn2) {
    if (typeof fn2 !== "function")
      throw new Error("unsafeWrapper fn should be function");
    return function(...args) {
      try {
        return fn2.apply(null, args);
      } catch (e) {
      }
    };
  }
  var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
  var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
  var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
  var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
  var base64 = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
  var base64url = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
  var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
  var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
  var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
  var XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
  var base58xmr = {
    encode(data) {
      let res = "";
      for (let i = 0; i < data.length; i += 8) {
        const block = data.subarray(i, i + 8);
        res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
      }
      return res;
    },
    decode(str) {
      let res = [];
      for (let i = 0; i < str.length; i += 11) {
        const slice = str.slice(i, i + 11);
        const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
        const block = base58.decode(slice);
        for (let j = 0; j < block.length - blockLen; j++) {
          if (block[j] !== 0)
            throw new Error("base58xmr: wrong padding");
        }
        res = res.concat(Array.from(block.slice(block.length - blockLen)));
      }
      return Uint8Array.from(res);
    }
  };
  var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
  var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
  function bech32Polymod(pre) {
    const b = pre >> 25;
    let chk = (pre & 33554431) << 5;
    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
      if ((b >> i & 1) === 1)
        chk ^= POLYMOD_GENERATORS[i];
    }
    return chk;
  }
  function bechChecksum(prefix2, words, encodingConst = 1) {
    const len = prefix2.length;
    let chk = 1;
    for (let i = 0; i < len; i++) {
      const c2 = prefix2.charCodeAt(i);
      if (c2 < 33 || c2 > 126)
        throw new Error(`Invalid prefix (${prefix2})`);
      chk = bech32Polymod(chk) ^ c2 >> 5;
    }
    chk = bech32Polymod(chk);
    for (let i = 0; i < len; i++)
      chk = bech32Polymod(chk) ^ prefix2.charCodeAt(i) & 31;
    for (let v3 of words)
      chk = bech32Polymod(chk) ^ v3;
    for (let i = 0; i < 6; i++)
      chk = bech32Polymod(chk);
    chk ^= encodingConst;
    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
  }
  function genBech32(encoding) {
    const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
    const _words = radix2(5);
    const fromWords = _words.decode;
    const toWords = _words.encode;
    const fromWordsUnsafe = unsafeWrapper(fromWords);
    function encode(prefix2, words, limit = 90) {
      if (typeof prefix2 !== "string")
        throw new Error(`bech32.encode prefix should be string, not ${typeof prefix2}`);
      if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
        throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
      const actualLength = prefix2.length + 7 + words.length;
      if (limit !== false && actualLength > limit)
        throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
      prefix2 = prefix2.toLowerCase();
      return `${prefix2}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix2, words, ENCODING_CONST)}`;
    }
    function decode2(str, limit = 90) {
      if (typeof str !== "string")
        throw new Error(`bech32.decode input should be string, not ${typeof str}`);
      if (str.length < 8 || limit !== false && str.length > limit)
        throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
      const lowered = str.toLowerCase();
      if (str !== lowered && str !== str.toUpperCase())
        throw new Error(`String must be lowercase or uppercase`);
      str = lowered;
      const sepIndex = str.lastIndexOf("1");
      if (sepIndex === 0 || sepIndex === -1)
        throw new Error(`Letter "1" must be present between prefix and data only`);
      const prefix2 = str.slice(0, sepIndex);
      const _words2 = str.slice(sepIndex + 1);
      if (_words2.length < 6)
        throw new Error("Data must be at least 6 characters long");
      const words = BECH_ALPHABET.decode(_words2).slice(0, -6);
      const sum = bechChecksum(prefix2, words, ENCODING_CONST);
      if (!_words2.endsWith(sum))
        throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
      return { prefix: prefix2, words };
    }
    const decodeUnsafe = unsafeWrapper(decode2);
    function decodeToBytes(str) {
      const { prefix: prefix2, words } = decode2(str, false);
      return { prefix: prefix2, words, bytes: fromWords(words) };
    }
    return { encode, decode: decode2, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
  }
  var bech32 = genBech32("bech32");
  var bech32m = genBech32("bech32m");
  var utf8 = {
    encode: (data) => new TextDecoder().decode(data),
    decode: (str) => new TextEncoder().encode(str)
  };
  var hex2 = chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s) => {
    if (typeof s !== "string" || s.length % 2)
      throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
    return s.toLowerCase();
  }));
  var CODERS = {
    utf8,
    hex: hex2,
    base16,
    base32,
    base64,
    base64url,
    base58,
    base58xmr
  };
  var coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(", ")}`;

  // ../../node_modules/@polkadot/util-crypto/base32/helpers.js
  function createDecode({ coder, ipfs }, validate) {
    return (value, ipfsCompat) => {
      validate(value, ipfsCompat);
      return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
    };
  }
  function createEncode({ coder, ipfs }) {
    return (value, ipfsCompat) => {
      const out = coder.encode(u8aToU8a(value));
      return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
    };
  }
  function createValidate({ chars, ipfs, type }) {
    return (value, ipfsCompat) => {
      if (typeof value !== "string") {
        throw new Error(`Expected ${type} string input`);
      } else if (ipfs && ipfsCompat && value[0] !== ipfs) {
        throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
      }
      for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {
        if (!(chars.includes(value[i]) || value[i] === "=" && (i === value.length - 1 || !chars.includes(value[i + 1])))) {
          throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
        }
      }
      return true;
    };
  }

  // ../../node_modules/@polkadot/util-crypto/base58/bs58.js
  var config = {
    chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
    coder: base58,
    ipfs: "z",
    type: "base58"
  };
  var base58Validate = /* @__PURE__ */ createValidate(config);
  var base58Decode = /* @__PURE__ */ createDecode(config, base58Validate);
  var base58Encode = /* @__PURE__ */ createEncode(config);

  // ../../node_modules/@noble/hashes/esm/_assert.js
  function number(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error(`Wrong positive integer: ${n}`);
  }
  function bool(b) {
    if (typeof b !== "boolean")
      throw new Error(`Expected boolean, not ${b}`);
  }
  function bytes2(b, ...lengths) {
    if (!(b instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
  }
  function hash3(hash4) {
    if (typeof hash4 !== "function" || typeof hash4.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(hash4.outputLen);
    number(hash4.blockLen);
  }
  function exists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function output(out, instance) {
    bytes2(out);
    const min2 = instance.outputLen;
    if (out.length < min2) {
      throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
    }
  }
  var assert2 = {
    number,
    bool,
    bytes: bytes2,
    hash: hash3,
    exists,
    output
  };
  var assert_default = assert2;

  // ../../node_modules/@noble/hashes/esm/crypto.js
  var crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

  // ../../node_modules/@noble/hashes/esm/utils.js
  var u322 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  var rotr = (word, shift) => word << 32 - shift | word >>> shift;
  var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  if (!isLE)
    throw new Error("Non little-endian hardware is not supported");
  var hexes = Array.from({ length: 256 }, (v3, i) => i.toString(16).padStart(2, "0"));
  function utf8ToBytes(str) {
    if (typeof str !== "string") {
      throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
    }
    return new TextEncoder().encode(str);
  }
  function toBytes(data) {
    if (typeof data === "string")
      data = utf8ToBytes(data);
    if (!(data instanceof Uint8Array))
      throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
    return data;
  }
  function concatBytes(...arrays) {
    if (!arrays.every((a) => a instanceof Uint8Array))
      throw new Error("Uint8Array list expected");
    if (arrays.length === 1)
      return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
      const arr = arrays[i];
      result.set(arr, pad);
      pad += arr.length;
    }
    return result;
  }
  var Hash = class {
    clone() {
      return this._cloneInto();
    }
  };
  function wrapConstructor(hashConstructor) {
    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();
    const tmp = hashConstructor();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashConstructor();
    return hashC;
  }
  function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function randomBytes(bytesLength = 32) {
    if (crypto2 && typeof crypto2.getRandomValues === "function") {
      return crypto2.getRandomValues(new Uint8Array(bytesLength));
    }
    throw new Error("crypto.getRandomValues must be defined");
  }

  // ../../node_modules/@noble/hashes/esm/_blake2.js
  var SIGMA = new Uint8Array([
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3
  ]);
  var BLAKE2 = class extends Hash {
    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.length = 0;
      this.pos = 0;
      this.finished = false;
      this.destroyed = false;
      assert_default.number(blockLen);
      assert_default.number(outputLen);
      assert_default.number(keyLen);
      if (outputLen < 0 || outputLen > keyLen)
        throw new Error("outputLen bigger than keyLen");
      if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen))
        throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
      if (opts.salt !== void 0 && opts.salt.length !== saltLen)
        throw new Error(`salt must be ${saltLen} byte long or undefined`);
      if (opts.personalization !== void 0 && opts.personalization.length !== persLen)
        throw new Error(`personalization must be ${persLen} byte long or undefined`);
      this.buffer32 = u322(this.buffer = new Uint8Array(blockLen));
    }
    update(data) {
      assert_default.exists(this);
      const { blockLen, buffer, buffer32 } = this;
      data = toBytes(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        if (this.pos === blockLen) {
          this.compress(buffer32, 0, false);
          this.pos = 0;
        }
        const take2 = Math.min(blockLen - this.pos, len - pos);
        const dataOffset = data.byteOffset + pos;
        if (take2 === blockLen && !(dataOffset % 4) && pos + take2 < len) {
          const data32 = new Uint32Array(data.buffer, dataOffset, Math.floor((len - pos) / 4));
          for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
            this.length += blockLen;
            this.compress(data32, pos32, false);
          }
          continue;
        }
        buffer.set(data.subarray(pos, pos + take2), this.pos);
        this.pos += take2;
        this.length += take2;
        pos += take2;
      }
      return this;
    }
    digestInto(out) {
      assert_default.exists(this);
      assert_default.output(out, this);
      const { pos, buffer32 } = this;
      this.finished = true;
      this.buffer.subarray(pos).fill(0);
      this.compress(buffer32, 0, true);
      const out32 = u322(out);
      this.get().forEach((v3, i) => out32[i] = v3);
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      const { buffer, length, finished, destroyed, outputLen, pos } = this;
      to || (to = new this.constructor({ dkLen: outputLen }));
      to.set(...this.get());
      to.length = length;
      to.finished = finished;
      to.destroyed = destroyed;
      to.outputLen = outputLen;
      to.buffer.set(buffer);
      to.pos = pos;
      return to;
    }
  };

  // ../../node_modules/@noble/hashes/esm/_u64.js
  var U32_MASK64 = BigInt(2 ** 32 - 1);
  var _32n = BigInt(32);
  function fromBig(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
    return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
      const { h, l: l15 } = fromBig(lst[i], le);
      [Ah[i], Al[i]] = [h, l15];
    }
    return [Ah, Al];
  }
  var toBig = (h, l15) => BigInt(h >>> 0) << _32n | BigInt(l15 >>> 0);
  var shrSH = (h, l15, s) => h >>> s;
  var shrSL = (h, l15, s) => h << 32 - s | l15 >>> s;
  var rotrSH = (h, l15, s) => h >>> s | l15 << 32 - s;
  var rotrSL = (h, l15, s) => h << 32 - s | l15 >>> s;
  var rotrBH = (h, l15, s) => h << 64 - s | l15 >>> s - 32;
  var rotrBL = (h, l15, s) => h >>> s - 32 | l15 << 64 - s;
  var rotr32H = (h, l15) => l15;
  var rotr32L = (h, l15) => h;
  var rotlSH = (h, l15, s) => h << s | l15 >>> 32 - s;
  var rotlSL = (h, l15, s) => l15 << s | h >>> 32 - s;
  var rotlBH = (h, l15, s) => l15 << s - 32 | h >>> 64 - s;
  var rotlBL = (h, l15, s) => h << s - 32 | l15 >>> 64 - s;
  function add(Ah, Al, Bh, Bl) {
    const l15 = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l15 / 2 ** 32 | 0) | 0, l: l15 | 0 };
  }
  var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
  var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
  var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
  var u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
  };
  var u64_default = u64;

  // ../../node_modules/@noble/hashes/esm/blake2b.js
  var IV = new Uint32Array([
    4089235720,
    1779033703,
    2227873595,
    3144134277,
    4271175723,
    1013904242,
    1595750129,
    2773480762,
    2917565137,
    1359893119,
    725511199,
    2600822924,
    4215389547,
    528734635,
    327033209,
    1541459225
  ]);
  var BUF = new Uint32Array(32);
  function G1(a, b, c2, d, msg, x) {
    const Xl = msg[x], Xh = msg[x + 1];
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1];
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
    let Cl = BUF[2 * c2], Ch = BUF[2 * c2 + 1];
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
    let ll = u64_default.add3L(Al, Bl, Xl);
    Ah = u64_default.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: u64_default.rotr32H(Dh, Dl), Dl: u64_default.rotr32L(Dh, Dl) });
    ({ h: Ch, l: Cl } = u64_default.add(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: u64_default.rotrSH(Bh, Bl, 24), Bl: u64_default.rotrSL(Bh, Bl, 24) });
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c2] = Cl, BUF[2 * c2 + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
  }
  function G2(a, b, c2, d, msg, x) {
    const Xl = msg[x], Xh = msg[x + 1];
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1];
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
    let Cl = BUF[2 * c2], Ch = BUF[2 * c2 + 1];
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
    let ll = u64_default.add3L(Al, Bl, Xl);
    Ah = u64_default.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: u64_default.rotrSH(Dh, Dl, 16), Dl: u64_default.rotrSL(Dh, Dl, 16) });
    ({ h: Ch, l: Cl } = u64_default.add(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: u64_default.rotrBH(Bh, Bl, 63), Bl: u64_default.rotrBL(Bh, Bl, 63) });
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c2] = Cl, BUF[2 * c2 + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
  }
  var BLAKE2b = class extends BLAKE2 {
    constructor(opts = {}) {
      super(128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
      this.v0l = IV[0] | 0;
      this.v0h = IV[1] | 0;
      this.v1l = IV[2] | 0;
      this.v1h = IV[3] | 0;
      this.v2l = IV[4] | 0;
      this.v2h = IV[5] | 0;
      this.v3l = IV[6] | 0;
      this.v3h = IV[7] | 0;
      this.v4l = IV[8] | 0;
      this.v4h = IV[9] | 0;
      this.v5l = IV[10] | 0;
      this.v5h = IV[11] | 0;
      this.v6l = IV[12] | 0;
      this.v6h = IV[13] | 0;
      this.v7l = IV[14] | 0;
      this.v7h = IV[15] | 0;
      const keyLength = opts.key ? opts.key.length : 0;
      this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
      if (opts.salt) {
        const salt = u322(toBytes(opts.salt));
        this.v4l ^= salt[0];
        this.v4h ^= salt[1];
        this.v5l ^= salt[2];
        this.v5h ^= salt[3];
      }
      if (opts.personalization) {
        const pers = u322(toBytes(opts.personalization));
        this.v6l ^= pers[0];
        this.v6h ^= pers[1];
        this.v7l ^= pers[2];
        this.v7h ^= pers[3];
      }
      if (opts.key) {
        const tmp = new Uint8Array(this.blockLen);
        tmp.set(toBytes(opts.key));
        this.update(tmp);
      }
    }
    get() {
      let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
      return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
    }
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
      this.v0l = v0l | 0;
      this.v0h = v0h | 0;
      this.v1l = v1l | 0;
      this.v1h = v1h | 0;
      this.v2l = v2l | 0;
      this.v2h = v2h | 0;
      this.v3l = v3l | 0;
      this.v3h = v3h | 0;
      this.v4l = v4l | 0;
      this.v4h = v4h | 0;
      this.v5l = v5l | 0;
      this.v5h = v5h | 0;
      this.v6l = v6l | 0;
      this.v6h = v6h | 0;
      this.v7l = v7l | 0;
      this.v7h = v7h | 0;
    }
    compress(msg, offset2, isLast) {
      this.get().forEach((v3, i) => BUF[i] = v3);
      BUF.set(IV, 16);
      let { h, l: l15 } = u64_default.fromBig(BigInt(this.length));
      BUF[24] = IV[8] ^ l15;
      BUF[25] = IV[9] ^ h;
      if (isLast) {
        BUF[28] = ~BUF[28];
        BUF[29] = ~BUF[29];
      }
      let j = 0;
      const s = SIGMA;
      for (let i = 0; i < 12; i++) {
        G1(0, 4, 8, 12, msg, offset2 + 2 * s[j++]);
        G2(0, 4, 8, 12, msg, offset2 + 2 * s[j++]);
        G1(1, 5, 9, 13, msg, offset2 + 2 * s[j++]);
        G2(1, 5, 9, 13, msg, offset2 + 2 * s[j++]);
        G1(2, 6, 10, 14, msg, offset2 + 2 * s[j++]);
        G2(2, 6, 10, 14, msg, offset2 + 2 * s[j++]);
        G1(3, 7, 11, 15, msg, offset2 + 2 * s[j++]);
        G2(3, 7, 11, 15, msg, offset2 + 2 * s[j++]);
        G1(0, 5, 10, 15, msg, offset2 + 2 * s[j++]);
        G2(0, 5, 10, 15, msg, offset2 + 2 * s[j++]);
        G1(1, 6, 11, 12, msg, offset2 + 2 * s[j++]);
        G2(1, 6, 11, 12, msg, offset2 + 2 * s[j++]);
        G1(2, 7, 8, 13, msg, offset2 + 2 * s[j++]);
        G2(2, 7, 8, 13, msg, offset2 + 2 * s[j++]);
        G1(3, 4, 9, 14, msg, offset2 + 2 * s[j++]);
        G2(3, 4, 9, 14, msg, offset2 + 2 * s[j++]);
      }
      this.v0l ^= BUF[0] ^ BUF[16];
      this.v0h ^= BUF[1] ^ BUF[17];
      this.v1l ^= BUF[2] ^ BUF[18];
      this.v1h ^= BUF[3] ^ BUF[19];
      this.v2l ^= BUF[4] ^ BUF[20];
      this.v2h ^= BUF[5] ^ BUF[21];
      this.v3l ^= BUF[6] ^ BUF[22];
      this.v3h ^= BUF[7] ^ BUF[23];
      this.v4l ^= BUF[8] ^ BUF[24];
      this.v4h ^= BUF[9] ^ BUF[25];
      this.v5l ^= BUF[10] ^ BUF[26];
      this.v5h ^= BUF[11] ^ BUF[27];
      this.v6l ^= BUF[12] ^ BUF[28];
      this.v6h ^= BUF[13] ^ BUF[29];
      this.v7l ^= BUF[14] ^ BUF[30];
      this.v7h ^= BUF[15] ^ BUF[31];
      BUF.fill(0);
    }
    destroy() {
      this.destroyed = true;
      this.buffer32.fill(0);
      this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
  };
  var blake2b2 = wrapConstructorWithOpts((opts) => new BLAKE2b(opts));

  // ../../node_modules/@polkadot/util-crypto/helpers.js
  function createAsHex(fn2) {
    return (...args) => u8aToHex(fn2(...args));
  }
  function createDualHasher(wa, js) {
    return (value, bitLength = 256, onlyJs) => {
      const u8a2 = u8aToU8a(value);
      return !hasBigInt || !onlyJs && isReady() ? wa[bitLength](u8a2) : js[bitLength](u8a2);
    };
  }

  // ../../node_modules/@polkadot/util-crypto/blake2/asU8a.js
  function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
    const byteLength = Math.ceil(bitLength / 8);
    const u8a2 = u8aToU8a(data);
    return !hasBigInt || !onlyJs && isReady() ? blake2b(u8a2, u8aToU8a(key), byteLength) : key ? blake2b2(u8a2, { dkLen: byteLength, key }) : blake2b2(u8a2, { dkLen: byteLength });
  }
  var blake2AsHex = /* @__PURE__ */ createAsHex(blake2AsU8a);

  // ../../node_modules/@polkadot/util-crypto/address/sshash.js
  var SS58_PREFIX = stringToU8a("SS58PRE");
  function sshash(key) {
    return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
  }

  // ../../node_modules/@polkadot/util-crypto/address/checksum.js
  function checkAddressChecksum(decoded) {
    const ss58Length = decoded[0] & 64 ? 2 : 1;
    const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
    const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
    const length = decoded.length - (isPublicKey ? 2 : 1);
    const hash4 = sshash(decoded.subarray(0, length));
    const isValid = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash4[0] && decoded[decoded.length - 1] === hash4[1] : decoded[decoded.length - 1] === hash4[0]);
    return [isValid, length, ss58Length, ss58Decoded];
  }

  // ../../node_modules/@substrate/ss58-registry/esm/index.js
  var esm_default = [
    {
      "prefix": 0,
      "network": "polkadot",
      "displayName": "Polkadot Relay Chain",
      "symbols": [
        "DOT"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://polkadot.network"
    },
    {
      "prefix": 1,
      "network": "BareSr25519",
      "displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
      "symbols": [],
      "decimals": [],
      "standardAccount": "Sr25519",
      "website": null
    },
    {
      "prefix": 2,
      "network": "kusama",
      "displayName": "Kusama Relay Chain",
      "symbols": [
        "KSM"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://kusama.network"
    },
    {
      "prefix": 3,
      "network": "BareEd25519",
      "displayName": "Bare 32-bit Ed25519 public key.",
      "symbols": [],
      "decimals": [],
      "standardAccount": "Ed25519",
      "website": null
    },
    {
      "prefix": 4,
      "network": "katalchain",
      "displayName": "Katal Chain",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 5,
      "network": "astar",
      "displayName": "Astar Network",
      "symbols": [
        "ASTR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://astar.network"
    },
    {
      "prefix": 6,
      "network": "bifrost",
      "displayName": "Bifrost",
      "symbols": [
        "BNC"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://bifrost.finance/"
    },
    {
      "prefix": 7,
      "network": "edgeware",
      "displayName": "Edgeware",
      "symbols": [
        "EDG"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://edgewa.re"
    },
    {
      "prefix": 8,
      "network": "karura",
      "displayName": "Karura",
      "symbols": [
        "KAR"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://karura.network/"
    },
    {
      "prefix": 9,
      "network": "reynolds",
      "displayName": "Laminar Reynolds Canary",
      "symbols": [
        "REY"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "http://laminar.network/"
    },
    {
      "prefix": 10,
      "network": "acala",
      "displayName": "Acala",
      "symbols": [
        "ACA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://acala.network/"
    },
    {
      "prefix": 11,
      "network": "laminar",
      "displayName": "Laminar",
      "symbols": [
        "LAMI"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "http://laminar.network/"
    },
    {
      "prefix": 12,
      "network": "polymesh",
      "displayName": "Polymesh",
      "symbols": [
        "POLYX"
      ],
      "decimals": [
        6
      ],
      "standardAccount": "*25519",
      "website": "https://polymath.network/"
    },
    {
      "prefix": 13,
      "network": "integritee",
      "displayName": "Integritee",
      "symbols": [
        "TEER"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://integritee.network"
    },
    {
      "prefix": 14,
      "network": "totem",
      "displayName": "Totem",
      "symbols": [
        "TOTEM"
      ],
      "decimals": [
        0
      ],
      "standardAccount": "*25519",
      "website": "https://totemaccounting.com"
    },
    {
      "prefix": 15,
      "network": "synesthesia",
      "displayName": "Synesthesia",
      "symbols": [
        "SYN"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://synesthesia.network/"
    },
    {
      "prefix": 16,
      "network": "kulupu",
      "displayName": "Kulupu",
      "symbols": [
        "KLP"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://kulupu.network/"
    },
    {
      "prefix": 17,
      "network": "dark",
      "displayName": "Dark Mainnet",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 18,
      "network": "darwinia",
      "displayName": "Darwinia Network",
      "symbols": [
        "RING",
        "KTON"
      ],
      "decimals": [
        9,
        9
      ],
      "standardAccount": "*25519",
      "website": "https://darwinia.network/"
    },
    {
      "prefix": 19,
      "network": "watr",
      "displayName": "Watr Protocol",
      "symbols": [
        "WATR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://www.watr.org"
    },
    {
      "prefix": 20,
      "network": "stafi",
      "displayName": "Stafi",
      "symbols": [
        "FIS"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://stafi.io"
    },
    {
      "prefix": 22,
      "network": "dock-pos-mainnet",
      "displayName": "Dock Mainnet",
      "symbols": [
        "DCK"
      ],
      "decimals": [
        6
      ],
      "standardAccount": "*25519",
      "website": "https://dock.io"
    },
    {
      "prefix": 23,
      "network": "shift",
      "displayName": "ShiftNrg",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 24,
      "network": "zero",
      "displayName": "ZERO",
      "symbols": [
        "ZERO"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://zero.io"
    },
    {
      "prefix": 25,
      "network": "zero-alphaville",
      "displayName": "ZERO Alphaville",
      "symbols": [
        "ZERO"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://zero.io"
    },
    {
      "prefix": 26,
      "network": "jupiter",
      "displayName": "Jupiter",
      "symbols": [
        "jDOT"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://jupiter.patract.io"
    },
    {
      "prefix": 27,
      "network": "kabocha",
      "displayName": "Kabocha",
      "symbols": [
        "KAB"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://kabocha.network"
    },
    {
      "prefix": 28,
      "network": "subsocial",
      "displayName": "Subsocial",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 29,
      "network": "cord",
      "displayName": "CORD Network",
      "symbols": [
        "DHI",
        "WAY"
      ],
      "decimals": [
        12,
        12
      ],
      "standardAccount": "*25519",
      "website": "https://cord.network/"
    },
    {
      "prefix": 30,
      "network": "phala",
      "displayName": "Phala Network",
      "symbols": [
        "PHA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://phala.network"
    },
    {
      "prefix": 31,
      "network": "litentry",
      "displayName": "Litentry Network",
      "symbols": [
        "LIT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://litentry.com/"
    },
    {
      "prefix": 32,
      "network": "robonomics",
      "displayName": "Robonomics",
      "symbols": [
        "XRT"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://robonomics.network"
    },
    {
      "prefix": 33,
      "network": "datahighway",
      "displayName": "DataHighway",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 34,
      "network": "ares",
      "displayName": "Ares Protocol",
      "symbols": [
        "ARES"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://www.aresprotocol.com/"
    },
    {
      "prefix": 35,
      "network": "vln",
      "displayName": "Valiu Liquidity Network",
      "symbols": [
        "USDv"
      ],
      "decimals": [
        15
      ],
      "standardAccount": "*25519",
      "website": "https://valiu.com/"
    },
    {
      "prefix": 36,
      "network": "centrifuge",
      "displayName": "Centrifuge Chain",
      "symbols": [
        "CFG"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://centrifuge.io/"
    },
    {
      "prefix": 37,
      "network": "nodle",
      "displayName": "Nodle Chain",
      "symbols": [
        "NODL"
      ],
      "decimals": [
        11
      ],
      "standardAccount": "*25519",
      "website": "https://nodle.io/"
    },
    {
      "prefix": 38,
      "network": "kilt",
      "displayName": "KILT Spiritnet",
      "symbols": [
        "KILT"
      ],
      "decimals": [
        15
      ],
      "standardAccount": "*25519",
      "website": "https://kilt.io/"
    },
    {
      "prefix": 39,
      "network": "mathchain",
      "displayName": "MathChain mainnet",
      "symbols": [
        "MATH"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://mathwallet.org"
    },
    {
      "prefix": 40,
      "network": "mathchain-testnet",
      "displayName": "MathChain testnet",
      "symbols": [
        "MATH"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://mathwallet.org"
    },
    {
      "prefix": 41,
      "network": "poli",
      "displayName": "Polimec Chain",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": "https://polimec.io/"
    },
    {
      "prefix": 42,
      "network": "substrate",
      "displayName": "Substrate",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": "https://substrate.io/"
    },
    {
      "prefix": 43,
      "network": "BareSecp256k1",
      "displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
      "symbols": [],
      "decimals": [],
      "standardAccount": "secp256k1",
      "website": null
    },
    {
      "prefix": 44,
      "network": "chainx",
      "displayName": "ChainX",
      "symbols": [
        "PCX"
      ],
      "decimals": [
        8
      ],
      "standardAccount": "*25519",
      "website": "https://chainx.org/"
    },
    {
      "prefix": 45,
      "network": "uniarts",
      "displayName": "UniArts Network",
      "symbols": [
        "UART",
        "UINK"
      ],
      "decimals": [
        12,
        12
      ],
      "standardAccount": "*25519",
      "website": "https://uniarts.me"
    },
    {
      "prefix": 46,
      "network": "reserved46",
      "displayName": "This prefix is reserved.",
      "symbols": [],
      "decimals": [],
      "standardAccount": null,
      "website": null
    },
    {
      "prefix": 47,
      "network": "reserved47",
      "displayName": "This prefix is reserved.",
      "symbols": [],
      "decimals": [],
      "standardAccount": null,
      "website": null
    },
    {
      "prefix": 48,
      "network": "neatcoin",
      "displayName": "Neatcoin Mainnet",
      "symbols": [
        "NEAT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://neatcoin.org"
    },
    {
      "prefix": 49,
      "network": "picasso",
      "displayName": "Picasso",
      "symbols": [
        "PICA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://picasso.composable.finance"
    },
    {
      "prefix": 50,
      "network": "composable",
      "displayName": "Composable Finance",
      "symbols": [
        "LAYR"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://composable.finance"
    },
    {
      "prefix": 51,
      "network": "oak",
      "displayName": "OAK Network",
      "symbols": [
        "OAK",
        "TUR"
      ],
      "decimals": [
        10,
        10
      ],
      "standardAccount": "*25519",
      "website": "https://oak.tech"
    },
    {
      "prefix": 52,
      "network": "KICO",
      "displayName": "KICO",
      "symbols": [
        "KICO"
      ],
      "decimals": [
        14
      ],
      "standardAccount": "*25519",
      "website": "https://dico.io"
    },
    {
      "prefix": 53,
      "network": "DICO",
      "displayName": "DICO",
      "symbols": [
        "DICO"
      ],
      "decimals": [
        14
      ],
      "standardAccount": "*25519",
      "website": "https://dico.io"
    },
    {
      "prefix": 54,
      "network": "cere",
      "displayName": "Cere Network",
      "symbols": [
        "CERE"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://cere.network"
    },
    {
      "prefix": 55,
      "network": "xxnetwork",
      "displayName": "xx network",
      "symbols": [
        "XX"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://xx.network"
    },
    {
      "prefix": 56,
      "network": "pendulum",
      "displayName": "Pendulum chain",
      "symbols": [
        "PEN"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://pendulumchain.org/"
    },
    {
      "prefix": 57,
      "network": "amplitude",
      "displayName": "Amplitude chain",
      "symbols": [
        "AMPE"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://pendulumchain.org/"
    },
    {
      "prefix": 63,
      "network": "hydradx",
      "displayName": "HydraDX",
      "symbols": [
        "HDX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://hydradx.io"
    },
    {
      "prefix": 65,
      "network": "aventus",
      "displayName": "Aventus Mainnet",
      "symbols": [
        "AVT"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://aventus.io"
    },
    {
      "prefix": 66,
      "network": "crust",
      "displayName": "Crust Network",
      "symbols": [
        "CRU"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://crust.network"
    },
    {
      "prefix": 67,
      "network": "genshiro",
      "displayName": "Genshiro Network",
      "symbols": [
        "GENS",
        "EQD",
        "LPT0"
      ],
      "decimals": [
        9,
        9,
        9
      ],
      "standardAccount": "*25519",
      "website": "https://genshiro.equilibrium.io"
    },
    {
      "prefix": 68,
      "network": "equilibrium",
      "displayName": "Equilibrium Network",
      "symbols": [
        "EQ"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://equilibrium.io"
    },
    {
      "prefix": 69,
      "network": "sora",
      "displayName": "SORA Network",
      "symbols": [
        "XOR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://sora.org"
    },
    {
      "prefix": 71,
      "network": "p3d",
      "displayName": "3DP network",
      "symbols": [
        "P3D"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://3dpass.org"
    },
    {
      "prefix": 72,
      "network": "p3dt",
      "displayName": "3DP test network",
      "symbols": [
        "P3Dt"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://3dpass.org"
    },
    {
      "prefix": 73,
      "network": "zeitgeist",
      "displayName": "Zeitgeist",
      "symbols": [
        "ZTG"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://zeitgeist.pm"
    },
    {
      "prefix": 77,
      "network": "manta",
      "displayName": "Manta network",
      "symbols": [
        "MANTA"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://manta.network"
    },
    {
      "prefix": 78,
      "network": "calamari",
      "displayName": "Calamari: Manta Canary Network",
      "symbols": [
        "KMA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://manta.network"
    },
    {
      "prefix": 81,
      "network": "sora_dot_para",
      "displayName": "SORA Polkadot Parachain",
      "symbols": [
        "XOR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://sora.org"
    },
    {
      "prefix": 88,
      "network": "polkadex",
      "displayName": "Polkadex Mainnet",
      "symbols": [
        "PDEX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://polkadex.trade"
    },
    {
      "prefix": 89,
      "network": "polkadexparachain",
      "displayName": "Polkadex Parachain",
      "symbols": [
        "PDEX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://polkadex.trade"
    },
    {
      "prefix": 90,
      "network": "frequency",
      "displayName": "Frequency",
      "symbols": [
        "FRQCY"
      ],
      "decimals": [
        8
      ],
      "standardAccount": "*25519",
      "website": "https://www.frequency.xyz"
    },
    {
      "prefix": 92,
      "network": "anmol",
      "displayName": "Anmol Network",
      "symbols": [
        "ANML"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://anmol.network/"
    },
    {
      "prefix": 93,
      "network": "fragnova",
      "displayName": "Fragnova Network",
      "symbols": [
        "NOVA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://fragnova.com"
    },
    {
      "prefix": 98,
      "network": "polkasmith",
      "displayName": "PolkaSmith Canary Network",
      "symbols": [
        "PKS"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://polkafoundry.com"
    },
    {
      "prefix": 99,
      "network": "polkafoundry",
      "displayName": "PolkaFoundry Network",
      "symbols": [
        "PKF"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://polkafoundry.com"
    },
    {
      "prefix": 100,
      "network": "ibtida",
      "displayName": "Anmol Network Ibtida Canary network",
      "symbols": [
        "IANML"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://anmol.network/"
    },
    {
      "prefix": 101,
      "network": "origintrail-parachain",
      "displayName": "OriginTrail Parachain",
      "symbols": [
        "OTP"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://parachain.origintrail.io/"
    },
    {
      "prefix": 105,
      "network": "pontem-network",
      "displayName": "Pontem Network",
      "symbols": [
        "PONT"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://pontem.network"
    },
    {
      "prefix": 110,
      "network": "heiko",
      "displayName": "Heiko",
      "symbols": [
        "HKO"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://parallel.fi/"
    },
    {
      "prefix": 113,
      "network": "integritee-incognito",
      "displayName": "Integritee Incognito",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": "https://integritee.network"
    },
    {
      "prefix": 117,
      "network": "tinker",
      "displayName": "Tinker",
      "symbols": [
        "TNKR"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://invarch.network"
    },
    {
      "prefix": 126,
      "network": "joystream",
      "displayName": "Joystream",
      "symbols": [
        "JOY"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://www.joystream.org"
    },
    {
      "prefix": 128,
      "network": "clover",
      "displayName": "Clover Finance",
      "symbols": [
        "CLV"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://clover.finance"
    },
    {
      "prefix": 129,
      "network": "dorafactory-polkadot",
      "displayName": "Dorafactory Polkadot Network",
      "symbols": [
        "DORA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://dorafactory.org"
    },
    {
      "prefix": 131,
      "network": "litmus",
      "displayName": "Litmus Network",
      "symbols": [
        "LIT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://litentry.com/"
    },
    {
      "prefix": 136,
      "network": "altair",
      "displayName": "Altair",
      "symbols": [
        "AIR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://centrifuge.io/"
    },
    {
      "prefix": 137,
      "network": "vara",
      "displayName": "Vara Network",
      "symbols": [
        "VARA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://vara-network.io/"
    },
    {
      "prefix": 172,
      "network": "parallel",
      "displayName": "Parallel",
      "symbols": [
        "PARA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://parallel.fi/"
    },
    {
      "prefix": 252,
      "network": "social-network",
      "displayName": "Social Network",
      "symbols": [
        "NET"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://social.network"
    },
    {
      "prefix": 255,
      "network": "quartz_mainnet",
      "displayName": "QUARTZ by UNIQUE",
      "symbols": [
        "QTZ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://unique.network"
    },
    {
      "prefix": 268,
      "network": "pioneer_network",
      "displayName": "Pioneer Network by Bit.Country",
      "symbols": [
        "NEER"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://bit.country"
    },
    {
      "prefix": 420,
      "network": "sora_kusama_para",
      "displayName": "SORA Kusama Parachain",
      "symbols": [
        "XOR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://sora.org"
    },
    {
      "prefix": 789,
      "network": "geek",
      "displayName": "GEEK Network",
      "symbols": [
        "GEEK"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://geek.gl"
    },
    {
      "prefix": 995,
      "network": "ternoa",
      "displayName": "Ternoa",
      "symbols": [
        "CAPS"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://www.ternoa.network"
    },
    {
      "prefix": 1110,
      "network": "efinity",
      "displayName": "Efinity",
      "symbols": [
        "EFI"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://efinity.io/"
    },
    {
      "prefix": 1221,
      "network": "peaq",
      "displayName": "Peaq Network",
      "symbols": [
        "PEAQ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "Sr25519",
      "website": "https://www.peaq.network/"
    },
    {
      "prefix": 1222,
      "network": "krest",
      "displayName": "Krest Network",
      "symbols": [
        "KREST"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "Sr25519",
      "website": "https://www.peaq.network/"
    },
    {
      "prefix": 1284,
      "network": "moonbeam",
      "displayName": "Moonbeam",
      "symbols": [
        "GLMR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "secp256k1",
      "website": "https://moonbeam.network"
    },
    {
      "prefix": 1285,
      "network": "moonriver",
      "displayName": "Moonriver",
      "symbols": [
        "MOVR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "secp256k1",
      "website": "https://moonbeam.network"
    },
    {
      "prefix": 1328,
      "network": "ajuna",
      "displayName": "Ajuna Network",
      "symbols": [
        "AJUN"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://ajuna.io"
    },
    {
      "prefix": 1337,
      "network": "bajun",
      "displayName": "Bajun Network",
      "symbols": [
        "BAJU"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://ajuna.io"
    },
    {
      "prefix": 1516,
      "network": "societal",
      "displayName": "Societal",
      "symbols": [
        "SCTL"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://www.sctl.xyz"
    },
    {
      "prefix": 1985,
      "network": "seals",
      "displayName": "Seals Network",
      "symbols": [
        "SEAL"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://seals.app"
    },
    {
      "prefix": 2007,
      "network": "kapex",
      "displayName": "Kapex",
      "symbols": [
        "KAPEX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://totemaccounting.com"
    },
    {
      "prefix": 2009,
      "network": "cloudwalk_mainnet",
      "displayName": "CloudWalk Network Mainnet",
      "symbols": [
        "CWN"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://explorer.mainnet.cloudwalk.io"
    },
    {
      "prefix": 2021,
      "network": "logion",
      "displayName": "logion network",
      "symbols": [
        "LGNT"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://logion.network"
    },
    {
      "prefix": 2032,
      "network": "interlay",
      "displayName": "Interlay",
      "symbols": [
        "INTR"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://interlay.io/"
    },
    {
      "prefix": 2092,
      "network": "kintsugi",
      "displayName": "Kintsugi",
      "symbols": [
        "KINT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://interlay.io/"
    },
    {
      "prefix": 2106,
      "network": "bitgreen",
      "displayName": "Bitgreen",
      "symbols": [
        "BBB"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://bitgreen.org/"
    },
    {
      "prefix": 2112,
      "network": "chainflip",
      "displayName": "Chainflip",
      "symbols": [
        "FLIP"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://chainflip.io/"
    },
    {
      "prefix": 2206,
      "network": "ICE",
      "displayName": "ICE Network",
      "symbols": [
        "ICY"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://icenetwork.io"
    },
    {
      "prefix": 2207,
      "network": "SNOW",
      "displayName": "SNOW: ICE Canary Network",
      "symbols": [
        "ICZ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://icenetwork.io"
    },
    {
      "prefix": 2254,
      "network": "subspace_testnet",
      "displayName": "Subspace testnet",
      "symbols": [
        "tSSC"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://subspace.network"
    },
    {
      "prefix": 4006,
      "network": "tangle",
      "displayName": "Tangle Network",
      "symbols": [
        "TNT"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://www.webb.tools/"
    },
    {
      "prefix": 4450,
      "network": "g1",
      "displayName": "\u011E1",
      "symbols": [
        "G1"
      ],
      "decimals": [
        2
      ],
      "standardAccount": "*25519",
      "website": "https://duniter.org"
    },
    {
      "prefix": 5234,
      "network": "humanode",
      "displayName": "Humanode Network",
      "symbols": [
        "HMND"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://humanode.io"
    },
    {
      "prefix": 6094,
      "network": "subspace",
      "displayName": "Subspace",
      "symbols": [
        "SSC"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://subspace.network"
    },
    {
      "prefix": 7007,
      "network": "tidefi",
      "displayName": "Tidefi",
      "symbols": [
        "TDFY"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://tidefi.com"
    },
    {
      "prefix": 7013,
      "network": "gm",
      "displayName": "GM",
      "symbols": [
        "FREN",
        "GM",
        "GN"
      ],
      "decimals": [
        12,
        0,
        0
      ],
      "standardAccount": "*25519",
      "website": "https://gmordie.com"
    },
    {
      "prefix": 7391,
      "network": "unique_mainnet",
      "displayName": "Unique Network",
      "symbols": [
        "UNQ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://unique.network"
    },
    {
      "prefix": 8883,
      "network": "sapphire_mainnet",
      "displayName": "Sapphire by Unique",
      "symbols": [
        "QTZ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://unique.network"
    },
    {
      "prefix": 9072,
      "network": "hashed",
      "displayName": "Hashed Network",
      "symbols": [
        "HASH"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://hashed.network"
    },
    {
      "prefix": 9807,
      "network": "dentnet",
      "displayName": "DENTNet",
      "symbols": [
        "DENTX"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://www.dentnet.io"
    },
    {
      "prefix": 9935,
      "network": "t3rn",
      "displayName": "t3rn",
      "symbols": [
        "TRN"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://t3rn.io/"
    },
    {
      "prefix": 10041,
      "network": "basilisk",
      "displayName": "Basilisk",
      "symbols": [
        "BSX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://bsx.fi"
    },
    {
      "prefix": 11330,
      "network": "cess-testnet",
      "displayName": "CESS Testnet",
      "symbols": [
        "TCESS"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://cess.cloud"
    },
    {
      "prefix": 11331,
      "network": "cess",
      "displayName": "CESS",
      "symbols": [
        "CESS"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://cess.cloud"
    },
    {
      "prefix": 11486,
      "network": "luhn",
      "displayName": "Luhn Network",
      "symbols": [
        "LUHN"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://luhn.network"
    },
    {
      "prefix": 11820,
      "network": "contextfree",
      "displayName": "Automata ContextFree",
      "symbols": [
        "CTX"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://ata.network"
    },
    {
      "prefix": 12155,
      "network": "impact",
      "displayName": "Impact Protocol Network",
      "symbols": [
        "BSTY"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://impactprotocol.network/"
    },
    {
      "prefix": 12191,
      "network": "nftmart",
      "displayName": "NFTMart",
      "symbols": [
        "NMT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://nftmart.io"
    },
    {
      "prefix": 13116,
      "network": "bittensor",
      "displayName": "Bittensor",
      "symbols": [
        "TAO"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://bittensor.com"
    }
  ];

  // ../../node_modules/@polkadot/networks/defaults/genesis.js
  var knownGenesis = {
    acala: [
      "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
    ],
    ajuna: [
      "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
    ],
    "aleph-node": [
      "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
    ],
    astar: [
      "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
    ],
    basilisk: [
      "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
    ],
    bifrost: [
      "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
    ],
    "bifrost-kusama": [
      "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
    ],
    bittensor: [
      "0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"
    ],
    centrifuge: [
      "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
      "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
    ],
    cere: [
      "0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"
    ],
    composable: [
      "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
    ],
    darwinia: [
      "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
    ],
    "dock-mainnet": [
      "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
      "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
    ],
    edgeware: [
      "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
    ],
    equilibrium: [
      "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
    ],
    genshiro: [
      "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
    ],
    hydradx: [
      "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
      "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
      "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
      "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
      "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"
    ],
    "interlay-parachain": [
      "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
    ],
    karura: [
      "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
    ],
    khala: [
      "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
    ],
    kulupu: [
      "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
    ],
    kusama: [
      "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
      "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
      "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
    ],
    nodle: [
      "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
    ],
    origintrail: [
      "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
    ],
    p3d: [
      "0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"
    ],
    parallel: [
      "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
    ],
    pendulum: [
      "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
    ],
    phala: [
      "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
    ],
    picasso: [
      "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
      "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
    ],
    polkadex: [
      "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
    ],
    polkadot: [
      "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
    ],
    polymesh: [
      "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
    ],
    rococo: [
      "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
      "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
      "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
      "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
      "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
      "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
      "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
      "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
      "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
      "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
      "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
      "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
    ],
    sora: [
      "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
    ],
    stafi: [
      "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
    ],
    statemine: [
      "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
    ],
    statemint: [
      "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
    ],
    subsocial: [
      "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
    ],
    ternoa: [
      "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
    ],
    unique: [
      "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
    ],
    vtb: [
      "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
      "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
    ],
    westend: [
      "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
    ],
    xxnetwork: [
      "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
    ]
  };

  // ../../node_modules/@polkadot/networks/defaults/icons.js
  var knownIcon = {
    centrifuge: "polkadot",
    kusama: "polkadot",
    polkadot: "polkadot",
    sora: "polkadot",
    statemine: "polkadot",
    statemint: "polkadot",
    westmint: "polkadot"
  };

  // ../../node_modules/@polkadot/networks/defaults/ledger.js
  var knownLedger = {
    acala: 787,
    ajuna: 354,
    "aleph-node": 643,
    astar: 810,
    bifrost: 788,
    "bifrost-kusama": 788,
    centrifuge: 747,
    composable: 354,
    darwinia: 354,
    "dock-mainnet": 594,
    edgeware: 523,
    equilibrium: 99999997,
    genshiro: 99999996,
    hydradx: 354,
    "interlay-parachain": 354,
    karura: 686,
    khala: 434,
    kusama: 434,
    nodle: 1003,
    origintrail: 354,
    parallel: 354,
    pendulum: 354,
    phala: 354,
    picasso: 434,
    polkadex: 799,
    polkadot: 354,
    polymesh: 595,
    sora: 617,
    stafi: 907,
    statemine: 434,
    statemint: 354,
    ternoa: 995,
    unique: 354,
    vtb: 694,
    xxnetwork: 1955
  };

  // ../../node_modules/@polkadot/networks/defaults/testnets.js
  var knownTestnet = {
    "": true,
    "cess-testnet": true,
    "dock-testnet": true,
    jupiter: true,
    "mathchain-testnet": true,
    p3dt: true,
    subspace_testnet: true,
    "zero-alphaville": true
  };

  // ../../node_modules/@polkadot/networks/interfaces.js
  var UNSORTED = [0, 2, 42];
  var TESTNETS = ["testnet"];
  function toExpanded(o) {
    const network = o.network || "";
    const nameParts = network.replace(/_/g, "-").split("-");
    const n = o;
    n.slip44 = knownLedger[network];
    n.hasLedgerSupport = !!n.slip44;
    n.genesisHash = knownGenesis[network] || [];
    n.icon = knownIcon[network] || "substrate";
    n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.decimals.length && o.symbols && o.symbols.length) && o.prefix !== 42;
    return n;
  }
  function filterSelectable({ genesisHash, prefix: prefix2 }) {
    return !!genesisHash.length || prefix2 === 42;
  }
  function filterAvailable(n) {
    return !n.isIgnored && !!n.network;
  }
  function sortNetworks(a, b) {
    const isUnSortedA = UNSORTED.includes(a.prefix);
    const isUnSortedB = UNSORTED.includes(b.prefix);
    return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
  }
  var allNetworks = esm_default.map(toExpanded);
  var availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
  var selectableNetworks = availableNetworks.filter(filterSelectable);

  // ../../node_modules/@polkadot/util-crypto/address/defaults.js
  var defaults = {
    allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
    allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
    allowedPrefix: availableNetworks.map(({ prefix: prefix2 }) => prefix2),
    prefix: 42
  };

  // ../../node_modules/@polkadot/util-crypto/address/decode.js
  function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
    if (!encoded) {
      throw new Error("Invalid empty address passed");
    }
    if (isU8a(encoded) || isHex(encoded)) {
      return u8aToU8a(encoded);
    }
    try {
      const decoded = base58Decode(encoded);
      if (!defaults.allowedEncodedLengths.includes(decoded.length)) {
        throw new Error("Invalid decoded address length");
      }
      const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
      if (!isValid && !ignoreChecksum) {
        throw new Error("Invalid decoded address checksum");
      } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
        throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
      }
      return decoded.slice(ss58Length, endPos);
    } catch (error) {
      throw new Error(`Decoding ${encoded}: ${error.message}`);
    }
  }

  // ../../node_modules/@polkadot/util-crypto/bn.js
  var BN_BE_256_OPTS = { bitLength: 256, isLe: false };

  // ../../node_modules/@noble/hashes/esm/_sha2.js
  function setBigUint64(view, byteOffset, value, isLE2) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE2);
    const _32n3 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n3 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE2 ? 4 : 0;
    const l15 = isLE2 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE2);
    view.setUint32(byteOffset + l15, wl, isLE2);
  }
  var SHA2 = class extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE2) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE2;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView(this.buffer);
    }
    update(data) {
      assert_default.exists(this);
      const { view, buffer, blockLen } = this;
      data = toBytes(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take2 = Math.min(blockLen - this.pos, len - pos);
        if (take2 === blockLen) {
          const dataView = createView(data);
          for (; blockLen <= len - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer.set(data.subarray(pos, pos + take2), this.pos);
        this.pos += take2;
        pos += take2;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      assert_default.exists(this);
      assert_default.output(out, this);
      this.finished = true;
      const { buffer, view, blockLen, isLE: isLE2 } = this;
      let { pos } = this;
      buffer[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i = pos; i < blockLen; i++)
        buffer[i] = 0;
      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
      this.process(view, 0);
      const oview = createView(out);
      const len = this.outputLen;
      if (len % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i = 0; i < outLen; i++)
        oview.setUint32(4 * i, state[i], isLE2);
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer);
      return to;
    }
  };

  // ../../node_modules/@noble/hashes/esm/sha256.js
  var Chi = (a, b, c2) => a & b ^ ~a & c2;
  var Maj = (a, b, c2) => a & b ^ a & c2 ^ b & c2;
  var SHA256_K = new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  var IV2 = new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  var SHA256_W = new Uint32Array(64);
  var SHA256 = class extends SHA2 {
    constructor() {
      super(64, 32, 8, false);
      this.A = IV2[0] | 0;
      this.B = IV2[1] | 0;
      this.C = IV2[2] | 0;
      this.D = IV2[3] | 0;
      this.E = IV2[4] | 0;
      this.F = IV2[5] | 0;
      this.G = IV2[6] | 0;
      this.H = IV2[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset2) {
      for (let i = 0; i < 16; i++, offset2 += 4)
        SHA256_W[i] = view.getUint32(offset2, false);
      for (let i = 16; i < 64; i++) {
        const W15 = SHA256_W[i - 15];
        const W2 = SHA256_W[i - 2];
        const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
        const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
        SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i = 0; i < 64; i++) {
        const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
        const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
        const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
        const T2 = sigma0 + Maj(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  };
  var SHA224 = class extends SHA256 {
    constructor() {
      super();
      this.A = 3238371032 | 0;
      this.B = 914150663 | 0;
      this.C = 812702999 | 0;
      this.D = 4144912697 | 0;
      this.E = 4290775857 | 0;
      this.F = 1750603025 | 0;
      this.G = 1694076839 | 0;
      this.H = 3204075428 | 0;
      this.outputLen = 28;
    }
  };
  var sha256 = wrapConstructor(() => new SHA256());
  var sha224 = wrapConstructor(() => new SHA224());

  // ../../node_modules/@noble/curves/esm/abstract/utils.js
  var utils_exports = {};
  __export(utils_exports, {
    bitGet: () => bitGet,
    bitLen: () => bitLen,
    bitMask: () => bitMask,
    bitSet: () => bitSet,
    bytesToHex: () => bytesToHex,
    bytesToNumberBE: () => bytesToNumberBE,
    bytesToNumberLE: () => bytesToNumberLE,
    concatBytes: () => concatBytes2,
    createHmacDrbg: () => createHmacDrbg,
    ensureBytes: () => ensureBytes,
    equalBytes: () => equalBytes,
    hexToBytes: () => hexToBytes,
    hexToNumber: () => hexToNumber,
    numberToBytesBE: () => numberToBytesBE,
    numberToBytesLE: () => numberToBytesLE,
    numberToHexUnpadded: () => numberToHexUnpadded,
    numberToVarBytesBE: () => numberToVarBytesBE,
    utf8ToBytes: () => utf8ToBytes2,
    validateObject: () => validateObject
  });
  var _0n2 = BigInt(0);
  var _1n2 = BigInt(1);
  var _2n = BigInt(2);
  var u8a = (a) => a instanceof Uint8Array;
  var hexes2 = Array.from({ length: 256 }, (v3, i) => i.toString(16).padStart(2, "0"));
  function bytesToHex(bytes3) {
    if (!u8a(bytes3))
      throw new Error("Uint8Array expected");
    let hex3 = "";
    for (let i = 0; i < bytes3.length; i++) {
      hex3 += hexes2[bytes3[i]];
    }
    return hex3;
  }
  function numberToHexUnpadded(num) {
    const hex3 = num.toString(16);
    return hex3.length & 1 ? `0${hex3}` : hex3;
  }
  function hexToNumber(hex3) {
    if (typeof hex3 !== "string")
      throw new Error("hex string expected, got " + typeof hex3);
    return BigInt(hex3 === "" ? "0" : `0x${hex3}`);
  }
  function hexToBytes(hex3) {
    if (typeof hex3 !== "string")
      throw new Error("hex string expected, got " + typeof hex3);
    if (hex3.length % 2)
      throw new Error("hex string is invalid: unpadded " + hex3.length);
    const array = new Uint8Array(hex3.length / 2);
    for (let i = 0; i < array.length; i++) {
      const j = i * 2;
      const hexByte = hex3.slice(j, j + 2);
      const byte = Number.parseInt(hexByte, 16);
      if (Number.isNaN(byte) || byte < 0)
        throw new Error("invalid byte sequence");
      array[i] = byte;
    }
    return array;
  }
  function bytesToNumberBE(bytes3) {
    return hexToNumber(bytesToHex(bytes3));
  }
  function bytesToNumberLE(bytes3) {
    if (!u8a(bytes3))
      throw new Error("Uint8Array expected");
    return hexToNumber(bytesToHex(Uint8Array.from(bytes3).reverse()));
  }
  var numberToBytesBE = (n, len) => hexToBytes(n.toString(16).padStart(len * 2, "0"));
  var numberToBytesLE = (n, len) => numberToBytesBE(n, len).reverse();
  var numberToVarBytesBE = (n) => hexToBytes(numberToHexUnpadded(n));
  function ensureBytes(title, hex3, expectedLength) {
    let res;
    if (typeof hex3 === "string") {
      try {
        res = hexToBytes(hex3);
      } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex3}". Cause: ${e}`);
      }
    } else if (u8a(hex3)) {
      res = Uint8Array.from(hex3);
    } else {
      throw new Error(`${title} must be hex string or Uint8Array`);
    }
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength)
      throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
  }
  function concatBytes2(...arrs) {
    const r = new Uint8Array(arrs.reduce((sum, a) => sum + a.length, 0));
    let pad = 0;
    arrs.forEach((a) => {
      if (!u8a(a))
        throw new Error("Uint8Array expected");
      r.set(a, pad);
      pad += a.length;
    });
    return r;
  }
  function equalBytes(b1, b2) {
    if (b1.length !== b2.length)
      return false;
    for (let i = 0; i < b1.length; i++)
      if (b1[i] !== b2[i])
        return false;
    return true;
  }
  function utf8ToBytes2(str) {
    if (typeof str !== "string") {
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    }
    return new TextEncoder().encode(str);
  }
  function bitLen(n) {
    let len;
    for (len = 0; n > _0n2; n >>= _1n2, len += 1)
      ;
    return len;
  }
  var bitGet = (n, pos) => n >> BigInt(pos) & _1n2;
  var bitSet = (n, pos, value) => n | (value ? _1n2 : _0n2) << BigInt(pos);
  var bitMask = (n) => (_2n << BigInt(n - 1)) - _1n2;
  var u8n = (data) => new Uint8Array(data);
  var u8fr = (arr) => Uint8Array.from(arr);
  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2)
      throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2)
      throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function")
      throw new Error("hmacFn must be a function");
    let v3 = u8n(hashLen);
    let k = u8n(hashLen);
    let i = 0;
    const reset = () => {
      v3.fill(1);
      k.fill(0);
      i = 0;
    };
    const h = (...b) => hmacFn(k, v3, ...b);
    const reseed = (seed = u8n()) => {
      k = h(u8fr([0]), seed);
      v3 = h();
      if (seed.length === 0)
        return;
      k = h(u8fr([1]), seed);
      v3 = h();
    };
    const gen2 = () => {
      if (i++ >= 1e3)
        throw new Error("drbg: tried 1000 values");
      let len = 0;
      const out = [];
      while (len < qByteLen) {
        v3 = h();
        const sl = v3.slice();
        out.push(sl);
        len += v3.length;
      }
      return concatBytes2(...out);
    };
    const genUntil = (seed, pred) => {
      reset();
      reseed(seed);
      let res = void 0;
      while (!(res = pred(gen2())))
        reseed();
      reset();
      return res;
    };
    return genUntil;
  }
  var validatorFns = {
    bigint: (val) => typeof val === "bigint",
    function: (val) => typeof val === "function",
    boolean: (val) => typeof val === "boolean",
    string: (val) => typeof val === "string",
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
  };
  function validateObject(object, validators2, optValidators = {}) {
    const checkField = (fieldName, type, isOptional) => {
      const checkVal = validatorFns[type];
      if (typeof checkVal !== "function")
        throw new Error(`Invalid validator "${type}", expected function`);
      const val = object[fieldName];
      if (isOptional && val === void 0)
        return;
      if (!checkVal(val, object)) {
        throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
      }
    };
    for (const [fieldName, type] of Object.entries(validators2))
      checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))
      checkField(fieldName, type, true);
    return object;
  }

  // ../../node_modules/@noble/curves/esm/abstract/modular.js
  var _0n3 = BigInt(0);
  var _1n3 = BigInt(1);
  var _2n2 = BigInt(2);
  var _3n = BigInt(3);
  var _4n = BigInt(4);
  var _5n = BigInt(5);
  var _8n = BigInt(8);
  var _9n = BigInt(9);
  var _16n = BigInt(16);
  function mod(a, b) {
    const result = a % b;
    return result >= _0n3 ? result : b + result;
  }
  function pow(num, power, modulo) {
    if (modulo <= _0n3 || power < _0n3)
      throw new Error("Expected power/modulo > 0");
    if (modulo === _1n3)
      return _0n3;
    let res = _1n3;
    while (power > _0n3) {
      if (power & _1n3)
        res = res * num % modulo;
      num = num * num % modulo;
      power >>= _1n3;
    }
    return res;
  }
  function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n3) {
      res *= res;
      res %= modulo;
    }
    return res;
  }
  function invert(number2, modulo) {
    if (number2 === _0n3 || modulo <= _0n3) {
      throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
    }
    let a = mod(number2, modulo);
    let b = modulo;
    let x = _0n3, y = _1n3, u = _1n3, v3 = _0n3;
    while (a !== _0n3) {
      const q = b / a;
      const r = b % a;
      const m = x - u * q;
      const n = y - v3 * q;
      b = a, a = r, x = u, y = v3, u = m, v3 = n;
    }
    const gcd2 = b;
    if (gcd2 !== _1n3)
      throw new Error("invert: does not exist");
    return mod(x, modulo);
  }
  function tonelliShanks(P) {
    const legendreC = (P - _1n3) / _2n2;
    let Q, S, Z;
    for (Q = P - _1n3, S = 0; Q % _2n2 === _0n3; Q /= _2n2, S++)
      ;
    for (Z = _2n2; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++)
      ;
    if (S === 1) {
      const p1div4 = (P + _1n3) / _4n;
      return function tonelliFast(Fp2, n) {
        const root = Fp2.pow(n, p1div4);
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    const Q1div2 = (Q + _1n3) / _2n2;
    return function tonelliSlow(Fp2, n) {
      if (Fp2.pow(n, legendreC) === Fp2.neg(Fp2.ONE))
        throw new Error("Cannot find square root");
      let r = S;
      let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
      let x = Fp2.pow(n, Q1div2);
      let b = Fp2.pow(n, Q);
      while (!Fp2.eql(b, Fp2.ONE)) {
        if (Fp2.eql(b, Fp2.ZERO))
          return Fp2.ZERO;
        let m = 1;
        for (let t2 = Fp2.sqr(b); m < r; m++) {
          if (Fp2.eql(t2, Fp2.ONE))
            break;
          t2 = Fp2.sqr(t2);
        }
        const ge2 = Fp2.pow(g, _1n3 << BigInt(r - m - 1));
        g = Fp2.sqr(ge2);
        x = Fp2.mul(x, ge2);
        b = Fp2.mul(b, g);
        r = m;
      }
      return x;
    };
  }
  function FpSqrt(P) {
    if (P % _4n === _3n) {
      const p1div4 = (P + _1n3) / _4n;
      return function sqrt3mod4(Fp2, n) {
        const root = Fp2.pow(n, p1div4);
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _8n === _5n) {
      const c1 = (P - _5n) / _8n;
      return function sqrt5mod8(Fp2, n) {
        const n2 = Fp2.mul(n, _2n2);
        const v3 = Fp2.pow(n2, c1);
        const nv = Fp2.mul(n, v3);
        const i = Fp2.mul(Fp2.mul(nv, _2n2), v3);
        const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _16n === _9n) {
    }
    return tonelliShanks(P);
  }
  var FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
  ];
  function validateField(field) {
    const initial = {
      ORDER: "bigint",
      MASK: "bigint",
      BYTES: "isSafeInteger",
      BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map3, val) => {
      map3[val] = "function";
      return map3;
    }, initial);
    return validateObject(field, opts);
  }
  function FpPow(f, num, power) {
    if (power < _0n3)
      throw new Error("Expected power > 0");
    if (power === _0n3)
      return f.ONE;
    if (power === _1n3)
      return num;
    let p = f.ONE;
    let d = num;
    while (power > _0n3) {
      if (power & _1n3)
        p = f.mul(p, d);
      d = f.sqr(d);
      power >>= _1n3;
    }
    return p;
  }
  function FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i) => {
      if (f.is0(num))
        return acc;
      tmp[i] = acc;
      return f.mul(acc, num);
    }, f.ONE);
    const inverted = f.inv(lastMultiplied);
    nums.reduceRight((acc, num, i) => {
      if (f.is0(num))
        return acc;
      tmp[i] = f.mul(acc, tmp[i]);
      return f.mul(acc, num);
    }, inverted);
    return tmp;
  }
  function nLength(n, nBitLength) {
    const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
  }
  function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
    if (ORDER <= _0n3)
      throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
    if (BYTES > 2048)
      throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER);
    const f = Object.freeze({
      ORDER,
      BITS,
      BYTES,
      MASK: bitMask(BITS),
      ZERO: _0n3,
      ONE: _1n3,
      create: (num) => mod(num, ORDER),
      isValid: (num) => {
        if (typeof num !== "bigint")
          throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
        return _0n3 <= num && num < ORDER;
      },
      is0: (num) => num === _0n3,
      isOdd: (num) => (num & _1n3) === _1n3,
      neg: (num) => mod(-num, ORDER),
      eql: (lhs, rhs) => lhs === rhs,
      sqr: (num) => mod(num * num, ORDER),
      add: (lhs, rhs) => mod(lhs + rhs, ORDER),
      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
      pow: (num, power) => FpPow(f, num, power),
      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
      sqrN: (num) => num * num,
      addN: (lhs, rhs) => lhs + rhs,
      subN: (lhs, rhs) => lhs - rhs,
      mulN: (lhs, rhs) => lhs * rhs,
      inv: (num) => invert(num, ORDER),
      sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
      invertBatch: (lst) => FpInvertBatch(f, lst),
      cmov: (a, b, c2) => c2 ? b : a,
      toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
      fromBytes: (bytes3) => {
        if (bytes3.length !== BYTES)
          throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes3.length}`);
        return isLE2 ? bytesToNumberLE(bytes3) : bytesToNumberBE(bytes3);
      }
    });
    return Object.freeze(f);
  }
  function hashToPrivateScalar(hash4, groupOrder, isLE2 = false) {
    hash4 = ensureBytes("privateHash", hash4);
    const hashLen = hash4.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024)
      throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE2 ? bytesToNumberLE(hash4) : bytesToNumberBE(hash4);
    return mod(num, groupOrder - _1n3) + _1n3;
  }

  // ../../node_modules/@noble/curves/esm/abstract/curve.js
  var _0n4 = BigInt(0);
  var _1n4 = BigInt(1);
  function wNAF(c2, bits2) {
    const constTimeNegate = (condition, item) => {
      const neg = item.negate();
      return condition ? neg : item;
    };
    const opts = (W) => {
      const windows = Math.ceil(bits2 / W) + 1;
      const windowSize = 2 ** (W - 1);
      return { windows, windowSize };
    };
    return {
      constTimeNegate,
      unsafeLadder(elm, n) {
        let p = c2.ZERO;
        let d = elm;
        while (n > _0n4) {
          if (n & _1n4)
            p = p.add(d);
          d = d.double();
          n >>= _1n4;
        }
        return p;
      },
      precomputeWindow(elm, W) {
        const { windows, windowSize } = opts(W);
        const points = [];
        let p = elm;
        let base = p;
        for (let window2 = 0; window2 < windows; window2++) {
          base = p;
          points.push(base);
          for (let i = 1; i < windowSize; i++) {
            base = base.add(p);
            points.push(base);
          }
          p = base.double();
        }
        return points;
      },
      wNAF(W, precomputes, n) {
        const { windows, windowSize } = opts(W);
        let p = c2.ZERO;
        let f = c2.BASE;
        const mask = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for (let window2 = 0; window2 < windows; window2++) {
          const offset2 = window2 * windowSize;
          let wbits = Number(n & mask);
          n >>= shiftBy;
          if (wbits > windowSize) {
            wbits -= maxNumber;
            n += _1n4;
          }
          const offset1 = offset2;
          const offset22 = offset2 + Math.abs(wbits) - 1;
          const cond1 = window2 % 2 !== 0;
          const cond2 = wbits < 0;
          if (wbits === 0) {
            f = f.add(constTimeNegate(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate(cond2, precomputes[offset22]));
          }
        }
        return { p, f };
      },
      wNAFCached(P, precomputesMap, n, transform) {
        const W = P._WINDOW_SIZE || 1;
        let comp = precomputesMap.get(P);
        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1) {
            precomputesMap.set(P, transform(comp));
          }
        }
        return this.wNAF(W, comp, n);
      }
    };
  }
  function validateBasic(curve) {
    validateField(curve.Fp);
    validateObject(curve, {
      n: "bigint",
      h: "bigint",
      Gx: "field",
      Gy: "field"
    }, {
      nBitLength: "isSafeInteger",
      nByteLength: "isSafeInteger"
    });
    return Object.freeze({
      ...nLength(curve.n, curve.nBitLength),
      ...curve,
      ...{ p: curve.Fp.ORDER }
    });
  }

  // ../../node_modules/@noble/curves/esm/abstract/weierstrass.js
  function validatePointOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      a: "field",
      b: "field"
    }, {
      allowedPrivateKeyLengths: "array",
      wrapPrivateKey: "boolean",
      isTorsionFree: "function",
      clearCofactor: "function",
      allowInfinityPoint: "boolean",
      fromBytes: "function",
      toBytes: "function"
    });
    const { endo, Fp: Fp2, a } = opts;
    if (endo) {
      if (!Fp2.eql(a, Fp2.ZERO)) {
        throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
      }
      if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
        throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
      }
    }
    return Object.freeze({ ...opts });
  }
  var { bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports;
  var DER = {
    Err: class DERErr extends Error {
      constructor(m = "") {
        super(m);
      }
    },
    _parseInt(data) {
      const { Err: E } = DER;
      if (data.length < 2 || data[0] !== 2)
        throw new E("Invalid signature integer tag");
      const len = data[1];
      const res = data.subarray(2, len + 2);
      if (!len || res.length !== len)
        throw new E("Invalid signature integer: wrong length");
      if (res[0] & 128)
        throw new E("Invalid signature integer: negative");
      if (res[0] === 0 && !(res[1] & 128))
        throw new E("Invalid signature integer: unnecessary leading zero");
      return { d: b2n(res), l: data.subarray(len + 2) };
    },
    toSig(hex3) {
      const { Err: E } = DER;
      const data = typeof hex3 === "string" ? h2b(hex3) : hex3;
      if (!(data instanceof Uint8Array))
        throw new Error("ui8a expected");
      let l15 = data.length;
      if (l15 < 2 || data[0] != 48)
        throw new E("Invalid signature tag");
      if (data[1] !== l15 - 2)
        throw new E("Invalid signature: incorrect length");
      const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
      const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
      if (rBytesLeft.length)
        throw new E("Invalid signature: left bytes after parsing");
      return { r, s };
    },
    hexFromSig(sig2) {
      const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
      const h = (num) => {
        const hex3 = num.toString(16);
        return hex3.length & 1 ? `0${hex3}` : hex3;
      };
      const s = slice(h(sig2.s));
      const r = slice(h(sig2.r));
      const shl = s.length / 2;
      const rhl = r.length / 2;
      const sl = h(shl);
      const rl = h(rhl);
      return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
    }
  };
  var _0n5 = BigInt(0);
  var _1n5 = BigInt(1);
  var _2n3 = BigInt(2);
  var _3n2 = BigInt(3);
  var _4n2 = BigInt(4);
  function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp: Fp2 } = CURVE;
    const toBytes2 = CURVE.toBytes || ((c2, point, isCompressed) => {
      const a = point.toAffine();
      return concatBytes2(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
    });
    const fromBytes = CURVE.fromBytes || ((bytes3) => {
      const tail = bytes3.subarray(1);
      const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
      const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
      return { x, y };
    });
    function weierstrassEquation(x) {
      const { a, b } = CURVE;
      const x2 = Fp2.sqr(x);
      const x3 = Fp2.mul(x2, x);
      return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b);
    }
    if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
      throw new Error("bad generator point: equation left != right");
    function isWithinCurveOrder(num) {
      return typeof num === "bigint" && _0n5 < num && num < CURVE.n;
    }
    function assertGE(num) {
      if (!isWithinCurveOrder(num))
        throw new Error("Expected valid bigint: 0 < bigint < curve.n");
    }
    function normPrivateKeyToScalar(key) {
      const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
      if (lengths && typeof key !== "bigint") {
        if (key instanceof Uint8Array)
          key = bytesToHex(key);
        if (typeof key !== "string" || !lengths.includes(key.length))
          throw new Error("Invalid key");
        key = key.padStart(nByteLength * 2, "0");
      }
      let num;
      try {
        num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
      } catch (error) {
        throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
      }
      if (wrapPrivateKey)
        num = mod(num, n);
      assertGE(num);
      return num;
    }
    const pointPrecomputes = /* @__PURE__ */ new Map();
    function assertPrjPoint(other) {
      if (!(other instanceof Point2))
        throw new Error("ProjectivePoint expected");
    }
    class Point2 {
      constructor(px, py, pz) {
        this.px = px;
        this.py = py;
        this.pz = pz;
        if (px == null || !Fp2.isValid(px))
          throw new Error("x required");
        if (py == null || !Fp2.isValid(py))
          throw new Error("y required");
        if (pz == null || !Fp2.isValid(pz))
          throw new Error("z required");
      }
      static fromAffine(p) {
        const { x, y } = p || {};
        if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
          throw new Error("invalid affine point");
        if (p instanceof Point2)
          throw new Error("projective point not allowed");
        const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
        if (is0(x) && is0(y))
          return Point2.ZERO;
        return new Point2(x, y, Fp2.ONE);
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      static normalizeZ(points) {
        const toInv = Fp2.invertBatch(points.map((p) => p.pz));
        return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
      }
      static fromHex(hex3) {
        const P = Point2.fromAffine(fromBytes(ensureBytes("pointHex", hex3)));
        P.assertValidity();
        return P;
      }
      static fromPrivateKey(privateKey) {
        return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
      }
      _setWindowSize(windowSize) {
        this._WINDOW_SIZE = windowSize;
        pointPrecomputes.delete(this);
      }
      assertValidity() {
        if (this.is0()) {
          if (CURVE.allowInfinityPoint)
            return;
          throw new Error("bad point: ZERO");
        }
        const { x, y } = this.toAffine();
        if (!Fp2.isValid(x) || !Fp2.isValid(y))
          throw new Error("bad point: x or y not FE");
        const left2 = Fp2.sqr(y);
        const right2 = weierstrassEquation(x);
        if (!Fp2.eql(left2, right2))
          throw new Error("bad point: equation left != right");
        if (!this.isTorsionFree())
          throw new Error("bad point: not in prime-order subgroup");
      }
      hasEvenY() {
        const { y } = this.toAffine();
        if (Fp2.isOdd)
          return !Fp2.isOdd(y);
        throw new Error("Field doesn't support isOdd");
      }
      equals(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
        const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
        return U1 && U2;
      }
      negate() {
        return new Point2(this.px, Fp2.neg(this.py), this.pz);
      }
      double() {
        const { a, b } = CURVE;
        const b3 = Fp2.mul(b, _3n2);
        const { px: X1, py: Y1, pz: Z1 } = this;
        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
        let t0 = Fp2.mul(X1, X1);
        let t1 = Fp2.mul(Y1, Y1);
        let t2 = Fp2.mul(Z1, Z1);
        let t3 = Fp2.mul(X1, Y1);
        t3 = Fp2.add(t3, t3);
        Z3 = Fp2.mul(X1, Z1);
        Z3 = Fp2.add(Z3, Z3);
        X3 = Fp2.mul(a, Z3);
        Y3 = Fp2.mul(b3, t2);
        Y3 = Fp2.add(X3, Y3);
        X3 = Fp2.sub(t1, Y3);
        Y3 = Fp2.add(t1, Y3);
        Y3 = Fp2.mul(X3, Y3);
        X3 = Fp2.mul(t3, X3);
        Z3 = Fp2.mul(b3, Z3);
        t2 = Fp2.mul(a, t2);
        t3 = Fp2.sub(t0, t2);
        t3 = Fp2.mul(a, t3);
        t3 = Fp2.add(t3, Z3);
        Z3 = Fp2.add(t0, t0);
        t0 = Fp2.add(Z3, t0);
        t0 = Fp2.add(t0, t2);
        t0 = Fp2.mul(t0, t3);
        Y3 = Fp2.add(Y3, t0);
        t2 = Fp2.mul(Y1, Z1);
        t2 = Fp2.add(t2, t2);
        t0 = Fp2.mul(t2, t3);
        X3 = Fp2.sub(X3, t0);
        Z3 = Fp2.mul(t2, t1);
        Z3 = Fp2.add(Z3, Z3);
        Z3 = Fp2.add(Z3, Z3);
        return new Point2(X3, Y3, Z3);
      }
      add(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
        const a = CURVE.a;
        const b3 = Fp2.mul(CURVE.b, _3n2);
        let t0 = Fp2.mul(X1, X2);
        let t1 = Fp2.mul(Y1, Y2);
        let t2 = Fp2.mul(Z1, Z2);
        let t3 = Fp2.add(X1, Y1);
        let t4 = Fp2.add(X2, Y2);
        t3 = Fp2.mul(t3, t4);
        t4 = Fp2.add(t0, t1);
        t3 = Fp2.sub(t3, t4);
        t4 = Fp2.add(X1, Z1);
        let t5 = Fp2.add(X2, Z2);
        t4 = Fp2.mul(t4, t5);
        t5 = Fp2.add(t0, t2);
        t4 = Fp2.sub(t4, t5);
        t5 = Fp2.add(Y1, Z1);
        X3 = Fp2.add(Y2, Z2);
        t5 = Fp2.mul(t5, X3);
        X3 = Fp2.add(t1, t2);
        t5 = Fp2.sub(t5, X3);
        Z3 = Fp2.mul(a, t4);
        X3 = Fp2.mul(b3, t2);
        Z3 = Fp2.add(X3, Z3);
        X3 = Fp2.sub(t1, Z3);
        Z3 = Fp2.add(t1, Z3);
        Y3 = Fp2.mul(X3, Z3);
        t1 = Fp2.add(t0, t0);
        t1 = Fp2.add(t1, t0);
        t2 = Fp2.mul(a, t2);
        t4 = Fp2.mul(b3, t4);
        t1 = Fp2.add(t1, t2);
        t2 = Fp2.sub(t0, t2);
        t2 = Fp2.mul(a, t2);
        t4 = Fp2.add(t4, t2);
        t0 = Fp2.mul(t1, t4);
        Y3 = Fp2.add(Y3, t0);
        t0 = Fp2.mul(t5, t4);
        X3 = Fp2.mul(t3, X3);
        X3 = Fp2.sub(X3, t0);
        t0 = Fp2.mul(t3, t1);
        Z3 = Fp2.mul(t5, Z3);
        Z3 = Fp2.add(Z3, t0);
        return new Point2(X3, Y3, Z3);
      }
      subtract(other) {
        return this.add(other.negate());
      }
      is0() {
        return this.equals(Point2.ZERO);
      }
      wNAF(n) {
        return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
          const toInv = Fp2.invertBatch(comp.map((p) => p.pz));
          return comp.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
        });
      }
      multiplyUnsafe(n) {
        const I = Point2.ZERO;
        if (n === _0n5)
          return I;
        assertGE(n);
        if (n === _1n5)
          return this;
        const { endo } = CURVE;
        if (!endo)
          return wnaf.unsafeLadder(this, n);
        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
        let k1p = I;
        let k2p = I;
        let d = this;
        while (k1 > _0n5 || k2 > _0n5) {
          if (k1 & _1n5)
            k1p = k1p.add(d);
          if (k2 & _1n5)
            k2p = k2p.add(d);
          d = d.double();
          k1 >>= _1n5;
          k2 >>= _1n5;
        }
        if (k1neg)
          k1p = k1p.negate();
        if (k2neg)
          k2p = k2p.negate();
        k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        return k1p.add(k2p);
      }
      multiply(scalar) {
        assertGE(scalar);
        let n = scalar;
        let point, fake;
        const { endo } = CURVE;
        if (endo) {
          const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let { p: k1p, f: f1p } = this.wNAF(k1);
          let { p: k2p, f: f2p } = this.wNAF(k2);
          k1p = wnaf.constTimeNegate(k1neg, k1p);
          k2p = wnaf.constTimeNegate(k2neg, k2p);
          k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          point = k1p.add(k2p);
          fake = f1p.add(f2p);
        } else {
          const { p, f } = this.wNAF(n);
          point = p;
          fake = f;
        }
        return Point2.normalizeZ([point, fake])[0];
      }
      multiplyAndAddUnsafe(Q, a, b) {
        const G = Point2.BASE;
        const mul = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
        const sum = mul(this, a).add(mul(Q, b));
        return sum.is0() ? void 0 : sum;
      }
      toAffine(iz) {
        const { px: x, py: y, pz: z } = this;
        const is0 = this.is0();
        if (iz == null)
          iz = is0 ? Fp2.ONE : Fp2.inv(z);
        const ax = Fp2.mul(x, iz);
        const ay = Fp2.mul(y, iz);
        const zz = Fp2.mul(z, iz);
        if (is0)
          return { x: Fp2.ZERO, y: Fp2.ZERO };
        if (!Fp2.eql(zz, Fp2.ONE))
          throw new Error("invZ was invalid");
        return { x: ax, y: ay };
      }
      isTorsionFree() {
        const { h: cofactor, isTorsionFree } = CURVE;
        if (cofactor === _1n5)
          return true;
        if (isTorsionFree)
          return isTorsionFree(Point2, this);
        throw new Error("isTorsionFree() has not been declared for the elliptic curve");
      }
      clearCofactor() {
        const { h: cofactor, clearCofactor } = CURVE;
        if (cofactor === _1n5)
          return this;
        if (clearCofactor)
          return clearCofactor(Point2, this);
        return this.multiplyUnsafe(CURVE.h);
      }
      toRawBytes(isCompressed = true) {
        this.assertValidity();
        return toBytes2(Point2, this, isCompressed);
      }
      toHex(isCompressed = true) {
        return bytesToHex(this.toRawBytes(isCompressed));
      }
    }
    Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp2.ONE);
    Point2.ZERO = new Point2(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = wNAF(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    return {
      CURVE,
      ProjectivePoint: Point2,
      normPrivateKeyToScalar,
      weierstrassEquation,
      isWithinCurveOrder
    };
  }
  function validateOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      hash: "hash",
      hmac: "function",
      randomBytes: "function"
    }, {
      bits2int: "function",
      bits2int_modN: "function",
      lowS: "boolean"
    });
    return Object.freeze({ lowS: true, ...opts });
  }
  function weierstrass(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp2.BYTES + 1;
    const uncompressedLen = 2 * Fp2.BYTES + 1;
    function isValidFieldElement(num) {
      return _0n5 < num && num < Fp2.ORDER;
    }
    function modN2(a) {
      return mod(a, CURVE_ORDER);
    }
    function invN(a) {
      return invert(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
      ...CURVE,
      toBytes(c2, point, isCompressed) {
        const a = point.toAffine();
        const x = Fp2.toBytes(a.x);
        const cat = concatBytes2;
        if (isCompressed) {
          return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
        } else {
          return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
        }
      },
      fromBytes(bytes3) {
        const len = bytes3.length;
        const head = bytes3[0];
        const tail = bytes3.subarray(1);
        if (len === compressedLen && (head === 2 || head === 3)) {
          const x = bytesToNumberBE(tail);
          if (!isValidFieldElement(x))
            throw new Error("Point is not on curve");
          const y2 = weierstrassEquation(x);
          let y = Fp2.sqrt(y2);
          const isYOdd = (y & _1n5) === _1n5;
          const isHeadOdd = (head & 1) === 1;
          if (isHeadOdd !== isYOdd)
            y = Fp2.neg(y);
          return { x, y };
        } else if (len === uncompressedLen && head === 4) {
          const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
          const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
          return { x, y };
        } else {
          throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
        }
      }
    });
    const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number2) {
      const HALF = CURVE_ORDER >> _1n5;
      return number2 > HALF;
    }
    function normalizeS(s) {
      return isBiggerThanHalfOrder(s) ? modN2(-s) : s;
    }
    const slcNum = (b, from2, to) => bytesToNumberBE(b.slice(from2, to));
    class Signature {
      constructor(r, s, recovery) {
        this.r = r;
        this.s = s;
        this.recovery = recovery;
        this.assertValidity();
      }
      static fromCompact(hex3) {
        const l15 = CURVE.nByteLength;
        hex3 = ensureBytes("compactSignature", hex3, l15 * 2);
        return new Signature(slcNum(hex3, 0, l15), slcNum(hex3, l15, 2 * l15));
      }
      static fromDER(hex3) {
        const { r, s } = DER.toSig(ensureBytes("DER", hex3));
        return new Signature(r, s);
      }
      assertValidity() {
        if (!isWithinCurveOrder(this.r))
          throw new Error("r must be 0 < r < CURVE.n");
        if (!isWithinCurveOrder(this.s))
          throw new Error("s must be 0 < s < CURVE.n");
      }
      addRecoveryBit(recovery) {
        return new Signature(this.r, this.s, recovery);
      }
      recoverPublicKey(msgHash) {
        const { r, s, recovery: rec } = this;
        const h = bits2int_modN(ensureBytes("msgHash", msgHash));
        if (rec == null || ![0, 1, 2, 3].includes(rec))
          throw new Error("recovery id invalid");
        const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
        if (radj >= Fp2.ORDER)
          throw new Error("recovery id 2 or 3 invalid");
        const prefix2 = (rec & 1) === 0 ? "02" : "03";
        const R = Point2.fromHex(prefix2 + numToNByteStr(radj));
        const ir = invN(radj);
        const u1 = modN2(-h * ir);
        const u2 = modN2(s * ir);
        const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
        if (!Q)
          throw new Error("point at infinify");
        Q.assertValidity();
        return Q;
      }
      hasHighS() {
        return isBiggerThanHalfOrder(this.s);
      }
      normalizeS() {
        return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;
      }
      toDERRawBytes() {
        return hexToBytes(this.toDERHex());
      }
      toDERHex() {
        return DER.hexFromSig({ r: this.r, s: this.s });
      }
      toCompactRawBytes() {
        return hexToBytes(this.toCompactHex());
      }
      toCompactHex() {
        return numToNByteStr(this.r) + numToNByteStr(this.s);
      }
    }
    const utils = {
      isValidPrivateKey(privateKey) {
        try {
          normPrivateKeyToScalar(privateKey);
          return true;
        } catch (error) {
          return false;
        }
      },
      normPrivateKeyToScalar,
      randomPrivateKey: () => {
        const rand = CURVE.randomBytes(Fp2.BYTES + 8);
        const num = hashToPrivateScalar(rand, CURVE_ORDER);
        return numberToBytesBE(num, CURVE.nByteLength);
      },
      precompute(windowSize = 8, point = Point2.BASE) {
        point._setWindowSize(windowSize);
        point.multiply(BigInt(3));
        return point;
      }
    };
    function getPublicKey(privateKey, isCompressed = true) {
      return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    function isProbPub(item) {
      const arr = item instanceof Uint8Array;
      const str = typeof item === "string";
      const len = (arr || str) && item.length;
      if (arr)
        return len === compressedLen || len === uncompressedLen;
      if (str)
        return len === 2 * compressedLen || len === 2 * uncompressedLen;
      if (item instanceof Point2)
        return true;
      return false;
    }
    function getSharedSecret(privateA, publicB, isCompressed = true) {
      if (isProbPub(privateA))
        throw new Error("first arg must be private key");
      if (!isProbPub(publicB))
        throw new Error("second arg must be public key");
      const b = Point2.fromHex(publicB);
      return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    const bits2int = CURVE.bits2int || function(bytes3) {
      const num = bytesToNumberBE(bytes3);
      const delta = bytes3.length * 8 - CURVE.nBitLength;
      return delta > 0 ? num >> BigInt(delta) : num;
    };
    const bits2int_modN = CURVE.bits2int_modN || function(bytes3) {
      return modN2(bits2int(bytes3));
    };
    const ORDER_MASK = bitMask(CURVE.nBitLength);
    function int2octets(num) {
      if (typeof num !== "bigint")
        throw new Error("bigint expected");
      if (!(_0n5 <= num && num < ORDER_MASK))
        throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
      return numberToBytesBE(num, CURVE.nByteLength);
    }
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
      if (["recovered", "canonical"].some((k) => k in opts))
        throw new Error("sign() legacy options not supported");
      const { hash: hash4, randomBytes: randomBytes2 } = CURVE;
      let { lowS, prehash, extraEntropy: ent } = opts;
      if (lowS == null)
        lowS = true;
      msgHash = ensureBytes("msgHash", msgHash);
      if (prehash)
        msgHash = ensureBytes("prehashed msgHash", hash4(msgHash));
      const h1int = bits2int_modN(msgHash);
      const d = normPrivateKeyToScalar(privateKey);
      const seedArgs = [int2octets(d), int2octets(h1int)];
      if (ent != null) {
        const e = ent === true ? randomBytes2(Fp2.BYTES) : ent;
        seedArgs.push(ensureBytes("extraEntropy", e, Fp2.BYTES));
      }
      const seed = concatBytes2(...seedArgs);
      const m = h1int;
      function k2sig(kBytes) {
        const k = bits2int(kBytes);
        if (!isWithinCurveOrder(k))
          return;
        const ik = invN(k);
        const q = Point2.BASE.multiply(k).toAffine();
        const r = modN2(q.x);
        if (r === _0n5)
          return;
        const s = modN2(ik * modN2(m + r * d));
        if (s === _0n5)
          return;
        let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n5);
        let normS = s;
        if (lowS && isBiggerThanHalfOrder(s)) {
          normS = normalizeS(s);
          recovery ^= 1;
        }
        return new Signature(r, normS, recovery);
      }
      return { seed, k2sig };
    }
    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
    function sign2(msgHash, privKey, opts = defaultSigOpts) {
      const { seed, k2sig } = prepSig(msgHash, privKey, opts);
      const drbg = createHmacDrbg(CURVE.hash.outputLen, CURVE.nByteLength, CURVE.hmac);
      return drbg(seed, k2sig);
    }
    Point2.BASE._setWindowSize(8);
    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
      const sg = signature;
      msgHash = ensureBytes("msgHash", msgHash);
      publicKey = ensureBytes("publicKey", publicKey);
      if ("strict" in opts)
        throw new Error("options.strict was renamed to lowS");
      const { lowS, prehash } = opts;
      let _sig = void 0;
      let P;
      try {
        if (typeof sg === "string" || sg instanceof Uint8Array) {
          try {
            _sig = Signature.fromDER(sg);
          } catch (derError) {
            if (!(derError instanceof DER.Err))
              throw derError;
            _sig = Signature.fromCompact(sg);
          }
        } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
          const { r: r2, s: s2 } = sg;
          _sig = new Signature(r2, s2);
        } else {
          throw new Error("PARSE");
        }
        P = Point2.fromHex(publicKey);
      } catch (error) {
        if (error.message === "PARSE")
          throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
        return false;
      }
      if (lowS && _sig.hasHighS())
        return false;
      if (prehash)
        msgHash = CURVE.hash(msgHash);
      const { r, s } = _sig;
      const h = bits2int_modN(msgHash);
      const is = invN(s);
      const u1 = modN2(h * is);
      const u2 = modN2(r * is);
      const R = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
      if (!R)
        return false;
      const v3 = modN2(R.x);
      return v3 === r;
    }
    return {
      CURVE,
      getPublicKey,
      getSharedSecret,
      sign: sign2,
      verify,
      ProjectivePoint: Point2,
      Signature,
      utils
    };
  }
  function SWUFpSqrtRatio(Fp2, Z) {
    const q = Fp2.ORDER;
    let l15 = _0n5;
    for (let o = q - _1n5; o % _2n3 === _0n5; o /= _2n3)
      l15 += _1n5;
    const c1 = l15;
    const c2 = (q - _1n5) / _2n3 ** c1;
    const c3 = (c2 - _1n5) / _2n3;
    const c4 = _2n3 ** c1 - _1n5;
    const c5 = _2n3 ** (c1 - _1n5);
    const c6 = Fp2.pow(Z, c2);
    const c7 = Fp2.pow(Z, (c2 + _1n5) / _2n3);
    let sqrtRatio = (u, v3) => {
      let tv1 = c6;
      let tv2 = Fp2.pow(v3, c4);
      let tv3 = Fp2.sqr(tv2);
      tv3 = Fp2.mul(tv3, v3);
      let tv5 = Fp2.mul(u, tv3);
      tv5 = Fp2.pow(tv5, c3);
      tv5 = Fp2.mul(tv5, tv2);
      tv2 = Fp2.mul(tv5, v3);
      tv3 = Fp2.mul(tv5, u);
      let tv4 = Fp2.mul(tv3, tv2);
      tv5 = Fp2.pow(tv4, c5);
      let isQR = Fp2.eql(tv5, Fp2.ONE);
      tv2 = Fp2.mul(tv3, c7);
      tv5 = Fp2.mul(tv4, tv1);
      tv3 = Fp2.cmov(tv2, tv3, isQR);
      tv4 = Fp2.cmov(tv5, tv4, isQR);
      for (let i = c1; i > _1n5; i--) {
        let tv52 = _2n3 ** (i - _2n3);
        let tvv5 = Fp2.pow(tv4, tv52);
        const e1 = Fp2.eql(tvv5, Fp2.ONE);
        tv2 = Fp2.mul(tv3, tv1);
        tv1 = Fp2.mul(tv1, tv1);
        tvv5 = Fp2.mul(tv4, tv1);
        tv3 = Fp2.cmov(tv2, tv3, e1);
        tv4 = Fp2.cmov(tvv5, tv4, e1);
      }
      return { isValid: isQR, value: tv3 };
    };
    if (Fp2.ORDER % _4n2 === _3n2) {
      const c12 = (Fp2.ORDER - _3n2) / _4n2;
      const c22 = Fp2.sqrt(Fp2.neg(Z));
      sqrtRatio = (u, v3) => {
        let tv1 = Fp2.sqr(v3);
        const tv2 = Fp2.mul(u, v3);
        tv1 = Fp2.mul(tv1, tv2);
        let y1 = Fp2.pow(tv1, c12);
        y1 = Fp2.mul(y1, tv2);
        const y2 = Fp2.mul(y1, c22);
        const tv3 = Fp2.mul(Fp2.sqr(y1), v3);
        const isQR = Fp2.eql(tv3, u);
        let y = Fp2.cmov(y2, y1, isQR);
        return { isValid: isQR, value: y };
      };
    }
    return sqrtRatio;
  }
  function mapToCurveSimpleSWU(Fp2, opts) {
    validateField(Fp2);
    if (!Fp2.isValid(opts.A) || !Fp2.isValid(opts.B) || !Fp2.isValid(opts.Z))
      throw new Error("mapToCurveSimpleSWU: invalid opts");
    const sqrtRatio = SWUFpSqrtRatio(Fp2, opts.Z);
    if (!Fp2.isOdd)
      throw new Error("Fp.isOdd is not implemented!");
    return (u) => {
      let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
      tv1 = Fp2.sqr(u);
      tv1 = Fp2.mul(tv1, opts.Z);
      tv2 = Fp2.sqr(tv1);
      tv2 = Fp2.add(tv2, tv1);
      tv3 = Fp2.add(tv2, Fp2.ONE);
      tv3 = Fp2.mul(tv3, opts.B);
      tv4 = Fp2.cmov(opts.Z, Fp2.neg(tv2), !Fp2.eql(tv2, Fp2.ZERO));
      tv4 = Fp2.mul(tv4, opts.A);
      tv2 = Fp2.sqr(tv3);
      tv6 = Fp2.sqr(tv4);
      tv5 = Fp2.mul(tv6, opts.A);
      tv2 = Fp2.add(tv2, tv5);
      tv2 = Fp2.mul(tv2, tv3);
      tv6 = Fp2.mul(tv6, tv4);
      tv5 = Fp2.mul(tv6, opts.B);
      tv2 = Fp2.add(tv2, tv5);
      x = Fp2.mul(tv1, tv3);
      const { isValid, value } = sqrtRatio(tv2, tv6);
      y = Fp2.mul(tv1, u);
      y = Fp2.mul(y, value);
      x = Fp2.cmov(x, tv3, isValid);
      y = Fp2.cmov(y, value, isValid);
      const e1 = Fp2.isOdd(u) === Fp2.isOdd(y);
      y = Fp2.cmov(Fp2.neg(y), y, e1);
      x = Fp2.div(x, tv4);
      return { x, y };
    };
  }

  // ../../node_modules/@noble/curves/esm/abstract/hash-to-curve.js
  function validateDST(dst) {
    if (dst instanceof Uint8Array)
      return dst;
    if (typeof dst === "string")
      return utf8ToBytes2(dst);
    throw new Error("DST must be Uint8Array or string");
  }
  var os2ip = bytesToNumberBE;
  function i2osp(value, length) {
    if (value < 0 || value >= 1 << 8 * length) {
      throw new Error(`bad I2OSP call: value=${value} length=${length}`);
    }
    const res = Array.from({ length }).fill(0);
    for (let i = length - 1; i >= 0; i--) {
      res[i] = value & 255;
      value >>>= 8;
    }
    return new Uint8Array(res);
  }
  function strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for (let i = 0; i < a.length; i++) {
      arr[i] = a[i] ^ b[i];
    }
    return arr;
  }
  function isBytes(item) {
    if (!(item instanceof Uint8Array))
      throw new Error("Uint8Array expected");
  }
  function isNum(item) {
    if (!Number.isSafeInteger(item))
      throw new Error("number expected");
  }
  function expand_message_xmd(msg, DST, lenInBytes, H) {
    isBytes(msg);
    isBytes(DST);
    isNum(lenInBytes);
    if (DST.length > 255)
      DST = H(concatBytes2(utf8ToBytes2("H2C-OVERSIZE-DST-"), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (ell > 255)
      throw new Error("Invalid xmd length");
    const DST_prime = concatBytes2(DST, i2osp(DST.length, 1));
    const Z_pad = i2osp(0, r_in_bytes);
    const l_i_b_str = i2osp(lenInBytes, 2);
    const b = new Array(ell);
    const b_0 = H(concatBytes2(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H(concatBytes2(b_0, i2osp(1, 1), DST_prime));
    for (let i = 1; i <= ell; i++) {
      const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
      b[i] = H(concatBytes2(...args));
    }
    const pseudo_random_bytes = concatBytes2(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
  }
  function expand_message_xof(msg, DST, lenInBytes, k, H) {
    isBytes(msg);
    isBytes(DST);
    isNum(lenInBytes);
    if (DST.length > 255) {
      const dkLen = Math.ceil(2 * k / 8);
      DST = H.create({ dkLen }).update(utf8ToBytes2("H2C-OVERSIZE-DST-")).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255)
      throw new Error("expand_message_xof: invalid lenInBytes");
    return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
  }
  function hash_to_field(msg, count, options) {
    validateObject(options, {
      DST: "string",
      p: "bigint",
      m: "isSafeInteger",
      k: "isSafeInteger",
      hash: "hash"
    });
    const { p, k, m, hash: hash4, expand: expand2, DST: _DST } = options;
    isBytes(msg);
    isNum(count);
    const DST = validateDST(_DST);
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8);
    const len_in_bytes = count * m * L;
    let prb;
    if (expand2 === "xmd") {
      prb = expand_message_xmd(msg, DST, len_in_bytes, hash4);
    } else if (expand2 === "xof") {
      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash4);
    } else if (expand2 === "_internal_pass") {
      prb = msg;
    } else {
      throw new Error('expand must be "xmd" or "xof"');
    }
    const u = new Array(count);
    for (let i = 0; i < count; i++) {
      const e = new Array(m);
      for (let j = 0; j < m; j++) {
        const elm_offset = L * (j + i * m);
        const tv = prb.subarray(elm_offset, elm_offset + L);
        e[j] = mod(os2ip(tv), p);
      }
      u[i] = e;
    }
    return u;
  }
  function isogenyMap(field, map3) {
    const COEFF = map3.map((i) => Array.from(i).reverse());
    return (x, y) => {
      const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
      x = field.div(xNum, xDen);
      y = field.mul(y, field.div(yNum, yDen));
      return { x, y };
    };
  }
  function createHasher(Point2, mapToCurve, def) {
    if (typeof mapToCurve !== "function")
      throw new Error("mapToCurve() must be defined");
    return {
      hashToCurve(msg, options) {
        const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
        const u0 = Point2.fromAffine(mapToCurve(u[0]));
        const u1 = Point2.fromAffine(mapToCurve(u[1]));
        const P = u0.add(u1).clearCofactor();
        P.assertValidity();
        return P;
      },
      encodeToCurve(msg, options) {
        const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
        const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
        P.assertValidity();
        return P;
      }
    };
  }

  // ../../node_modules/@noble/hashes/esm/hmac.js
  var HMAC = class extends Hash {
    constructor(hash4, _key) {
      super();
      this.finished = false;
      this.destroyed = false;
      assert_default.hash(hash4);
      const key = toBytes(_key);
      this.iHash = hash4.create();
      if (typeof this.iHash.update !== "function")
        throw new TypeError("Expected instance of class which extends utils.Hash");
      this.blockLen = this.iHash.blockLen;
      this.outputLen = this.iHash.outputLen;
      const blockLen = this.blockLen;
      const pad = new Uint8Array(blockLen);
      pad.set(key.length > blockLen ? hash4.create().update(key).digest() : key);
      for (let i = 0; i < pad.length; i++)
        pad[i] ^= 54;
      this.iHash.update(pad);
      this.oHash = hash4.create();
      for (let i = 0; i < pad.length; i++)
        pad[i] ^= 54 ^ 92;
      this.oHash.update(pad);
      pad.fill(0);
    }
    update(buf) {
      assert_default.exists(this);
      this.iHash.update(buf);
      return this;
    }
    digestInto(out) {
      assert_default.exists(this);
      assert_default.bytes(out, this.outputLen);
      this.finished = true;
      this.iHash.digestInto(out);
      this.oHash.update(out);
      this.oHash.digestInto(out);
      this.destroy();
    }
    digest() {
      const out = new Uint8Array(this.oHash.outputLen);
      this.digestInto(out);
      return out;
    }
    _cloneInto(to) {
      to || (to = Object.create(Object.getPrototypeOf(this), {}));
      const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
      to = to;
      to.finished = finished;
      to.destroyed = destroyed;
      to.blockLen = blockLen;
      to.outputLen = outputLen;
      to.oHash = oHash._cloneInto(to.oHash);
      to.iHash = iHash._cloneInto(to.iHash);
      return to;
    }
    destroy() {
      this.destroyed = true;
      this.oHash.destroy();
      this.iHash.destroy();
    }
  };
  var hmac = (hash4, key, message) => new HMAC(hash4, key).update(message).digest();
  hmac.create = (hash4, key) => new HMAC(hash4, key);

  // ../../node_modules/@noble/curves/esm/_shortw_utils.js
  function getHash(hash4) {
    return {
      hash: hash4,
      hmac: (key, ...msgs) => hmac(hash4, key, concatBytes(...msgs)),
      randomBytes
    };
  }
  function createCurve(curveDef, defHash) {
    const create = (hash4) => weierstrass({ ...curveDef, ...getHash(hash4) });
    return Object.freeze({ ...create(defHash), create });
  }

  // ../../node_modules/@noble/curves/esm/secp256k1.js
  var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
  var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  var _1n6 = BigInt(1);
  var _2n4 = BigInt(2);
  var divNearest = (a, b) => (a + b / _2n4) / b;
  function sqrtMod(y) {
    const P = secp256k1P;
    const _3n3 = BigInt(3), _6n = BigInt(6), _11n2 = BigInt(11), _22n = BigInt(22);
    const _23n2 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = y * y * y % P;
    const b3 = b2 * b2 * y % P;
    const b6 = pow2(b3, _3n3, P) * b3 % P;
    const b9 = pow2(b6, _3n3, P) * b3 % P;
    const b11 = pow2(b9, _2n4, P) * b2 % P;
    const b22 = pow2(b11, _11n2, P) * b11 % P;
    const b44 = pow2(b22, _22n, P) * b22 % P;
    const b88 = pow2(b44, _44n, P) * b44 % P;
    const b176 = pow2(b88, _88n, P) * b88 % P;
    const b220 = pow2(b176, _44n, P) * b44 % P;
    const b223 = pow2(b220, _3n3, P) * b3 % P;
    const t1 = pow2(b223, _23n2, P) * b22 % P;
    const t2 = pow2(t1, _6n, P) * b2 % P;
    const root = pow2(t2, _2n4, P);
    if (!Fp.eql(Fp.sqr(root), y))
      throw new Error("Cannot find square root");
    return root;
  }
  var Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
  var secp256k1 = createCurve({
    a: BigInt(0),
    b: BigInt(7),
    Fp,
    n: secp256k1N,
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    h: BigInt(1),
    lowS: true,
    endo: {
      beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
      splitScalar: (k) => {
        const n = secp256k1N;
        const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
        const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
        const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
        const b2 = a1;
        const POW_2_128 = BigInt("0x100000000000000000000000000000000");
        const c1 = divNearest(b2 * k, n);
        const c2 = divNearest(-b1 * k, n);
        let k1 = mod(k - c1 * a1 - c2 * a2, n);
        let k2 = mod(-c1 * b1 - c2 * b2, n);
        const k1neg = k1 > POW_2_128;
        const k2neg = k2 > POW_2_128;
        if (k1neg)
          k1 = n - k1;
        if (k2neg)
          k2 = n - k2;
        if (k1 > POW_2_128 || k2 > POW_2_128) {
          throw new Error("splitScalar: Endomorphism failed, k=" + k);
        }
        return { k1neg, k1, k2neg, k2 };
      }
    }
  }, sha256);
  var _0n6 = BigInt(0);
  var fe = (x) => typeof x === "bigint" && _0n6 < x && x < secp256k1P;
  var ge = (x) => typeof x === "bigint" && _0n6 < x && x < secp256k1N;
  var TAGGED_HASH_PREFIXES = {};
  function taggedHash(tag, ...messages) {
    let tagP = TAGGED_HASH_PREFIXES[tag];
    if (tagP === void 0) {
      const tagH = sha256(Uint8Array.from(tag, (c2) => c2.charCodeAt(0)));
      tagP = concatBytes2(tagH, tagH);
      TAGGED_HASH_PREFIXES[tag] = tagP;
    }
    return sha256(concatBytes2(tagP, ...messages));
  }
  var pointToBytes = (point) => point.toRawBytes(true).slice(1);
  var numTo32b = (n) => numberToBytesBE(n, 32);
  var modP = (x) => mod(x, secp256k1P);
  var modN = (x) => mod(x, secp256k1N);
  var Point = secp256k1.ProjectivePoint;
  var GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
  function schnorrGetExtPubKey(priv) {
    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv);
    let p = Point.fromPrivateKey(d_);
    const scalar = p.hasEvenY() ? d_ : modN(-d_);
    return { scalar, bytes: pointToBytes(p) };
  }
  function lift_x(x) {
    if (!fe(x))
      throw new Error("bad x: need 0 < x < p");
    const xx = modP(x * x);
    const c2 = modP(xx * x + BigInt(7));
    let y = sqrtMod(c2);
    if (y % _2n4 !== _0n6)
      y = modP(-y);
    const p = new Point(x, y, _1n6);
    p.assertValidity();
    return p;
  }
  function challenge(...args) {
    return modN(bytesToNumberBE(taggedHash("BIP0340/challenge", ...args)));
  }
  function schnorrGetPublicKey(privateKey) {
    return schnorrGetExtPubKey(privateKey).bytes;
  }
  function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {
    const m = ensureBytes("message", message);
    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
    const a = ensureBytes("auxRand", auxRand, 32);
    const t = numTo32b(d ^ bytesToNumberBE(taggedHash("BIP0340/aux", a)));
    const rand = taggedHash("BIP0340/nonce", t, px, m);
    const k_ = modN(bytesToNumberBE(rand));
    if (k_ === _0n6)
      throw new Error("sign failed: k is zero");
    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
    const e = challenge(rx, px, m);
    const sig2 = new Uint8Array(64);
    sig2.set(rx, 0);
    sig2.set(numTo32b(modN(k + e * d)), 32);
    if (!schnorrVerify(sig2, m, px))
      throw new Error("sign: Invalid signature produced");
    return sig2;
  }
  function schnorrVerify(signature, message, publicKey) {
    const sig2 = ensureBytes("signature", signature, 64);
    const m = ensureBytes("message", message);
    const pub = ensureBytes("publicKey", publicKey, 32);
    try {
      const P = lift_x(bytesToNumberBE(pub));
      const r = bytesToNumberBE(sig2.subarray(0, 32));
      if (!fe(r))
        return false;
      const s = bytesToNumberBE(sig2.subarray(32, 64));
      if (!ge(s))
        return false;
      const e = challenge(numTo32b(r), pointToBytes(P), m);
      const R = GmulAdd(P, s, modN(-e));
      if (!R || !R.hasEvenY() || R.toAffine().x !== r)
        return false;
      return true;
    } catch (error) {
      return false;
    }
  }
  var schnorr = {
    getPublicKey: schnorrGetPublicKey,
    sign: schnorrSign,
    verify: schnorrVerify,
    utils: {
      randomPrivateKey: secp256k1.utils.randomPrivateKey,
      lift_x,
      pointToBytes,
      numberToBytesBE,
      bytesToNumberBE,
      taggedHash,
      mod
    }
  };
  var isoMap = isogenyMap(Fp, [
    [
      "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
      "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
      "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
      "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
    ],
    [
      "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
      "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
      "0x0000000000000000000000000000000000000000000000000000000000000001"
    ],
    [
      "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
      "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
      "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
      "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
    ],
    [
      "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
      "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
      "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
      "0x0000000000000000000000000000000000000000000000000000000000000001"
    ]
  ].map((i) => i.map((j) => BigInt(j))));
  var mapSWU = mapToCurveSimpleSWU(Fp, {
    A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
    B: BigInt("1771"),
    Z: Fp.create(BigInt("-11"))
  });
  var { hashToCurve, encodeToCurve } = createHasher(secp256k1.ProjectivePoint, (scalars) => {
    const { x, y } = mapSWU(Fp.create(scalars[0]));
    return isoMap(x, y);
  }, {
    DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
    encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
    p: Fp.ORDER,
    m: 1,
    k: 128,
    expand: "xmd",
    hash: sha256
  });

  // ../../node_modules/@polkadot/util-crypto/address/encode.js
  function encodeAddress(key, ss58Format = defaults.prefix) {
    const u8a2 = decodeAddress(key);
    if (ss58Format < 0 || ss58Format > 16383 || [46, 47].includes(ss58Format)) {
      throw new Error("Out of range ss58Format specified");
    } else if (!defaults.allowedDecodedLengths.includes(u8a2.length)) {
      throw new Error(`Expected a valid key to convert, with length ${defaults.allowedDecodedLengths.join(", ")}`);
    }
    const input = u8aConcat(ss58Format < 64 ? [ss58Format] : [
      (ss58Format & 252) >> 2 | 64,
      ss58Format >> 8 | (ss58Format & 3) << 6
    ], u8a2);
    return base58Encode(u8aConcat(input, sshash(input).subarray(0, [32, 33].includes(u8a2.length) ? 2 : 1)));
  }

  // ../../node_modules/@noble/hashes/esm/sha3.js
  var [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
  var _0n7 = BigInt(0);
  var _1n7 = BigInt(1);
  var _2n5 = BigInt(2);
  var _7n = BigInt(7);
  var _256n = BigInt(256);
  var _0x71n = BigInt(113);
  for (let round2 = 0, R = _1n7, x = 1, y = 0; round2 < 24; round2++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    SHA3_ROTL.push((round2 + 1) * (round2 + 2) / 2 % 64);
    let t = _0n7;
    for (let j = 0; j < 7; j++) {
      R = (R << _1n7 ^ (R >> _7n) * _0x71n) % _256n;
      if (R & _2n5)
        t ^= _1n7 << (_1n7 << BigInt(j)) - _1n7;
    }
    _SHA3_IOTA.push(t);
  }
  var [SHA3_IOTA_H, SHA3_IOTA_L] = u64_default.split(_SHA3_IOTA, true);
  var rotlH = (h, l15, s) => s > 32 ? u64_default.rotlBH(h, l15, s) : u64_default.rotlSH(h, l15, s);
  var rotlL = (h, l15, s) => s > 32 ? u64_default.rotlBL(h, l15, s) : u64_default.rotlSL(h, l15, s);
  function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round2 = 24 - rounds; round2 < 24; round2++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL[t];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H[round2];
      s[1] ^= SHA3_IOTA_L[round2];
    }
    B.fill(0);
  }
  var Keccak = class extends Hash {
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      assert_default.number(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = u322(this.state);
    }
    keccak() {
      keccakP(this.state32, this.rounds);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      assert_default.exists(this);
      const { blockLen, state } = this;
      data = toBytes(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take2 = Math.min(blockLen - this.pos, len - pos);
        for (let i = 0; i < take2; i++)
          state[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      assert_default.exists(this, false);
      assert_default.bytes(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len = out.length; pos < len; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take2 = Math.min(blockLen - this.posOut, len - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take2), pos);
        this.posOut += take2;
        pos += take2;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes3) {
      assert_default.number(bytes3);
      return this.xofInto(new Uint8Array(bytes3));
    }
    digestInto(out) {
      assert_default.output(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  };
  var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
  var sha3_224 = gen(6, 144, 224 / 8);
  var sha3_256 = gen(6, 136, 256 / 8);
  var sha3_384 = gen(6, 104, 384 / 8);
  var sha3_512 = gen(6, 72, 512 / 8);
  var keccak_224 = gen(1, 144, 224 / 8);
  var keccak_256 = gen(1, 136, 256 / 8);
  var keccak_384 = gen(1, 104, 384 / 8);
  var keccak_512 = gen(1, 72, 512 / 8);
  var genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  var shake128 = genShake(31, 168, 128 / 8);
  var shake256 = genShake(31, 136, 256 / 8);

  // ../../node_modules/@polkadot/util-crypto/keccak/asU8a.js
  var keccakAsU8a = /* @__PURE__ */ createDualHasher({ 256: keccak256, 512: keccak512 }, { 256: keccak_256, 512: keccak_512 });

  // ../../node_modules/@polkadot/util-crypto/secp256k1/expand.js
  function secp256k1Expand2(publicKey, onlyJs) {
    if (![33, 65].includes(publicKey.length)) {
      throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);
    }
    if (publicKey.length === 65) {
      return publicKey.subarray(1);
    }
    if (!hasBigInt || !onlyJs && isReady()) {
      return secp256k1Expand(publicKey).subarray(1);
    }
    const { px, py } = secp256k1.ProjectivePoint.fromHex(publicKey);
    return u8aConcat(bnToU8a(px, BN_BE_256_OPTS), bnToU8a(py, BN_BE_256_OPTS));
  }

  // ../../node_modules/@polkadot/util-crypto/ethereum/encode.js
  function getH160(u8a2) {
    if ([33, 65].includes(u8a2.length)) {
      u8a2 = keccakAsU8a(secp256k1Expand2(u8a2));
    }
    return u8a2.slice(-20);
  }
  function ethereumEncode(addressOrPublic) {
    if (!addressOrPublic) {
      return "0x";
    }
    const u8aAddress = u8aToU8a(addressOrPublic);
    if (![20, 32, 33, 65].includes(u8aAddress.length)) {
      throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
    }
    const address = u8aToHex(getH160(u8aAddress), -1, false);
    const hash4 = u8aToHex(keccakAsU8a(address), -1, false);
    let result = "";
    for (let i = 0; i < 40; i++) {
      result = `${result}${parseInt(hash4[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
    }
    return `0x${result}`;
  }

  // ../../node_modules/@polkadot/util-crypto/ethereum/isChecksum.js
  function isInvalidChar(char, byte) {
    return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
  }
  function isEthereumChecksum(_address) {
    const address = _address.replace("0x", "");
    const hash4 = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);
    for (let i = 0; i < 40; i++) {
      if (isInvalidChar(address[i], parseInt(hash4[i], 16))) {
        return false;
      }
    }
    return true;
  }

  // ../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js
  function isEthereumAddress(address) {
    if (!address || address.length !== 42 || !isHex(address)) {
      return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
      return true;
    }
    return isEthereumChecksum(address);
  }

  // ../../node_modules/@polkadot/util-crypto/xxhash/xxhash64.js
  var P64_1 = BigInt2("11400714785074694791");
  var P64_2 = BigInt2("14029467366897019727");
  var P64_3 = BigInt2("1609587929392839161");
  var P64_4 = BigInt2("9650029242287828579");
  var P64_5 = BigInt2("2870177450012600261");
  var U64 = BigInt2("0xffffffffffffffff");
  var _7n2 = BigInt2(7);
  var _11n = BigInt2(11);
  var _12n = BigInt2(12);
  var _16n2 = BigInt2(16);
  var _18n = BigInt2(18);
  var _23n = BigInt2(23);
  var _27n = BigInt2(27);
  var _29n = BigInt2(29);
  var _31n = BigInt2(31);
  var _32n2 = BigInt2(32);
  var _33n = BigInt2(33);
  var _64n = BigInt2(64);
  var _256n2 = BigInt2(256);
  function rotl(a, b) {
    const c2 = a & U64;
    return (c2 << b | c2 >> _64n - b) & U64;
  }
  function fromU8a(u8a2, p, count) {
    const bigints = new Array(count);
    let offset2 = 0;
    for (let i = 0; i < count; i++, offset2 += 2) {
      bigints[i] = BigInt2(u8a2[p + offset2] | u8a2[p + 1 + offset2] << 8);
    }
    let result = _0n;
    for (let i = count - 1; i >= 0; i--) {
      result = (result << _16n2) + bigints[i];
    }
    return result;
  }
  function init(seed, input) {
    const state = {
      seed,
      u8a: new Uint8Array(32),
      u8asize: 0,
      v1: seed + P64_1 + P64_2,
      v2: seed + P64_2,
      v3: seed,
      v4: seed - P64_1
    };
    if (input.length < 32) {
      state.u8a.set(input);
      state.u8asize = input.length;
      return state;
    }
    const limit = input.length - 32;
    let p = 0;
    if (limit >= 0) {
      const adjustV = (v3) => P64_1 * rotl(v3 + P64_2 * fromU8a(input, p, 4), _31n);
      do {
        state.v1 = adjustV(state.v1);
        p += 8;
        state.v2 = adjustV(state.v2);
        p += 8;
        state.v3 = adjustV(state.v3);
        p += 8;
        state.v4 = adjustV(state.v4);
        p += 8;
      } while (p <= limit);
    }
    if (p < input.length) {
      state.u8a.set(input.subarray(p, input.length));
      state.u8asize = input.length - p;
    }
    return state;
  }
  function xxhash64(input, initSeed) {
    const { seed, u8a: u8a2, u8asize, v1: v17, v2: v22, v3, v4 } = init(BigInt2(initSeed), input);
    let p = 0;
    let h64 = U64 & BigInt2(input.length) + (input.length >= 32 ? ((((rotl(v17, _1n) + rotl(v22, _7n2) + rotl(v3, _12n) + rotl(v4, _18n) ^ P64_1 * rotl(v17 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v22 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v4 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);
    while (p <= u8asize - 8) {
      h64 = U64 & P64_4 + P64_1 * rotl(h64 ^ P64_1 * rotl(P64_2 * fromU8a(u8a2, p, 4), _31n), _27n);
      p += 8;
    }
    if (p + 4 <= u8asize) {
      h64 = U64 & P64_3 + P64_2 * rotl(h64 ^ P64_1 * fromU8a(u8a2, p, 2), _23n);
      p += 4;
    }
    while (p < u8asize) {
      h64 = U64 & P64_1 * rotl(h64 ^ P64_5 * BigInt2(u8a2[p++]), _11n);
    }
    h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
    h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
    h64 = U64 & (h64 ^ h64 >> _32n2);
    const result = new Uint8Array(8);
    for (let i = 7; i >= 0; i--) {
      result[i] = Number(h64 % _256n2);
      h64 = h64 / _256n2;
    }
    return result;
  }

  // ../../node_modules/@polkadot/util-crypto/xxhash/asU8a.js
  function xxhashAsU8a(data, bitLength = 64, onlyJs) {
    const rounds = Math.ceil(bitLength / 64);
    const u8a2 = u8aToU8a(data);
    if (!hasBigInt || !onlyJs && isReady()) {
      return twox(u8a2, rounds);
    }
    const result = new Uint8Array(rounds * 8);
    for (let seed = 0; seed < rounds; seed++) {
      result.set(xxhash64(u8a2, seed).reverse(), seed * 8);
    }
    return result;
  }

  // ../../node_modules/@polkadot/rpc-provider/coder/error.js
  var UNKNOWN = -99999;
  function extend(that, name, value) {
    Object.defineProperty(that, name, {
      configurable: true,
      enumerable: false,
      value
    });
  }
  var RpcError = class extends Error {
    constructor(message = "", code = UNKNOWN, data) {
      super();
      extend(this, "message", String(message));
      extend(this, "name", this.constructor.name);
      extend(this, "data", data);
      extend(this, "code", code);
      if (isFunction(Error.captureStackTrace)) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        const { stack } = new Error(message);
        stack && extend(this, "stack", stack);
      }
    }
  };
  RpcError.CODES = {
    ASSERT: -90009,
    INVALID_JSONRPC: -99998,
    METHOD_NOT_FOUND: -32601,
    UNKNOWN
  };
  var error_default = RpcError;

  // ../../node_modules/@polkadot/rpc-provider/coder/index.js
  function formatErrorData(data) {
    if (isUndefined(data)) {
      return "";
    }
    const formatted = `: ${isString(data) ? data.replace(/Error\("/g, "").replace(/\("/g, "(").replace(/"\)/g, ")").replace(/\(/g, ", ").replace(/\)/g, "") : stringify(data)}`;
    return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}\u2026`;
  }
  function checkError(error) {
    if (error) {
      const { code, data, message } = error;
      throw new error_default(`${code}: ${message}${formatErrorData(data)}`, code, data);
    }
  }
  var RpcCoder = class {
    constructor() {
      this.__internal__id = 0;
    }
    decodeResponse(response) {
      if (!response || response.jsonrpc !== "2.0") {
        throw new Error("Invalid jsonrpc field in decoded object");
      }
      const isSubscription2 = !isUndefined(response.params) && !isUndefined(response.method);
      if (!isNumber(response.id) && (!isSubscription2 || !isNumber(response.params.subscription) && !isString(response.params.subscription))) {
        throw new Error("Invalid id field in decoded object");
      }
      checkError(response.error);
      if (response.result === void 0 && !isSubscription2) {
        throw new Error("No result found in jsonrpc response");
      }
      if (isSubscription2) {
        checkError(response.params.error);
        return response.params.result;
      }
      return response.result;
    }
    encodeJson(method, params) {
      const [id, data] = this.encodeObject(method, params);
      return [id, stringify(data)];
    }
    encodeObject(method, params) {
      const id = ++this.__internal__id;
      return [id, {
        id,
        jsonrpc: "2.0",
        method,
        params
      }];
    }
  };

  // ../../node_modules/@polkadot/rpc-provider/defaults.js
  var HTTP_URL = "http://127.0.0.1:9933";
  var WS_URL = "ws://127.0.0.1:9944";
  var defaults_default = {
    HTTP_URL,
    WS_URL
  };

  // ../../node_modules/@polkadot/rpc-provider/lru.js
  var DEFAULT_CAPACITY = 128;
  var LRUNode = class {
    constructor(key) {
      this.key = key;
      this.next = this.prev = this;
    }
  };
  var LRUCache = class {
    constructor(capacity = DEFAULT_CAPACITY) {
      this.__internal__data = /* @__PURE__ */ new Map();
      this.__internal__refs = /* @__PURE__ */ new Map();
      this.__internal__length = 0;
      this.capacity = capacity;
      this.__internal__head = this.__internal__tail = new LRUNode("<empty>");
    }
    get length() {
      return this.__internal__length;
    }
    get lengthData() {
      return this.__internal__data.size;
    }
    get lengthRefs() {
      return this.__internal__refs.size;
    }
    entries() {
      const keys2 = this.keys();
      const count = keys2.length;
      const entries = new Array(count);
      for (let i = 0; i < count; i++) {
        const key = keys2[i];
        entries[i] = [key, this.__internal__data.get(key)];
      }
      return entries;
    }
    keys() {
      const keys2 = [];
      if (this.__internal__length) {
        let curr = this.__internal__head;
        while (curr !== this.__internal__tail) {
          keys2.push(curr.key);
          curr = curr.next;
        }
        keys2.push(curr.key);
      }
      return keys2;
    }
    get(key) {
      const data = this.__internal__data.get(key);
      if (data) {
        this.__internal__toHead(key);
        return data;
      }
      return null;
    }
    set(key, value) {
      if (this.__internal__data.has(key)) {
        this.__internal__toHead(key);
      } else {
        const node = new LRUNode(key);
        this.__internal__refs.set(node.key, node);
        if (this.length === 0) {
          this.__internal__head = this.__internal__tail = node;
        } else {
          this.__internal__head.prev = node;
          node.next = this.__internal__head;
          this.__internal__head = node;
        }
        if (this.__internal__length === this.capacity) {
          this.__internal__data.delete(this.__internal__tail.key);
          this.__internal__refs.delete(this.__internal__tail.key);
          this.__internal__tail = this.__internal__tail.prev;
          this.__internal__tail.next = this.__internal__head;
        } else {
          this.__internal__length += 1;
        }
      }
      this.__internal__data.set(key, value);
    }
    __internal__toHead(key) {
      const ref = this.__internal__refs.get(key);
      if (ref && ref !== this.__internal__head) {
        ref.prev.next = ref.next;
        ref.next.prev = ref.prev;
        ref.next = this.__internal__head;
        this.__internal__head.prev = ref;
        this.__internal__head = ref;
      }
    }
  };

  // ../../node_modules/eventemitter3/index.mjs
  var import_index = __toESM(require_eventemitter3(), 1);

  // ../../node_modules/@polkadot/x-ws/browser.js
  var WebSocket = xglobal.WebSocket;

  // ../../node_modules/@polkadot/rpc-provider/ws/errors.js
  var known = {
    1e3: "Normal Closure",
    1001: "Going Away",
    1002: "Protocol Error",
    1003: "Unsupported Data",
    1004: "(For future)",
    1005: "No Status Received",
    1006: "Abnormal Closure",
    1007: "Invalid frame payload data",
    1008: "Policy Violation",
    1009: "Message too big",
    1010: "Missing Extension",
    1011: "Internal Error",
    1012: "Service Restart",
    1013: "Try Again Later",
    1014: "Bad Gateway",
    1015: "TLS Handshake"
  };
  function getWSErrorString(code) {
    if (code >= 0 && code <= 999) {
      return "(Unused)";
    } else if (code >= 1016) {
      if (code <= 1999) {
        return "(For WebSocket standard)";
      } else if (code <= 2999) {
        return "(For WebSocket extensions)";
      } else if (code <= 3999) {
        return "(For libraries and frameworks)";
      } else if (code <= 4999) {
        return "(For applications)";
      }
    }
    return known[code] || "(Unknown)";
  }

  // ../../node_modules/@polkadot/rpc-provider/ws/index.js
  var ALIASES = {
    chain_finalisedHead: "chain_finalizedHead",
    chain_subscribeFinalisedHeads: "chain_subscribeFinalizedHeads",
    chain_unsubscribeFinalisedHeads: "chain_unsubscribeFinalizedHeads"
  };
  var RETRY_DELAY = 2500;
  var DEFAULT_TIMEOUT_MS = 60 * 1e3;
  var TIMEOUT_INTERVAL = 5e3;
  var l = logger("api-ws");
  function eraseRecord(record, cb) {
    Object.keys(record).forEach((key) => {
      if (cb) {
        cb(record[key]);
      }
      delete record[key];
    });
  }
  function defaultEndpointStats() {
    return { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 };
  }
  var WsProvider2 = class {
    constructor(endpoint = defaults_default.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout) {
      this.__internal__callCache = new LRUCache();
      this.__internal__handlers = {};
      this.__internal__waitingForId = {};
      this.__internal__isConnected = false;
      this.__internal__subscriptions = {};
      this.__internal__timeoutId = null;
      this.__internal__emit = (type, ...args) => {
        this.__internal__eventemitter.emit(type, ...args);
      };
      this.__internal__onSocketClose = (event) => {
        const error = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);
        if (this.__internal__autoConnectMs > 0) {
          l.error(error.message);
        }
        this.__internal__isConnected = false;
        if (this.__internal__websocket) {
          this.__internal__websocket.onclose = null;
          this.__internal__websocket.onerror = null;
          this.__internal__websocket.onmessage = null;
          this.__internal__websocket.onopen = null;
          this.__internal__websocket = null;
        }
        if (this.__internal__timeoutId) {
          clearInterval(this.__internal__timeoutId);
          this.__internal__timeoutId = null;
        }
        eraseRecord(this.__internal__handlers, (h) => {
          try {
            h.callback(error, void 0);
          } catch (err) {
            l.error(err);
          }
        });
        eraseRecord(this.__internal__waitingForId);
        this.__internal__endpointStats = defaultEndpointStats();
        this.__internal__emit("disconnected");
        if (this.__internal__autoConnectMs > 0) {
          setTimeout(() => {
            this.connectWithRetry().catch(() => {
            });
          }, this.__internal__autoConnectMs);
        }
      };
      this.__internal__onSocketError = (error) => {
        l.debug(() => ["socket error", error]);
        this.__internal__emit("error", error);
      };
      this.__internal__onSocketMessage = (message) => {
        l.debug(() => ["received", message.data]);
        const bytesRecv = message.data.length;
        this.__internal__endpointStats.bytesRecv += bytesRecv;
        this.__internal__stats.total.bytesRecv += bytesRecv;
        const response = JSON.parse(message.data);
        return isUndefined(response.method) ? this.__internal__onSocketMessageResult(response) : this.__internal__onSocketMessageSubscribe(response);
      };
      this.__internal__onSocketMessageResult = (response) => {
        const handler = this.__internal__handlers[response.id];
        if (!handler) {
          l.debug(() => `Unable to find handler for id=${response.id}`);
          return;
        }
        try {
          const { method, params, subscription } = handler;
          const result = this.__internal__coder.decodeResponse(response);
          handler.callback(null, result);
          if (subscription) {
            const subId = `${subscription.type}::${result}`;
            this.__internal__subscriptions[subId] = objectSpread({}, subscription, {
              method,
              params
            });
            if (this.__internal__waitingForId[subId]) {
              this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[subId]);
            }
          }
        } catch (error) {
          this.__internal__endpointStats.errors++;
          this.__internal__stats.total.errors++;
          handler.callback(error, void 0);
        }
        delete this.__internal__handlers[response.id];
      };
      this.__internal__onSocketMessageSubscribe = (response) => {
        const method = ALIASES[response.method] || response.method || "invalid";
        const subId = `${method}::${response.params.subscription}`;
        const handler = this.__internal__subscriptions[subId];
        if (!handler) {
          this.__internal__waitingForId[subId] = response;
          l.debug(() => `Unable to find handler for subscription=${subId}`);
          return;
        }
        delete this.__internal__waitingForId[subId];
        try {
          const result = this.__internal__coder.decodeResponse(response);
          handler.callback(null, result);
        } catch (error) {
          this.__internal__endpointStats.errors++;
          this.__internal__stats.total.errors++;
          handler.callback(error, void 0);
        }
      };
      this.__internal__onSocketOpen = () => {
        if (this.__internal__websocket === null) {
          throw new Error("WebSocket cannot be null in onOpen");
        }
        l.debug(() => ["connected to", this.endpoint]);
        this.__internal__isConnected = true;
        this.__internal__resubscribe();
        this.__internal__emit("connected");
        return true;
      };
      this.__internal__resubscribe = () => {
        const subscriptions = this.__internal__subscriptions;
        this.__internal__subscriptions = {};
        Promise.all(Object.keys(subscriptions).map(async (id) => {
          const { callback, method, params, type } = subscriptions[id];
          if (type.startsWith("author_")) {
            return;
          }
          try {
            await this.subscribe(type, method, params, callback);
          } catch (error) {
            l.error(error);
          }
        })).catch(l.error);
      };
      this.__internal__timeoutHandlers = () => {
        const now = Date.now();
        const ids = Object.keys(this.__internal__handlers);
        for (let i = 0, count = ids.length; i < count; i++) {
          const handler = this.__internal__handlers[ids[i]];
          if (now - handler.start > this.__internal__timeout) {
            try {
              handler.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout / 1e3}s`), void 0);
            } catch {
            }
            this.__internal__endpointStats.timeout++;
            this.__internal__stats.total.timeout++;
            delete this.__internal__handlers[ids[i]];
          }
        }
      };
      const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
      if (endpoints.length === 0) {
        throw new Error("WsProvider requires at least one Endpoint");
      }
      endpoints.forEach((endpoint2) => {
        if (!/^(wss|ws):\/\//.test(endpoint2)) {
          throw new Error(`Endpoint should start with 'ws://', received '${endpoint2}'`);
        }
      });
      this.__internal__eventemitter = new import_index.default();
      this.__internal__autoConnectMs = autoConnectMs || 0;
      this.__internal__coder = new RpcCoder();
      this.__internal__endpointIndex = -1;
      this.__internal__endpoints = endpoints;
      this.__internal__headers = headers;
      this.__internal__websocket = null;
      this.__internal__stats = {
        active: { requests: 0, subscriptions: 0 },
        total: defaultEndpointStats()
      };
      this.__internal__endpointStats = defaultEndpointStats();
      this.__internal__timeout = timeout || DEFAULT_TIMEOUT_MS;
      if (autoConnectMs && autoConnectMs > 0) {
        this.connectWithRetry().catch(() => {
        });
      }
      this.__internal__isReadyPromise = new Promise((resolve) => {
        this.__internal__eventemitter.once("connected", () => {
          resolve(this);
        });
      });
    }
    get hasSubscriptions() {
      return true;
    }
    get isClonable() {
      return true;
    }
    get isConnected() {
      return this.__internal__isConnected;
    }
    get isReady() {
      return this.__internal__isReadyPromise;
    }
    get endpoint() {
      return this.__internal__endpoints[this.__internal__endpointIndex];
    }
    clone() {
      return new WsProvider2(this.__internal__endpoints);
    }
    selectEndpointIndex(endpoints) {
      return (this.__internal__endpointIndex + 1) % endpoints.length;
    }
    async connect() {
      if (this.__internal__websocket) {
        throw new Error("WebSocket is already connected");
      }
      try {
        this.__internal__endpointIndex = this.selectEndpointIndex(this.__internal__endpoints);
        this.__internal__websocket = typeof xglobal.WebSocket !== "undefined" && isChildClass(xglobal.WebSocket, WebSocket) ? new WebSocket(this.endpoint) : new WebSocket(this.endpoint, void 0, {
          headers: this.__internal__headers
        });
        if (this.__internal__websocket) {
          this.__internal__websocket.onclose = this.__internal__onSocketClose;
          this.__internal__websocket.onerror = this.__internal__onSocketError;
          this.__internal__websocket.onmessage = this.__internal__onSocketMessage;
          this.__internal__websocket.onopen = this.__internal__onSocketOpen;
        }
        this.__internal__timeoutId = setInterval(() => this.__internal__timeoutHandlers(), TIMEOUT_INTERVAL);
      } catch (error) {
        l.error(error);
        this.__internal__emit("error", error);
        throw error;
      }
    }
    async connectWithRetry() {
      if (this.__internal__autoConnectMs > 0) {
        try {
          await this.connect();
        } catch {
          setTimeout(() => {
            this.connectWithRetry().catch(() => {
            });
          }, this.__internal__autoConnectMs);
        }
      }
    }
    async disconnect() {
      this.__internal__autoConnectMs = 0;
      try {
        if (this.__internal__websocket) {
          this.__internal__websocket.close(1e3);
        }
      } catch (error) {
        l.error(error);
        this.__internal__emit("error", error);
        throw error;
      }
    }
    get stats() {
      return {
        active: {
          requests: Object.keys(this.__internal__handlers).length,
          subscriptions: Object.keys(this.__internal__subscriptions).length
        },
        total: this.__internal__stats.total
      };
    }
    get endpointStats() {
      return this.__internal__endpointStats;
    }
    on(type, sub) {
      this.__internal__eventemitter.on(type, sub);
      return () => {
        this.__internal__eventemitter.removeListener(type, sub);
      };
    }
    send(method, params, isCacheable, subscription) {
      this.__internal__endpointStats.requests++;
      this.__internal__stats.total.requests++;
      const [id, body] = this.__internal__coder.encodeJson(method, params);
      let resultPromise = isCacheable ? this.__internal__callCache.get(body) : null;
      if (!resultPromise) {
        resultPromise = this.__internal__send(id, body, method, params, subscription);
        if (isCacheable) {
          this.__internal__callCache.set(body, resultPromise);
        }
      } else {
        this.__internal__endpointStats.cached++;
        this.__internal__stats.total.cached++;
      }
      return resultPromise;
    }
    async __internal__send(id, body, method, params, subscription) {
      return new Promise((resolve, reject) => {
        try {
          if (!this.isConnected || this.__internal__websocket === null) {
            throw new Error("WebSocket is not connected");
          }
          const callback = (error, result) => {
            error ? reject(error) : resolve(result);
          };
          l.debug(() => ["calling", method, body]);
          this.__internal__handlers[id] = {
            callback,
            method,
            params,
            start: Date.now(),
            subscription
          };
          const bytesSent = body.length;
          this.__internal__endpointStats.bytesSent += bytesSent;
          this.__internal__stats.total.bytesSent += bytesSent;
          this.__internal__websocket.send(body);
        } catch (error) {
          this.__internal__endpointStats.errors++;
          this.__internal__stats.total.errors++;
          reject(error);
        }
      });
    }
    subscribe(type, method, params, callback) {
      this.__internal__endpointStats.subscriptions++;
      this.__internal__stats.total.subscriptions++;
      return this.send(method, params, false, { callback, type });
    }
    async unsubscribe(type, method, id) {
      const subscription = `${type}::${id}`;
      if (isUndefined(this.__internal__subscriptions[subscription])) {
        l.debug(() => `Unable to find active subscription=${subscription}`);
        return false;
      }
      delete this.__internal__subscriptions[subscription];
      try {
        return this.isConnected && !isNull(this.__internal__websocket) ? this.send(method, [id]) : true;
      } catch {
        return false;
      }
    }
  };

  // ../../node_modules/tslib/tslib.es6.js
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _3 = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v3) {
        return step([n, v3]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_3 = 0)), _3)
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _3.label++;
              return { value: op[1], done: false };
            case 5:
              _3.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _3.ops.pop();
              _3.trys.pop();
              continue;
            default:
              if (!(t = _3.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _3 = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _3.label = op[1];
                break;
              }
              if (op[0] === 6 && _3.label < t[1]) {
                _3.label = t[1];
                t = op;
                break;
              }
              if (t && _3.label < t[2]) {
                _3.label = t[2];
                _3.ops.push(op);
                break;
              }
              if (t[2])
                _3.ops.pop();
              _3.trys.pop();
              continue;
          }
          op = body.call(thisArg, _3);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r && !r.done && (m = i["return"]))
          m.call(i);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spreadArray(to, from2, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l15 = from2.length, ar; i < l15; i++) {
        if (ar || !(i in from2)) {
          if (!ar)
            ar = Array.prototype.slice.call(from2, 0, i);
          ar[i] = from2[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from2));
  }
  function __await(v3) {
    return this instanceof __await ? (this.v = v3, this) : new __await(v3);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v3) {
          return new Promise(function(a, b) {
            q.push([n, v3, a, b]) > 1 || resume(n, v3);
          });
        };
    }
    function resume(n, v3) {
      try {
        step(g[n](v3));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v3) {
      if (f(v3), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v3) {
        return new Promise(function(resolve, reject) {
          v3 = o[n](v3), settle(resolve, reject, v3.done, v3.value);
        });
      };
    }
    function settle(resolve, reject, d, v3) {
      Promise.resolve(v3).then(function(v4) {
        resolve({ value: v4, done: d });
      }, reject);
    }
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/isFunction.js
  function isFunction2(value) {
    return typeof value === "function";
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
  function createErrorClass(createImpl) {
    var _super = function(instance) {
      Error.call(instance);
      instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
  var UnsubscriptionError = createErrorClass(function(_super) {
    return function UnsubscriptionErrorImpl(errors) {
      _super(this);
      this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
        return i + 1 + ") " + err.toString();
      }).join("\n  ") : "";
      this.name = "UnsubscriptionError";
      this.errors = errors;
    };
  });

  // ../../node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
  function arrRemove(arr, item) {
    if (arr) {
      var index = arr.indexOf(item);
      0 <= index && arr.splice(index, 1);
    }
  }

  // ../../node_modules/rxjs/dist/esm5/internal/Subscription.js
  var Subscription = function() {
    function Subscription2(initialTeardown) {
      this.initialTeardown = initialTeardown;
      this.closed = false;
      this._parentage = null;
      this._finalizers = null;
    }
    Subscription2.prototype.unsubscribe = function() {
      var e_1, _a, e_2, _b;
      var errors;
      if (!this.closed) {
        this.closed = true;
        var _parentage = this._parentage;
        if (_parentage) {
          this._parentage = null;
          if (Array.isArray(_parentage)) {
            try {
              for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                var parent_1 = _parentage_1_1.value;
                parent_1.remove(this);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                  _a.call(_parentage_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          } else {
            _parentage.remove(this);
          }
        }
        var initialFinalizer = this.initialTeardown;
        if (isFunction2(initialFinalizer)) {
          try {
            initialFinalizer();
          } catch (e) {
            errors = e instanceof UnsubscriptionError ? e.errors : [e];
          }
        }
        var _finalizers = this._finalizers;
        if (_finalizers) {
          this._finalizers = null;
          try {
            for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
              var finalizer = _finalizers_1_1.value;
              try {
                execFinalizer(finalizer);
              } catch (err) {
                errors = errors !== null && errors !== void 0 ? errors : [];
                if (err instanceof UnsubscriptionError) {
                  errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                } else {
                  errors.push(err);
                }
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
                _b.call(_finalizers_1);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        }
        if (errors) {
          throw new UnsubscriptionError(errors);
        }
      }
    };
    Subscription2.prototype.add = function(teardown) {
      var _a;
      if (teardown && teardown !== this) {
        if (this.closed) {
          execFinalizer(teardown);
        } else {
          if (teardown instanceof Subscription2) {
            if (teardown.closed || teardown._hasParent(this)) {
              return;
            }
            teardown._addParent(this);
          }
          (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
        }
      }
    };
    Subscription2.prototype._hasParent = function(parent) {
      var _parentage = this._parentage;
      return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
    };
    Subscription2.prototype._addParent = function(parent) {
      var _parentage = this._parentage;
      this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription2.prototype._removeParent = function(parent) {
      var _parentage = this._parentage;
      if (_parentage === parent) {
        this._parentage = null;
      } else if (Array.isArray(_parentage)) {
        arrRemove(_parentage, parent);
      }
    };
    Subscription2.prototype.remove = function(teardown) {
      var _finalizers = this._finalizers;
      _finalizers && arrRemove(_finalizers, teardown);
      if (teardown instanceof Subscription2) {
        teardown._removeParent(this);
      }
    };
    Subscription2.EMPTY = function() {
      var empty2 = new Subscription2();
      empty2.closed = true;
      return empty2;
    }();
    return Subscription2;
  }();
  var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  function isSubscription(value) {
    return value instanceof Subscription || value && "closed" in value && isFunction2(value.remove) && isFunction2(value.add) && isFunction2(value.unsubscribe);
  }
  function execFinalizer(finalizer) {
    if (isFunction2(finalizer)) {
      finalizer();
    } else {
      finalizer.unsubscribe();
    }
  }

  // ../../node_modules/rxjs/dist/esm5/internal/config.js
  var config2 = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: void 0,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false
  };

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
  var timeoutProvider = {
    setTimeout: function(handler, timeout) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var delegate = timeoutProvider.delegate;
      if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
        return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
      }
      return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearTimeout: function(handle) {
      var delegate = timeoutProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: void 0
  };

  // ../../node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
  function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function() {
      var onUnhandledError = config2.onUnhandledError;
      if (onUnhandledError) {
        onUnhandledError(err);
      } else {
        throw err;
      }
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/noop.js
  function noop3() {
  }

  // ../../node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
  var COMPLETE_NOTIFICATION = function() {
    return createNotification("C", void 0, void 0);
  }();
  function errorNotification(error) {
    return createNotification("E", void 0, error);
  }
  function nextNotification(value) {
    return createNotification("N", value, void 0);
  }
  function createNotification(kind, value, error) {
    return {
      kind,
      value,
      error
    };
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/errorContext.js
  var context = null;
  function errorContext(cb) {
    if (config2.useDeprecatedSynchronousErrorHandling) {
      var isRoot = !context;
      if (isRoot) {
        context = { errorThrown: false, error: null };
      }
      cb();
      if (isRoot) {
        var _a = context, errorThrown = _a.errorThrown, error = _a.error;
        context = null;
        if (errorThrown) {
          throw error;
        }
      }
    } else {
      cb();
    }
  }
  function captureError(err) {
    if (config2.useDeprecatedSynchronousErrorHandling && context) {
      context.errorThrown = true;
      context.error = err;
    }
  }

  // ../../node_modules/rxjs/dist/esm5/internal/Subscriber.js
  var Subscriber = function(_super) {
    __extends(Subscriber2, _super);
    function Subscriber2(destination) {
      var _this = _super.call(this) || this;
      _this.isStopped = false;
      if (destination) {
        _this.destination = destination;
        if (isSubscription(destination)) {
          destination.add(_this);
        }
      } else {
        _this.destination = EMPTY_OBSERVER;
      }
      return _this;
    }
    Subscriber2.create = function(next, error, complete) {
      return new SafeSubscriber(next, error, complete);
    };
    Subscriber2.prototype.next = function(value) {
      if (this.isStopped) {
        handleStoppedNotification(nextNotification(value), this);
      } else {
        this._next(value);
      }
    };
    Subscriber2.prototype.error = function(err) {
      if (this.isStopped) {
        handleStoppedNotification(errorNotification(err), this);
      } else {
        this.isStopped = true;
        this._error(err);
      }
    };
    Subscriber2.prototype.complete = function() {
      if (this.isStopped) {
        handleStoppedNotification(COMPLETE_NOTIFICATION, this);
      } else {
        this.isStopped = true;
        this._complete();
      }
    };
    Subscriber2.prototype.unsubscribe = function() {
      if (!this.closed) {
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
        this.destination = null;
      }
    };
    Subscriber2.prototype._next = function(value) {
      this.destination.next(value);
    };
    Subscriber2.prototype._error = function(err) {
      try {
        this.destination.error(err);
      } finally {
        this.unsubscribe();
      }
    };
    Subscriber2.prototype._complete = function() {
      try {
        this.destination.complete();
      } finally {
        this.unsubscribe();
      }
    };
    return Subscriber2;
  }(Subscription);
  var _bind = Function.prototype.bind;
  function bind(fn2, thisArg) {
    return _bind.call(fn2, thisArg);
  }
  var ConsumerObserver = function() {
    function ConsumerObserver2(partialObserver) {
      this.partialObserver = partialObserver;
    }
    ConsumerObserver2.prototype.next = function(value) {
      var partialObserver = this.partialObserver;
      if (partialObserver.next) {
        try {
          partialObserver.next(value);
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    ConsumerObserver2.prototype.error = function(err) {
      var partialObserver = this.partialObserver;
      if (partialObserver.error) {
        try {
          partialObserver.error(err);
        } catch (error) {
          handleUnhandledError(error);
        }
      } else {
        handleUnhandledError(err);
      }
    };
    ConsumerObserver2.prototype.complete = function() {
      var partialObserver = this.partialObserver;
      if (partialObserver.complete) {
        try {
          partialObserver.complete();
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    return ConsumerObserver2;
  }();
  var SafeSubscriber = function(_super) {
    __extends(SafeSubscriber2, _super);
    function SafeSubscriber2(observerOrNext, error, complete) {
      var _this = _super.call(this) || this;
      var partialObserver;
      if (isFunction2(observerOrNext) || !observerOrNext) {
        partialObserver = {
          next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
          error: error !== null && error !== void 0 ? error : void 0,
          complete: complete !== null && complete !== void 0 ? complete : void 0
        };
      } else {
        var context_1;
        if (_this && config2.useDeprecatedNextContext) {
          context_1 = Object.create(observerOrNext);
          context_1.unsubscribe = function() {
            return _this.unsubscribe();
          };
          partialObserver = {
            next: observerOrNext.next && bind(observerOrNext.next, context_1),
            error: observerOrNext.error && bind(observerOrNext.error, context_1),
            complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
          };
        } else {
          partialObserver = observerOrNext;
        }
      }
      _this.destination = new ConsumerObserver(partialObserver);
      return _this;
    }
    return SafeSubscriber2;
  }(Subscriber);
  function handleUnhandledError(error) {
    if (config2.useDeprecatedSynchronousErrorHandling) {
      captureError(error);
    } else {
      reportUnhandledError(error);
    }
  }
  function defaultErrorHandler(err) {
    throw err;
  }
  function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config2.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function() {
      return onStoppedNotification(notification, subscriber);
    });
  }
  var EMPTY_OBSERVER = {
    closed: true,
    next: noop3,
    error: defaultErrorHandler,
    complete: noop3
  };

  // ../../node_modules/rxjs/dist/esm5/internal/symbol/observable.js
  var observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();

  // ../../node_modules/rxjs/dist/esm5/internal/util/identity.js
  function identity2(x) {
    return x;
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/pipe.js
  function pipeFromArray(fns) {
    if (fns.length === 0) {
      return identity2;
    }
    if (fns.length === 1) {
      return fns[0];
    }
    return function piped(input) {
      return fns.reduce(function(prev, fn2) {
        return fn2(prev);
      }, input);
    };
  }

  // ../../node_modules/rxjs/dist/esm5/internal/Observable.js
  var Observable = function() {
    function Observable2(subscribe) {
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }
    Observable2.prototype.lift = function(operator) {
      var observable2 = new Observable2();
      observable2.source = this;
      observable2.operator = operator;
      return observable2;
    };
    Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
      var _this = this;
      var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
      errorContext(function() {
        var _a = _this, operator = _a.operator, source = _a.source;
        subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
      });
      return subscriber;
    };
    Observable2.prototype._trySubscribe = function(sink) {
      try {
        return this._subscribe(sink);
      } catch (err) {
        sink.error(err);
      }
    };
    Observable2.prototype.forEach = function(next, promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var subscriber = new SafeSubscriber({
          next: function(value) {
            try {
              next(value);
            } catch (err) {
              reject(err);
              subscriber.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
        _this.subscribe(subscriber);
      });
    };
    Observable2.prototype._subscribe = function(subscriber) {
      var _a;
      return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable2.prototype[observable] = function() {
      return this;
    };
    Observable2.prototype.pipe = function() {
      var operations = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        operations[_i] = arguments[_i];
      }
      return pipeFromArray(operations)(this);
    };
    Observable2.prototype.toPromise = function(promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var value;
        _this.subscribe(function(x) {
          return value = x;
        }, function(err) {
          return reject(err);
        }, function() {
          return resolve(value);
        });
      });
    };
    Observable2.create = function(subscribe) {
      return new Observable2(subscribe);
    };
    return Observable2;
  }();
  function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config2.Promise) !== null && _a !== void 0 ? _a : Promise;
  }
  function isObserver(value) {
    return value && isFunction2(value.next) && isFunction2(value.error) && isFunction2(value.complete);
  }
  function isSubscriber(value) {
    return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/lift.js
  function hasLift(source) {
    return isFunction2(source === null || source === void 0 ? void 0 : source.lift);
  }
  function operate(init2) {
    return function(source) {
      if (hasLift(source)) {
        return source.lift(function(liftedSource) {
          try {
            return init2(liftedSource, this);
          } catch (err) {
            this.error(err);
          }
        });
      }
      throw new TypeError("Unable to lift unknown Observable type");
    };
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
  function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
  }
  var OperatorSubscriber = function(_super) {
    __extends(OperatorSubscriber2, _super);
    function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
      var _this = _super.call(this, destination) || this;
      _this.onFinalize = onFinalize;
      _this.shouldUnsubscribe = shouldUnsubscribe;
      _this._next = onNext ? function(value) {
        try {
          onNext(value);
        } catch (err) {
          destination.error(err);
        }
      } : _super.prototype._next;
      _this._error = onError ? function(err) {
        try {
          onError(err);
        } catch (err2) {
          destination.error(err2);
        } finally {
          this.unsubscribe();
        }
      } : _super.prototype._error;
      _this._complete = onComplete ? function() {
        try {
          onComplete();
        } catch (err) {
          destination.error(err);
        } finally {
          this.unsubscribe();
        }
      } : _super.prototype._complete;
      return _this;
    }
    OperatorSubscriber2.prototype.unsubscribe = function() {
      var _a;
      if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
        var closed_1 = this.closed;
        _super.prototype.unsubscribe.call(this);
        !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
      }
    };
    return OperatorSubscriber2;
  }(Subscriber);

  // ../../node_modules/rxjs/dist/esm5/internal/operators/refCount.js
  function refCount() {
    return operate(function(source, subscriber) {
      var connection = null;
      source._refCount++;
      var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
        if (!source || source._refCount <= 0 || 0 < --source._refCount) {
          connection = null;
          return;
        }
        var sharedConnection = source._connection;
        var conn = connection;
        connection = null;
        if (sharedConnection && (!conn || sharedConnection === conn)) {
          sharedConnection.unsubscribe();
        }
        subscriber.unsubscribe();
      });
      source.subscribe(refCounter);
      if (!refCounter.closed) {
        connection = source.connect();
      }
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
  var ConnectableObservable = function(_super) {
    __extends(ConnectableObservable2, _super);
    function ConnectableObservable2(source, subjectFactory) {
      var _this = _super.call(this) || this;
      _this.source = source;
      _this.subjectFactory = subjectFactory;
      _this._subject = null;
      _this._refCount = 0;
      _this._connection = null;
      if (hasLift(source)) {
        _this.lift = source.lift;
      }
      return _this;
    }
    ConnectableObservable2.prototype._subscribe = function(subscriber) {
      return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable2.prototype.getSubject = function() {
      var subject = this._subject;
      if (!subject || subject.isStopped) {
        this._subject = this.subjectFactory();
      }
      return this._subject;
    };
    ConnectableObservable2.prototype._teardown = function() {
      this._refCount = 0;
      var _connection = this._connection;
      this._subject = this._connection = null;
      _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
    };
    ConnectableObservable2.prototype.connect = function() {
      var _this = this;
      var connection = this._connection;
      if (!connection) {
        connection = this._connection = new Subscription();
        var subject_1 = this.getSubject();
        connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
          _this._teardown();
          subject_1.complete();
        }, function(err) {
          _this._teardown();
          subject_1.error(err);
        }, function() {
          return _this._teardown();
        })));
        if (connection.closed) {
          this._connection = null;
          connection = Subscription.EMPTY;
        }
      }
      return connection;
    };
    ConnectableObservable2.prototype.refCount = function() {
      return refCount()(this);
    };
    return ConnectableObservable2;
  }(Observable);

  // ../../node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
  var ObjectUnsubscribedError = createErrorClass(function(_super) {
    return function ObjectUnsubscribedErrorImpl() {
      _super(this);
      this.name = "ObjectUnsubscribedError";
      this.message = "object unsubscribed";
    };
  });

  // ../../node_modules/rxjs/dist/esm5/internal/Subject.js
  var Subject = function(_super) {
    __extends(Subject2, _super);
    function Subject2() {
      var _this = _super.call(this) || this;
      _this.closed = false;
      _this.currentObservers = null;
      _this.observers = [];
      _this.isStopped = false;
      _this.hasError = false;
      _this.thrownError = null;
      return _this;
    }
    Subject2.prototype.lift = function(operator) {
      var subject = new AnonymousSubject(this, this);
      subject.operator = operator;
      return subject;
    };
    Subject2.prototype._throwIfClosed = function() {
      if (this.closed) {
        throw new ObjectUnsubscribedError();
      }
    };
    Subject2.prototype.next = function(value) {
      var _this = this;
      errorContext(function() {
        var e_1, _a;
        _this._throwIfClosed();
        if (!_this.isStopped) {
          if (!_this.currentObservers) {
            _this.currentObservers = Array.from(_this.observers);
          }
          try {
            for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
              var observer = _c.value;
              observer.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }
      });
    };
    Subject2.prototype.error = function(err) {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.hasError = _this.isStopped = true;
          _this.thrownError = err;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().error(err);
          }
        }
      });
    };
    Subject2.prototype.complete = function() {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.isStopped = true;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().complete();
          }
        }
      });
    };
    Subject2.prototype.unsubscribe = function() {
      this.isStopped = this.closed = true;
      this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject2.prototype, "observed", {
      get: function() {
        var _a;
        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
      },
      enumerable: false,
      configurable: true
    });
    Subject2.prototype._trySubscribe = function(subscriber) {
      this._throwIfClosed();
      return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject2.prototype._subscribe = function(subscriber) {
      this._throwIfClosed();
      this._checkFinalizedStatuses(subscriber);
      return this._innerSubscribe(subscriber);
    };
    Subject2.prototype._innerSubscribe = function(subscriber) {
      var _this = this;
      var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
      if (hasError || isStopped) {
        return EMPTY_SUBSCRIPTION;
      }
      this.currentObservers = null;
      observers.push(subscriber);
      return new Subscription(function() {
        _this.currentObservers = null;
        arrRemove(observers, subscriber);
      });
    };
    Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
      var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
      if (hasError) {
        subscriber.error(thrownError);
      } else if (isStopped) {
        subscriber.complete();
      }
    };
    Subject2.prototype.asObservable = function() {
      var observable2 = new Observable();
      observable2.source = this;
      return observable2;
    };
    Subject2.create = function(destination, source) {
      return new AnonymousSubject(destination, source);
    };
    return Subject2;
  }(Observable);
  var AnonymousSubject = function(_super) {
    __extends(AnonymousSubject2, _super);
    function AnonymousSubject2(destination, source) {
      var _this = _super.call(this) || this;
      _this.destination = destination;
      _this.source = source;
      return _this;
    }
    AnonymousSubject2.prototype.next = function(value) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject2.prototype.error = function(err) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject2.prototype.complete = function() {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject2.prototype._subscribe = function(subscriber) {
      var _a, _b;
      return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject2;
  }(Subject);

  // ../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
  var BehaviorSubject = function(_super) {
    __extends(BehaviorSubject2, _super);
    function BehaviorSubject2(_value) {
      var _this = _super.call(this) || this;
      _this._value = _value;
      return _this;
    }
    Object.defineProperty(BehaviorSubject2.prototype, "value", {
      get: function() {
        return this.getValue();
      },
      enumerable: false,
      configurable: true
    });
    BehaviorSubject2.prototype._subscribe = function(subscriber) {
      var subscription = _super.prototype._subscribe.call(this, subscriber);
      !subscription.closed && subscriber.next(this._value);
      return subscription;
    };
    BehaviorSubject2.prototype.getValue = function() {
      var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
      if (hasError) {
        throw thrownError;
      }
      this._throwIfClosed();
      return _value;
    };
    BehaviorSubject2.prototype.next = function(value) {
      _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject2;
  }(Subject);

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
  var dateTimestampProvider = {
    now: function() {
      return (dateTimestampProvider.delegate || Date).now();
    },
    delegate: void 0
  };

  // ../../node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
  var ReplaySubject = function(_super) {
    __extends(ReplaySubject2, _super);
    function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
      if (_bufferSize === void 0) {
        _bufferSize = Infinity;
      }
      if (_windowTime === void 0) {
        _windowTime = Infinity;
      }
      if (_timestampProvider === void 0) {
        _timestampProvider = dateTimestampProvider;
      }
      var _this = _super.call(this) || this;
      _this._bufferSize = _bufferSize;
      _this._windowTime = _windowTime;
      _this._timestampProvider = _timestampProvider;
      _this._buffer = [];
      _this._infiniteTimeWindow = true;
      _this._infiniteTimeWindow = _windowTime === Infinity;
      _this._bufferSize = Math.max(1, _bufferSize);
      _this._windowTime = Math.max(1, _windowTime);
      return _this;
    }
    ReplaySubject2.prototype.next = function(value) {
      var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
      if (!isStopped) {
        _buffer.push(value);
        !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
      }
      this._trimBuffer();
      _super.prototype.next.call(this, value);
    };
    ReplaySubject2.prototype._subscribe = function(subscriber) {
      this._throwIfClosed();
      this._trimBuffer();
      var subscription = this._innerSubscribe(subscriber);
      var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
      var copy = _buffer.slice();
      for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
        subscriber.next(copy[i]);
      }
      this._checkFinalizedStatuses(subscriber);
      return subscription;
    };
    ReplaySubject2.prototype._trimBuffer = function() {
      var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
      var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
      _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
      if (!_infiniteTimeWindow) {
        var now = _timestampProvider.now();
        var last2 = 0;
        for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
          last2 = i;
        }
        last2 && _buffer.splice(0, last2 + 1);
      }
    };
    return ReplaySubject2;
  }(Subject);

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
  var Action = function(_super) {
    __extends(Action2, _super);
    function Action2(scheduler, work) {
      return _super.call(this) || this;
    }
    Action2.prototype.schedule = function(state, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      return this;
    };
    return Action2;
  }(Subscription);

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
  var intervalProvider = {
    setInterval: function(handler, timeout) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var delegate = intervalProvider.delegate;
      if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
        return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
      }
      return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearInterval: function(handle) {
      var delegate = intervalProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: void 0
  };

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
  var AsyncAction = function(_super) {
    __extends(AsyncAction2, _super);
    function AsyncAction2(scheduler, work) {
      var _this = _super.call(this, scheduler, work) || this;
      _this.scheduler = scheduler;
      _this.work = work;
      _this.pending = false;
      return _this;
    }
    AsyncAction2.prototype.schedule = function(state, delay) {
      var _a;
      if (delay === void 0) {
        delay = 0;
      }
      if (this.closed) {
        return this;
      }
      this.state = state;
      var id = this.id;
      var scheduler = this.scheduler;
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, delay);
      }
      this.pending = true;
      this.delay = delay;
      this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
      return this;
    };
    AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      if (delay != null && this.delay === delay && this.pending === false) {
        return id;
      }
      if (id != null) {
        intervalProvider.clearInterval(id);
      }
      return void 0;
    };
    AsyncAction2.prototype.execute = function(state, delay) {
      if (this.closed) {
        return new Error("executing a cancelled action");
      }
      this.pending = false;
      var error = this._execute(state, delay);
      if (error) {
        return error;
      } else if (this.pending === false && this.id != null) {
        this.id = this.recycleAsyncId(this.scheduler, this.id, null);
      }
    };
    AsyncAction2.prototype._execute = function(state, _delay) {
      var errored = false;
      var errorValue;
      try {
        this.work(state);
      } catch (e) {
        errored = true;
        errorValue = e ? e : new Error("Scheduled action threw falsy error");
      }
      if (errored) {
        this.unsubscribe();
        return errorValue;
      }
    };
    AsyncAction2.prototype.unsubscribe = function() {
      if (!this.closed) {
        var _a = this, id = _a.id, scheduler = _a.scheduler;
        var actions = scheduler.actions;
        this.work = this.state = this.scheduler = null;
        this.pending = false;
        arrRemove(actions, this);
        if (id != null) {
          this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
        _super.prototype.unsubscribe.call(this);
      }
    };
    return AsyncAction2;
  }(Action);

  // ../../node_modules/rxjs/dist/esm5/internal/util/Immediate.js
  var nextHandle = 1;
  var resolved;
  var activeHandles = {};
  function findAndClearHandle(handle) {
    if (handle in activeHandles) {
      delete activeHandles[handle];
      return true;
    }
    return false;
  }
  var Immediate = {
    setImmediate: function(cb) {
      var handle = nextHandle++;
      activeHandles[handle] = true;
      if (!resolved) {
        resolved = Promise.resolve();
      }
      resolved.then(function() {
        return findAndClearHandle(handle) && cb();
      });
      return handle;
    },
    clearImmediate: function(handle) {
      findAndClearHandle(handle);
    }
  };

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
  var setImmediate = Immediate.setImmediate;
  var clearImmediate = Immediate.clearImmediate;
  var immediateProvider = {
    setImmediate: function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var delegate = immediateProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
    },
    clearImmediate: function(handle) {
      var delegate = immediateProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
    },
    delegate: void 0
  };

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
  var AsapAction = function(_super) {
    __extends(AsapAction2, _super);
    function AsapAction2(scheduler, work) {
      var _this = _super.call(this, scheduler, work) || this;
      _this.scheduler = scheduler;
      _this.work = work;
      return _this;
    }
    AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      if (delay !== null && delay > 0) {
        return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
      }
      scheduler.actions.push(this);
      return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
    };
    AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay) {
      var _a;
      if (delay === void 0) {
        delay = 0;
      }
      if (delay != null ? delay > 0 : this.delay > 0) {
        return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
      }
      var actions = scheduler.actions;
      if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
        immediateProvider.clearImmediate(id);
        if (scheduler._scheduled === id) {
          scheduler._scheduled = void 0;
        }
      }
      return void 0;
    };
    return AsapAction2;
  }(AsyncAction);

  // ../../node_modules/rxjs/dist/esm5/internal/Scheduler.js
  var Scheduler = function() {
    function Scheduler2(schedulerActionCtor, now) {
      if (now === void 0) {
        now = Scheduler2.now;
      }
      this.schedulerActionCtor = schedulerActionCtor;
      this.now = now;
    }
    Scheduler2.prototype.schedule = function(work, delay, state) {
      if (delay === void 0) {
        delay = 0;
      }
      return new this.schedulerActionCtor(this, work).schedule(state, delay);
    };
    Scheduler2.now = dateTimestampProvider.now;
    return Scheduler2;
  }();

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
  var AsyncScheduler = function(_super) {
    __extends(AsyncScheduler2, _super);
    function AsyncScheduler2(SchedulerAction, now) {
      if (now === void 0) {
        now = Scheduler.now;
      }
      var _this = _super.call(this, SchedulerAction, now) || this;
      _this.actions = [];
      _this._active = false;
      return _this;
    }
    AsyncScheduler2.prototype.flush = function(action) {
      var actions = this.actions;
      if (this._active) {
        actions.push(action);
        return;
      }
      var error;
      this._active = true;
      do {
        if (error = action.execute(action.state, action.delay)) {
          break;
        }
      } while (action = actions.shift());
      this._active = false;
      if (error) {
        while (action = actions.shift()) {
          action.unsubscribe();
        }
        throw error;
      }
    };
    return AsyncScheduler2;
  }(Scheduler);

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
  var AsapScheduler = function(_super) {
    __extends(AsapScheduler2, _super);
    function AsapScheduler2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler2.prototype.flush = function(action) {
      this._active = true;
      var flushId = this._scheduled;
      this._scheduled = void 0;
      var actions = this.actions;
      var error;
      action = action || actions.shift();
      do {
        if (error = action.execute(action.state, action.delay)) {
          break;
        }
      } while ((action = actions[0]) && action.id === flushId && actions.shift());
      this._active = false;
      if (error) {
        while ((action = actions[0]) && action.id === flushId && actions.shift()) {
          action.unsubscribe();
        }
        throw error;
      }
    };
    return AsapScheduler2;
  }(AsyncScheduler);

  // ../../node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
  var asapScheduler = new AsapScheduler(AsapAction);

  // ../../node_modules/rxjs/dist/esm5/internal/observable/empty.js
  var EMPTY = new Observable(function(subscriber) {
    return subscriber.complete();
  });

  // ../../node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
  function isScheduler(value) {
    return value && isFunction2(value.schedule);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/args.js
  function last(arr) {
    return arr[arr.length - 1];
  }
  function popResultSelector(args) {
    return isFunction2(last(args)) ? args.pop() : void 0;
  }
  function popScheduler(args) {
    return isScheduler(last(args)) ? args.pop() : void 0;
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
  var isArrayLike = function(x) {
    return x && typeof x.length === "number" && typeof x !== "function";
  };

  // ../../node_modules/rxjs/dist/esm5/internal/util/isPromise.js
  function isPromise(value) {
    return isFunction2(value === null || value === void 0 ? void 0 : value.then);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
  function isInteropObservable(input) {
    return isFunction2(input[observable]);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
  function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction2(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
  function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
  }

  // ../../node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
  function getSymbolIterator() {
    if (typeof Symbol !== "function" || !Symbol.iterator) {
      return "@@iterator";
    }
    return Symbol.iterator;
  }
  var iterator = getSymbolIterator();

  // ../../node_modules/rxjs/dist/esm5/internal/util/isIterable.js
  function isIterable(input) {
    return isFunction2(input === null || input === void 0 ? void 0 : input[iterator]);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
  function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
      var reader, _a, value, done;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            reader = readableStream.getReader();
            _b.label = 1;
          case 1:
            _b.trys.push([1, , 9, 10]);
            _b.label = 2;
          case 2:
            if (false)
              return [3, 8];
            return [4, __await(reader.read())];
          case 3:
            _a = _b.sent(), value = _a.value, done = _a.done;
            if (!done)
              return [3, 5];
            return [4, __await(void 0)];
          case 4:
            return [2, _b.sent()];
          case 5:
            return [4, __await(value)];
          case 6:
            return [4, _b.sent()];
          case 7:
            _b.sent();
            return [3, 2];
          case 8:
            return [3, 10];
          case 9:
            reader.releaseLock();
            return [7];
          case 10:
            return [2];
        }
      });
    });
  }
  function isReadableStreamLike(obj) {
    return isFunction2(obj === null || obj === void 0 ? void 0 : obj.getReader);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
  function innerFrom(input) {
    if (input instanceof Observable) {
      return input;
    }
    if (input != null) {
      if (isInteropObservable(input)) {
        return fromInteropObservable(input);
      }
      if (isArrayLike(input)) {
        return fromArrayLike(input);
      }
      if (isPromise(input)) {
        return fromPromise(input);
      }
      if (isAsyncIterable(input)) {
        return fromAsyncIterable(input);
      }
      if (isIterable(input)) {
        return fromIterable(input);
      }
      if (isReadableStreamLike(input)) {
        return fromReadableStreamLike(input);
      }
    }
    throw createInvalidObservableTypeError(input);
  }
  function fromInteropObservable(obj) {
    return new Observable(function(subscriber) {
      var obs = obj[observable]();
      if (isFunction2(obs.subscribe)) {
        return obs.subscribe(subscriber);
      }
      throw new TypeError("Provided object does not correctly implement Symbol.observable");
    });
  }
  function fromArrayLike(array) {
    return new Observable(function(subscriber) {
      for (var i = 0; i < array.length && !subscriber.closed; i++) {
        subscriber.next(array[i]);
      }
      subscriber.complete();
    });
  }
  function fromPromise(promise) {
    return new Observable(function(subscriber) {
      promise.then(function(value) {
        if (!subscriber.closed) {
          subscriber.next(value);
          subscriber.complete();
        }
      }, function(err) {
        return subscriber.error(err);
      }).then(null, reportUnhandledError);
    });
  }
  function fromIterable(iterable) {
    return new Observable(function(subscriber) {
      var e_1, _a;
      try {
        for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
          var value = iterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))
            _a.call(iterable_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      subscriber.complete();
    });
  }
  function fromAsyncIterable(asyncIterable) {
    return new Observable(function(subscriber) {
      process2(asyncIterable, subscriber).catch(function(err) {
        return subscriber.error(err);
      });
    });
  }
  function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
  }
  function process2(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function() {
      var value, e_2_1;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            _b.trys.push([0, 5, 6, 11]);
            asyncIterable_1 = __asyncValues(asyncIterable);
            _b.label = 1;
          case 1:
            return [4, asyncIterable_1.next()];
          case 2:
            if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
              return [3, 4];
            value = asyncIterable_1_1.value;
            subscriber.next(value);
            if (subscriber.closed) {
              return [2];
            }
            _b.label = 3;
          case 3:
            return [3, 1];
          case 4:
            return [3, 11];
          case 5:
            e_2_1 = _b.sent();
            e_2 = { error: e_2_1 };
            return [3, 11];
          case 6:
            _b.trys.push([6, , 9, 10]);
            if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)))
              return [3, 8];
            return [4, _a.call(asyncIterable_1)];
          case 7:
            _b.sent();
            _b.label = 8;
          case 8:
            return [3, 10];
          case 9:
            if (e_2)
              throw e_2.error;
            return [7];
          case 10:
            return [7];
          case 11:
            subscriber.complete();
            return [2];
        }
      });
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
  function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) {
      delay = 0;
    }
    if (repeat === void 0) {
      repeat = false;
    }
    var scheduleSubscription = scheduler.schedule(function() {
      work();
      if (repeat) {
        parentSubscription.add(this.schedule(null, delay));
      } else {
        this.unsubscribe();
      }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
      return scheduleSubscription;
    }
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
  function observeOn(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return operate(function(source, subscriber) {
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.next(value);
        }, delay);
      }, function() {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.complete();
        }, delay);
      }, function(err) {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.error(err);
        }, delay);
      }));
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
  function subscribeOn(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return operate(function(source, subscriber) {
      subscriber.add(scheduler.schedule(function() {
        return source.subscribe(subscriber);
      }, delay));
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
  function scheduleObservable(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }

  // ../../node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
  function schedulePromise(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }

  // ../../node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
  function scheduleArray(input, scheduler) {
    return new Observable(function(subscriber) {
      var i = 0;
      return scheduler.schedule(function() {
        if (i === input.length) {
          subscriber.complete();
        } else {
          subscriber.next(input[i++]);
          if (!subscriber.closed) {
            this.schedule();
          }
        }
      });
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
  function scheduleIterable(input, scheduler) {
    return new Observable(function(subscriber) {
      var iterator2;
      executeSchedule(subscriber, scheduler, function() {
        iterator2 = input[iterator]();
        executeSchedule(subscriber, scheduler, function() {
          var _a;
          var value;
          var done;
          try {
            _a = iterator2.next(), value = _a.value, done = _a.done;
          } catch (err) {
            subscriber.error(err);
            return;
          }
          if (done) {
            subscriber.complete();
          } else {
            subscriber.next(value);
          }
        }, 0, true);
      });
      return function() {
        return isFunction2(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
      };
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
  function scheduleAsyncIterable(input, scheduler) {
    if (!input) {
      throw new Error("Iterable cannot be null");
    }
    return new Observable(function(subscriber) {
      executeSchedule(subscriber, scheduler, function() {
        var iterator2 = input[Symbol.asyncIterator]();
        executeSchedule(subscriber, scheduler, function() {
          iterator2.next().then(function(result) {
            if (result.done) {
              subscriber.complete();
            } else {
              subscriber.next(result.value);
            }
          });
        }, 0, true);
      });
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
  function scheduleReadableStreamLike(input, scheduler) {
    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
  function scheduled(input, scheduler) {
    if (input != null) {
      if (isInteropObservable(input)) {
        return scheduleObservable(input, scheduler);
      }
      if (isArrayLike(input)) {
        return scheduleArray(input, scheduler);
      }
      if (isPromise(input)) {
        return schedulePromise(input, scheduler);
      }
      if (isAsyncIterable(input)) {
        return scheduleAsyncIterable(input, scheduler);
      }
      if (isIterable(input)) {
        return scheduleIterable(input, scheduler);
      }
      if (isReadableStreamLike(input)) {
        return scheduleReadableStreamLike(input, scheduler);
      }
    }
    throw createInvalidObservableTypeError(input);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/observable/from.js
  function from(input, scheduler) {
    return scheduler ? scheduled(input, scheduler) : innerFrom(input);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/observable/of.js
  function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    return from(args, scheduler);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
  var EmptyError = createErrorClass(function(_super) {
    return function EmptyErrorImpl() {
      _super(this);
      this.name = "EmptyError";
      this.message = "no elements in sequence";
    };
  });

  // ../../node_modules/rxjs/dist/esm5/internal/firstValueFrom.js
  function firstValueFrom(source, config3) {
    var hasConfig = typeof config3 === "object";
    return new Promise(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          resolve(value);
          subscriber.unsubscribe();
        },
        error: reject,
        complete: function() {
          if (hasConfig) {
            resolve(config3.defaultValue);
          } else {
            reject(new EmptyError());
          }
        }
      });
      source.subscribe(subscriber);
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/map.js
  function map2(project, thisArg) {
    return operate(function(source, subscriber) {
      var index = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        subscriber.next(project.call(thisArg, value, index++));
      }));
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
  var isArray = Array.isArray;
  function callOrApply(fn2, args) {
    return isArray(args) ? fn2.apply(void 0, __spreadArray([], __read(args))) : fn2(args);
  }
  function mapOneOrManyArgs(fn2) {
    return map2(function(args) {
      return callOrApply(fn2, args);
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
  var isArray2 = Array.isArray;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectProto = Object.prototype;
  var getKeys = Object.keys;
  function argsArgArrayOrObject(args) {
    if (args.length === 1) {
      var first_1 = args[0];
      if (isArray2(first_1)) {
        return { args: first_1, keys: null };
      }
      if (isPOJO(first_1)) {
        var keys2 = getKeys(first_1);
        return {
          args: keys2.map(function(key) {
            return first_1[key];
          }),
          keys: keys2
        };
      }
    }
    return { args, keys: null };
  }
  function isPOJO(obj) {
    return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
  }

  // ../../node_modules/rxjs/dist/esm5/internal/util/createObject.js
  function createObject(keys2, values) {
    return keys2.reduce(function(result, key, i) {
      return result[key] = values[i], result;
    }, {});
  }

  // ../../node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
  function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var resultSelector = popResultSelector(args);
    var _a = argsArgArrayOrObject(args), observables = _a.args, keys2 = _a.keys;
    if (observables.length === 0) {
      return from([], scheduler);
    }
    var result = new Observable(combineLatestInit(observables, scheduler, keys2 ? function(values) {
      return createObject(keys2, values);
    } : identity2));
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
  }
  function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) {
      valueTransform = identity2;
    }
    return function(subscriber) {
      maybeSchedule(scheduler, function() {
        var length = observables.length;
        var values = new Array(length);
        var active = length;
        var remainingFirstValues = length;
        var _loop_1 = function(i2) {
          maybeSchedule(scheduler, function() {
            var source = from(observables[i2], scheduler);
            var hasFirstValue = false;
            source.subscribe(createOperatorSubscriber(subscriber, function(value) {
              values[i2] = value;
              if (!hasFirstValue) {
                hasFirstValue = true;
                remainingFirstValues--;
              }
              if (!remainingFirstValues) {
                subscriber.next(valueTransform(values.slice()));
              }
            }, function() {
              if (!--active) {
                subscriber.complete();
              }
            }));
          }, subscriber);
        };
        for (var i = 0; i < length; i++) {
          _loop_1(i);
        }
      }, subscriber);
    };
  }
  function maybeSchedule(scheduler, execute2, subscription) {
    if (scheduler) {
      executeSchedule(subscription, scheduler, execute2);
    } else {
      execute2();
    }
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
  function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand2, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
      if (isComplete && !buffer.length && !active) {
        subscriber.complete();
      }
    };
    var outerNext = function(value) {
      return active < concurrent ? doInnerSub(value) : buffer.push(value);
    };
    var doInnerSub = function(value) {
      expand2 && subscriber.next(value);
      active++;
      var innerComplete = false;
      innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
        onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
        if (expand2) {
          outerNext(innerValue);
        } else {
          subscriber.next(innerValue);
        }
      }, function() {
        innerComplete = true;
      }, void 0, function() {
        if (innerComplete) {
          try {
            active--;
            var _loop_1 = function() {
              var bufferedValue = buffer.shift();
              if (innerSubScheduler) {
                executeSchedule(subscriber, innerSubScheduler, function() {
                  return doInnerSub(bufferedValue);
                });
              } else {
                doInnerSub(bufferedValue);
              }
            };
            while (buffer.length && active < concurrent) {
              _loop_1();
            }
            checkComplete();
          } catch (err) {
            subscriber.error(err);
          }
        }
      }));
    };
    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
      isComplete = true;
      checkComplete();
    }));
    return function() {
      additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
  function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    if (isFunction2(resultSelector)) {
      return mergeMap(function(a, i) {
        return map2(function(b, ii) {
          return resultSelector(a, b, i, ii);
        })(innerFrom(project(a, i)));
      }, concurrent);
    } else if (typeof resultSelector === "number") {
      concurrent = resultSelector;
    }
    return operate(function(source, subscriber) {
      return mergeInternals(source, subscriber, project, concurrent);
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
  function mergeAll(concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    return mergeMap(identity2, concurrent);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
  function concatAll() {
    return mergeAll(1);
  }

  // ../../node_modules/rxjs/dist/esm5/internal/observable/concat.js
  function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return concatAll()(from(args, popScheduler(args)));
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/filter.js
  function filter(predicate, thisArg) {
    return operate(function(source, subscriber) {
      var index = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        return predicate.call(thisArg, value, index++) && subscriber.next(value);
      }));
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/catchError.js
  function catchError(selector) {
    return operate(function(source, subscriber) {
      var innerSub = null;
      var syncUnsub = false;
      var handledResult;
      innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
        handledResult = innerFrom(selector(err, catchError(selector)(source)));
        if (innerSub) {
          innerSub.unsubscribe();
          innerSub = null;
          handledResult.subscribe(subscriber);
        } else {
          syncUnsub = true;
        }
      }));
      if (syncUnsub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      }
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
  function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function(source, subscriber) {
      var hasState = hasSeed;
      var state = seed;
      var index = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var i = index++;
        state = hasState ? accumulator(state, value, i) : (hasState = true, value);
        emitOnNext && subscriber.next(state);
      }, emitBeforeComplete && function() {
        hasState && subscriber.next(state);
        subscriber.complete();
      }));
    };
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/reduce.js
  function reduce(accumulator, seed) {
    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/toArray.js
  var arrReducer = function(arr, value) {
    return arr.push(value), arr;
  };
  function toArray() {
    return operate(function(source, subscriber) {
      reduce(arrReducer, [])(source).subscribe(subscriber);
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js
  function fromSubscribable(subscribable) {
    return new Observable(function(subscriber) {
      return subscribable.subscribe(subscriber);
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/connect.js
  var DEFAULT_CONFIG = {
    connector: function() {
      return new Subject();
    }
  };
  function connect(selector, config3) {
    if (config3 === void 0) {
      config3 = DEFAULT_CONFIG;
    }
    var connector = config3.connector;
    return operate(function(source, subscriber) {
      var subject = connector();
      innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
      subscriber.add(source.subscribe(subject));
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
  function defaultIfEmpty(defaultValue) {
    return operate(function(source, subscriber) {
      var hasValue = false;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        hasValue = true;
        subscriber.next(value);
      }, function() {
        if (!hasValue) {
          subscriber.next(defaultValue);
        }
        subscriber.complete();
      }));
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/take.js
  function take(count) {
    return count <= 0 ? function() {
      return EMPTY;
    } : operate(function(source, subscriber) {
      var seen = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        if (++seen <= count) {
          subscriber.next(value);
          if (count <= seen) {
            subscriber.complete();
          }
        }
      }));
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
  function distinctUntilChanged(comparator, keySelector) {
    if (keySelector === void 0) {
      keySelector = identity2;
    }
    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
    return operate(function(source, subscriber) {
      var previousKey;
      var first2 = true;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var currentKey = keySelector(value);
        if (first2 || !comparator(previousKey, currentKey)) {
          first2 = false;
          previousKey = currentKey;
          subscriber.next(value);
        }
      }));
    });
  }
  function defaultCompare(a, b) {
    return a === b;
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
  function throwIfEmpty(errorFactory) {
    if (errorFactory === void 0) {
      errorFactory = defaultErrorFactory;
    }
    return operate(function(source, subscriber) {
      var hasValue = false;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        hasValue = true;
        subscriber.next(value);
      }, function() {
        return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
      }));
    });
  }
  function defaultErrorFactory() {
    return new EmptyError();
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/first.js
  function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function(source) {
      return source.pipe(predicate ? filter(function(v3, i) {
        return predicate(v3, i, source);
      }) : identity2, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
        return new EmptyError();
      }));
    };
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/multicast.js
  function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory = isFunction2(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
      return subjectOrSubjectFactory;
    };
    if (isFunction2(selector)) {
      return connect(selector, {
        connector: subjectFactory
      });
    }
    return function(source) {
      return new ConnectableObservable(source, subjectFactory);
    };
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js
  function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
    if (selectorOrScheduler && !isFunction2(selectorOrScheduler)) {
      timestampProvider = selectorOrScheduler;
    }
    var selector = isFunction2(selectorOrScheduler) ? selectorOrScheduler : void 0;
    return function(source) {
      return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);
    };
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/startWith.js
  function startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    var scheduler = popScheduler(values);
    return operate(function(source, subscriber) {
      (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
  function switchMap(project, resultSelector) {
    return operate(function(source, subscriber) {
      var innerSubscriber = null;
      var index = 0;
      var isComplete = false;
      var checkComplete = function() {
        return isComplete && !innerSubscriber && subscriber.complete();
      };
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
        var innerIndex = 0;
        var outerIndex = index++;
        innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function(innerValue) {
          return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
        }, function() {
          innerSubscriber = null;
          checkComplete();
        }));
      }, function() {
        isComplete = true;
        checkComplete();
      }));
    });
  }

  // ../../node_modules/rxjs/dist/esm5/internal/operators/tap.js
  function tap(observerOrNext, error, complete) {
    var tapObserver = isFunction2(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
    return tapObserver ? operate(function(source, subscriber) {
      var _a;
      (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
      var isUnsub = true;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var _a2;
        (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
        subscriber.next(value);
      }, function() {
        var _a2;
        isUnsub = false;
        (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
        subscriber.complete();
      }, function(err) {
        var _a2;
        isUnsub = false;
        (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
        subscriber.error(err);
      }, function() {
        var _a2, _b;
        if (isUnsub) {
          (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
        }
        (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
      }));
    }) : identity2;
  }

  // ../../node_modules/@polkadot/api/util/logging.js
  var l2 = /* @__PURE__ */ logger("api/util");

  // ../../node_modules/@polkadot/api/util/filterEvents.js
  function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
    for (const [txIndex, x] of extrinsics.entries()) {
      if (x.hash.eq(txHash)) {
        return {
          blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,
          events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
          txIndex
        };
      }
    }
    if (status.isInBlock) {
      const allHashes = extrinsics.map((x) => x.hash.toHex());
      l2.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(", ")}`);
    }
    return {};
  }

  // ../../node_modules/@polkadot/api/util/isKeyringPair.js
  function isKeyringPair(account3) {
    return isFunction(account3.sign);
  }

  // ../../node_modules/@polkadot/types/interfaces/definitions.js
  var definitions_exports = {};
  __export(definitions_exports, {
    assets: () => definitions_default4,
    attestations: () => definitions_default49,
    aura: () => definitions_default5,
    author: () => definitions_default65,
    authorship: () => definitions_default6,
    babe: () => definitions_default7,
    balances: () => definitions_default8,
    beefy: () => definitions_default9,
    benchmark: () => definitions_default10,
    blockbuilder: () => definitions_default11,
    bridges: () => definitions_default50,
    chain: () => definitions_default66,
    childstate: () => definitions_default67,
    claims: () => definitions_default51,
    collective: () => definitions_default12,
    consensus: () => definitions_default13,
    contracts: () => definitions_default14,
    contractsAbi: () => definitions_default59,
    crowdloan: () => definitions_default52,
    cumulus: () => definitions_default53,
    democracy: () => definitions_default15,
    dev: () => definitions_default16,
    discovery: () => definitions_default17,
    elections: () => definitions_default18,
    engine: () => definitions_default19,
    eth: () => definitions_default60,
    evm: () => definitions_default20,
    extrinsics: () => definitions_default21,
    finality: () => definitions_default54,
    fungibles: () => definitions_default22,
    genericAsset: () => definitions_default23,
    gilt: () => definitions_default24,
    grandpa: () => definitions_default25,
    identity: () => definitions_default26,
    imOnline: () => definitions_default27,
    lottery: () => definitions_default28,
    metadata: () => definitions_default,
    mmr: () => definitions_default29,
    nfts: () => definitions_default30,
    nimbus: () => definitions_default61,
    nompools: () => definitions_default31,
    offchain: () => definitions_default68,
    offences: () => definitions_default32,
    ormlOracle: () => definitions_default62,
    ormlTokens: () => definitions_default63,
    parachains: () => definitions_default55,
    payment: () => definitions_default69,
    poll: () => definitions_default56,
    pow: () => definitions_default33,
    proxy: () => definitions_default34,
    purchase: () => definitions_default57,
    recovery: () => definitions_default35,
    rpc: () => definitions_default64,
    runtime: () => definitions_default2,
    scaleInfo: () => definitions_default3,
    scheduler: () => definitions_default36,
    session: () => definitions_default37,
    society: () => definitions_default38,
    staking: () => definitions_default39,
    state: () => definitions_default70,
    support: () => definitions_default40,
    syncstate: () => definitions_default41,
    system: () => definitions_default42,
    treasury: () => definitions_default43,
    txpayment: () => definitions_default44,
    txqueue: () => definitions_default45,
    uniques: () => definitions_default46,
    utility: () => definitions_default47,
    vesting: () => definitions_default48,
    xcm: () => definitions_default58
  });

  // ../../node_modules/@polkadot/types/interfaces/metadata/hashers.js
  var AllHashers = {
    Blake2_128: null,
    Blake2_256: null,
    Blake2_128Concat: null,
    Twox128: null,
    Twox256: null,
    Twox64Concat: null,
    Identity: null
  };

  // ../../node_modules/@polkadot/types/interfaces/metadata/runtime.js
  var META_V1_TO_V2 = {
    metadata: {
      description: "Returns the metadata of a runtime",
      params: [],
      type: "OpaqueMetadata"
    }
  };
  var runtime = {
    Metadata: [
      {
        methods: {
          metadata_at_version: {
            description: "Returns the metadata at a given version.",
            params: [
              {
                name: "version",
                type: "u32"
              }
            ],
            type: "Option<OpaqueMetadata>"
          },
          metadata_versions: {
            description: "Returns the supported metadata versions.",
            params: [],
            type: "Vec<u32>"
          },
          ...META_V1_TO_V2
        },
        version: 2
      },
      {
        methods: {
          ...META_V1_TO_V2
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/metadata/v9.js
  var v9 = {
    ErrorMetadataV9: {
      name: "Text",
      docs: "Vec<Text>"
    },
    EventMetadataV9: {
      name: "Text",
      args: "Vec<Type>",
      docs: "Vec<Text>"
    },
    FunctionArgumentMetadataV9: {
      name: "Text",
      type: "Type"
    },
    FunctionMetadataV9: {
      name: "Text",
      args: "Vec<FunctionArgumentMetadataV9>",
      docs: "Vec<Text>"
    },
    MetadataV9: {
      modules: "Vec<ModuleMetadataV9>"
    },
    ModuleConstantMetadataV9: {
      name: "Text",
      type: "Type",
      value: "Bytes",
      docs: "Vec<Text>"
    },
    ModuleMetadataV9: {
      name: "Text",
      storage: "Option<StorageMetadataV9>",
      calls: "Option<Vec<FunctionMetadataV9>>",
      events: "Option<Vec<EventMetadataV9>>",
      constants: "Vec<ModuleConstantMetadataV9>",
      errors: "Vec<ErrorMetadataV9>"
    },
    StorageEntryMetadataV9: {
      name: "Text",
      modifier: "StorageEntryModifierV9",
      type: "StorageEntryTypeV9",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryModifierV9: {
      _enum: ["Optional", "Default", "Required"]
    },
    StorageEntryTypeV9: {
      _enum: {
        Plain: "Type",
        Map: {
          hasher: "StorageHasherV9",
          key: "Type",
          value: "Type",
          linked: "bool"
        },
        DoubleMap: {
          hasher: "StorageHasherV9",
          key1: "Type",
          key2: "Type",
          value: "Type",
          key2Hasher: "StorageHasherV9"
        }
      }
    },
    StorageHasherV9: {
      _enum: {
        Blake2_128: null,
        Blake2_256: null,
        Twox128: null,
        Twox256: null,
        Twox64Concat: null
      }
    },
    StorageMetadataV9: {
      prefix: "Text",
      items: "Vec<StorageEntryMetadataV9>"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/metadata/v10.js
  var v10 = {
    ErrorMetadataV10: "ErrorMetadataV9",
    EventMetadataV10: "EventMetadataV9",
    FunctionArgumentMetadataV10: "FunctionArgumentMetadataV9",
    FunctionMetadataV10: "FunctionMetadataV9",
    MetadataV10: {
      modules: "Vec<ModuleMetadataV10>"
    },
    ModuleConstantMetadataV10: "ModuleConstantMetadataV9",
    ModuleMetadataV10: {
      name: "Text",
      storage: "Option<StorageMetadataV10>",
      calls: "Option<Vec<FunctionMetadataV10>>",
      events: "Option<Vec<EventMetadataV10>>",
      constants: "Vec<ModuleConstantMetadataV10>",
      errors: "Vec<ErrorMetadataV10>"
    },
    StorageEntryModifierV10: "StorageEntryModifierV9",
    StorageEntryMetadataV10: {
      name: "Text",
      modifier: "StorageEntryModifierV10",
      type: "StorageEntryTypeV10",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryTypeV10: {
      _enum: {
        Plain: "Type",
        Map: {
          hasher: "StorageHasherV10",
          key: "Type",
          value: "Type",
          linked: "bool"
        },
        DoubleMap: {
          hasher: "StorageHasherV10",
          key1: "Type",
          key2: "Type",
          value: "Type",
          key2Hasher: "StorageHasherV10"
        }
      }
    },
    StorageMetadataV10: {
      prefix: "Text",
      items: "Vec<StorageEntryMetadataV10>"
    },
    StorageHasherV10: {
      _enum: {
        Blake2_128: null,
        Blake2_256: null,
        Blake2_128Concat: null,
        Twox128: null,
        Twox256: null,
        Twox64Concat: null
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/metadata/v11.js
  var v11 = {
    ErrorMetadataV11: "ErrorMetadataV10",
    EventMetadataV11: "EventMetadataV10",
    ExtrinsicMetadataV11: {
      version: "u8",
      signedExtensions: "Vec<Text>"
    },
    FunctionArgumentMetadataV11: "FunctionArgumentMetadataV10",
    FunctionMetadataV11: "FunctionMetadataV10",
    MetadataV11: {
      modules: "Vec<ModuleMetadataV11>",
      extrinsic: "ExtrinsicMetadataV11"
    },
    ModuleConstantMetadataV11: "ModuleConstantMetadataV10",
    ModuleMetadataV11: {
      name: "Text",
      storage: "Option<StorageMetadataV11>",
      calls: "Option<Vec<FunctionMetadataV11>>",
      events: "Option<Vec<EventMetadataV11>>",
      constants: "Vec<ModuleConstantMetadataV11>",
      errors: "Vec<ErrorMetadataV11>"
    },
    StorageEntryModifierV11: "StorageEntryModifierV10",
    StorageEntryMetadataV11: {
      name: "Text",
      modifier: "StorageEntryModifierV11",
      type: "StorageEntryTypeV11",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryTypeV11: {
      _enum: {
        Plain: "Type",
        Map: {
          hasher: "StorageHasherV11",
          key: "Type",
          value: "Type",
          linked: "bool"
        },
        DoubleMap: {
          hasher: "StorageHasherV11",
          key1: "Type",
          key2: "Type",
          value: "Type",
          key2Hasher: "StorageHasherV11"
        }
      }
    },
    StorageMetadataV11: {
      prefix: "Text",
      items: "Vec<StorageEntryMetadataV11>"
    },
    StorageHasherV11: {
      _enum: AllHashers
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/metadata/v12.js
  var v12 = {
    ErrorMetadataV12: "ErrorMetadataV11",
    EventMetadataV12: "EventMetadataV11",
    ExtrinsicMetadataV12: "ExtrinsicMetadataV11",
    FunctionArgumentMetadataV12: "FunctionArgumentMetadataV11",
    FunctionMetadataV12: "FunctionMetadataV11",
    MetadataV12: {
      modules: "Vec<ModuleMetadataV12>",
      extrinsic: "ExtrinsicMetadataV12"
    },
    ModuleConstantMetadataV12: "ModuleConstantMetadataV11",
    ModuleMetadataV12: {
      name: "Text",
      storage: "Option<StorageMetadataV12>",
      calls: "Option<Vec<FunctionMetadataV12>>",
      events: "Option<Vec<EventMetadataV12>>",
      constants: "Vec<ModuleConstantMetadataV12>",
      errors: "Vec<ErrorMetadataV12>",
      index: "u8"
    },
    StorageEntryModifierV12: "StorageEntryModifierV11",
    StorageEntryMetadataV12: "StorageEntryMetadataV11",
    StorageEntryTypeV12: "StorageEntryTypeV11",
    StorageMetadataV12: "StorageMetadataV11",
    StorageHasherV12: "StorageHasherV11"
  };

  // ../../node_modules/@polkadot/types/interfaces/metadata/v13.js
  var v13 = {
    ErrorMetadataV13: "ErrorMetadataV12",
    EventMetadataV13: "EventMetadataV12",
    ExtrinsicMetadataV13: "ExtrinsicMetadataV12",
    FunctionArgumentMetadataV13: "FunctionArgumentMetadataV12",
    FunctionMetadataV13: "FunctionMetadataV12",
    MetadataV13: {
      modules: "Vec<ModuleMetadataV13>",
      extrinsic: "ExtrinsicMetadataV13"
    },
    ModuleConstantMetadataV13: "ModuleConstantMetadataV12",
    ModuleMetadataV13: {
      name: "Text",
      storage: "Option<StorageMetadataV13>",
      calls: "Option<Vec<FunctionMetadataV13>>",
      events: "Option<Vec<EventMetadataV13>>",
      constants: "Vec<ModuleConstantMetadataV13>",
      errors: "Vec<ErrorMetadataV13>",
      index: "u8"
    },
    StorageEntryModifierV13: "StorageEntryModifierV12",
    StorageEntryMetadataV13: {
      name: "Text",
      modifier: "StorageEntryModifierV13",
      type: "StorageEntryTypeV13",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryTypeV13: {
      _enum: {
        Plain: "Type",
        Map: {
          hasher: "StorageHasherV13",
          key: "Type",
          value: "Type",
          linked: "bool"
        },
        DoubleMap: {
          hasher: "StorageHasherV13",
          key1: "Type",
          key2: "Type",
          value: "Type",
          key2Hasher: "StorageHasherV13"
        },
        NMap: {
          keyVec: "Vec<Type>",
          hashers: "Vec<StorageHasherV13>",
          value: "Type"
        }
      }
    },
    StorageMetadataV13: {
      prefix: "Text",
      items: "Vec<StorageEntryMetadataV13>"
    },
    StorageHasherV13: "StorageHasherV12"
  };

  // ../../node_modules/@polkadot/types/interfaces/scaleInfo/v1.js
  var Si1Variant = {
    name: "Text",
    fields: "Vec<Si1Field>",
    index: "u8",
    docs: "Vec<Text>"
  };
  var v1 = {
    Si1Field: {
      name: "Option<Text>",
      type: "Si1LookupTypeId",
      typeName: "Option<Text>",
      docs: "Vec<Text>"
    },
    Si1LookupTypeId: "Compact<u32>",
    Si1Path: "Si0Path",
    Si1Type: {
      path: "Si1Path",
      params: "Vec<Si1TypeParameter>",
      def: "Si1TypeDef",
      docs: "Vec<Text>"
    },
    Si1TypeDef: {
      _enum: {
        Composite: "Si1TypeDefComposite",
        Variant: "Si1TypeDefVariant",
        Sequence: "Si1TypeDefSequence",
        Array: "Si1TypeDefArray",
        Tuple: "Si1TypeDefTuple",
        Primitive: "Si1TypeDefPrimitive",
        Compact: "Si1TypeDefCompact",
        BitSequence: "Si1TypeDefBitSequence",
        HistoricMetaCompat: "Type"
      }
    },
    Si1TypeDefArray: {
      len: "u32",
      type: "Si1LookupTypeId"
    },
    Si1TypeDefBitSequence: {
      bitStoreType: "Si1LookupTypeId",
      bitOrderType: "Si1LookupTypeId"
    },
    Si1TypeDefCompact: {
      type: "Si1LookupTypeId"
    },
    Si1TypeDefComposite: {
      fields: "Vec<Si1Field>"
    },
    Si1TypeDefPrimitive: "Si0TypeDefPrimitive",
    Si1TypeDefSequence: {
      type: "Si1LookupTypeId"
    },
    Si1TypeDefTuple: "Vec<Si1LookupTypeId>",
    Si1TypeParameter: {
      name: "Text",
      type: "Option<Si1LookupTypeId>"
    },
    Si1TypeDefVariant: {
      variants: "Vec<Si1Variant>"
    },
    Si1Variant
  };

  // ../../node_modules/@polkadot/types/interfaces/metadata/v14.js
  var v14 = {
    PortableTypeV14: {
      id: "Si1LookupTypeId",
      type: "Si1Type"
    },
    ErrorMetadataV14: {
      ...Si1Variant,
      args: "Vec<Type>"
    },
    EventMetadataV14: {
      ...Si1Variant,
      args: "Vec<Type>"
    },
    FunctionArgumentMetadataV14: {
      name: "Text",
      type: "Type",
      typeName: "Option<Type>"
    },
    FunctionMetadataV14: {
      ...Si1Variant,
      args: "Vec<FunctionArgumentMetadataV14>"
    },
    ExtrinsicMetadataV14: {
      type: "SiLookupTypeId",
      version: "u8",
      signedExtensions: "Vec<SignedExtensionMetadataV14>"
    },
    MetadataV14: {
      lookup: "PortableRegistry",
      pallets: "Vec<PalletMetadataV14>",
      extrinsic: "ExtrinsicMetadataV14",
      type: "SiLookupTypeId"
    },
    PalletCallMetadataV14: {
      type: "SiLookupTypeId"
    },
    PalletConstantMetadataV14: {
      name: "Text",
      type: "SiLookupTypeId",
      value: "Bytes",
      docs: "Vec<Text>"
    },
    PalletErrorMetadataV14: {
      type: "SiLookupTypeId"
    },
    PalletEventMetadataV14: {
      type: "SiLookupTypeId"
    },
    PalletMetadataV14: {
      name: "Text",
      storage: "Option<PalletStorageMetadataV14>",
      calls: "Option<PalletCallMetadataV14>",
      events: "Option<PalletEventMetadataV14>",
      constants: "Vec<PalletConstantMetadataV14>",
      errors: "Option<PalletErrorMetadataV14>",
      index: "u8"
    },
    PalletStorageMetadataV14: {
      prefix: "Text",
      items: "Vec<StorageEntryMetadataV14>"
    },
    SignedExtensionMetadataV14: {
      identifier: "Text",
      type: "SiLookupTypeId",
      additionalSigned: "SiLookupTypeId"
    },
    StorageEntryMetadataV14: {
      name: "Text",
      modifier: "StorageEntryModifierV14",
      type: "StorageEntryTypeV14",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryModifierV14: "StorageEntryModifierV13",
    StorageEntryTypeV14: {
      _enum: {
        Plain: "SiLookupTypeId",
        Map: {
          hashers: "Vec<StorageHasherV14>",
          key: "SiLookupTypeId",
          value: "SiLookupTypeId"
        }
      }
    },
    StorageHasherV14: "StorageHasherV13"
  };

  // ../../node_modules/@polkadot/types/interfaces/metadata/v15.js
  var v15 = {
    PalletMetadataV15: {
      name: "Text",
      storage: "Option<PalletStorageMetadataV14>",
      calls: "Option<PalletCallMetadataV14>",
      events: "Option<PalletEventMetadataV14>",
      constants: "Vec<PalletConstantMetadataV14>",
      errors: "Option<PalletErrorMetadataV14>",
      index: "u8",
      docs: "Vec<Text>"
    },
    RuntimeApiMetadataV15: {
      name: "Text",
      methods: "Vec<RuntimeApiMethodMetadataV15>",
      docs: "Vec<Text>"
    },
    RuntimeApiMethodMetadataV15: {
      name: "Text",
      inputs: "Vec<RuntimeApiMethodParamMetadataV15>",
      output: "SiLookupTypeId",
      docs: "Vec<Text>"
    },
    RuntimeApiMethodParamMetadataV15: {
      name: "Text",
      type: "SiLookupTypeId"
    },
    MetadataV15: {
      lookup: "PortableRegistry",
      pallets: "Vec<PalletMetadataV15>",
      extrinsic: "ExtrinsicMetadataV14",
      type: "SiLookupTypeId",
      apis: "Vec<RuntimeApiMetadataV15>"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/metadata/definitions.js
  var definitions_default = {
    rpc: {},
    runtime,
    types: {
      ...v9,
      ...v10,
      ...v11,
      ...v12,
      ...v13,
      ...v14,
      ...v15,
      ErrorMetadataLatest: "ErrorMetadataV14",
      EventMetadataLatest: "EventMetadataV14",
      ExtrinsicMetadataLatest: "ExtrinsicMetadataV14",
      FunctionArgumentMetadataLatest: "FunctionArgumentMetadataV14",
      FunctionMetadataLatest: "FunctionMetadataV14",
      MetadataLatest: "MetadataV15",
      PalletCallMetadataLatest: "PalletCallMetadataV14",
      PalletConstantMetadataLatest: "PalletConstantMetadataV14",
      PalletErrorMetadataLatest: "PalletErrorMetadataV14",
      PalletEventMetadataLatest: "PalletEventMetadataV14",
      PalletMetadataLatest: "PalletMetadataV15",
      PalletStorageMetadataLatest: "PalletStorageMetadataV14",
      PortableType: "PortableTypeV14",
      RuntimeApiMetadataLatest: "RuntimeApiMetadataV15",
      SignedExtensionMetadataLatest: "SignedExtensionMetadataV14",
      StorageEntryMetadataLatest: "StorageEntryMetadataV14",
      StorageEntryModifierLatest: "StorageEntryModifierV14",
      StorageEntryTypeLatest: "StorageEntryTypeV14",
      StorageHasher: "StorageHasherV14",
      OpaqueMetadata: "Opaque<Bytes>",
      MetadataAll: {
        _enum: {
          V0: "DoNotConstruct<MetadataV0>",
          V1: "DoNotConstruct<MetadataV1>",
          V2: "DoNotConstruct<MetadataV2>",
          V3: "DoNotConstruct<MetadataV3>",
          V4: "DoNotConstruct<MetadataV4>",
          V5: "DoNotConstruct<MetadataV5>",
          V6: "DoNotConstruct<MetadataV6>",
          V7: "DoNotConstruct<MetadataV7>",
          V8: "DoNotConstruct<MetadataV8>",
          V9: "MetadataV9",
          V10: "MetadataV10",
          V11: "MetadataV11",
          V12: "MetadataV12",
          V13: "MetadataV13",
          V14: "MetadataV14",
          V15: "MetadataV15"
        }
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/runtime/runtime.js
  var CORE_V1_TO_V4 = {
    execute_block: {
      description: "Execute the given block.",
      params: [
        {
          name: "block",
          type: "Block"
        }
      ],
      type: "Null"
    }
  };
  var CORE_V1_TO_V2 = {
    version: {
      description: "Returns the version of the runtime.",
      params: [],
      type: "RuntimeVersionPre3"
    }
  };
  var CORE_V2_TO_V4 = {
    initialize_block: {
      description: "Initialize a block with the given header.",
      params: [
        {
          name: "header",
          type: "Header"
        }
      ],
      type: "Null"
    }
  };
  var runtime2 = {
    Core: [
      {
        methods: {
          version: {
            description: "Returns the version of the runtime.",
            params: [],
            type: "RuntimeVersion"
          },
          ...CORE_V1_TO_V4,
          ...CORE_V2_TO_V4
        },
        version: 4
      },
      {
        methods: {
          version: {
            description: "Returns the version of the runtime.",
            params: [],
            type: "RuntimeVersionPre4"
          },
          ...CORE_V1_TO_V4,
          ...CORE_V2_TO_V4
        },
        version: 3
      },
      {
        methods: {
          ...CORE_V1_TO_V2,
          ...CORE_V1_TO_V4,
          ...CORE_V2_TO_V4
        },
        version: 2
      },
      {
        methods: {
          initialise_block: {
            description: "Initialize a block with the given header.",
            params: [
              {
                name: "header",
                type: "Header"
              }
            ],
            type: "Null"
          },
          ...CORE_V1_TO_V2,
          ...CORE_V1_TO_V4
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/runtime/definitions.js
  var numberTypes = {
    Fixed64: "Int<64, Fixed64>",
    FixedI64: "Int<64, FixedI64>",
    FixedU64: "UInt<64, FixedU64>",
    Fixed128: "Int<128, Fixed128>",
    FixedI128: "Int<128, FixedI128>",
    FixedU128: "UInt<128, FixedU128>",
    I32F32: "Int<64, I32F32>",
    U32F32: "UInt<64, U32F32>",
    PerU16: "UInt<16, PerU16>",
    Perbill: "UInt<32, Perbill>",
    Percent: "UInt<8, Percent>",
    Permill: "UInt<32, Permill>",
    Perquintill: "UInt<64, Perquintill>"
  };
  var knownOrigins = {
    Council: "CollectiveOrigin",
    System: "SystemOrigin",
    TechnicalCommittee: "CollectiveOrigin",
    Xcm: "XcmOrigin",
    XcmPallet: "XcmOrigin",
    Authority: "AuthorityOrigin",
    GeneralCouncil: "CollectiveOrigin"
  };
  var definitions_default2 = {
    rpc: {},
    runtime: runtime2,
    types: {
      ...numberTypes,
      AccountId: "AccountId32",
      AccountId20: "GenericEthereumAccountId",
      AccountId32: "GenericAccountId32",
      AccountId33: "GenericAccountId33",
      AccountIdOf: "AccountId",
      AccountIndex: "GenericAccountIndex",
      Address: "MultiAddress",
      AssetId: "u32",
      Balance: "UInt<128, Balance>",
      BalanceOf: "Balance",
      Block: "GenericBlock",
      BlockNumber: "u32",
      BlockNumberFor: "BlockNumber",
      BlockNumberOf: "BlockNumber",
      Call: "GenericCall",
      CallHash: "Hash",
      CallHashOf: "CallHash",
      ChangesTrieConfiguration: {
        digestInterval: "u32",
        digestLevels: "u32"
      },
      ChangesTrieSignal: {
        _enum: {
          NewConfiguration: "Option<ChangesTrieConfiguration>"
        }
      },
      ConsensusEngineId: "GenericConsensusEngineId",
      CodecHash: "Hash",
      CrateVersion: {
        major: "u16",
        minor: "u8",
        patch: "u8"
      },
      Digest: {
        logs: "Vec<DigestItem>"
      },
      DigestItem: {
        _enum: {
          Other: "Bytes",
          AuthoritiesChange: "Vec<AuthorityId>",
          ChangesTrieRoot: "Hash",
          SealV0: "SealV0",
          Consensus: "Consensus",
          Seal: "Seal",
          PreRuntime: "PreRuntime",
          ChangesTrieSignal: "ChangesTrieSignal",
          RuntimeEnvironmentUpdated: "Null"
        }
      },
      ExtrinsicsWeight: {
        normal: "Weight",
        operational: "Weight"
      },
      H32: "[u8; 4; H32]",
      H64: "[u8; 8; H64]",
      H128: "[u8; 16; H128]",
      H160: "[u8; 20; H160]",
      H256: "[u8; 32; H256]",
      H512: "[u8; 64; H512]",
      H1024: "[u8; 128; H1024]",
      H2048: "[u8; 256; H2048]",
      Hash: "H256",
      Header: {
        parentHash: "Hash",
        number: "Compact<BlockNumber>",
        stateRoot: "Hash",
        extrinsicsRoot: "Hash",
        digest: "Digest"
      },
      HeaderPartial: {
        parentHash: "Hash",
        number: "BlockNumber"
      },
      IndicesLookupSource: "GenericLookupSource",
      Index: "u32",
      Justification: "(ConsensusEngineId, EncodedJustification)",
      EncodedJustification: "Bytes",
      Justifications: "Vec<Justification>",
      KeyValue: "(StorageKey, StorageData)",
      KeyTypeId: "u32",
      LockIdentifier: "[u8; 8]",
      LookupSource: "MultiAddress",
      LookupTarget: "AccountId",
      ModuleId: "LockIdentifier",
      MultiAddress: "GenericMultiAddress",
      MultiSigner: {
        _enum: {
          Ed25519: "[u8; 32]",
          Sr25519: "[u8; 32]",
          Ecdsa: "[u8; 33]"
        }
      },
      Moment: "UInt<64, Moment>",
      OpaqueCall: "Bytes",
      Origin: "DoNotConstruct<Origin>",
      OriginCaller: {
        _enum: {
          System: "SystemOrigin"
        }
      },
      PalletId: "LockIdentifier",
      PalletsOrigin: "OriginCaller",
      PalletVersion: {
        major: "u16",
        minor: "u8",
        patch: "u8"
      },
      Pays: {
        _enum: ["Yes", "No"]
      },
      Phantom: "Null",
      PhantomData: "Null",
      Releases: {
        _enum: ["V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10"]
      },
      RuntimeCall: "Call",
      RuntimeEvent: "Event",
      RuntimeDbWeight: {
        read: "Weight",
        write: "Weight"
      },
      SignedBlock: "SignedBlockWithJustifications",
      SignedBlockWithJustification: {
        block: "Block",
        justification: "Option<EncodedJustification>"
      },
      SignedBlockWithJustifications: {
        block: "Block",
        justifications: "Option<Justifications>"
      },
      Slot: "u64",
      SlotDuration: "u64",
      StorageData: "Bytes",
      StorageInfo: {
        palletName: "Bytes",
        storage_name: "Bytes",
        prefix: "Bytes",
        maxValues: "Option<u32>",
        maxSize: "Option<u32>"
      },
      StorageProof: {
        trieNodes: "Vec<Bytes>"
      },
      TransactionPriority: "u64",
      TransactionLongevity: "u64",
      TransactionTag: "Bytes",
      TransactionInfo: {
        _alias: {
          dataSize: "size"
        },
        chunkRoot: "H256",
        contentHash: "H256",
        dataSize: "u32",
        blockChunks: "u32"
      },
      TransactionStorageProof: {
        chunk: "Vec<u8>",
        proof: "Vec<Vec<u8>>"
      },
      ValidatorId: "AccountId",
      ValidatorIdOf: "ValidatorId",
      WeightV0: "u32",
      WeightV1: "u64",
      WeightV2: {
        refTime: "Compact<u64>",
        proofSize: "Compact<u64>"
      },
      Weight: "WeightV2",
      WeightMultiplier: "Fixed64",
      PreRuntime: "(ConsensusEngineId, Bytes)",
      SealV0: "(u64, Signature)",
      Seal: "(ConsensusEngineId, Bytes)",
      Consensus: "(ConsensusEngineId, Bytes)"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/scaleInfo/v0.js
  var v0 = {
    Si0Field: {
      name: "Option<Text>",
      type: "Si0LookupTypeId",
      typeName: "Option<Text>",
      docs: "Vec<Text>"
    },
    Si0LookupTypeId: "u32",
    Si0Path: "Vec<Text>",
    Si0Type: {
      path: "Si0Path",
      params: "Vec<Si0LookupTypeId>",
      def: "Si0TypeDef"
    },
    Si0TypeDef: {
      _enum: {
        Composite: "Si0TypeDefComposite",
        Variant: "Si0TypeDefVariant",
        Sequence: "Si0TypeDefSequence",
        Array: "Si0TypeDefArray",
        Tuple: "Si0TypeDefTuple",
        Primitive: "Si0TypeDefPrimitive",
        Compact: "Si0TypeDefCompact",
        Phantom: "Si0TypeDefPhantom",
        BitSequence: "Si0TypeDefBitSequence"
      }
    },
    Si0TypeDefArray: {
      len: "u32",
      type: "Si0LookupTypeId"
    },
    Si0TypeDefBitSequence: {
      bitStoreType: "Si0LookupTypeId",
      bitOrderType: "Si0LookupTypeId"
    },
    Si0TypeDefCompact: {
      type: "Si0LookupTypeId"
    },
    Si0TypeDefComposite: {
      fields: "Vec<Si0Field>"
    },
    Si0TypeDefPhantom: "Null",
    Si0TypeDefVariant: {
      variants: "Vec<Si0Variant>"
    },
    Si0TypeDefPrimitive: {
      _enum: ["Bool", "Char", "Str", "U8", "U16", "U32", "U64", "U128", "U256", "I8", "I16", "I32", "I64", "I128", "I256"]
    },
    Si0TypeDefSequence: {
      type: "Si0LookupTypeId"
    },
    Si0TypeDefTuple: "Vec<Si0LookupTypeId>",
    Si0TypeParameter: {
      name: "Text",
      type: "Option<Si0LookupTypeId>"
    },
    Si0Variant: {
      name: "Text",
      fields: "Vec<Si0Field>",
      index: "Option<u8>",
      discriminant: "Option<u64>",
      docs: "Vec<Text>"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/scaleInfo/definitions.js
  var definitions_default3 = {
    rpc: {},
    types: {
      ...v0,
      ...v1,
      SiField: "Si1Field",
      SiLookupTypeId: "Si1LookupTypeId",
      SiPath: "Si1Path",
      SiType: "Si1Type",
      SiTypeDef: "Si1TypeDef",
      SiTypeDefArray: "Si1TypeDefArray",
      SiTypeDefBitSequence: "Si1TypeDefBitSequence",
      SiTypeDefCompact: "Si1TypeDefCompact",
      SiTypeDefComposite: "Si1TypeDefComposite",
      SiTypeDefPrimitive: "Si1TypeDefPrimitive",
      SiTypeDefSequence: "Si1TypeDefSequence",
      SiTypeDefTuple: "Si1TypeDefTuple",
      SiTypeParameter: "Si1TypeParameter",
      SiTypeDefVariant: "Si1TypeDefVariant",
      SiVariant: "Si1Variant"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/assets/runtime.js
  var runtime3 = {
    AssetsApi: [
      {
        methods: {
          account_balances: {
            description: "Return the current set of authorities.",
            params: [
              {
                name: "account",
                type: "AccountId"
              }
            ],
            type: "Vec<(u32, TAssetBalance)>"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/assets/definitions.js
  var definitions_default4 = {
    rpc: {},
    runtime: runtime3,
    types: {
      AssetApprovalKey: {
        owner: "AccountId",
        delegate: "AccountId"
      },
      AssetApproval: {
        amount: "TAssetBalance",
        deposit: "TAssetDepositBalance"
      },
      AssetBalance: {
        balance: "TAssetBalance",
        isFrozen: "bool",
        isSufficient: "bool"
      },
      AssetDestroyWitness: {
        accounts: "Compact<u32>",
        sufficients: "Compact<u32>",
        approvals: "Compact<u32>"
      },
      AssetDetails: {
        owner: "AccountId",
        issuer: "AccountId",
        admin: "AccountId",
        freezer: "AccountId",
        supply: "TAssetBalance",
        deposit: "TAssetDepositBalance",
        minBalance: "TAssetBalance",
        isSufficient: "bool",
        accounts: "u32",
        sufficients: "u32",
        approvals: "u32",
        isFrozen: "bool"
      },
      AssetMetadata: {
        deposit: "TAssetDepositBalance",
        name: "Vec<u8>",
        symbol: "Vec<u8>",
        decimals: "u8",
        isFrozen: "bool"
      },
      TAssetBalance: "u64",
      TAssetDepositBalance: "BalanceOf"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/aura/runtime.js
  var runtime4 = {
    AuraApi: [
      {
        methods: {
          authorities: {
            description: "Return the current set of authorities.",
            params: [],
            type: "Vec<AuthorityId>"
          },
          slot_duration: {
            description: "Returns the slot duration for Aura.",
            params: [],
            type: "SlotDuration"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/aura/definitions.js
  var definitions_default5 = {
    rpc: {},
    runtime: runtime4,
    types: {
      RawAuraPreDigest: {
        slotNumber: "u64"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/authorship/definitions.js
  var definitions_default6 = {
    rpc: {},
    types: {
      UncleEntryItem: {
        _enum: {
          InclusionHeight: "BlockNumber",
          Uncle: "(Hash, Option<AccountId>)"
        }
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/babe/rpc.js
  var rpc = {
    epochAuthorship: {
      description: "Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore",
      isUnsafe: true,
      params: [],
      type: "HashMap<AuthorityId, EpochAuthorship>"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/babe/runtime.js
  var V1_V2_SHARED = {
    current_epoch: {
      description: "Returns information regarding the current epoch.",
      params: [],
      type: "Epoch"
    },
    current_epoch_start: {
      description: "Returns the slot that started the current epoch.",
      params: [],
      type: "Slot"
    },
    generate_key_ownership_proof: {
      description: "Generates a proof of key ownership for the given authority in the current epoch.",
      params: [
        {
          name: "slot",
          type: "Slot"
        },
        {
          name: "authorityId",
          type: "AuthorityId"
        }
      ],
      type: "Option<OpaqueKeyOwnershipProof>"
    },
    next_epoch: {
      description: "Returns information regarding the next epoch (which was already previously announced).",
      params: [],
      type: "Epoch"
    },
    submit_report_equivocation_unsigned_extrinsic: {
      description: "Submits an unsigned extrinsic to report an equivocation.",
      params: [
        {
          name: "equivocationProof",
          type: "BabeEquivocationProof"
        },
        {
          name: "keyOwnerProof",
          type: "OpaqueKeyOwnershipProof"
        }
      ],
      type: "Option<Null>"
    }
  };
  var runtime5 = {
    BabeApi: [
      {
        methods: {
          configuration: {
            description: "Return the genesis configuration for BABE. The configuration is only read on genesis.",
            params: [],
            type: "BabeGenesisConfiguration"
          },
          ...V1_V2_SHARED
        },
        version: 2
      },
      {
        methods: {
          configuration: {
            description: "Return the configuration for BABE. Version 1.",
            params: [],
            type: "BabeGenesisConfigurationV1"
          },
          ...V1_V2_SHARED
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/babe/definitions.js
  var definitions_default7 = {
    rpc,
    runtime: runtime5,
    types: {
      AllowedSlots: {
        _enum: ["PrimarySlots", "PrimaryAndSecondaryPlainSlots", "PrimaryAndSecondaryVRFSlots"]
      },
      BabeAuthorityWeight: "u64",
      BabeEpochConfiguration: {
        c: "(u64, u64)",
        allowedSlots: "AllowedSlots"
      },
      BabeBlockWeight: "u32",
      BabeEquivocationProof: {
        offender: "AuthorityId",
        slotNumber: "SlotNumber",
        firstHeader: "Header",
        secondHeader: "Header"
      },
      BabeGenesisConfiguration: {
        slotDuration: "u64",
        epochLength: "u64",
        c: "(u64, u64)",
        genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
        randomness: "Randomness",
        allowedSlots: "AllowedSlots"
      },
      BabeGenesisConfigurationV1: {
        slotDuration: "u64",
        epochLength: "u64",
        c: "(u64, u64)",
        genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
        randomness: "Randomness",
        secondarySlots: "bool"
      },
      BabeWeight: "u64",
      MaybeRandomness: "Option<Randomness>",
      MaybeVrf: "Option<VrfData>",
      Epoch: {
        epochIndex: "u64",
        startSlot: "Slot",
        duration: "u64",
        authorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
        randomness: "Hash",
        config: "BabeEpochConfiguration"
      },
      EpochAuthorship: {
        primary: "Vec<u64>",
        secondary: "Vec<u64>",
        secondary_vrf: "Vec<u64>"
      },
      NextConfigDescriptor: {
        _enum: {
          V0: "Null",
          V1: "NextConfigDescriptorV1"
        }
      },
      NextConfigDescriptorV1: {
        c: "(u64, u64)",
        allowedSlots: "AllowedSlots"
      },
      OpaqueKeyOwnershipProof: "Bytes",
      Randomness: "Hash",
      RawBabePreDigest: {
        _enum: {
          Phantom: "Null",
          Primary: "RawBabePreDigestPrimary",
          SecondaryPlain: "RawBabePreDigestSecondaryPlain",
          SecondaryVRF: "RawBabePreDigestSecondaryVRF"
        }
      },
      RawBabePreDigestPrimary: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber",
        vrfOutput: "VrfOutput",
        vrfProof: "VrfProof"
      },
      RawBabePreDigestSecondaryPlain: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber"
      },
      RawBabePreDigestSecondaryVRF: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber",
        vrfOutput: "VrfOutput",
        vrfProof: "VrfProof"
      },
      RawBabePreDigestTo159: {
        _enum: {
          Primary: "RawBabePreDigestPrimaryTo159",
          Secondary: "RawBabePreDigestSecondaryTo159"
        }
      },
      RawBabePreDigestPrimaryTo159: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber",
        weight: "BabeBlockWeight",
        vrfOutput: "VrfOutput",
        vrfProof: "VrfProof"
      },
      RawBabePreDigestSecondaryTo159: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber",
        weight: "BabeBlockWeight"
      },
      RawBabePreDigestCompat: {
        _enum: {
          Zero: "u32",
          One: "u32",
          Two: "u32",
          Three: "u32"
        }
      },
      SlotNumber: "u64",
      VrfData: "[u8; 32]",
      VrfOutput: "[u8; 32]",
      VrfProof: "[u8; 64]"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/balances/definitions.js
  var definitions_default8 = {
    rpc: {},
    types: {
      AccountData: {
        free: "Balance",
        reserved: "Balance",
        miscFrozen: "Balance",
        feeFrozen: "Balance"
      },
      BalanceLockTo212: {
        id: "LockIdentifier",
        amount: "Balance",
        until: "BlockNumber",
        reasons: "WithdrawReasons"
      },
      BalanceLock: {
        id: "LockIdentifier",
        amount: "Balance",
        reasons: "Reasons"
      },
      BalanceStatus: {
        _enum: ["Free", "Reserved"]
      },
      Reasons: {
        _enum: ["Fee", "Misc", "All"]
      },
      ReserveData: {
        id: "ReserveIdentifier",
        amount: "Balance"
      },
      ReserveIdentifier: "[u8; 8]",
      VestingSchedule: {
        offset: "Balance",
        perBlock: "Balance",
        startingBlock: "BlockNumber"
      },
      WithdrawReasons: {
        _set: {
          TransactionPayment: 1,
          Transfer: 2,
          Reserve: 4,
          Fee: 8,
          Tip: 16
        }
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/beefy/rpc.js
  var rpc2 = {
    getFinalizedHead: {
      description: "Returns hash of the latest BEEFY finalized block as seen by this client.",
      params: [],
      type: "H256"
    },
    subscribeJustifications: {
      description: "Returns the block most recently finalized by BEEFY, alongside side its justification.",
      params: [],
      pubsub: [
        "justifications",
        "subscribeJustifications",
        "unsubscribeJustifications"
      ],
      type: "BeefySignedCommitment"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/beefy/runtime.js
  var BEEFY_V1_V2 = {
    beefy_genesis: {
      description: "Return the block number where BEEFY consensus is enabled/started",
      params: [],
      type: "Option<BlockNumber>"
    },
    generate_key_ownership_proof: {
      description: "Generates a proof of key ownership for the given authority in the given set.",
      params: [
        {
          name: "setId",
          type: "ValidatorSetId"
        },
        {
          name: "authorityId",
          type: "AuthorityId"
        }
      ],
      type: "Option<OpaqueKeyOwnershipProof>"
    },
    submit_report_equivocation_unsigned_extrinsic: {
      description: "Submits an unsigned extrinsic to report an equivocation.",
      params: [
        {
          name: "equivocationProof",
          type: "BeefyEquivocationProof"
        },
        {
          name: "keyOwnerProof",
          type: "OpaqueKeyOwnershipProof"
        }
      ],
      type: "Option<Null>"
    },
    validator_set: {
      description: "Return the current active BEEFY validator set",
      params: [],
      type: "Option<ValidatorSet>"
    }
  };
  var BEEFY_MMR_V1 = {
    authority_set_proof: {
      description: "Return the currently active BEEFY authority set proof.",
      params: [],
      type: "BeefyAuthoritySet"
    },
    next_authority_set_proof: {
      description: "Return the next/queued BEEFY authority set proof.",
      params: [],
      type: "BeefyNextAuthoritySet"
    }
  };
  var runtime6 = {
    BeefyApi: [
      {
        methods: BEEFY_V1_V2,
        version: 2
      },
      {
        methods: BEEFY_V1_V2,
        version: 1
      }
    ],
    BeefyMmrApi: [
      {
        methods: BEEFY_MMR_V1,
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/beefy/definitions.js
  var definitions_default9 = {
    rpc: rpc2,
    runtime: runtime6,
    types: {
      BeefyAuthoritySet: {
        id: "u64",
        len: "u32",
        root: "H256"
      },
      BeefyCommitment: {
        payload: "BeefyPayload",
        blockNumber: "BlockNumber",
        validatorSetId: "ValidatorSetId"
      },
      BeefyId: "[u8; 33]",
      BeefyEquivocationProof: {
        first: "BeefyVoteMessage",
        second: "BeefyVoteMessage"
      },
      BeefySignedCommitment: {
        commitment: "BeefyCommitment",
        signatures: "Vec<Option<EcdsaSignature>>"
      },
      BeefyNextAuthoritySet: {
        id: "u64",
        len: "u32",
        root: "H256"
      },
      BeefyPayload: "Vec<(BeefyPayloadId, Bytes)>",
      BeefyPayloadId: "[u8;2]",
      BeefyVoteMessage: {
        commitment: "BeefyCommitment",
        id: "AuthorityId",
        signature: "Signature"
      },
      MmrRootHash: "H256",
      ValidatorSetId: "u64",
      ValidatorSet: {
        validators: "Vec<AuthorityId>",
        id: "ValidatorSetId"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/benchmark/runtime.js
  var runtime7 = {
    Benchmark: [
      {
        methods: {
          benchmark_metadata: {
            description: "Get the benchmark metadata available for this runtime.",
            params: [
              {
                name: "extra",
                type: "bool"
              }
            ],
            type: "(Vec<BenchmarkList>, Vec<StorageInfo>)"
          },
          dispatch_benchmark: {
            description: "Dispatch the given benchmark.",
            params: [
              {
                name: "config",
                type: "BenchmarkConfig"
              }
            ],
            type: "Result<Vec<BenchmarkBatch>, Text>"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/benchmark/definitions.js
  var definitions_default10 = {
    rpc: {},
    runtime: runtime7,
    types: {
      BenchmarkBatch: {
        pallet: "Text",
        instance: "Text",
        benchmark: "Text",
        results: "Vec<BenchmarkResult>"
      },
      BenchmarkConfig: {
        pallet: "Bytes",
        benchmark: "Bytes",
        selectedComponents: "Vec<(BenchmarkParameter, u32)>",
        verify: "bool",
        internalRepeats: "u32"
      },
      BenchmarkList: {
        pallet: "Bytes",
        instance: "Bytes",
        benchmarks: "Vec<BenchmarkMetadata>"
      },
      BenchmarkMetadata: {
        name: "Bytes",
        components: "Vec<(BenchmarkParameter, u32, u32)>"
      },
      BenchmarkParameter: {
        _enum: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
      },
      BenchmarkResult: {
        components: "Vec<(BenchmarkParameter, u32)>",
        extrinsicTime: "u128",
        storageRootTime: "u128",
        reads: "u32",
        repeatReads: "u32",
        writes: "u32",
        repeatWrites: "u32",
        proofSize: "u32",
        benchKeys: "Vec<(Vec<u8>, u32, u32, bool)>"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/blockbuilder/runtime.js
  var BB_V2_TO_V4 = {
    random_seed: {
      description: "Generate a random seed.",
      params: [],
      type: "Hash"
    }
  };
  var BB_V2_TO_V5 = {
    apply_extrinsic: {
      description: "Apply the given extrinsic.",
      params: [
        {
          name: "extrinsic",
          type: "Extrinsic"
        }
      ],
      type: "ApplyExtrinsicResultPre6"
    }
  };
  var BB_V2_TO_V6 = {
    check_inherents: {
      description: "Check that the inherents are valid.",
      params: [
        {
          name: "block",
          type: "Block"
        },
        {
          name: "data",
          type: "InherentData"
        }
      ],
      type: "CheckInherentsResult"
    },
    inherent_extrinsics: {
      description: "Generate inherent extrinsics.",
      params: [
        {
          name: "inherent",
          type: "InherentData"
        }
      ],
      type: "Vec<Extrinsic>"
    }
  };
  var BB_V3_TO_V6 = {
    finalize_block: {
      description: "Finish the current block.",
      params: [],
      type: "Header"
    }
  };
  var runtime8 = {
    BlockBuilder: [
      {
        methods: {
          apply_extrinsic: {
            description: "Apply the given extrinsic.",
            params: [
              {
                name: "extrinsic",
                type: "Extrinsic"
              }
            ],
            type: "ApplyExtrinsicResult"
          },
          ...BB_V2_TO_V6,
          ...BB_V3_TO_V6
        },
        version: 6
      },
      {
        methods: {
          ...BB_V2_TO_V5,
          ...BB_V2_TO_V6,
          ...BB_V3_TO_V6
        },
        version: 5
      },
      {
        methods: {
          ...BB_V2_TO_V4,
          ...BB_V2_TO_V5,
          ...BB_V2_TO_V6,
          ...BB_V3_TO_V6
        },
        version: 4
      },
      {
        methods: {
          ...BB_V2_TO_V4,
          ...BB_V2_TO_V6,
          ...BB_V3_TO_V6
        },
        version: 3
      },
      {
        methods: {
          finalise_block: {
            description: "Finish the current block.",
            params: [],
            type: "Header"
          },
          ...BB_V2_TO_V4,
          ...BB_V2_TO_V6
        },
        version: 2
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/blockbuilder/definitions.js
  var definitions_default11 = {
    rpc: {},
    runtime: runtime8,
    types: {
      CheckInherentsResult: {
        okay: "bool",
        fatalError: "bool",
        errors: "InherentData"
      },
      InherentData: {
        data: "BTreeMap<InherentIdentifier, Bytes>"
      },
      InherentIdentifier: "[u8; 8]"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/collective/definitions.js
  var definitions_default12 = {
    rpc: {},
    types: {
      CollectiveOrigin: {
        _enum: {
          Members: "(MemberCount, MemberCount)",
          Member: "AccountId"
        }
      },
      MemberCount: "u32",
      ProposalIndex: "u32",
      VotesTo230: {
        index: "ProposalIndex",
        threshold: "MemberCount",
        ayes: "Vec<AccountId>",
        nays: "Vec<AccountId>"
      },
      Votes: {
        index: "ProposalIndex",
        threshold: "MemberCount",
        ayes: "Vec<AccountId>",
        nays: "Vec<AccountId>",
        end: "BlockNumber"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/consensus/definitions.js
  var definitions_default13 = {
    rpc: {},
    types: {
      AuthorityId: "AccountId",
      RawVRFOutput: "[u8; 32]"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/contracts/rpc.js
  var rpc3 = {
    call: {
      deprecated: "Use the runtime interface `api.call.contractsApi.call` instead",
      description: "Executes a call to a contract",
      params: [
        {
          name: "callRequest",
          type: "ContractCallRequest"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ContractExecResult"
    },
    getStorage: {
      deprecated: "Use the runtime interface `api.call.contractsApi.getStorage` instead",
      description: "Returns the value under a specified storage key in a contract",
      params: [
        {
          name: "address",
          type: "AccountId"
        },
        {
          name: "key",
          type: "H256"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Option<Bytes>"
    },
    instantiate: {
      deprecated: "Use the runtime interface `api.call.contractsApi.instantiate` instead",
      description: "Instantiate a new contract",
      params: [
        {
          name: "request",
          type: "InstantiateRequestV1"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ContractInstantiateResult"
    },
    rentProjection: {
      deprecated: "Not available in newer versions of the contracts interfaces",
      description: "Returns the projected time a given contract will be able to sustain paying its rent",
      params: [
        {
          name: "address",
          type: "AccountId"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Option<BlockNumber>"
    },
    uploadCode: {
      deprecated: "Use the runtime interface `api.call.contractsApi.uploadCode` instead",
      description: "Upload new code without instantiating a contract from it",
      endpoint: "contracts_upload_code",
      params: [
        {
          name: "uploadRequest",
          type: "CodeUploadRequest"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "CodeUploadResult"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/contracts/runtime.js
  var SHARED_V1_V2 = {
    get_storage: {
      description: "Query a given storage key in a given contract.",
      params: [
        {
          name: "address",
          type: "AccountId"
        },
        {
          name: "key",
          type: "Bytes"
        }
      ],
      type: "Option<Bytes>"
    },
    upload_code: {
      description: "Upload new code without instantiating a contract from it.",
      params: [
        {
          name: "origin",
          type: "AccountId"
        },
        {
          name: "code",
          type: "Bytes"
        },
        {
          name: "storageDepositLimit",
          type: "Option<Balance>"
        }
      ],
      type: "CodeUploadResult"
    }
  };
  var runtime9 = {
    ContractsApi: [
      {
        methods: {
          call: {
            description: "Perform a call from a specified account to a given contract.",
            params: [
              {
                name: "origin",
                type: "AccountId"
              },
              {
                name: "dest",
                type: "AccountId"
              },
              {
                name: "value",
                type: "Balance"
              },
              {
                name: "gasLimit",
                type: "Option<WeightV2>"
              },
              {
                name: "storageDepositLimit",
                type: "Option<Balance>"
              },
              {
                name: "inputData",
                type: "Vec<u8>"
              }
            ],
            type: "ContractExecResult"
          },
          instantiate: {
            description: "Instantiate a new contract.",
            params: [
              {
                name: "origin",
                type: "AccountId"
              },
              {
                name: "value",
                type: "Balance"
              },
              {
                name: "gasLimit",
                type: "Option<WeightV2>"
              },
              {
                name: "storageDepositLimit",
                type: "Option<Balance>"
              },
              {
                name: "code",
                type: "CodeSource"
              },
              {
                name: "data",
                type: "Bytes"
              },
              {
                name: "salt",
                type: "Bytes"
              }
            ],
            type: "ContractInstantiateResult"
          },
          ...SHARED_V1_V2
        },
        version: 2
      },
      {
        methods: {
          call: {
            description: "Perform a call from a specified account to a given contract.",
            params: [
              {
                name: "origin",
                type: "AccountId"
              },
              {
                name: "dest",
                type: "AccountId"
              },
              {
                name: "value",
                type: "Balance"
              },
              {
                name: "gasLimit",
                type: "u64"
              },
              {
                name: "storageDepositLimit",
                type: "Option<Balance>"
              },
              {
                name: "inputData",
                type: "Vec<u8>"
              }
            ],
            type: "ContractExecResultU64"
          },
          instantiate: {
            description: "Instantiate a new contract.",
            params: [
              {
                name: "origin",
                type: "AccountId"
              },
              {
                name: "value",
                type: "Balance"
              },
              {
                name: "gasLimit",
                type: "u64"
              },
              {
                name: "storageDepositLimit",
                type: "Option<Balance>"
              },
              {
                name: "code",
                type: "CodeSource"
              },
              {
                name: "data",
                type: "Bytes"
              },
              {
                name: "salt",
                type: "Bytes"
              }
            ],
            type: "ContractInstantiateResultU64"
          },
          ...SHARED_V1_V2
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/contracts/definitions.js
  var definitions_default14 = {
    rpc: rpc3,
    runtime: runtime9,
    types: {
      AliveContractInfo: {
        trieId: "TrieId",
        storageSize: "u32",
        pairCount: "u32",
        codeHash: "CodeHash",
        rentAllowance: "Balance",
        rentPaid: "Balance",
        deductBlock: "BlockNumber",
        lastWrite: "Option<BlockNumber>",
        _reserved: "Option<Null>"
      },
      CodeHash: "Hash",
      CodeSource: {
        _enum: {
          Upload: "Bytes",
          Existing: "Hash"
        }
      },
      CodeUploadRequest: {
        origin: "AccountId",
        code: "Bytes",
        storageDepositLimit: "Option<Balance>"
      },
      CodeUploadResult: "Result<CodeUploadResultValue, DispatchError>",
      CodeUploadResultValue: {
        codeHash: "CodeHash",
        deposit: "Balance"
      },
      ContractCallRequest: {
        origin: "AccountId",
        dest: "AccountId",
        value: "Balance",
        gasLimit: "u64",
        storageDepositLimit: "Option<Balance>",
        inputData: "Bytes"
      },
      ContractExecResultSuccessTo255: {
        status: "u8",
        data: "Raw"
      },
      ContractExecResultTo255: {
        _enum: {
          Success: "ContractExecResultSuccessTo255",
          Error: "Null"
        }
      },
      ContractExecResultSuccessTo260: {
        flags: "ContractReturnFlags",
        data: "Bytes",
        gasConsumed: "u64"
      },
      ContractExecResultTo260: {
        _enum: {
          Success: "ContractExecResultSuccessTo260",
          Error: "Null"
        }
      },
      ContractExecResultOk: {
        flags: "ContractReturnFlags",
        data: "Bytes"
      },
      ContractExecResultResult: "Result<ContractExecResultOk, DispatchError>",
      ContractExecResultTo267: {
        gasConsumed: "u64",
        debugMessage: "Text",
        result: "ContractExecResultResult"
      },
      ContractExecResult: {
        gasConsumed: "Weight",
        gasRequired: "Weight",
        storageDeposit: "StorageDeposit",
        debugMessage: "Text",
        result: "ContractExecResultResult"
      },
      ContractExecResultU64: {
        gasConsumed: "u64",
        gasRequired: "u64",
        storageDeposit: "StorageDeposit",
        debugMessage: "Text",
        result: "ContractExecResultResult"
      },
      ContractInfo: {
        _enum: {
          Alive: "AliveContractInfo",
          Tombstone: "TombstoneContractInfo"
        }
      },
      ContractCallFlags: {
        _set: {
          _bitLength: 32,
          ForwardInput: 1,
          CloneInput: 2,
          TailCall: 4,
          AllowReentry: 8
        }
      },
      ContractReturnFlags: {
        _set: {
          _bitLength: 32,
          Revert: 1
        }
      },
      ContractStorageKey: "[u8; 32]",
      DeletedContract: {
        pairCount: "u32",
        trieId: "TrieId"
      },
      ExecReturnValue: {
        flags: "ContractReturnFlags",
        data: "Bytes"
      },
      Gas: "u64",
      HostFnWeightsTo264: {
        caller: "Weight",
        address: "Weight",
        gasLeft: "Weight",
        balance: "Weight",
        valueTransferred: "Weight",
        minimumBalance: "Weight",
        tombstoneDeposit: "Weight",
        rentAllowance: "Weight",
        blockNumber: "Weight",
        now: "Weight",
        weightToFee: "Weight",
        gas: "Weight",
        input: "Weight",
        inputPerByte: "Weight",
        return: "Weight",
        returnPerByte: "Weight",
        terminate: "Weight",
        restoreTo: "Weight",
        restoreToPerDelta: "Weight",
        random: "Weight",
        depositEvent: "Weight",
        depositEventPerTopic: "Weight",
        depositEventPerByte: "Weight",
        setRentAllowance: "Weight",
        setStorage: "Weight",
        setStoragePerByte: "Weight",
        clearStorage: "Weight",
        getStorage: "Weight",
        getStoragePerByte: "Weight",
        transfer: "Weight",
        call: "Weight",
        callTransferSurcharge: "Weight",
        callPerInputByte: "Weight",
        callPerOutputByte: "Weight",
        instantiate: "Weight",
        instantiatePerInputByte: "Weight",
        instantiatePerOutputByte: "Weight",
        hashSha2256: "Weight",
        hashSha2256PerByte: "Weight",
        hashKeccak256: "Weight",
        hashKeccak256PerByte: "Weight",
        hashBlake2256: "Weight",
        hashBlake2256PerByte: "Weight",
        hashBlake2128: "Weight",
        hashBlake2128PerByte: "Weight"
      },
      HostFnWeights: {
        caller: "Weight",
        address: "Weight",
        gasLeft: "Weight",
        balance: "Weight",
        valueTransferred: "Weight",
        minimumBalance: "Weight",
        tombstoneDeposit: "Weight",
        rentAllowance: "Weight",
        blockNumber: "Weight",
        now: "Weight",
        weightToFee: "Weight",
        gas: "Weight",
        input: "Weight",
        inputPerByte: "Weight",
        return: "Weight",
        returnPerByte: "Weight",
        terminate: "Weight",
        terminatePerCodeByte: "Weight",
        restoreTo: "Weight",
        restoreToPerCallerCodeByte: "Weight",
        restoreToPerTombstoneCodeByte: "Weight",
        restoreToPerDelta: "Weight",
        random: "Weight",
        depositEvent: "Weight",
        depositEventPerTopic: "Weight",
        depositEventPerByte: "Weight",
        setRentAllowance: "Weight",
        setStorage: "Weight",
        setStoragePerByte: "Weight",
        clearStorage: "Weight",
        getStorage: "Weight",
        getStoragePerByte: "Weight",
        transfer: "Weight",
        call: "Weight",
        callPerCodeByte: "Weight",
        callTransferSurcharge: "Weight",
        callPerInputByte: "Weight",
        callPerOutputByte: "Weight",
        instantiate: "Weight",
        instantiatePerCodeByte: "Weight",
        instantiatePerInputByte: "Weight",
        instantiatePerOutputByte: "Weight",
        instantiatePerSaltByte: "Weight",
        hashSha2256: "Weight",
        hashSha2256PerByte: "Weight",
        hashKeccak256: "Weight",
        hashKeccak256PerByte: "Weight",
        hashBlake2256: "Weight",
        hashBlake2256PerByte: "Weight",
        hashBlake2128: "Weight",
        hashBlake2128PerByte: "Weight",
        rentParams: "Weight"
      },
      InstantiateRequestV1: {
        origin: "AccountId",
        value: "Balance",
        gasLimit: "Gas",
        code: "Bytes",
        data: "Bytes",
        salt: "Bytes"
      },
      InstantiateRequestV2: {
        _fallback: "InstantiateRequestV1",
        origin: "AccountId",
        value: "Balance",
        gasLimit: "Gas",
        storageDepositLimit: "Option<Balance>",
        code: "Bytes",
        data: "Bytes",
        salt: "Bytes"
      },
      InstantiateRequest: {
        _fallback: "InstantiateRequestV2",
        origin: "AccountId",
        value: "Balance",
        gasLimit: "Gas",
        storageDepositLimit: "Option<Balance>",
        code: "CodeSource",
        data: "Bytes",
        salt: "Bytes"
      },
      ContractInstantiateResultTo267: "Result<InstantiateReturnValueTo267, Null>",
      ContractInstantiateResultTo299: "Result<InstantiateReturnValueOk, Null>",
      ContractInstantiateResult: {
        gasConsumed: "WeightV2",
        gasRequired: "WeightV2",
        storageDeposit: "StorageDeposit",
        debugMessage: "Text",
        result: "InstantiateReturnValue"
      },
      ContractInstantiateResultU64: {
        _fallback: "ContractInstantiateResultTo299",
        gasConsumed: "u64",
        gasRequired: "u64",
        storageDeposit: "StorageDeposit",
        debugMessage: "Text",
        result: "InstantiateReturnValue"
      },
      InstantiateReturnValueTo267: {
        result: "ExecReturnValue",
        accountId: "AccountId",
        rentProjection: "Option<RentProjection>"
      },
      InstantiateReturnValueOk: {
        result: "ExecReturnValue",
        accountId: "AccountId"
      },
      InstantiateReturnValue: "Result<InstantiateReturnValueOk, DispatchError>",
      InstructionWeights: {
        i64const: "u32",
        i64load: "u32",
        i64store: "u32",
        select: "u32",
        rIf: "u32",
        br: "u32",
        brIf: "u32",
        brIable: "u32",
        brIablePerEntry: "u32",
        call: "u32",
        callIndirect: "u32",
        callIndirectPerParam: "u32",
        localGet: "u32",
        localSet: "u32",
        local_tee: "u32",
        globalGet: "u32",
        globalSet: "u32",
        memoryCurrent: "u32",
        memoryGrow: "u32",
        i64clz: "u32",
        i64ctz: "u32",
        i64popcnt: "u32",
        i64eqz: "u32",
        i64extendsi32: "u32",
        i64extendui32: "u32",
        i32wrapi64: "u32",
        i64eq: "u32",
        i64ne: "u32",
        i64lts: "u32",
        i64ltu: "u32",
        i64gts: "u32",
        i64gtu: "u32",
        i64les: "u32",
        i64leu: "u32",
        i64ges: "u32",
        i64geu: "u32",
        i64add: "u32",
        i64sub: "u32",
        i64mul: "u32",
        i64divs: "u32",
        i64divu: "u32",
        i64rems: "u32",
        i64remu: "u32",
        i64and: "u32",
        i64or: "u32",
        i64xor: "u32",
        i64shl: "u32",
        i64shrs: "u32",
        i64shru: "u32",
        i64rotl: "u32",
        i64rotr: "u32"
      },
      LimitsTo264: {
        eventTopics: "u32",
        stackHeight: "u32",
        globals: "u32",
        parameters: "u32",
        memoryPages: "u32",
        tableSize: "u32",
        brTableSize: "u32",
        subjectLen: "u32",
        codeSize: "u32"
      },
      Limits: {
        eventTopics: "u32",
        stackHeight: "u32",
        globals: "u32",
        parameters: "u32",
        memoryPages: "u32",
        tableSize: "u32",
        brTableSize: "u32",
        subjectLen: "u32"
      },
      PrefabWasmModule: {
        scheduleVersion: "Compact<u32>",
        initial: "Compact<u32>",
        maximum: "Compact<u32>",
        refcount: "Compact<u64>",
        _reserved: "Option<Null>",
        code: "Bytes",
        originalCodeLen: "u32"
      },
      RentProjection: {
        _enum: {
          EvictionAt: "BlockNumber",
          NoEviction: "Null"
        }
      },
      ScheduleTo212: {
        version: "u32",
        putCodePerByteCost: "Gas",
        growMemCost: "Gas",
        regularOpCost: "Gas",
        returnDataPerByteCost: "Gas",
        eventDataPerByteCost: "Gas",
        eventPerTopicCost: "Gas",
        eventBaseCost: "Gas",
        sandboxDataReadCost: "Gas",
        sandboxDataWriteCost: "Gas",
        maxEventTopics: "u32",
        maxStackHeight: "u32",
        maxMemoryPages: "u32",
        enablePrintln: "bool",
        maxSubjectLen: "u32"
      },
      ScheduleTo258: {
        version: "u32",
        putCodePerByteCost: "Gas",
        growMemCost: "Gas",
        regularOpCost: "Gas",
        returnDataPerByteCost: "Gas",
        eventDataPerByteCost: "Gas",
        eventPerTopicCost: "Gas",
        eventBaseCost: "Gas",
        sandboxDataReadCost: "Gas",
        sandboxDataWriteCost: "Gas",
        transferCost: "Gas",
        maxEventTopics: "u32",
        maxStackHeight: "u32",
        maxMemoryPages: "u32",
        enablePrintln: "bool",
        maxSubjectLen: "u32"
      },
      ScheduleTo264: {
        version: "u32",
        enablePrintln: "bool",
        limits: "LimitsTo264",
        instructionWeights: "InstructionWeights",
        hostFnWeights: "HostFnWeightsTo264"
      },
      Schedule: {
        version: "u32",
        enablePrintln: "bool",
        limits: "Limits",
        instructionWeights: "InstructionWeights",
        hostFnWeights: "HostFnWeights"
      },
      SeedOf: "Hash",
      StorageDeposit: {
        _enum: {
          Refund: "Balance",
          Charge: "Balance"
        }
      },
      TombstoneContractInfo: "Hash",
      TrieId: "Bytes"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/democracy/definitions.js
  var AllConvictions = [
    "None",
    "Locked1x",
    "Locked2x",
    "Locked3x",
    "Locked4x",
    "Locked5x",
    "Locked6x"
  ];
  var definitions_default15 = {
    rpc: {},
    types: {
      AccountVote: {
        _enum: {
          Standard: "AccountVoteStandard",
          Split: "AccountVoteSplit"
        }
      },
      AccountVoteSplit: {
        aye: "Balance",
        nay: "Balance"
      },
      AccountVoteStandard: {
        vote: "Vote",
        balance: "Balance"
      },
      Conviction: {
        _enum: AllConvictions
      },
      Delegations: {
        votes: "Balance",
        capital: "Balance"
      },
      PreimageStatus: {
        _enum: {
          Missing: "BlockNumber",
          Available: "PreimageStatusAvailable"
        }
      },
      PreimageStatusAvailable: {
        data: "Bytes",
        provider: "AccountId",
        deposit: "Balance",
        since: "BlockNumber",
        expiry: "Option<BlockNumber>"
      },
      PriorLock: "(BlockNumber, Balance)",
      PropIndex: "u32",
      Proposal: "Call",
      ProxyState: {
        _enum: {
          Open: "AccountId",
          Active: "AccountId"
        }
      },
      ReferendumIndex: "u32",
      ReferendumInfoTo239: {
        end: "BlockNumber",
        proposalHash: "Hash",
        threshold: "VoteThreshold",
        delay: "BlockNumber"
      },
      ReferendumInfo: {
        _enum: {
          Ongoing: "ReferendumStatus",
          Finished: "ReferendumInfoFinished"
        }
      },
      ReferendumInfoFinished: {
        approved: "bool",
        end: "BlockNumber"
      },
      ReferendumStatus: {
        end: "BlockNumber",
        proposalHash: "Hash",
        threshold: "VoteThreshold",
        delay: "BlockNumber",
        tally: "Tally"
      },
      Tally: {
        ayes: "Balance",
        nays: "Balance",
        turnout: "Balance"
      },
      Voting: {
        _enum: {
          Direct: "VotingDirect",
          Delegating: "VotingDelegating"
        }
      },
      VotingDirect: {
        votes: "Vec<VotingDirectVote>",
        delegations: "Delegations",
        prior: "PriorLock"
      },
      VotingDirectVote: "(ReferendumIndex, AccountVote)",
      VotingDelegating: {
        balance: "Balance",
        target: "AccountId",
        conviction: "Conviction",
        delegations: "Delegations",
        prior: "PriorLock"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/dev/rpc.js
  var rpc4 = {
    getBlockStats: {
      description: "Reexecute the specified `block_hash` and gather statistics while doing so",
      isUnsafe: true,
      params: [
        {
          isHistoric: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Option<BlockStats>"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/dev/definitions.js
  var definitions_default16 = {
    rpc: rpc4,
    types: {
      BlockStats: {
        witnessLen: "u64",
        witnessCompactLen: "u64",
        blockLen: "u64",
        blockNumExtrinsics: "u64"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/discovery/runtime.js
  var runtime10 = {
    AuthorityDiscoveryApi: [
      {
        methods: {
          authorities: {
            description: "Retrieve authority identifiers of the current and next authority set.",
            params: [],
            type: "Vec<AuthorityId>"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/discovery/definitions.js
  var definitions_default17 = {
    rpc: {},
    runtime: runtime10,
    types: {}
  };

  // ../../node_modules/@polkadot/types/interfaces/elections/definitions.js
  var definitions_default18 = {
    rpc: {},
    types: {
      ApprovalFlag: "u32",
      DefunctVoter: {
        who: "AccountId",
        voteCount: "Compact<u32>",
        candidateCount: "Compact<u32>"
      },
      Renouncing: {
        _enum: {
          Member: "Null",
          RunnerUp: "Null",
          Candidate: "Compact<u32>"
        }
      },
      SetIndex: "u32",
      Vote: "GenericVote",
      VoteIndex: "u32",
      VoterInfo: {
        lastActive: "VoteIndex",
        lastWin: "VoteIndex",
        pot: "Balance",
        stake: "Balance"
      },
      VoteThreshold: {
        _enum: [
          "Super Majority Approve",
          "Super Majority Against",
          "Simple Majority"
        ]
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/engine/rpc.js
  var rpc5 = {
    createBlock: {
      description: "Instructs the manual-seal authorship task to create a new block",
      params: [
        {
          name: "createEmpty",
          type: "bool"
        },
        {
          name: "finalize",
          type: "bool"
        },
        {
          isOptional: true,
          name: "parentHash",
          type: "BlockHash"
        }
      ],
      type: "CreatedBlock"
    },
    finalizeBlock: {
      description: "Instructs the manual-seal authorship task to finalize a block",
      params: [
        {
          name: "hash",
          type: "BlockHash"
        },
        {
          isOptional: true,
          name: "justification",
          type: "Justification"
        }
      ],
      type: "bool"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/engine/definitions.js
  var definitions_default19 = {
    rpc: rpc5,
    types: {
      CreatedBlock: {
        _alias: {
          blockHash: "hash"
        },
        blockHash: "BlockHash",
        aux: "ImportedAux"
      },
      ImportedAux: {
        headerOnly: "bool",
        clearJustificationRequests: "bool",
        needsJustification: "bool",
        badJustification: "bool",
        needsFinalityProof: "bool",
        isNewBest: "bool"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/evm/definitions.js
  var definitions_default20 = {
    rpc: {},
    types: {
      EvmAccount: {
        nonce: "u256",
        balance: "u256"
      },
      EvmCallInfo: {
        exitReason: "ExitReason",
        value: "Bytes",
        usedGas: "U256",
        logs: "Vec<EvmLog>"
      },
      EvmCreateInfo: {
        exitReason: "ExitReason",
        value: "H160",
        usedGas: "U256",
        logs: "Vec<EvmLog>"
      },
      EvmLog: {
        address: "H160",
        topics: "Vec<H256>",
        data: "Bytes"
      },
      EvmVicinity: {
        gasPrice: "u256",
        origin: "H160"
      },
      ExitError: {
        _enum: {
          StackUnderflow: "Null",
          StackOverflow: "Null",
          InvalidJump: "Null",
          InvalidRange: "Null",
          DesignatedInvalid: "Null",
          CallTooDeep: "Null",
          CreateCollision: "Null",
          CreateContractLimit: "Null",
          OutOfOffset: "Null",
          OutOfGas: "Null",
          OutOfFund: "Null",
          PCUnderflow: "Null",
          CreateEmpty: "Null",
          Other: "Text"
        }
      },
      ExitFatal: {
        _enum: {
          NotSupported: "Null",
          UnhandledInterrupt: "Null",
          CallErrorAsFatal: "ExitError",
          Other: "Text"
        }
      },
      ExitReason: {
        _enum: {
          Succeed: "ExitSucceed",
          Error: "ExitError",
          Revert: "ExitRevert",
          Fatal: "ExitFatal"
        }
      },
      ExitRevert: {
        _enum: ["Reverted"]
      },
      ExitSucceed: {
        _enum: ["Stopped", "Returned", "Suicided"]
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/extrinsics/definitions.js
  var definitions_default21 = {
    rpc: {},
    types: {
      Extrinsic: "GenericExtrinsic",
      ExtrinsicEra: "GenericExtrinsicEra",
      ExtrinsicPayload: "GenericExtrinsicPayload",
      ExtrinsicSignature: "MultiSignature",
      ExtrinsicV4: "GenericExtrinsicV4",
      ExtrinsicPayloadV4: "GenericExtrinsicPayloadV4",
      ExtrinsicSignatureV4: "GenericExtrinsicSignatureV4",
      ExtrinsicUnknown: "GenericExtrinsicUnknown",
      ExtrinsicPayloadUnknown: "GenericExtrinsicPayloadUnknown",
      Era: "ExtrinsicEra",
      ImmortalEra: "GenericImmortalEra",
      MortalEra: "GenericMortalEra",
      AnySignature: "H512",
      MultiSignature: {
        _enum: {
          Ed25519: "Ed25519Signature",
          Sr25519: "Sr25519Signature",
          Ecdsa: "EcdsaSignature"
        }
      },
      Signature: "H512",
      SignerPayload: "GenericSignerPayload",
      EcdsaSignature: "[u8; 65]",
      Ed25519Signature: "H512",
      Sr25519Signature: "H512"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/fungibles/runtime.js
  var runtime11 = {
    FungiblesApi: [
      {
        methods: {
          query_account_balances: {
            description: "Returns the list of all `MultiAsset` that an `AccountId` has",
            params: [
              {
                name: "account",
                type: "AccountId"
              }
            ],
            type: "Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/fungibles/definitions.js
  var definitions_default22 = {
    rpc: {},
    runtime: runtime11,
    types: {
      FungiblesAccessError: {
        _enum: ["AssetIdConversionFailed", "AmountToBalanceConversionFailed"]
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/genericAsset/definitions.js
  var definitions_default23 = {
    rpc: {},
    types: {
      AssetOptions: {
        initalIssuance: "Compact<Balance>",
        permissions: "PermissionLatest"
      },
      Owner: {
        _enum: {
          None: "Null",
          Address: "AccountId"
        }
      },
      PermissionsV1: {
        update: "Owner",
        mint: "Owner",
        burn: "Owner"
      },
      PermissionVersions: {
        _enum: {
          V1: "PermissionsV1"
        }
      },
      PermissionLatest: "PermissionsV1"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/gilt/definitions.js
  var definitions_default24 = {
    rpc: {},
    types: {
      ActiveGilt: {
        proportion: "Perquintill",
        amount: "Balance",
        who: "AccountId",
        expiry: "BlockNumber"
      },
      ActiveGiltsTotal: {
        frozen: "Balance",
        proportion: "Perquintill",
        index: "ActiveIndex",
        target: "Perquintill"
      },
      ActiveIndex: "u32",
      GiltBid: {
        amount: "Balance",
        who: "AccountId"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/grandpa/rpc.js
  var rpc6 = {
    proveFinality: {
      description: "Prove finality for the given block number, returning the Justification for the last block in the set.",
      params: [
        {
          name: "blockNumber",
          type: "BlockNumber"
        }
      ],
      type: "Option<EncodedFinalityProofs>"
    },
    roundState: {
      description: "Returns the state of the current best round state as well as the ongoing background rounds",
      params: [],
      type: "ReportedRoundStates"
    },
    subscribeJustifications: {
      description: "Subscribes to grandpa justifications",
      params: [],
      pubsub: [
        "justifications",
        "subscribeJustifications",
        "unsubscribeJustifications"
      ],
      type: "JustificationNotification"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/grandpa/runtime.js
  var GRANDPA_V2_V3 = {
    generate_key_ownership_proof: {
      description: "Generates a proof of key ownership for the given authority in the given set.",
      params: [
        {
          name: "setId",
          type: "SetId"
        },
        {
          name: "authorityId",
          type: "AuthorityId"
        }
      ],
      type: "Option<OpaqueKeyOwnershipProof>"
    },
    grandpa_authorities: {
      description: "Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.",
      params: [],
      type: "AuthorityList"
    },
    submit_report_equivocation_unsigned_extrinsic: {
      description: "Submits an unsigned extrinsic to report an equivocation.",
      params: [
        {
          name: "equivocationProof",
          type: "GrandpaEquivocationProof"
        },
        {
          name: "keyOwnerProof",
          type: "OpaqueKeyOwnershipProof"
        }
      ],
      type: "Option<Null>"
    }
  };
  var runtime12 = {
    GrandpaApi: [
      {
        methods: {
          current_set_id: {
            description: "Get current GRANDPA authority set id.",
            params: [],
            type: "SetId"
          },
          ...GRANDPA_V2_V3
        },
        version: 3
      },
      {
        methods: GRANDPA_V2_V3,
        version: 2
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/grandpa/definitions.js
  var definitions_default25 = {
    rpc: rpc6,
    runtime: runtime12,
    types: {
      AuthorityIndex: "u64",
      AuthorityList: "Vec<NextAuthority>",
      AuthoritySet: {
        currentAuthorities: "AuthorityList",
        setId: "u64",
        pendingStandardChanges: "ForkTreePendingChange",
        pendingForcedChanges: "Vec<PendingChange>",
        authoritySetChanges: "AuthoritySetChanges"
      },
      ForkTreePendingChange: {
        roots: "Vec<ForkTreePendingChangeNode>",
        bestFinalizedNumber: "Option<BlockNumber>"
      },
      ForkTreePendingChangeNode: {
        hash: "BlockHash",
        number: "BlockNumber",
        data: "PendingChange",
        children: "Vec<ForkTreePendingChangeNode>"
      },
      AuthoritySetChange: "(U64, BlockNumber)",
      AuthoritySetChanges: "Vec<AuthoritySetChange>",
      AuthorityWeight: "u64",
      DelayKind: {
        _enum: {
          Finalized: "Null",
          Best: "DelayKindBest"
        }
      },
      DelayKindBest: {
        medianLastFinalized: "BlockNumber"
      },
      EncodedFinalityProofs: "Bytes",
      GrandpaEquivocation: {
        _enum: {
          Prevote: "GrandpaEquivocationValue",
          Precommit: "GrandpaEquivocationValue"
        }
      },
      GrandpaEquivocationProof: {
        setId: "SetId",
        equivocation: "GrandpaEquivocation"
      },
      GrandpaEquivocationValue: {
        roundNumber: "u64",
        identity: "AuthorityId",
        first: "(GrandpaPrevote, AuthoritySignature)",
        second: "(GrandpaPrevote, AuthoritySignature)"
      },
      GrandpaPrevote: {
        targetHash: "Hash",
        targetNumber: "BlockNumber"
      },
      GrandpaCommit: {
        targetHash: "BlockHash",
        targetNumber: "BlockNumber",
        precommits: "Vec<GrandpaSignedPrecommit>"
      },
      GrandpaPrecommit: {
        targetHash: "BlockHash",
        targetNumber: "BlockNumber"
      },
      GrandpaSignedPrecommit: {
        precommit: "GrandpaPrecommit",
        signature: "AuthoritySignature",
        id: "AuthorityId"
      },
      GrandpaJustification: {
        round: "u64",
        commit: "GrandpaCommit",
        votesAncestries: "Vec<Header>"
      },
      JustificationNotification: "Bytes",
      KeyOwnerProof: "MembershipProof",
      NextAuthority: "(AuthorityId, AuthorityWeight)",
      PendingChange: {
        nextAuthorities: "AuthorityList",
        delay: "BlockNumber",
        canonHeight: "BlockNumber",
        canonHash: "BlockHash",
        delayKind: "DelayKind"
      },
      PendingPause: {
        scheduledAt: "BlockNumber",
        delay: "BlockNumber"
      },
      PendingResume: {
        scheduledAt: "BlockNumber",
        delay: "BlockNumber"
      },
      Precommits: {
        currentWeight: "u32",
        missing: "BTreeSet<AuthorityId>"
      },
      Prevotes: {
        currentWeight: "u32",
        missing: "BTreeSet<AuthorityId>"
      },
      ReportedRoundStates: {
        setId: "u32",
        best: "RoundState",
        background: "Vec<RoundState>"
      },
      RoundState: {
        round: "u32",
        totalWeight: "u32",
        thresholdWeight: "u32",
        prevotes: "Prevotes",
        precommits: "Precommits"
      },
      SetId: "u64",
      StoredPendingChange: {
        scheduledAt: "BlockNumber",
        delay: "BlockNumber",
        nextAuthorities: "AuthorityList"
      },
      StoredState: {
        _enum: {
          Live: "Null",
          PendingPause: "PendingPause",
          Paused: "Null",
          PendingResume: "PendingResume"
        }
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/identity/definitions.js
  var definitions_default26 = {
    rpc: {},
    types: {
      IdentityFields: {
        _set: {
          _bitLength: 64,
          Display: 1,
          Legal: 2,
          Web: 4,
          Riot: 8,
          Email: 16,
          PgpFingerprint: 32,
          Image: 64,
          Twitter: 128
        }
      },
      IdentityInfoAdditional: "(Data, Data)",
      IdentityInfoTo198: {
        additional: "Vec<IdentityInfoAdditional>",
        display: "Data",
        legal: "Data",
        web: "Data",
        riot: "Data",
        email: "Data",
        pgpFingerprint: "Option<H160>",
        image: "Data"
      },
      IdentityInfo: {
        _fallback: "IdentityInfoTo198",
        additional: "Vec<IdentityInfoAdditional>",
        display: "Data",
        legal: "Data",
        web: "Data",
        riot: "Data",
        email: "Data",
        pgpFingerprint: "Option<H160>",
        image: "Data",
        twitter: "Data"
      },
      IdentityJudgement: {
        _enum: {
          Unknown: "Null",
          FeePaid: "Balance",
          Reasonable: "Null",
          KnownGood: "Null",
          OutOfDate: "Null",
          LowQuality: "Null",
          Erroneous: "Null"
        }
      },
      RegistrationJudgement: "(RegistrarIndex, IdentityJudgement)",
      RegistrationTo198: {
        judgements: "Vec<RegistrationJudgement>",
        deposit: "Balance",
        info: "IdentityInfoTo198"
      },
      Registration: {
        _fallback: "RegistrationTo198",
        judgements: "Vec<RegistrationJudgement>",
        deposit: "Balance",
        info: "IdentityInfo"
      },
      RegistrarIndex: "u32",
      RegistrarInfo: {
        account: "AccountId",
        fee: "Balance",
        fields: "IdentityFields"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/imOnline/definitions.js
  var definitions_default27 = {
    rpc: {},
    types: {
      AuthIndex: "u32",
      AuthoritySignature: "Signature",
      Heartbeat: {
        blockNumber: "BlockNumber",
        networkState: "OpaqueNetworkState",
        sessionIndex: "SessionIndex",
        authorityIndex: "AuthIndex",
        validatorsLen: "u32"
      },
      HeartbeatTo244: {
        blockNumber: "BlockNumber",
        networkState: "OpaqueNetworkState",
        sessionIndex: "SessionIndex",
        authorityIndex: "AuthIndex"
      },
      OpaqueMultiaddr: "Opaque<Bytes>",
      OpaquePeerId: "Opaque<Bytes>",
      OpaqueNetworkState: {
        peerId: "OpaquePeerId",
        externalAddresses: "Vec<OpaqueMultiaddr>"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/lottery/definitions.js
  var definitions_default28 = {
    rpc: {},
    types: {
      CallIndex: "(u8, u8)",
      LotteryConfig: {
        price: "Balance",
        start: "BlockNumber",
        length: "BlockNumber",
        delay: "BlockNumber",
        repeat: "bool"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/mmr/rpc.js
  var rpc7 = {
    generateProof: {
      description: "Generate MMR proof for the given block numbers.",
      params: [
        {
          name: "blockNumbers",
          type: "Vec<u64>"
        },
        {
          isOptional: true,
          name: "bestKnownBlockNumber",
          type: "u64"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "MmrLeafBatchProof"
    },
    root: {
      description: "Get the MMR root hash for the current best block.",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "MmrHash"
    },
    verifyProof: {
      description: "Verify an MMR proof",
      params: [
        {
          name: "proof",
          type: "MmrLeafBatchProof"
        }
      ],
      type: "bool"
    },
    verifyProofStateless: {
      description: "Verify an MMR proof statelessly given an mmr_root",
      params: [
        {
          name: "root",
          type: "MmrHash"
        },
        {
          name: "proof",
          type: "MmrLeafBatchProof"
        }
      ],
      type: "bool"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/mmr/runtime.js
  var MMR_V2 = {
    generate_proof: {
      description: "Generate MMR proof for the given block numbers.",
      params: [
        {
          name: "blockNumbers",
          type: "Vec<BlockNumber>"
        },
        {
          name: "bestKnownBlockNumber",
          type: "Option<BlockNumber>"
        }
      ],
      type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
    },
    root: {
      description: "Return the on-chain MMR root hash.",
      params: [],
      type: "Result<Hash, MmrError>"
    },
    verify_proof: {
      description: "Verify MMR proof against on-chain MMR.",
      params: [
        {
          name: "leaves",
          type: "Vec<MmrEncodableOpaqueLeaf>"
        },
        {
          name: "proof",
          type: "MmrBatchProof"
        }
      ],
      type: "Result<(), MmrError>"
    },
    verify_proof_stateless: {
      description: "Verify MMR proof against given root hash.",
      params: [
        {
          name: "root",
          type: "Hash"
        },
        {
          name: "leaves",
          type: "Vec<MmrEncodableOpaqueLeaf>"
        },
        {
          name: "proof",
          type: "MmrBatchProof"
        }
      ],
      type: "Result<(), MmrError>"
    }
  };
  var MMR_V1 = {
    generate_batch_proof: {
      description: "Generate MMR proof for a series of leaves under given indices.",
      params: [
        {
          name: "leafIndices",
          type: "Vec<MmrLeafIndex>"
        }
      ],
      type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
    },
    generate_proof: {
      description: "Generate MMR proof for a leaf under given index.",
      params: [
        {
          name: "leafIndex",
          type: "MmrLeafIndex"
        }
      ],
      type: "Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>"
    },
    mmr_root: {
      description: "Return the on-chain MMR root hash.",
      params: [],
      type: "Result<Hash, MmrError>"
    },
    verify_batch_proof: {
      description: "Verify MMR proof against on-chain MMR for a batch of leaves.",
      params: [
        {
          name: "leaves",
          type: "Vec<MmrEncodableOpaqueLeaf>"
        },
        {
          name: "proof",
          type: "MmrBatchProof"
        }
      ],
      type: "Result<(), MmrError>"
    },
    verify_batch_proof_stateless: {
      description: "Verify MMR proof against given root hash or a batch of leaves.",
      params: [
        {
          name: "root",
          type: "Hash"
        },
        {
          name: "leaves",
          type: "Vec<MmrEncodableOpaqueLeaf>"
        },
        {
          name: "proof",
          type: "MmrBatchProof"
        }
      ],
      type: "Result<(), MmrError>"
    },
    verify_proof: {
      description: "Verify MMR proof against on-chain MMR.",
      params: [
        {
          name: "leaf",
          type: "MmrEncodableOpaqueLeaf"
        },
        {
          name: "proof",
          type: "MmrProof"
        }
      ],
      type: "Result<(), MmrError>"
    },
    verify_proof_stateless: {
      description: "Verify MMR proof against given root hash.",
      params: [
        {
          name: "root",
          type: "Hash"
        },
        {
          name: "leaf",
          type: "MmrEncodableOpaqueLeaf"
        },
        {
          name: "proof",
          type: "MmrProof"
        }
      ],
      type: "Result<(), MmrError>"
    }
  };
  var runtime13 = {
    MmrApi: [
      {
        methods: MMR_V2,
        version: 2
      },
      {
        methods: MMR_V1,
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/mmr/definitions.js
  var definitions_default29 = {
    rpc: rpc7,
    runtime: runtime13,
    types: {
      MmrBatchProof: {
        leafIndices: "Vec<MmrLeafIndex>",
        leafCount: "MmrNodeIndex",
        items: "Vec<Hash>"
      },
      MmrEncodableOpaqueLeaf: "Bytes",
      MmrError: {
        _enum: ["Push", "GetRoot", "Commit", "GenerateProof", "Verify", "LeafNotFound", " PalletNotIncluded", "InvalidLeafIndex"]
      },
      MmrHash: "Hash",
      MmrLeafBatchProof: {
        blockHash: "BlockHash",
        leaves: "Bytes",
        proof: "Bytes"
      },
      MmrLeafIndex: "u64",
      MmrLeafProof: {
        blockHash: "BlockHash",
        leaf: "Bytes",
        proof: "Bytes"
      },
      MmrNodeIndex: "u64",
      MmrProof: {
        leafIndex: "MmrLeafIndex",
        leafCount: "MmrNodeIndex",
        items: "Vec<Hash>"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/nfts/runtime.js
  var runtime14 = {
    NftsApi: [
      {
        methods: {
          attribute: {
            description: "An attribute",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "item",
                type: "NftItemId"
              },
              {
                name: "key",
                type: "Bytes"
              }
            ],
            type: "Option<Bytes>"
          },
          collection_attribute: {
            description: "A collection attribute",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "key",
                type: "Bytes"
              }
            ],
            type: "Option<Bytes>"
          },
          collection_owner: {
            description: "A collection owner",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              }
            ],
            type: "Option<AccountId>"
          },
          custom_attribute: {
            description: "A custom attribute",
            params: [
              {
                name: "account",
                type: "AccountId"
              },
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "item",
                type: "NftItemId"
              },
              {
                name: "key",
                type: "Bytes"
              }
            ],
            type: "Option<Bytes>"
          },
          owner: {
            description: "Collection owner",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "item",
                type: "NftItemId"
              }
            ],
            type: "Option<AccountId>"
          },
          system_attribute: {
            description: "System attribute",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "item",
                type: "NftItemId"
              },
              {
                name: "key",
                type: "Bytes"
              }
            ],
            type: "Option<Bytes>"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/nfts/definitions.js
  var definitions_default30 = {
    rpc: {},
    runtime: runtime14,
    types: {
      NftCollectionId: "u32",
      NftItemId: "u32"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/nompools/runtime.js
  var runtime15 = {
    NominationPoolsApi: [
      {
        methods: {
          balance_to_points: {
            description: "Returns the equivalent points of `new_funds` for a given pool.",
            params: [
              {
                name: "poolId",
                type: "NpPoolId"
              },
              {
                name: "newFunds",
                type: "Balance"
              }
            ],
            type: "Balance"
          },
          pending_rewards: {
            description: "Returns the pending rewards for the given member.",
            params: [
              {
                name: "member",
                type: "AccountId"
              }
            ],
            type: "Balance"
          },
          points_to_balance: {
            description: "Returns the equivalent balance of `points` for a given pool.",
            params: [
              {
                name: "poolId",
                type: "NpPoolId"
              },
              {
                name: "points",
                type: "Balance"
              }
            ],
            type: "Balance"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/nompools/definitions.js
  var definitions_default31 = {
    rpc: {},
    runtime: runtime15,
    types: {
      NpApiError: {
        _enum: ["MemberNotFound", "OverflowInPendingRewards"]
      },
      NpPoolId: "u32"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/offences/definitions.js
  var definitions_default32 = {
    rpc: {},
    types: {
      DeferredOffenceOf: "(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)",
      Kind: "[u8; 16]",
      OffenceDetails: {
        offender: "Offender",
        reporters: "Vec<Reporter>"
      },
      Offender: "IdentificationTuple",
      OpaqueTimeSlot: "Bytes",
      ReportIdOf: "Hash",
      Reporter: "AccountId"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/pow/runtime.js
  var runtime16 = {
    DifficultyApi: [
      {
        methods: {
          difficulty: {
            description: "Return the target difficulty of the next block.",
            params: [],
            type: "Raw"
          }
        },
        version: 1
      }
    ],
    TimestampApi: [
      {
        methods: {
          timestamp: {
            description: "API necessary for timestamp-based difficulty adjustment algorithms.",
            params: [],
            type: "Moment"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/pow/definitions.js
  var definitions_default33 = {
    rpc: {},
    runtime: runtime16,
    types: {}
  };

  // ../../node_modules/@polkadot/types/interfaces/proxy/definitions.js
  var definitions_default34 = {
    rpc: {},
    types: {
      ProxyDefinition: {
        delegate: "AccountId",
        proxyType: "ProxyType",
        delay: "BlockNumber"
      },
      ProxyType: {
        _enum: ["Any", "NonTransfer", "Governance", "Staking"]
      },
      ProxyAnnouncement: {
        real: "AccountId",
        callHash: "Hash",
        height: "BlockNumber"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/recovery/definitions.js
  var definitions_default35 = {
    rpc: {},
    types: {
      ActiveRecovery: {
        created: "BlockNumber",
        deposit: "Balance",
        friends: "Vec<AccountId>"
      },
      RecoveryConfig: {
        delayPeriod: "BlockNumber",
        deposit: "Balance",
        friends: "Vec<AccountId>",
        threshold: "u16"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/scheduler/definitions.js
  var definitions_default36 = {
    rpc: {},
    types: {
      Period: "(BlockNumber, u32)",
      Priority: "u8",
      SchedulePeriod: "Period",
      SchedulePriority: "Priority",
      Scheduled: {
        maybeId: "Option<Bytes>",
        priority: "SchedulePriority",
        call: "Call",
        maybePeriodic: "Option<SchedulePeriod>",
        origin: "PalletsOrigin"
      },
      ScheduledTo254: {
        maybeId: "Option<Bytes>",
        priority: "SchedulePriority",
        call: "Call",
        maybePeriodic: "Option<SchedulePeriod>"
      },
      TaskAddress: "(BlockNumber, u32)"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/session/runtime.js
  var runtime17 = {
    SessionKeys: [
      {
        methods: {
          decode_session_keys: {
            description: "Decode the given public session keys.",
            params: [
              {
                name: "encoded",
                type: "Bytes"
              }
            ],
            type: "Option<Vec<(Bytes, KeyTypeId)>>"
          },
          generate_session_keys: {
            description: "Generate a set of session keys with optionally using the given seed.",
            params: [
              {
                name: "seed",
                type: "Option<Bytes>"
              }
            ],
            type: "Bytes"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/session/definitions.js
  var keyTypes = {
    BeefyKey: "[u8; 33]",
    Keys: "SessionKeys4",
    SessionKeys1: "(AccountId)",
    SessionKeys2: "(AccountId, AccountId)",
    SessionKeys3: "(AccountId, AccountId, AccountId)",
    SessionKeys4: "(AccountId, AccountId, AccountId, AccountId)",
    SessionKeys5: "(AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys6: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys6B: "(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys7: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys7B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys8: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys8B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys9: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys9B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys10: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys10B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)"
  };
  var definitions_default37 = {
    rpc: {},
    runtime: runtime17,
    types: {
      ...keyTypes,
      FullIdentification: "Exposure",
      IdentificationTuple: "(ValidatorId, FullIdentification)",
      MembershipProof: {
        session: "SessionIndex",
        trieNodes: "Vec<Bytes>",
        validatorCount: "ValidatorCount"
      },
      SessionIndex: "u32",
      ValidatorCount: "u32"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/society/definitions.js
  var definitions_default38 = {
    rpc: {},
    types: {
      Bid: {
        who: "AccountId",
        kind: "BidKind",
        value: "Balance"
      },
      BidKind: {
        _enum: {
          Deposit: "Balance",
          Vouch: "(AccountId, Balance)"
        }
      },
      SocietyJudgement: {
        _enum: ["Rebid", "Reject", "Approve"]
      },
      SocietyVote: {
        _enum: ["Skeptic", "Reject", "Approve"]
      },
      StrikeCount: "u32",
      VouchingStatus: {
        _enum: ["Vouching", "Banned"]
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/staking/runtime.js
  var runtime18 = {
    StakingApi: [
      {
        methods: {
          nominations_quota: {
            description: "Returns the nominations quota for a nominator with a given balance.",
            params: [
              {
                name: "balance",
                type: "Balance"
              }
            ],
            type: "u32"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/staking/definitions.js
  var deprecated = {
    Points: "u32",
    EraPoints: {
      total: "Points",
      individual: "Vec<Points>"
    }
  };
  var phragmen = {
    CompactAssignments: "CompactAssignmentsWith16",
    CompactAssignmentsWith16: {
      votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
      votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
      votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
      votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
      votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
      votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
      votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
      votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
      votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
      votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
      votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
      votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
      votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
      votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
      votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
      votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
    },
    CompactAssignmentsWith24: {
      votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
      votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
      votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
      votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
      votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
      votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
      votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
      votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
      votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
      votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
      votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
      votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
      votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
      votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
      votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
      votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>",
      votes17: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>",
      votes18: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>",
      votes19: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>",
      votes20: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>",
      votes21: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>",
      votes22: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>",
      votes23: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>",
      votes24: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"
    },
    CompactAssignmentsTo265: "CompactAssignmentsWith16",
    CompactAssignmentsTo257: {
      votes1: "Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>",
      votes2: "Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>",
      votes3: "Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>",
      votes4: "Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>",
      votes5: "Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>",
      votes6: "Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>",
      votes7: "Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>",
      votes8: "Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>",
      votes9: "Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>",
      votes10: "Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>",
      votes11: "Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>",
      votes12: "Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>",
      votes13: "Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>",
      votes14: "Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>",
      votes15: "Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>",
      votes16: "Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"
    },
    CompactScore: "(ValidatorIndex, OffchainAccuracy)",
    CompactScoreCompact: "(ValidatorIndexCompact, OffchainAccuracyCompact)",
    ElectionCompute: {
      _enum: ["OnChain", "Signed", "Unsigned"]
    },
    ElectionPhase: {
      _enum: {
        Off: null,
        Signed: null,
        Unsigned: "(bool, BlockNumber)",
        Emergency: null
      }
    },
    ElectionResult: {
      compute: "ElectionCompute",
      slotStake: "Balance",
      electedStashes: "Vec<AccountId>",
      exposures: "Vec<(AccountId, Exposure)>"
    },
    ElectionScore: "[u128; 3]",
    ElectionSize: {
      validators: "Compact<ValidatorIndex>",
      nominators: "Compact<NominatorIndex>"
    },
    ElectionStatus: {
      _enum: {
        Close: "Null",
        Open: "BlockNumber"
      }
    },
    ExtendedBalance: "u128",
    RawSolution: "RawSolutionWith16",
    RawSolutionWith16: {
      compact: "CompactAssignmentsWith16",
      score: "ElectionScore",
      round: "u32"
    },
    RawSolutionWith24: {
      compact: "CompactAssignmentsWith24",
      score: "ElectionScore",
      round: "u32"
    },
    RawSolutionTo265: "RawSolutionWith16",
    ReadySolution: {
      supports: "SolutionSupports",
      score: "ElectionScore",
      compute: "ElectionCompute"
    },
    RoundSnapshot: {
      voters: "Vec<(AccountId, VoteWeight, Vec<AccountId>)>",
      targets: "Vec<AccountId>"
    },
    SeatHolder: {
      who: "AccountId",
      stake: "Balance",
      deposit: "Balance"
    },
    SignedSubmission: {
      _fallback: "SignedSubmissionTo276",
      who: "AccountId",
      deposit: "Balance",
      solution: "RawSolution",
      reward: "Balance"
    },
    SignedSubmissionTo276: {
      who: "AccountId",
      deposit: "Balance",
      solution: "RawSolution"
    },
    SignedSubmissionOf: "SignedSubmission",
    SolutionOrSnapshotSize: {
      voters: "Compact<u32>",
      targets: "Compact<u32>"
    },
    SolutionSupport: {
      total: "ExtendedBalance",
      voters: "Vec<(AccountId, ExtendedBalance)>"
    },
    SolutionSupports: "Vec<(AccountId, SolutionSupport)>",
    Supports: "SolutionSupports",
    SubmissionIndicesOf: "BTreeMap<ElectionScore, u32>",
    Voter: {
      votes: "Vec<AccountId>",
      stake: "Balance",
      deposit: "Balance"
    },
    VoteWeight: "u64"
  };
  var definitions_default39 = {
    rpc: {},
    runtime: runtime18,
    types: {
      ...deprecated,
      ...phragmen,
      ActiveEraInfo: {
        index: "EraIndex",
        start: "Option<Moment>"
      },
      EraIndex: "u32",
      EraRewardPoints: {
        total: "RewardPoint",
        individual: "BTreeMap<AccountId, RewardPoint>"
      },
      EraRewards: {
        total: "u32",
        rewards: "Vec<u32>"
      },
      Exposure: {
        total: "Compact<Balance>",
        own: "Compact<Balance>",
        others: "Vec<IndividualExposure>"
      },
      Forcing: {
        _enum: [
          "NotForcing",
          "ForceNew",
          "ForceNone",
          "ForceAlways"
        ]
      },
      IndividualExposure: {
        who: "AccountId",
        value: "Compact<Balance>"
      },
      KeyType: "AccountId",
      MomentOf: "Moment",
      Nominations: {
        targets: "Vec<AccountId>",
        submittedIn: "EraIndex",
        suppressed: "bool"
      },
      NominatorIndex: "u32",
      NominatorIndexCompact: "Compact<NominatorIndex>",
      OffchainAccuracy: "PerU16",
      OffchainAccuracyCompact: "Compact<OffchainAccuracy>",
      PhragmenScore: "[u128; 3]",
      Points: "u32",
      RewardDestination: {
        _enum: {
          Staked: "Null",
          Stash: "Null",
          Controller: "Null",
          Account: "AccountId",
          None: "Null"
        }
      },
      RewardPoint: "u32",
      SlashJournalEntry: {
        who: "AccountId",
        amount: "Balance",
        ownSlash: "Balance"
      },
      SlashingSpansTo204: {
        spanIndex: "SpanIndex",
        lastStart: "EraIndex",
        prior: "Vec<EraIndex>"
      },
      SlashingSpans: {
        spanIndex: "SpanIndex",
        lastStart: "EraIndex",
        lastNonzeroSlash: "EraIndex",
        prior: "Vec<EraIndex>"
      },
      SpanIndex: "u32",
      SpanRecord: {
        slashed: "Balance",
        paidOut: "Balance"
      },
      StakingLedgerTo223: {
        stash: "AccountId",
        total: "Compact<Balance>",
        active: "Compact<Balance>",
        unlocking: "Vec<UnlockChunk>"
      },
      StakingLedgerTo240: {
        _fallback: "StakingLedgerTo223",
        stash: "AccountId",
        total: "Compact<Balance>",
        active: "Compact<Balance>",
        unlocking: "Vec<UnlockChunk>",
        lastReward: "Option<EraIndex>"
      },
      StakingLedger: {
        stash: "AccountId",
        total: "Compact<Balance>",
        active: "Compact<Balance>",
        unlocking: "Vec<UnlockChunk>",
        claimedRewards: "Vec<EraIndex>"
      },
      UnappliedSlashOther: "(AccountId, Balance)",
      UnappliedSlash: {
        validator: "AccountId",
        own: "Balance",
        others: "Vec<UnappliedSlashOther>",
        reporters: "Vec<AccountId>",
        payout: "Balance"
      },
      UnlockChunk: {
        value: "Compact<Balance>",
        era: "Compact<BlockNumber>"
      },
      ValidatorIndex: "u16",
      ValidatorIndexCompact: "Compact<ValidatorIndex>",
      ValidatorPrefs: "ValidatorPrefsWithBlocked",
      ValidatorPrefsWithCommission: {
        commission: "Compact<Perbill>"
      },
      ValidatorPrefsWithBlocked: {
        commission: "Compact<Perbill>",
        blocked: "bool"
      },
      ValidatorPrefsTo196: {
        validatorPayment: "Compact<Balance>"
      },
      ValidatorPrefsTo145: {
        unstakeThreshold: "Compact<u32>",
        validatorPayment: "Compact<Balance>"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/support/definitions.js
  var definitions_default40 = {
    rpc: {},
    types: {
      WeightToFeeCoefficient: {
        coeffInteger: "Balance",
        coeffFrac: "Perbill",
        negative: "bool",
        degree: "u8"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/syncstate/rpc.js
  var rpc8 = {
    genSyncSpec: {
      description: "Returns the json-serialized chainspec running the node, with a sync state.",
      endpoint: "sync_state_genSyncSpec",
      params: [
        {
          name: "raw",
          type: "bool"
        }
      ],
      type: "Json"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/syncstate/definitions.js
  var definitions_default41 = {
    rpc: rpc8,
    types: {}
  };

  // ../../node_modules/@polkadot/types/interfaces/system/rpc.js
  var rpc9 = {
    accountNextIndex: {
      alias: ["account_nextIndex"],
      description: "Retrieves the next accountIndex as available on the node",
      params: [
        {
          name: "accountId",
          type: "AccountId"
        }
      ],
      type: "Index"
    },
    addLogFilter: {
      description: "Adds the supplied directives to the current log filter",
      isUnsafe: true,
      params: [
        {
          name: "directives",
          type: "Text"
        }
      ],
      type: "Null"
    },
    addReservedPeer: {
      description: "Adds a reserved peer",
      isUnsafe: true,
      params: [
        {
          name: "peer",
          type: "Text"
        }
      ],
      type: "Text"
    },
    chain: {
      description: "Retrieves the chain",
      params: [],
      type: "Text"
    },
    chainType: {
      description: "Retrieves the chain type",
      params: [],
      type: "ChainType"
    },
    dryRun: {
      alias: ["system_dryRunAt"],
      description: "Dry run an extrinsic at a given block",
      isUnsafe: true,
      params: [
        {
          name: "extrinsic",
          type: "Bytes"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ApplyExtrinsicResult"
    },
    health: {
      description: "Return health status of the node",
      noErrorLog: true,
      params: [],
      type: "Health"
    },
    localListenAddresses: {
      description: "The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",
      params: [],
      type: "Vec<Text>"
    },
    localPeerId: {
      description: "Returns the base58-encoded PeerId of the node",
      params: [],
      type: "Text"
    },
    name: {
      description: "Retrieves the node name",
      params: [],
      type: "Text"
    },
    networkState: {
      alias: ["system_unstable_networkState"],
      description: "Returns current state of the network",
      isUnsafe: true,
      params: [],
      type: "NetworkState"
    },
    nodeRoles: {
      description: "Returns the roles the node is running as",
      params: [],
      type: "Vec<NodeRole>"
    },
    peers: {
      description: "Returns the currently connected peers",
      isUnsafe: true,
      params: [],
      type: "Vec<PeerInfo>"
    },
    properties: {
      description: "Get a custom set of properties as a JSON object, defined in the chain spec",
      params: [],
      type: "ChainProperties"
    },
    removeReservedPeer: {
      description: "Remove a reserved peer",
      isUnsafe: true,
      params: [
        {
          name: "peerId",
          type: "Text"
        }
      ],
      type: "Text"
    },
    reservedPeers: {
      description: "Returns the list of reserved peers",
      params: [],
      type: "Vec<Text>"
    },
    resetLogFilter: {
      description: "Resets the log filter to Substrate defaults",
      isUnsafe: true,
      params: [],
      type: "Null"
    },
    syncState: {
      description: "Returns the state of the syncing of the node",
      params: [],
      type: "SyncState"
    },
    version: {
      description: "Retrieves the version of the node",
      params: [],
      type: "Text"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/system/runtime.js
  var runtime19 = {
    AccountNonceApi: [
      {
        methods: {
          account_nonce: {
            description: "The API to query account nonce (aka transaction index)",
            params: [
              {
                name: "accountId",
                type: "AccountId"
              }
            ],
            type: "Index"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/system/definitions.js
  var definitions_default42 = {
    rpc: rpc9,
    runtime: runtime19,
    types: {
      AccountInfo: "AccountInfoWithTripleRefCount",
      AccountInfoWithRefCountU8: {
        nonce: "Index",
        refcount: "u8",
        data: "AccountData"
      },
      AccountInfoWithRefCount: {
        _fallback: "AccountInfoWithRefCountU8",
        nonce: "Index",
        refcount: "RefCount",
        data: "AccountData"
      },
      AccountInfoWithDualRefCount: {
        _fallback: "AccountInfoWithRefCount",
        nonce: "Index",
        consumers: "RefCount",
        providers: "RefCount",
        data: "AccountData"
      },
      AccountInfoWithProviders: "AccountInfoWithDualRefCount",
      AccountInfoWithTripleRefCount: {
        _fallback: "AccountInfoWithDualRefCount",
        nonce: "Index",
        consumers: "RefCount",
        providers: "RefCount",
        sufficients: "RefCount",
        data: "AccountData"
      },
      ApplyExtrinsicResult: "Result<DispatchOutcome, TransactionValidityError>",
      ApplyExtrinsicResultPre6: "Result<DispatchOutcomePre6, TransactionValidityError>",
      ArithmeticError: {
        _enum: [
          "Underflow",
          "Overflow",
          "DivisionByZero"
        ]
      },
      BlockLength: {
        max: "PerDispatchClassU32"
      },
      BlockWeights: {
        baseBlock: "Weight",
        maxBlock: "Weight",
        perClass: "PerDispatchClassWeightsPerClass"
      },
      ChainProperties: "GenericChainProperties",
      ChainType: {
        _enum: {
          Development: "Null",
          Local: "Null",
          Live: "Null",
          Custom: "Text"
        }
      },
      ConsumedWeight: "PerDispatchClassWeight",
      DigestOf: "Digest",
      DispatchClass: {
        _enum: ["Normal", "Operational", "Mandatory"]
      },
      DispatchError: {
        _enum: {
          Other: "Null",
          CannotLookup: "Null",
          BadOrigin: "Null",
          Module: "DispatchErrorModule",
          ConsumerRemaining: "Null",
          NoProviders: "Null",
          TooManyConsumers: "Null",
          Token: "TokenError",
          Arithmetic: "ArithmeticError",
          Transactional: "TransactionalError",
          Exhausted: "Null",
          Corruption: "Null",
          Unavailable: "Null"
        }
      },
      DispatchErrorPre6: {
        _enum: {
          Other: "Null",
          CannotLookup: "Null",
          BadOrigin: "Null",
          Module: "DispatchErrorModulePre6",
          ConsumerRemaining: "Null",
          NoProviders: "Null",
          TooManyConsumers: "Null",
          Token: "TokenError",
          Arithmetic: "ArithmeticError",
          Transactional: "TransactionalError"
        }
      },
      DispatchErrorPre6First: {
        _enum: {
          Other: "Null",
          CannotLookup: "Null",
          BadOrigin: "Null",
          Module: "DispatchErrorModulePre6",
          ConsumerRemaining: "Null",
          NoProviders: "Null",
          Token: "TokenError",
          Arithmetic: "ArithmeticError",
          Transactional: "TransactionalError"
        }
      },
      DispatchErrorModuleU8: {
        index: "u8",
        error: "u8"
      },
      DispatchErrorModuleU8a: {
        index: "u8",
        error: "[u8; 4]"
      },
      DispatchErrorModule: "DispatchErrorModuleU8a",
      DispatchErrorModulePre6: "DispatchErrorModuleU8",
      DispatchErrorTo198: {
        module: "Option<u8>",
        error: "u8"
      },
      DispatchInfo: {
        weight: "Weight",
        class: "DispatchClass",
        paysFee: "Pays"
      },
      DispatchInfoTo190: {
        weight: "Weight",
        class: "DispatchClass"
      },
      DispatchInfoTo244: {
        weight: "Weight",
        class: "DispatchClass",
        paysFee: "bool"
      },
      DispatchOutcome: "Result<(), DispatchError>",
      DispatchOutcomePre6: "Result<(), DispatchErrorPre6>",
      DispatchResult: "Result<(), DispatchError>",
      DispatchResultOf: "DispatchResult",
      DispatchResultTo198: "Result<(), Text>",
      Event: "GenericEvent",
      EventId: "[u8; 2]",
      EventIndex: "u32",
      EventRecord: {
        phase: "Phase",
        event: "Event",
        topics: "Vec<Hash>"
      },
      Health: {
        peers: "u64",
        isSyncing: "bool",
        shouldHavePeers: "bool"
      },
      InvalidTransaction: {
        _enum: {
          Call: "Null",
          Payment: "Null",
          Future: "Null",
          Stale: "Null",
          BadProof: "Null",
          AncientBirthBlock: "Null",
          ExhaustsResources: "Null",
          Custom: "u8",
          BadMandatory: "Null",
          MandatoryDispatch: "Null",
          BadSigner: "Null"
        }
      },
      Key: "Bytes",
      LastRuntimeUpgradeInfo: {
        specVersion: "Compact<u32>",
        specName: "Text"
      },
      NetworkState: {
        peerId: "Text",
        listenedAddresses: "Vec<Text>",
        externalAddresses: "Vec<Text>",
        connectedPeers: "HashMap<Text, Peer>",
        notConnectedPeers: "HashMap<Text, NotConnectedPeer>",
        averageDownloadPerSec: "u64",
        averageUploadPerSec: "u64",
        peerset: "NetworkStatePeerset"
      },
      NetworkStatePeerset: {
        messageQueue: "u64",
        nodes: "HashMap<Text, NetworkStatePeersetInfo>"
      },
      NetworkStatePeersetInfo: {
        connected: "bool",
        reputation: "i32"
      },
      NodeRole: {
        _enum: {
          Full: "Null",
          LightClient: "Null",
          Authority: "Null",
          UnknownRole: "u8"
        }
      },
      NotConnectedPeer: {
        knownAddresses: "Vec<Text>",
        latestPingTime: "Option<PeerPing>",
        versionString: "Option<Text>"
      },
      Peer: {
        enabled: "bool",
        endpoint: "PeerEndpoint",
        knownAddresses: "Vec<Text>",
        latestPingTime: "PeerPing",
        open: "bool",
        versionString: "Text"
      },
      PeerEndpoint: {
        listening: "PeerEndpointAddr"
      },
      PeerEndpointAddr: {
        _alias: {
          localAddr: "local_addr",
          sendBackAddr: "send_back_addr"
        },
        localAddr: "Text",
        sendBackAddr: "Text"
      },
      PeerPing: {
        nanos: "u64",
        secs: "u64"
      },
      PeerInfo: {
        peerId: "Text",
        roles: "Text",
        protocolVersion: "u32",
        bestHash: "Hash",
        bestNumber: "BlockNumber"
      },
      PerDispatchClassU32: {
        normal: "u32",
        operational: "u32",
        mandatory: "u32"
      },
      PerDispatchClassWeight: {
        normal: "Weight",
        operational: "Weight",
        mandatory: "Weight"
      },
      PerDispatchClassWeightsPerClass: {
        normal: "WeightPerClass",
        operational: "WeightPerClass",
        mandatory: "WeightPerClass"
      },
      Phase: {
        _enum: {
          ApplyExtrinsic: "u32",
          Finalization: "Null",
          Initialization: "Null"
        }
      },
      RawOrigin: {
        _enum: {
          Root: "Null",
          Signed: "AccountId",
          None: "Null"
        }
      },
      RefCount: "u32",
      RefCountTo259: "u8",
      SyncState: {
        startingBlock: "BlockNumber",
        currentBlock: "BlockNumber",
        highestBlock: "Option<BlockNumber>"
      },
      SystemOrigin: "RawOrigin",
      TokenError: {
        _enum: [
          "NoFunds",
          "WouldDie",
          "BelowMinimum",
          "CannotCreate",
          "UnknownAsset",
          "Frozen",
          "Unsupported",
          "Underflow",
          "Overflow"
        ]
      },
      TransactionValidityError: {
        _enum: {
          Invalid: "InvalidTransaction",
          Unknown: "UnknownTransaction"
        }
      },
      TransactionalError: {
        _enum: [
          "LimitReached",
          "NoLayer"
        ]
      },
      UnknownTransaction: {
        _enum: {
          CannotLookup: "Null",
          NoUnsignedValidator: "Null",
          Custom: "u8"
        }
      },
      WeightPerClass: {
        baseExtrinsic: "Weight",
        maxExtrinsic: "Option<Weight>",
        maxTotal: "Option<Weight>",
        reserved: "Option<Weight>"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/treasury/definitions.js
  var definitions_default43 = {
    rpc: {},
    types: {
      Bounty: {
        proposer: "AccountId",
        value: "Balance",
        fee: "Balance",
        curatorDeposit: "Balance",
        bond: "Balance",
        status: "BountyStatus"
      },
      BountyIndex: "u32",
      BountyStatus: {
        _enum: {
          Proposed: "Null",
          Approved: "Null",
          Funded: "Null",
          CuratorProposed: "BountyStatusCuratorProposed",
          Active: "BountyStatusActive",
          PendingPayout: "BountyStatusPendingPayout"
        }
      },
      BountyStatusActive: {
        curator: "AccountId",
        updateDue: "BlockNumber"
      },
      BountyStatusCuratorProposed: {
        curator: "AccountId"
      },
      BountyStatusPendingPayout: {
        curator: "AccountId",
        beneficiary: "AccountId",
        unlockAt: "BlockNumber"
      },
      OpenTip: {
        reason: "Hash",
        who: "AccountId",
        finder: "AccountId",
        deposit: "Balance",
        closes: "Option<BlockNumber>",
        tips: "Vec<OpenTipTip>",
        findersFee: "bool"
      },
      OpenTipTo225: {
        reason: "Hash",
        who: "AccountId",
        finder: "Option<OpenTipFinderTo225>",
        closes: "Option<BlockNumber>",
        tips: "Vec<OpenTipTip>"
      },
      OpenTipFinderTo225: "(AccountId, Balance)",
      OpenTipTip: "(AccountId, Balance)",
      TreasuryProposal: {
        proposer: "AccountId",
        value: "Balance",
        beneficiary: "AccountId",
        bond: "Balance"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/txpayment/definitions.js
  var definitions_default44 = {
    rpc: {},
    types: {
      Multiplier: "Fixed128"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/txqueue/runtime.js
  var runtime20 = {
    TaggedTransactionQueue: [
      {
        methods: {
          validate_transaction: {
            description: "Validate the transaction.",
            params: [
              {
                name: "source",
                type: "TransactionSource"
              },
              {
                name: "tx",
                type: "Extrinsic"
              },
              {
                name: "blockHash",
                type: "BlockHash"
              }
            ],
            type: "TransactionValidity"
          }
        },
        version: 3
      },
      {
        methods: {
          validate_transaction: {
            description: "Validate the transaction.",
            params: [
              {
                name: "source",
                type: "TransactionSource"
              },
              {
                name: "tx",
                type: "Extrinsic"
              }
            ],
            type: "TransactionValidity"
          }
        },
        version: 2
      },
      {
        methods: {
          validate_transaction: {
            description: "Validate the transaction.",
            params: [
              {
                name: "tx",
                type: "Extrinsic"
              }
            ],
            type: "TransactionValidity"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/txqueue/definitions.js
  var definitions_default45 = {
    rpc: {},
    runtime: runtime20,
    types: {
      TransactionSource: {
        _enum: ["InBlock", "Local", "External"]
      },
      TransactionValidity: "Result<ValidTransaction, TransactionValidityError>",
      ValidTransaction: {
        priority: "TransactionPriority",
        requires: "Vec<TransactionTag>",
        provides: "Vec<TransactionTag>",
        longevity: "TransactionLongevity",
        propagate: "bool"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/uniques/definitions.js
  var definitions_default46 = {
    rpc: {},
    types: {
      ClassId: "u32",
      InstanceId: "u32",
      DepositBalance: "Balance",
      DepositBalanceOf: "Balance",
      ClassDetails: {
        owner: "AccountId",
        issuer: "AccountId",
        admin: "AccountId",
        freezer: "AccountId",
        totalDeposit: "DepositBalance",
        freeHolding: "bool",
        instances: "u32",
        instanceMetadatas: "u32",
        attributes: "u32",
        isFrozen: "bool"
      },
      DestroyWitness: {
        instances: "Compact<u32>",
        instanceMetadatas: "Compact<u32>",
        attributes: "Compact<u32>"
      },
      InstanceDetails: {
        owner: "AccountId",
        approved: "Option<AccountId>",
        isFrozen: "bool",
        deposit: "DepositBalance"
      },
      ClassMetadata: {
        deposit: "DepositBalance",
        data: "Vec<u8>",
        isFrozen: "bool"
      },
      InstanceMetadata: {
        deposit: "DepositBalance",
        data: "Vec<u8>",
        isFrozen: "bool"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/utility/definitions.js
  var definitions_default47 = {
    rpc: {},
    types: {
      Multisig: {
        when: "Timepoint",
        deposit: "Balance",
        depositor: "AccountId",
        approvals: "Vec<AccountId>"
      },
      Timepoint: {
        height: "BlockNumber",
        index: "u32"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/vesting/definitions.js
  var definitions_default48 = {
    rpc: {},
    types: {
      VestingInfo: {
        locked: "Balance",
        perBlock: "Balance",
        startingBlock: "BlockNumber"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/attestations/definitions.js
  var definitions_default49 = {
    rpc: {},
    types: {
      BlockAttestations: {
        receipt: "CandidateReceipt",
        valid: "Vec<AccountId>",
        invalid: "Vec<AccountId>"
      },
      IncludedBlocks: {
        actualNumber: "BlockNumber",
        session: "SessionIndex",
        randomSeed: "H256",
        activeParachains: "Vec<ParaId>",
        paraBlocks: "Vec<Hash>"
      },
      MoreAttestations: {}
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/bridges/definitions.js
  var definitions_default50 = {
    rpc: {},
    types: {
      BridgedBlockHash: "H256",
      BridgedBlockNumber: "BlockNumber",
      BridgedHeader: "Header",
      BridgeMessageId: "(LaneId, MessageNonce)",
      CallOrigin: {
        _enum: {
          SourceRoot: "Null",
          TargetAccount: "(AccountId, MultiSigner, MultiSignature)",
          SourceAccount: "AccountId"
        }
      },
      ChainId: "[u8; 4]",
      DeliveredMessages: {
        begin: "MessageNonce",
        end: "MessageNonce",
        dispatchResults: "BitVec"
      },
      DispatchFeePayment: {
        _enum: ["AtSourceChain", "AtTargetChain"]
      },
      InboundLaneData: {
        relayers: "Vec<UnrewardedRelayer>",
        lastConfirmedNonce: "MessageNonce"
      },
      InboundRelayer: "AccountId",
      InitializationData: {
        header: "Header",
        authorityList: "AuthorityList",
        setId: "SetId",
        isHalted: "bool"
      },
      LaneId: "[u8; 4]",
      MessageData: {
        payload: "Bytes",
        fee: "Balance"
      },
      MessagesDeliveryProofOf: {
        bridgedHeaderHash: "BlockHash",
        storageProof: "Vec<Bytes>",
        lane: "LaneId"
      },
      MessageKey: {
        laneId: "LaneId",
        nonce: "MessageNonce"
      },
      MessageNonce: "u64",
      MessagesProofOf: {
        bridgedHeaderHash: "BridgedBlockHash",
        storageProof: "Vec<Bytes>",
        lane: "LaneId",
        noncesStart: "MessageNonce",
        noncesEnd: "MessageNonce"
      },
      OperatingMode: {
        _enum: ["Normal", "RejectingOutboundMessages", "Halted"]
      },
      OutboundLaneData: {
        oldestUnprunedNonce: "MessageNonce",
        latestReceivedNonce: "MessageNonce",
        latestGeneratedNonce: "MessageNonce"
      },
      OutboundMessageFee: "Balance",
      OutboundPayload: {
        specVersion: "u32",
        weight: "Weight",
        origin: "CallOrigin",
        dispatchFeePayment: "DispatchFeePayment",
        call: "Bytes"
      },
      Parameter: "Null",
      RelayerId: "AccountId",
      UnrewardedRelayer: {
        relayer: "RelayerId",
        messages: "DeliveredMessages"
      },
      UnrewardedRelayersState: {
        unrewardedRelayer_Entries: "MessageNonce",
        messagesInOldestEntry: "MessageNonce",
        totalMessages: "MessageNonce"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/claims/definitions.js
  var definitions_default51 = {
    rpc: {},
    types: {
      StatementKind: {
        _enum: ["Regular", "Saft"]
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/crowdloan/definitions.js
  var definitions_default52 = {
    rpc: {},
    types: {
      FundIndex: "u32",
      LastContribution: {
        _enum: {
          Never: "Null",
          PreEnding: "u32",
          Ending: "BlockNumber"
        }
      },
      FundInfo: {
        depositor: "AccountId",
        verifier: "Option<MultiSigner>",
        deposit: "Balance",
        raised: "Balance",
        end: "BlockNumber",
        cap: "Balance",
        lastContribution: "LastContribution",
        firstPeriod: "LeasePeriod",
        lastPeriod: "LeasePeriod",
        trieIndex: "TrieIndex"
      },
      TrieIndex: "u32"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/cumulus/runtime.js
  var runtime21 = {
    CollectCollationInfo: [
      {
        methods: {
          collect_collation_info: {
            description: "Collect information about a collation.",
            params: [
              {
                name: "header",
                type: "Header"
              }
            ],
            type: "CollationInfo"
          }
        },
        version: 2
      },
      {
        methods: {
          collect_collation_info: {
            description: "Collect information about a collation.",
            params: [],
            type: "CollationInfoV1"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/cumulus/definitions.js
  var dmpQueue = {
    CollationInfo: {
      upwardMessages: "Vec<UpwardMessage>",
      horizontalMessages: "Vec<OutboundHrmpMessage>",
      newValidationCode: "Option<ValidationCode>",
      processedDownwardMessages: "u32",
      hrmpWatermark: "RelayBlockNumber",
      headData: "HeadData"
    },
    CollationInfoV1: {
      upwardMessages: "Vec<UpwardMessage>",
      horizontalMessages: "Vec<OutboundHrmpMessage>",
      newValidationCode: "Option<ValidationCode>",
      processedDownwardMessages: "u32",
      hrmpWatermark: "RelayBlockNumber"
    },
    ConfigData: {
      maxIndividual: "Weight"
    },
    MessageId: "[u8; 32]",
    OverweightIndex: "u64",
    PageCounter: "u32",
    PageIndexData: {
      beginUsed: "PageCounter",
      endUsed: "PageCounter",
      overweightCount: "OverweightIndex"
    }
  };
  var definitions_default53 = {
    rpc: {},
    runtime: runtime21,
    types: dmpQueue
  };

  // ../../node_modules/@polkadot/types/interfaces/finality/runtime.js
  var finalityV1 = {
    methods: {
      best_finalized: {
        description: "Returns number and hash of the best finalized header known to the bridge module.",
        params: [],
        type: "(BlockNumber, Hash)"
      }
    },
    version: 1
  };
  var runtime22 = {
    KusamaFinalityApi: [finalityV1],
    PolkadotFinalityApi: [finalityV1],
    RococoFinalityApi: [finalityV1],
    WestendFinalityApi: [finalityV1]
  };

  // ../../node_modules/@polkadot/types/interfaces/finality/definitions.js
  var definitions_default54 = {
    rpc: {},
    runtime: runtime22,
    types: {}
  };

  // ../../node_modules/@polkadot/types/interfaces/parachains/hrmp.js
  var hrmp_default = {
    HrmpChannel: {
      maxCapacity: "u32",
      maxTotalSize: "u32",
      maxMessageSize: "u32",
      msgCount: "u32",
      totalSize: "u32",
      mqcHead: "Option<Hash>",
      senderDeposit: "Balance",
      recipientDeposit: "Balance"
    },
    HrmpChannelId: {
      sender: "u32",
      receiver: "u32"
    },
    HrmpOpenChannelRequest: {
      confirmed: "bool",
      age: "SessionIndex",
      senderDeposit: "Balance",
      maxMessageSize: "u32",
      maxCapacity: "u32",
      maxTotalSize: "u32"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/parachains/runtime.js
  var PH_V1_TO_V2 = {
    assumed_validation_data: {
      description: "Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "hash",
          type: "Hash"
        }
      ],
      type: "Option<(PersistedValidationData, ValidationCodeHash)>"
    },
    availability_cores: {
      description: "Yields information on all availability cores as relevant to the child block.",
      params: [],
      type: "Vec<CoreState>"
    },
    candidate_events: {
      description: "Get a vector of events concerning candidates that occurred within a block.",
      params: [],
      type: "Vec<CandidateEvent>"
    },
    candidate_pending_availability: {
      description: "Get the receipt of a candidate pending availability.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        }
      ],
      type: "Option<CommittedCandidateReceipt>"
    },
    check_validation_outputs: {
      description: "Checks if the given validation outputs pass the acceptance criteria.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "outputs",
          type: "CandidateCommitments"
        }
      ],
      type: "bool"
    },
    dmq_contents: {
      description: "Get all the pending inbound messages in the downward message queue for a para.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        }
      ],
      type: "Vec<InboundDownwardMessage>"
    },
    inbound_hrmp_channels_contents: {
      description: "Get the contents of all channels addressed to the given recipient.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        }
      ],
      type: "Vec<InboundHrmpMessage>"
    },
    on_chain_votes: {
      description: "Scrape dispute relevant from on-chain, backing votes and resolved disputes.",
      params: [],
      type: "Option<ScrapedOnChainVotes>"
    },
    persisted_validation_data: {
      description: "Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "assumption",
          type: "OccupiedCoreAssumption"
        }
      ],
      type: "Option<PersistedValidationData>"
    },
    session_index_for_child: {
      description: "Returns the session index expected at a child of the block.",
      params: [],
      type: "SessionIndex"
    },
    validation_code: {
      description: "Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "assumption",
          type: "OccupiedCoreAssumption"
        }
      ],
      type: "ValidationCode"
    },
    validation_code_by_hash: {
      description: "Get the validation code from its hash.",
      params: [
        {
          name: "hash",
          type: "ValidationCodeHash"
        }
      ],
      type: "Option<ValidationCode>"
    },
    validator_groups: {
      description: "Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on",
      params: [],
      type: "(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)"
    },
    validators: {
      description: "Get the current validators.",
      params: [],
      type: "Vec<ValidatorId>"
    }
  };
  var PH_V2_TO_V3 = {
    pvfs_require_precheck: {
      description: "Returns code hashes of PVFs that require pre-checking by validators in the active set.",
      params: [],
      type: "Vec<ValidationCodeHash>"
    },
    session_info: {
      description: "Get the session info for the given session, if stored.",
      params: [
        {
          name: "index",
          type: "SessionIndex"
        }
      ],
      type: "Option<SessionInfo>"
    },
    submit_pvf_check_statement: {
      description: "Submits a PVF pre-checking statement into the transaction pool.",
      params: [
        {
          name: "stmt",
          type: "PvfCheckStatement"
        },
        {
          name: "signature",
          type: "ValidatorSignature"
        }
      ],
      type: "Null"
    },
    validation_code_hash: {
      description: "Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "assumption",
          type: "OccupiedCoreAssumption"
        }
      ],
      type: "Option<ValidationCodeHash>"
    }
  };
  var PH_V3 = {
    disputes: {
      description: "Returns all onchain disputes.",
      params: [],
      type: "Vec<(SessionIndex, CandidateHash, DisputeState)>"
    }
  };
  var PH_V4 = {
    session_executor_params: {
      description: "Returns execution parameters for the session.",
      params: [
        {
          name: "sessionIndex",
          type: "SessionIndex"
        }
      ],
      type: "Option<ExecutorParams>"
    }
  };
  var runtime23 = {
    ParachainHost: [
      {
        methods: {
          ...PH_V1_TO_V2,
          ...PH_V2_TO_V3,
          ...PH_V3,
          ...PH_V4
        },
        version: 4
      },
      {
        methods: {
          ...PH_V1_TO_V2,
          ...PH_V2_TO_V3,
          ...PH_V3
        },
        version: 3
      },
      {
        methods: {
          ...PH_V1_TO_V2,
          ...PH_V2_TO_V3
        },
        version: 2
      },
      {
        methods: {
          session_info: {
            description: "Get the session info for the given session, if stored.",
            params: [
              {
                name: "index",
                type: "SessionIndex"
              }
            ],
            type: "Option<OldV1SessionInfo>"
          },
          ...PH_V1_TO_V2
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/parachains/slots.js
  var SlotRange10 = {
    _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "OneOne", "OneTwo", "OneThree", "TwoTwo", "TwoThree", "ThreeThree"]
  };
  var SlotRange = {
    _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "ZeroFour", "ZeroFive", "ZeroSix", "ZeroSeven", "OneOne", "OneTwo", "OneThree", "OneFour", "OneFive", "OneSix", "OneSeven", "TwoTwo", "TwoThree", "TwoFour", "TwoFive", "TwoSix", "TwoSeven", "ThreeThree", "ThreeFour", "ThreeFive", "ThreeSix", "ThreeSeven", "FourFour", "FourFive", "FourSix", "FourSeven", "FiveFive", "FiveSix", "FiveSeven", "SixSix", "SixSeven", "SevenSeven"]
  };
  var oldTypes = {
    Bidder: {
      _enum: {
        New: "NewBidder",
        Existing: "ParaId"
      }
    },
    IncomingParachain: {
      _enum: {
        Unset: "NewBidder",
        Fixed: "IncomingParachainFixed",
        Deploy: "IncomingParachainDeploy"
      }
    },
    IncomingParachainDeploy: {
      code: "ValidationCode",
      initialHeadData: "HeadData"
    },
    IncomingParachainFixed: {
      codeHash: "Hash",
      codeSize: "u32",
      initialHeadData: "HeadData"
    },
    NewBidder: {
      who: "AccountId",
      sub: "SubId"
    },
    SubId: "u32"
  };
  var slots_default = {
    ...oldTypes,
    AuctionIndex: "u32",
    LeasePeriod: "BlockNumber",
    LeasePeriodOf: "BlockNumber",
    SlotRange10,
    SlotRange,
    WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
    WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
    WinningDataEntry: "Option<(AccountId, ParaId, BalanceOf)>",
    WinnersData10: "Vec<WinnersDataTuple10>",
    WinnersData: "Vec<WinnersDataTuple>",
    WinnersDataTuple10: "(AccountId, ParaId, BalanceOf, SlotRange10)",
    WinnersDataTuple: "(AccountId, ParaId, BalanceOf, SlotRange)"
  };

  // ../../node_modules/@polkadot/types/interfaces/parachains/definitions.js
  var proposeTypes = {
    ParachainProposal: {
      proposer: "AccountId",
      genesisHead: "HeadData",
      validators: "Vec<ValidatorId>",
      name: "Bytes",
      balance: "Balance"
    },
    RegisteredParachainInfo: {
      validators: "Vec<ValidatorId>",
      proposer: "AccountId"
    }
  };
  var cumulusTypes = {
    ServiceQuality: {
      _enum: ["Ordered", "Fast"]
    }
  };
  var disputeTypes = {
    DisputeLocation: {
      _enum: ["Local", "Remote"]
    },
    DisputeResult: {
      _enum: ["Valid", "Invalid"]
    },
    DisputeState: {
      validatorsFor: "BitVec",
      validatorsAgainst: "BitVec",
      start: "BlockNumber",
      concludedAt: "Option<BlockNumber>"
    },
    DisputeStatement: {
      _enum: {
        Valid: "ValidDisputeStatementKind",
        Invalid: "InvalidDisputeStatementKind"
      }
    },
    DisputeStatementSet: {
      candidateHash: "CandidateHash",
      session: "SessionIndex",
      statements: "Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"
    },
    ExecutorParam: {
      _enum: {
        Phantom: "Null",
        MaxMemoryPages: "u32",
        StackLogicalMax: "u32",
        StackNativeMax: "u32",
        PrecheckingMaxMemory: "u64",
        PvfPrepTimeout: "(PvfPrepTimeoutKind, u64)",
        PvfExecTimeout: "(PvfExecTimeoutKind, u64)"
      }
    },
    ExecutorParamsHash: "Hash",
    ExecutorParams: "Vec<ExecutorParam>",
    ExplicitDisputeStatement: {
      valid: "bool",
      candidateHash: "CandidateHash",
      session: "SessionIndex"
    },
    InvalidDisputeStatementKind: {
      _enum: ["Explicit"]
    },
    MultiDisputeStatementSet: "Vec<DisputeStatementSet>",
    PvfExecTimeoutKind: {
      _enum: ["Backing", "Approval"]
    },
    PvfPrepTimeoutKind: {
      _enum: ["Precheck", "Lenient"]
    },
    ValidDisputeStatementKind: {
      _enum: {
        Explicit: "Null",
        BackingSeconded: "Hash",
        BackingValid: "Hash",
        ApprovalChecking: "Null"
      }
    }
  };
  var definitions_default55 = {
    rpc: {},
    runtime: runtime23,
    types: {
      ...cumulusTypes,
      ...disputeTypes,
      ...hrmp_default,
      ...proposeTypes,
      ...slots_default,
      AbridgedCandidateReceipt: {
        parachainIndex: "ParaId",
        relayParent: "Hash",
        headData: "HeadData",
        collator: "CollatorId",
        signature: "CollatorSignature",
        povBlockHash: "Hash",
        commitments: "CandidateCommitments"
      },
      AbridgedHostConfiguration: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        maxUpwardQueueCount: "u32",
        maxUpwardQueueSize: "u32",
        maxUpwardMessageSize: "u32",
        maxUpwardMessageNumPerCandidate: "u32",
        hrmpMaxMessageNumPerCandidate: "u32",
        validationUpgradeFrequency: "BlockNumber",
        validationUpgradeDelay: "BlockNumber"
      },
      AbridgedHrmpChannel: {
        maxCapacity: "u32",
        maxTotalSize: "u32",
        maxMessageSize: "u32",
        msgCount: "u32",
        totalSize: "u32",
        mqcHead: "Option<Hash>"
      },
      AssignmentId: "AccountId",
      AssignmentKind: {
        _enum: {
          Parachain: "Null",
          Parathread: "(CollatorId, u32)"
        }
      },
      AttestedCandidate: {
        candidate: "AbridgedCandidateReceipt",
        validityVotes: "Vec<ValidityAttestation>",
        validatorIndices: "BitVec"
      },
      AuthorityDiscoveryId: "AccountId",
      AvailabilityBitfield: "BitVec",
      AvailabilityBitfieldRecord: {
        bitfield: "AvailabilityBitfield",
        submittedTt: "BlockNumber"
      },
      BackedCandidate: {
        candidate: "CommittedCandidateReceipt",
        validityVotes: "Vec<ValidityAttestation>",
        validatorIndices: "BitVec"
      },
      BufferedSessionChange: {
        applyAt: "BlockNumber",
        validators: "Vec<ValidatorId>",
        queued: "Vec<ValidatorId>",
        sessionIndex: "SessionIndex"
      },
      CandidateCommitments: {
        upwardMessages: "Vec<UpwardMessage>",
        horizontalMessages: "Vec<OutboundHrmpMessage>",
        newValidationCode: "Option<ValidationCode>",
        headData: "HeadData",
        processedDownwardMessages: "u32",
        hrmpWatermark: "BlockNumber"
      },
      CandidateDescriptor: {
        paraId: "ParaId",
        relayParent: "RelayChainHash",
        collatorId: "CollatorId",
        persistedValidationDataHash: "Hash",
        povHash: "Hash",
        erasureRoot: "Hash",
        signature: "CollatorSignature",
        paraHead: "Hash",
        validationCodeHash: "ValidationCodeHash"
      },
      CandidateEvent: {
        _enum: {
          CandidateBacked: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
          CandidateIncluded: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
          CandidateTimedOut: "(CandidateReceipt, HeadData, CoreIndex)"
        }
      },
      CandidateHash: "Hash",
      CandidateInfo: {
        who: "AccountId",
        deposit: "Balance"
      },
      CandidatePendingAvailability: {
        core: "CoreIndex",
        hash: "CandidateHash",
        descriptor: "CandidateDescriptor",
        availabilityVotes: "BitVec",
        backers: "BitVec",
        relayParentNumber: "BlockNumber",
        backedInNumber: "BlockNumber",
        backingGroup: "GroupIndex"
      },
      CandidateReceipt: {
        descriptor: "CandidateDescriptor",
        commitmentsHash: "Hash"
      },
      GlobalValidationData: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        blockNumber: "BlockNumber"
      },
      CollatorId: "H256",
      CollatorSignature: "Signature",
      CommittedCandidateReceipt: {
        descriptor: "CandidateDescriptor",
        commitments: "CandidateCommitments"
      },
      CoreAssignment: {
        core: "CoreIndex",
        paraId: "ParaId",
        kind: "AssignmentKind",
        groupIdx: "GroupIndex"
      },
      CoreIndex: "u32",
      CoreOccupied: {
        _enum: {
          Parathread: "ParathreadEntry",
          Parachain: "Null"
        }
      },
      CoreState: {
        _enum: {
          Occupied: "OccupiedCore",
          Scheduled: "ScheduledCore",
          Free: "Null"
        }
      },
      DoubleVoteReport: {
        identity: "ValidatorId",
        first: "(Statement, ValidatorSignature)",
        second: "(Statement, ValidatorSignature)",
        proof: "MembershipProof",
        signingContext: "SigningContext"
      },
      DownwardMessage: "Bytes",
      GroupIndex: "u32",
      GroupRotationInfo: {
        sessionStartBlock: "BlockNumber",
        groupRotationFrequency: "BlockNumber",
        now: "BlockNumber"
      },
      GlobalValidationSchedule: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        blockNumber: "BlockNumber"
      },
      HeadData: "Bytes",
      HostConfiguration: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        maxUpwardQueueCount: "u32",
        maxUpwardQueueSize: "u32",
        maxUpwardMessageSize: "u32",
        maxUpwardMessageNumPerCandidate: "u32",
        hrmpMaxMessageNumPerCandidate: "u32",
        validationUpgradeFrequency: "BlockNumber",
        validationUpgradeDelay: "BlockNumber",
        maxPovSize: "u32",
        maxDownwardMessageSize: "u32",
        preferredDispatchableUpwardMessagesStepWeight: "Weight",
        hrmpMaxParachainOutboundChannels: "u32",
        hrmpMaxParathreadOutboundChannels: "u32",
        hrmpOpenRequestTtl: "u32",
        hrmpSenderDeposit: "Balance",
        hrmpRecipientDeposit: "Balance",
        hrmpChannelMaxCapacity: "u32",
        hrmpChannelMaxTotalSize: "u32",
        hrmpMaxParachainInboundChannels: "u32",
        hrmpMaxParathreadInboundChannels: "u32",
        hrmpChannelMaxMessageSize: "u32",
        codeRetentionPeriod: "BlockNumber",
        parathreadCores: "u32",
        parathreadRetries: "u32",
        groupRotationFrequency: "BlockNumber",
        chainAvailabilityPeriod: "BlockNumber",
        threadAvailabilityPeriod: "BlockNumber",
        schedulingLookahead: "u32",
        maxValidatorsPerCore: "Option<u32>",
        maxValidators: "Option<u32>",
        disputePeriod: "SessionIndex",
        disputePostConclusionAcceptancePeriod: "BlockNumber",
        disputeMaxSpamSlots: "u32",
        disputeConclusionByTimeOutPeriod: "BlockNumber",
        noShowSlots: "u32",
        nDelayTranches: "u32",
        zerothDelayTrancheWidth: "u32",
        neededApprovals: "u32",
        relayVrfModuloSamples: "u32"
      },
      InboundDownwardMessage: {
        pubSentAt: "BlockNumber",
        pubMsg: "DownwardMessage"
      },
      InboundHrmpMessage: {
        sentAt: "BlockNumber",
        data: "Bytes"
      },
      InboundHrmpMessages: "Vec<InboundHrmpMessage>",
      LocalValidationData: {
        parentHead: "HeadData",
        balance: "Balance",
        codeUpgradeAllowed: "Option<BlockNumber>"
      },
      MessageIngestionType: {
        downwardMessages: "Vec<InboundDownwardMessage>",
        horizontalMessages: "BTreeMap<ParaId, InboundHrmpMessages>"
      },
      MessageQueueChain: "RelayChainHash",
      OccupiedCore: {
        nextUpOnAvailable: "Option<ScheduledCore>",
        occupiedSince: "BlockNumber",
        timeOutAt: "BlockNumber",
        nextUpOnTimeOut: "Option<ScheduledCore>",
        availability: "BitVec",
        groupResponsible: "GroupIndex",
        candidateHash: "CandidateHash",
        candidateDescriptor: "CandidateDescriptor"
      },
      OccupiedCoreAssumption: {
        _enum: ["Included,", "TimedOut", "Free"]
      },
      OutboundHrmpMessage: {
        recipient: "u32",
        data: "Bytes"
      },
      ParachainDispatchOrigin: {
        _enum: ["Signed", "Parachain", "Root"]
      },
      ParachainInherentData: {
        validationData: "PersistedValidationData",
        relayChainState: "StorageProof",
        downwardMessages: "Vec<InboundDownwardMessage>",
        horizontalMessages: "BTreeMap<ParaId, VecInboundHrmpMessage>"
      },
      ParachainsInherentData: {
        bitfields: "SignedAvailabilityBitfields",
        backedCandidates: "Vec<BackedCandidate>",
        disputes: "MultiDisputeStatementSet",
        parentHeader: "Header"
      },
      ParaGenesisArgs: {
        genesisHead: "Bytes",
        validationCode: "Bytes",
        parachain: "bool"
      },
      ParaId: "u32",
      ParaInfo: {
        manager: "AccountId",
        deposit: "Balance",
        locked: "bool"
      },
      ParaLifecycle: {
        _enum: ["Onboarding", "Parathread", "Parachain", "UpgradingToParachain", "DowngradingToParathread", "OutgoingParathread", "OutgoingParachain"]
      },
      ParaPastCodeMeta: {
        upgradeTimes: "Vec<ReplacementTimes>",
        lastPruned: "Option<BlockNumber>"
      },
      ParaScheduling: {
        _enum: ["Always", "Dynamic"]
      },
      ParathreadClaim: "(ParaId, CollatorId)",
      ParathreadClaimQueue: {
        queue: "Vec<QueuedParathread>",
        nextCoreOffset: "u32"
      },
      ParathreadEntry: {
        claim: "ParathreadClaim",
        retries: "u32"
      },
      ParaValidatorIndex: "u32",
      PersistedValidationData: {
        parentHead: "HeadData",
        relayParentNumber: "RelayChainBlockNumber",
        relayParentStorageRoot: "Hash",
        maxPovSize: "u32"
      },
      PvfCheckStatement: {
        accept: "bool",
        subject: "ValidationCodeHash",
        sessionIndex: "SessionIndex",
        validatorIndex: "ParaValidatorIndex"
      },
      QueuedParathread: {
        claim: "ParathreadEntry",
        coreOffset: "u32"
      },
      RelayBlockNumber: "u32",
      RelayChainBlockNumber: "RelayBlockNumber",
      RelayHash: "Hash",
      RelayChainHash: "RelayHash",
      Remark: "[u8; 32]",
      ReplacementTimes: {
        expectedAt: "BlockNumber",
        activatedAt: "BlockNumber"
      },
      Retriable: {
        _enum: {
          Never: "Null",
          WithRetries: "u32"
        }
      },
      ScheduledCore: {
        paraId: "ParaId",
        collator: "Option<CollatorId>"
      },
      Scheduling: {
        _enum: ["Always", "Dynamic"]
      },
      ScrapedOnChainVotes: {
        session: "SessionIndex",
        backingValidatorsPerCandidate: "Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>",
        disputes: "MultiDisputeStatementSet"
      },
      SessionInfo: {
        activeValidatorIndices: "Vec<ParaValidatorIndex>",
        randomSeed: "[u8; 32]",
        disputePeriod: "SessionIndex",
        validators: "Vec<ValidatorId>",
        discoveryKeys: "Vec<AuthorityDiscoveryId>",
        assignmentKeys: "Vec<AssignmentId>",
        validatorGroups: "Vec<Vec<ValidatorIndex>>",
        nCores: "u32",
        zerothDelayTrancheWidth: "u32",
        relayVrfModuloSamples: "u32",
        nDelayTranches: "u32",
        noShowSlots: "u32",
        neededApprovals: "u32"
      },
      OldV1SessionInfo: {
        validators: "Vec<ValidatorId>",
        discoveryKeys: "Vec<AuthorityDiscoveryId>",
        assignmentKeys: "Vec<AssignmentId>",
        validatorGroups: "Vec<Vec<ParaValidatorIndex>>",
        nCores: "u32",
        zerothDelayTrancheWidth: "u32",
        relayVrfModuloSamples: "u32",
        nDelayTranches: "u32",
        noShowSlots: "u32",
        neededApprovals: "u32"
      },
      SessionInfoValidatorGroup: "Vec<ParaValidatorIndex>",
      SignedAvailabilityBitfield: {
        payload: "BitVec",
        validatorIndex: "ParaValidatorIndex",
        signature: "ValidatorSignature"
      },
      SignedAvailabilityBitfields: "Vec<SignedAvailabilityBitfield>",
      SigningContext: {
        sessionIndex: "SessionIndex",
        parentHash: "Hash"
      },
      Statement: {
        _enum: {
          Never: "Null",
          Candidate: "Hash",
          Valid: "Hash",
          Invalid: "Hash"
        }
      },
      TransientValidationData: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        balance: "Balance",
        codeUpgradeAllowed: "Option<BlockNumber>",
        dmqLength: "u32"
      },
      UpgradeGoAhead: {
        _enum: ["Abort", "GoAhead"]
      },
      UpgradeRestriction: {
        _enum: ["Present"]
      },
      UpwardMessage: "Bytes",
      ValidationFunctionParams: {
        maxCodeSize: "u32",
        relayChainHeight: "RelayChainBlockNumber",
        codeUpgradeAllowed: "Option<RelayChainBlockNumber>"
      },
      ValidationCode: "Bytes",
      ValidationCodeHash: "Hash",
      ValidationData: {
        persisted: "PersistedValidationData",
        transient: "TransientValidationData"
      },
      ValidationDataType: {
        validationData: "ValidationData",
        relayChainState: "Vec<Bytes>"
      },
      ValidatorSignature: "Signature",
      ValidityAttestation: {
        _enum: {
          Never: "Null",
          Implicit: "ValidatorSignature",
          Explicit: "ValidatorSignature"
        }
      },
      MessagingStateSnapshot: {
        relayDispatchQueueSize: "(u32, u32)",
        egressChannels: "Vec<MessagingStateSnapshotEgressEntry>"
      },
      MessagingStateSnapshotEgressEntry: "(ParaId, AbridgedHrmpChannel)",
      SystemInherentData: "ParachainInherentData",
      VecInboundHrmpMessage: "Vec<InboundHrmpMessage>"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/poll/definitions.js
  var definitions_default56 = {
    rpc: {},
    types: {
      Approvals: "[bool; 4]"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/purchase/definitions.js
  var definitions_default57 = {
    rpc: {},
    types: {
      AccountStatus: {
        validity: "AccountValidity",
        freeBalance: "Balance",
        lockedBalance: "Balance",
        signature: "Vec<u8>",
        vat: "Permill"
      },
      AccountValidity: {
        _enum: ["Invalid", "Initiated", "Pending", "ValidLow", "ValidHigh", "Completed"]
      }
    }
  };

  // ../../node_modules/@polkadot/types-create/types/types.js
  var TypeDefInfo;
  (function(TypeDefInfo2) {
    TypeDefInfo2[TypeDefInfo2["BTreeMap"] = 0] = "BTreeMap";
    TypeDefInfo2[TypeDefInfo2["BTreeSet"] = 1] = "BTreeSet";
    TypeDefInfo2[TypeDefInfo2["Compact"] = 2] = "Compact";
    TypeDefInfo2[TypeDefInfo2["DoNotConstruct"] = 3] = "DoNotConstruct";
    TypeDefInfo2[TypeDefInfo2["Enum"] = 4] = "Enum";
    TypeDefInfo2[TypeDefInfo2["HashMap"] = 5] = "HashMap";
    TypeDefInfo2[TypeDefInfo2["Int"] = 6] = "Int";
    TypeDefInfo2[TypeDefInfo2["Linkage"] = 7] = "Linkage";
    TypeDefInfo2[TypeDefInfo2["Null"] = 8] = "Null";
    TypeDefInfo2[TypeDefInfo2["Option"] = 9] = "Option";
    TypeDefInfo2[TypeDefInfo2["Plain"] = 10] = "Plain";
    TypeDefInfo2[TypeDefInfo2["Range"] = 11] = "Range";
    TypeDefInfo2[TypeDefInfo2["RangeInclusive"] = 12] = "RangeInclusive";
    TypeDefInfo2[TypeDefInfo2["Result"] = 13] = "Result";
    TypeDefInfo2[TypeDefInfo2["Set"] = 14] = "Set";
    TypeDefInfo2[TypeDefInfo2["Si"] = 15] = "Si";
    TypeDefInfo2[TypeDefInfo2["Struct"] = 16] = "Struct";
    TypeDefInfo2[TypeDefInfo2["Tuple"] = 17] = "Tuple";
    TypeDefInfo2[TypeDefInfo2["UInt"] = 18] = "UInt";
    TypeDefInfo2[TypeDefInfo2["Vec"] = 19] = "Vec";
    TypeDefInfo2[TypeDefInfo2["VecFixed"] = 20] = "VecFixed";
    TypeDefInfo2[TypeDefInfo2["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
    TypeDefInfo2[TypeDefInfo2["WrapperOpaque"] = 22] = "WrapperOpaque";
  })(TypeDefInfo || (TypeDefInfo = {}));

  // ../../node_modules/@polkadot/types-codec/utils/util.js
  function hasEq(o) {
    return isFunction(o.eq);
  }

  // ../../node_modules/@polkadot/types-codec/utils/compareArray.js
  function compareArray(a, b) {
    if (Array.isArray(b)) {
      return a.length === b.length && isUndefined(a.find((v3, index) => hasEq(v3) ? !v3.eq(b[index]) : v3 !== b[index]));
    }
    return false;
  }

  // ../../node_modules/@polkadot/types-codec/abstract/Array.js
  var AbstractArray = class extends Array {
    static get [Symbol.species]() {
      return Array;
    }
    constructor(registry, length) {
      super(length);
      this.registry = registry;
    }
    get encodedLength() {
      const count = this.length;
      let total = compactToU8a(count).length;
      for (let i = 0; i < count; i++) {
        total += this[i].encodedLength;
      }
      return total;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.length === 0;
    }
    get length() {
      return super.length;
    }
    eq(other) {
      return compareArray(this, other);
    }
    inspect() {
      return {
        inner: this.inspectInner(),
        outer: [compactToU8a(this.length)]
      };
    }
    inspectInner() {
      const count = this.length;
      const inner = new Array(count);
      for (let i = 0; i < count; i++) {
        inner[i] = this[i].inspect();
      }
      return inner;
    }
    toArray() {
      return Array.from(this);
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toHuman(isExtended) {
      const count = this.length;
      const result = new Array(count);
      for (let i = 0; i < count; i++) {
        result[i] = this[i] && this[i].toHuman(isExtended);
      }
      return result;
    }
    toJSON() {
      const count = this.length;
      const result = new Array(count);
      for (let i = 0; i < count; i++) {
        result[i] = this[i] && this[i].toJSON();
      }
      return result;
    }
    toPrimitive() {
      const count = this.length;
      const result = new Array(count);
      for (let i = 0; i < count; i++) {
        result[i] = this[i] && this[i].toPrimitive();
      }
      return result;
    }
    toString() {
      const count = this.length;
      const result = new Array(count);
      for (let i = 0; i < count; i++) {
        result[i] = this[i].toString();
      }
      return `[${result.join(", ")}]`;
    }
    toU8a(isBare) {
      const encoded = this.toU8aInner();
      return isBare ? u8aConcatStrict(encoded) : u8aConcatStrict([compactToU8a(this.length), ...encoded]);
    }
    toU8aInner(isBare) {
      const count = this.length;
      const encoded = new Array(count);
      for (let i = 0; i < count; i++) {
        encoded[i] = this[i].toU8a(isBare);
      }
      return encoded;
    }
  };

  // ../../node_modules/@polkadot/types-codec/abstract/Base.js
  var AbstractBase = class {
    constructor(registry, value, initialU8aLength) {
      this.initialU8aLength = initialU8aLength;
      this.__internal__raw = value;
      this.registry = registry;
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get inner() {
      return this.__internal__raw;
    }
    get isEmpty() {
      return this.__internal__raw.isEmpty;
    }
    eq(other) {
      return this.__internal__raw.eq(other);
    }
    inspect() {
      return this.__internal__raw.inspect();
    }
    toHex(isLe) {
      return this.__internal__raw.toHex(isLe);
    }
    toHuman(isExtended) {
      return this.__internal__raw.toHuman(isExtended);
    }
    toJSON() {
      return this.__internal__raw.toJSON();
    }
    toPrimitive() {
      return this.__internal__raw.toPrimitive();
    }
    toString() {
      return this.__internal__raw.toString();
    }
    toU8a(isBare) {
      return this.__internal__raw.toU8a(isBare);
    }
    unwrap() {
      return this.__internal__raw;
    }
    valueOf() {
      return this.__internal__raw;
    }
  };

  // ../../node_modules/@polkadot/types-codec/abstract/Int.js
  var DEFAULT_UINT_BITS = 64;
  var MAX_NUMBER_BITS = 52;
  var MUL_P = new import_bn.default(1e4);
  var FORMATTERS = [
    ["Perquintill", BN_QUINTILL],
    ["Perbill", BN_BILLION],
    ["Permill", BN_MILLION],
    ["Percent", BN_HUNDRED]
  ];
  function isToBn2(value) {
    return isFunction(value.toBn);
  }
  function toPercentage(value, divisor) {
    return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
  }
  function decodeAbstractInt(value, isNegative) {
    if (isNumber(value)) {
      if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
        throw new Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");
      }
      return value;
    } else if (isString(value)) {
      if (isHex(value, -1, true)) {
        return hexToBn(value, { isLe: false, isNegative }).toString();
      }
      if (value.includes(".") || value.includes(",") || value.includes("e")) {
        throw new Error("String should not contain decimal points or scientific notation");
      }
      return value;
    } else if (isBn(value) || isBigInt(value)) {
      return value.toString();
    } else if (isObject(value)) {
      if (isToBn2(value)) {
        return value.toBn().toString();
      }
      const keys2 = Object.keys(value);
      if (keys2.length !== 1) {
        throw new Error("Unable to construct number from multi-key object");
      }
      return decodeAbstractInt(value[keys2[0]], isNegative);
    } else if (!value) {
      return 0;
    }
    throw new Error(`Unable to create BN from unknown type ${typeof value}`);
  }
  var AbstractInt = class extends import_bn.default {
    constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
      super(
        isU8a(value) ? bitLength <= 48 ? u8aToNumber(value.subarray(0, bitLength / 8), { isNegative: isSigned }) : u8aToBn(value.subarray(0, bitLength / 8), { isLe: true, isNegative: isSigned }).toString() : decodeAbstractInt(value, isSigned)
      );
      this.registry = registry;
      this.__internal__bitLength = bitLength;
      this.encodedLength = this.__internal__bitLength / 8;
      this.initialU8aLength = this.__internal__bitLength / 8;
      this.isUnsigned = !isSigned;
      const isNegative = this.isNeg();
      const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
      if (isNegative && !isSigned) {
        throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
      } else if (super.bitLength() > maxBits) {
        throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
      }
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.isZero();
    }
    bitLength() {
      return this.__internal__bitLength;
    }
    eq(other) {
      return super.eq(isHex(other) ? hexToBn(other.toString(), { isLe: false, isNegative: !this.isUnsigned }) : bnToBn(other));
    }
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    isMax() {
      const u8a2 = this.toU8a().filter((b) => b === 255);
      return u8a2.length === this.__internal__bitLength / 8;
    }
    toBigInt() {
      return BigInt(this.toString());
    }
    toBn() {
      return this;
    }
    toHex(isLe = false) {
      return bnToHex(this, {
        bitLength: this.bitLength(),
        isLe,
        isNegative: !this.isUnsigned
      });
    }
    toHuman(_isExpanded) {
      const rawType = this.toRawType();
      if (rawType === "Balance") {
        return this.isMax() ? "everything" : formatBalance(this, { decimals: this.registry.chainDecimals[0], withSi: true, withUnit: this.registry.chainTokens[0] });
      }
      const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
      return divisor ? toPercentage(this, divisor) : formatNumber(this);
    }
    toJSON(onlyHex = false) {
      return onlyHex || this.__internal__bitLength > 128 || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
    }
    toPrimitive() {
      return super.bitLength() > MAX_NUMBER_BITS ? this.toString() : this.toNumber();
    }
    toRawType() {
      return this instanceof this.registry.createClassUnsafe("Balance") ? "Balance" : `${this.isUnsigned ? "u" : "i"}${this.bitLength()}`;
    }
    toString(base) {
      return super.toString(base);
    }
    toU8a(_isBare) {
      return bnToU8a(this, {
        bitLength: this.bitLength(),
        isLe: true,
        isNegative: !this.isUnsigned
      });
    }
  };

  // ../../node_modules/@polkadot/types-codec/utils/compareMap.js
  function hasMismatch(a, b) {
    return isUndefined(a) || (hasEq(a) ? !a.eq(b) : a !== b);
  }
  function notEntry(value) {
    return !Array.isArray(value) || value.length !== 2;
  }
  function compareMapArray(a, b) {
    return a.size === b.length && !b.some((e) => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
  }
  function compareMap(a, b) {
    if (Array.isArray(b)) {
      return compareMapArray(a, b);
    } else if (b instanceof Map) {
      return compareMapArray(a, [...b.entries()]);
    } else if (isObject(b)) {
      return compareMapArray(a, Object.entries(b));
    }
    return false;
  }

  // ../../node_modules/@polkadot/types-codec/utils/compareSet.js
  function compareSetArray(a, b) {
    return a.size === b.length && !b.some((e) => !a.has(e));
  }
  function compareSet(a, b) {
    if (Array.isArray(b)) {
      return compareSetArray(a, b);
    } else if (b instanceof Set) {
      return compareSetArray(a, [...b.values()]);
    } else if (isObject(b)) {
      return compareSetArray(a, Object.values(b));
    }
    return false;
  }

  // ../../node_modules/@polkadot/types-codec/utils/decodeU8a.js
  function formatFailure(registry, fn2, _result, { message }, u8a2, i, count, Type2, key) {
    let type = "";
    try {
      type = `: ${new Type2(registry).toRawType()}`;
    } catch {
    }
    return `${fn2}: failed at ${u8aToHex(u8a2.subarray(0, 16))}\u2026${key ? ` on ${key}` : ""} (index ${i + 1}/${count})${type}:: ${message}`;
  }
  function decodeU8a(registry, result, u8a2, [Types, keys2]) {
    const count = result.length;
    let offset2 = 0;
    let i = 0;
    try {
      while (i < count) {
        const value = new Types[i](registry, u8a2.subarray(offset2));
        offset2 += value.initialU8aLength || value.encodedLength;
        result[i] = value;
        i++;
      }
    } catch (error) {
      throw new Error(formatFailure(registry, "decodeU8a", result, error, u8a2.subarray(offset2), i, count, Types[i], keys2[i]));
    }
    return [result, offset2];
  }
  function decodeU8aStruct(registry, result, u8a2, [Types, keys2]) {
    const count = result.length;
    let offset2 = 0;
    let i = 0;
    try {
      while (i < count) {
        const value = new Types[i](registry, u8a2.subarray(offset2));
        offset2 += value.initialU8aLength || value.encodedLength;
        result[i] = [keys2[i], value];
        i++;
      }
    } catch (error) {
      throw new Error(formatFailure(registry, "decodeU8aStruct", result, error, u8a2.subarray(offset2), i, count, Types[i], keys2[i]));
    }
    return [result, offset2];
  }
  function decodeU8aVec(registry, result, u8a2, startAt, Type2) {
    const count = result.length;
    let offset2 = startAt;
    let i = 0;
    try {
      while (i < count) {
        const value = new Type2(registry, u8a2.subarray(offset2));
        offset2 += value.initialU8aLength || value.encodedLength;
        result[i] = value;
        i++;
      }
    } catch (error) {
      throw new Error(formatFailure(registry, "decodeU8aVec", result, error, u8a2.subarray(offset2), i, count, Type2));
    }
    return [offset2, offset2 - startAt];
  }

  // ../../node_modules/@polkadot/types-codec/utils/sanitize.js
  var BOUNDED = ["BTreeMap", "BTreeSet", "HashMap", "Vec"];
  var ALLOWED_BOXES = BOUNDED.concat(["Compact", "DoNotConstruct", "Int", "Linkage", "Range", "RangeInclusive", "Result", "Opaque", "Option", "UInt", "WrapperKeepOpaque", "WrapperOpaque"]);
  var BOX_PRECEDING = ["<", "(", "[", '"', ",", " "];
  var mappings = [
    alias("<T::InherentOfflineReport as InherentOfflineReport>::Inherent", "InherentOfflineReport", false),
    alias("VecDeque<", "Vec<", false),
    cleanupCompact(),
    removeExtensions("Bounded", true),
    removeExtensions("Weak", false),
    removeTraits(),
    removePairOf(),
    removeWrap("Box<"),
    removeGenerics(),
    alias("String", "Text"),
    alias("Vec<u8>", "Bytes"),
    alias("&\\[u8\\]", "Bytes"),
    alias("&'static\\[u8\\]", "Bytes"),
    alias("RawAddress", "Address"),
    alias("Lookup::Source", "LookupSource"),
    alias("Lookup::Target", "LookupTarget"),
    alias("exec::StorageKey", "ContractStorageKey"),
    flattenSingleTuple(),
    removeColons(),
    trim()
  ];
  function trim() {
    return (value) => value.trim();
  }
  function findClosing(value, start2) {
    let depth = 0;
    for (let i = start2, count = value.length; i < count; i++) {
      if (value[i] === ">") {
        if (!depth) {
          return i;
        }
        depth--;
      } else if (value[i] === "<") {
        depth++;
      }
    }
    throw new Error(`Unable to find closing matching <> on '${value}' (start ${start2})`);
  }
  function alias(src, dest, withChecks = true) {
    const from2 = new RegExp(`(^${src}|${BOX_PRECEDING.map((box) => `\\${box}${src}`).join("|")})`, "g");
    const to = (src2) => {
      from2.lastIndex = 0;
      return withChecks && BOX_PRECEDING.includes(src2[0]) ? `${src2[0]}${dest}` : dest;
    };
    return (value) => value.replace(from2, to);
  }
  function cleanupCompact() {
    return (value) => {
      if (value.includes(" as HasCompact")) {
        for (let i = 0, count = value.length; i < count; i++) {
          if (value[i] === "<") {
            const end2 = findClosing(value, i + 1) - 14;
            if (value.substring(end2, end2 + 14) === " as HasCompact") {
              value = `Compact<${value.substring(i + 1, end2)}>`;
            }
          }
        }
      }
      return value;
    };
  }
  function flattenSingleTuple() {
    const from1 = /,\)/g;
    const from2 = /\(([^,]+)\)/;
    return (value) => {
      from1.lastIndex = 0;
      return value.replace(from1, ")").replace(from2, "$1");
    };
  }
  function replaceTagWith(value, matcher, replacer2) {
    let index = -1;
    while (true) {
      index = value.indexOf(matcher, index + 1);
      if (index === -1) {
        return value;
      }
      const start2 = index + matcher.length;
      const end2 = findClosing(value, start2);
      value = `${value.substring(0, index)}${replacer2(value.substring(start2, end2))}${value.substring(end2 + 1)}`;
    }
  }
  function removeExtensions(type, isSized) {
    return (value) => {
      for (let i = 0, count = BOUNDED.length; i < count; i++) {
        const tag = BOUNDED[i];
        value = replaceTagWith(value, `${type}${tag}<`, (v3) => {
          const parts = v3.split(",").map((s) => s.trim()).filter((s) => s);
          if (isSized) {
            parts.pop();
          }
          return `${tag}<${parts.join(",")}>`;
        });
      }
      return value;
    };
  }
  function removeColons() {
    return (value) => {
      let index = 0;
      while (index !== -1) {
        index = value.indexOf("::");
        if (index === 0) {
          value = value.substring(2);
        } else if (index !== -1) {
          let start2 = index;
          while (start2 !== -1 && !BOX_PRECEDING.includes(value[start2])) {
            start2--;
          }
          value = `${value.substring(0, start2 + 1)}${value.substring(index + 2)}`;
        }
      }
      return value;
    };
  }
  function removeGenerics() {
    return (value) => {
      for (let i = 0, count = value.length; i < count; i++) {
        if (value[i] === "<") {
          const box = ALLOWED_BOXES.find((box2) => {
            const start2 = i - box2.length;
            return start2 >= 0 && value.substring(start2, i) === box2 && (start2 === 0 || BOX_PRECEDING.includes(value[start2 - 1]));
          });
          if (!box) {
            const end2 = findClosing(value, i + 1);
            value = `${value.substring(0, i)}${value.substring(end2 + 1)}`;
          }
        }
      }
      return value;
    };
  }
  function removePairOf() {
    const replacer2 = (v3) => `(${v3},${v3})`;
    return (value) => replaceTagWith(value, "PairOf<", replacer2);
  }
  function removeTraits() {
    const from1 = /\s/g;
    const from2 = /(T|Self)::/g;
    const from3 = /<(T|Self)asTrait>::/g;
    const from4 = /<Tas[a-z]+::Trait>::/g;
    const from5 = /<LookupasStaticLookup>/g;
    const from6 = /::Type/g;
    return (value) => {
      from1.lastIndex = 0;
      from2.lastIndex = 0;
      from3.lastIndex = 0;
      from4.lastIndex = 0;
      from5.lastIndex = 0;
      from6.lastIndex = 0;
      return value.replace(from1, "").replace(from2, "").replace(from3, "").replace(from4, "").replace(from5, "Lookup").replace(from6, "");
    };
  }
  function removeWrap(check) {
    const replacer2 = (v3) => v3;
    return (value) => replaceTagWith(value, check, replacer2);
  }
  var sanitizeMap = /* @__PURE__ */ new Map();
  function sanitize(value) {
    const startValue = value.toString();
    const memoized = sanitizeMap.get(startValue);
    if (memoized) {
      return memoized;
    }
    let result = startValue;
    for (let i = 0, count = mappings.length; i < count; i++) {
      result = mappings[i](result);
    }
    sanitizeMap.set(startValue, result);
    return result;
  }

  // ../../node_modules/@polkadot/types-codec/utils/sortValues.js
  function isArrayLike2(arg) {
    return arg instanceof Uint8Array || Array.isArray(arg);
  }
  function isEnum(arg) {
    return isCodec(arg) && isNumber(arg.index) && isCodec(arg.value);
  }
  function isNumberLike(arg) {
    return isNumber(arg) || isBn(arg) || isBigInt(arg);
  }
  function sortArray(a, b) {
    let sortRes = 0;
    const minLen = Math.min(a.length, b.length);
    for (let i = 0; i < minLen; ++i) {
      sortRes = sortAsc(a[i], b[i]);
      if (sortRes !== 0) {
        return sortRes;
      }
    }
    return a.length - b.length;
  }
  function sortAsc(a, b) {
    if (isNumberLike(a) && isNumberLike(b)) {
      return bnToBn(a).cmp(bnToBn(b));
    } else if (a instanceof Map && b instanceof Map) {
      return sortAsc(Array.from(a.values()), Array.from(b.values()));
    } else if (isEnum(a) && isEnum(b)) {
      return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
    } else if (isArrayLike2(a) && isArrayLike2(b)) {
      return sortArray(a, b);
    } else if (isCodec(a) && isCodec(b)) {
      return sortAsc(a.toU8a(true), b.toU8a(true));
    }
    throw new Error(`Attempting to sort unrecognized values: ${stringify(a)} (typeof ${typeof a}) <-> ${stringify(b)} (typeof ${typeof b})`);
  }
  function sortSet(set) {
    return new Set(Array.from(set).sort(sortAsc));
  }
  function sortMap(map3) {
    return new Map(Array.from(map3.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
  }

  // ../../node_modules/@polkadot/types-codec/utils/toConstructors.js
  function typeToConstructor(registry, type) {
    return typeof type === "function" ? type : registry.createClassUnsafe(type);
  }
  function typesToConstructors(registry, types2) {
    const count = types2.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = typeToConstructor(registry, types2[i]);
    }
    return result;
  }
  function mapToTypeMap(registry, input) {
    const entries = Object.entries(input);
    const count = entries.length;
    const output2 = [new Array(count), new Array(count)];
    for (let i = 0; i < count; i++) {
      output2[1][i] = entries[i][0];
      output2[0][i] = typeToConstructor(registry, entries[i][1]);
    }
    return output2;
  }

  // ../../node_modules/@polkadot/types-codec/utils/typesToMap.js
  function typesToMap(registry, [Types, keys2]) {
    const result = {};
    for (let i = 0, count = keys2.length; i < count; i++) {
      result[keys2[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
    }
    return result;
  }

  // ../../node_modules/@polkadot/types-codec/base/Compact.js
  function decodeCompact(registry, Type2, value) {
    if (isU8a(value)) {
      const [decodedLength, bn] = (value[0] & 3) < 3 ? compactFromU8aLim(value) : compactFromU8a(value);
      return [new Type2(registry, bn), decodedLength];
    } else if (value instanceof Compact) {
      const raw = value.unwrap();
      return raw instanceof Type2 ? [raw, 0] : [new Type2(registry, raw), 0];
    } else if (value instanceof Type2) {
      return [value, 0];
    }
    return [new Type2(registry, value), 0];
  }
  var Compact = class {
    constructor(registry, Type2, value = 0, { definition, setDefinition = identity } = {}) {
      this.registry = registry;
      this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
      const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);
      this.initialU8aLength = decodedLength;
      this.__internal__raw = raw;
    }
    static with(Type2) {
      let definition;
      const setDefinition = (d) => definition = d;
      return class extends Compact {
        constructor(registry, value) {
          super(registry, Type2, value, { definition, setDefinition });
        }
      };
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.__internal__raw.isEmpty;
    }
    bitLength() {
      return this.__internal__raw.bitLength();
    }
    eq(other) {
      return this.__internal__raw.eq(other instanceof Compact ? other.__internal__raw : other);
    }
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    toBigInt() {
      return this.__internal__raw.toBigInt();
    }
    toBn() {
      return this.__internal__raw.toBn();
    }
    toHex(isLe) {
      return this.__internal__raw.toHex(isLe);
    }
    toHuman(isExtended) {
      return this.__internal__raw.toHuman(isExtended);
    }
    toJSON() {
      return this.__internal__raw.toJSON();
    }
    toNumber() {
      return this.__internal__raw.toNumber();
    }
    toPrimitive() {
      return this.__internal__raw.toPrimitive();
    }
    toRawType() {
      return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;
    }
    toString() {
      return this.__internal__raw.toString();
    }
    toU8a(_isBare) {
      return compactToU8a(this.__internal__raw.toBn());
    }
    unwrap() {
      return this.__internal__raw;
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/DoNotConstruct.js
  var DoNotConstruct = class {
    constructor(registry, typeName = "DoNotConstruct") {
      this.registry = registry;
      this.__internal__neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
      throw this.__internal__neverError;
    }
    static with(typeName) {
      return class extends DoNotConstruct {
        constructor(registry) {
          super(registry, typeName);
        }
      };
    }
    get encodedLength() {
      throw this.__internal__neverError;
    }
    get hash() {
      throw this.__internal__neverError;
    }
    get isEmpty() {
      throw this.__internal__neverError;
    }
    eq() {
      throw this.__internal__neverError;
    }
    inspect() {
      throw this.__internal__neverError;
    }
    toHex() {
      throw this.__internal__neverError;
    }
    toHuman() {
      throw this.__internal__neverError;
    }
    toJSON() {
      throw this.__internal__neverError;
    }
    toPrimitive() {
      throw this.__internal__neverError;
    }
    toRawType() {
      throw this.__internal__neverError;
    }
    toString() {
      throw this.__internal__neverError;
    }
    toU8a() {
      throw this.__internal__neverError;
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/Null.js
  var Null = class {
    constructor(registry) {
      this.encodedLength = 0;
      this.isEmpty = true;
      this.initialU8aLength = 0;
      this.registry = registry;
    }
    get hash() {
      throw new Error(".hash is not implemented on Null");
    }
    eq(other) {
      return other instanceof Null || isNull(other);
    }
    inspect() {
      return {};
    }
    toHex() {
      return "0x";
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return null;
    }
    toPrimitive() {
      return null;
    }
    toRawType() {
      return "Null";
    }
    toString() {
      return "";
    }
    toU8a(_isBare) {
      return new Uint8Array();
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/Enum.js
  function isRustEnum(def) {
    const defValues = Object.values(def);
    if (defValues.some((v3) => isNumber(v3))) {
      if (!defValues.every((v3) => isNumber(v3) && v3 >= 0 && v3 <= 255)) {
        throw new Error("Invalid number-indexed enum definition");
      }
      return false;
    }
    return true;
  }
  function extractDef(registry, _def) {
    const def = {};
    let isBasic;
    let isIndexed;
    if (Array.isArray(_def)) {
      for (let i = 0, count = _def.length; i < count; i++) {
        def[_def[i]] = { Type: Null, index: i };
      }
      isBasic = true;
      isIndexed = false;
    } else if (isRustEnum(_def)) {
      const [Types, keys2] = mapToTypeMap(registry, _def);
      for (let i = 0, count = keys2.length; i < count; i++) {
        def[keys2[i]] = { Type: Types[i], index: i };
      }
      isBasic = !Object.values(def).some(({ Type: Type2 }) => Type2 !== Null);
      isIndexed = false;
    } else {
      const entries = Object.entries(_def);
      for (let i = 0, count = entries.length; i < count; i++) {
        const [key, index] = entries[i];
        def[key] = { Type: Null, index };
      }
      isBasic = true;
      isIndexed = true;
    }
    return {
      def,
      isBasic,
      isIndexed
    };
  }
  function getEntryType(def, checkIdx) {
    const values = Object.values(def);
    for (let i = 0; i < values.length; i++) {
      const { Type: Type2, index } = values[i];
      if (index === checkIdx) {
        return Type2;
      }
    }
    throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(", ")}`);
  }
  function createFromU8a(registry, def, index, value) {
    const Type2 = getEntryType(def, index);
    return {
      index,
      value: new Type2(registry, value)
    };
  }
  function createFromValue(registry, def, index = 0, value) {
    const Type2 = getEntryType(def, index);
    return {
      index,
      value: value instanceof Type2 ? value : new Type2(registry, value)
    };
  }
  function decodeFromJSON(registry, def, key, value) {
    const keys2 = Object.keys(def).map((k) => k.toLowerCase());
    const keyLower = key.toLowerCase();
    const index = keys2.indexOf(keyLower);
    if (index === -1) {
      throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys2.join(", ")}`);
    }
    try {
      return createFromValue(registry, def, Object.values(def)[index].index, value);
    } catch (error) {
      throw new Error(`Enum(${key}):: ${error.message}`);
    }
  }
  function decodeEnum(registry, def, value, index) {
    if (isNumber(index)) {
      return createFromValue(registry, def, index, value);
    } else if (isU8a(value) || isHex(value)) {
      const u8a2 = u8aToU8a(value);
      if (u8a2.length) {
        return createFromU8a(registry, def, u8a2[0], u8a2.subarray(1));
      }
    } else if (value instanceof Enum) {
      return createFromValue(registry, def, value.index, value.value);
    } else if (isNumber(value)) {
      return createFromValue(registry, def, value);
    } else if (isString(value)) {
      return decodeFromJSON(registry, def, value.toString());
    } else if (isObject(value)) {
      const key = Object.keys(value)[0];
      return decodeFromJSON(registry, def, key, value[key]);
    }
    return createFromValue(registry, def, Object.values(def)[0].index);
  }
  var Enum = class {
    constructor(registry, Types, value, index, { definition, setDefinition = identity } = {}) {
      const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
      const decoded = isU8a(value) && value.length && !isNumber(index) ? createFromU8a(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index);
      this.registry = registry;
      this.__internal__def = def;
      this.__internal__isBasic = isBasic;
      this.__internal__isIndexed = isIndexed;
      this.__internal__indexes = Object.values(def).map(({ index: index2 }) => index2);
      this.__internal__entryIndex = this.__internal__indexes.indexOf(decoded.index);
      this.__internal__raw = decoded.value;
      if (this.__internal__raw.initialU8aLength) {
        this.initialU8aLength = 1 + this.__internal__raw.initialU8aLength;
      }
    }
    static with(Types) {
      var _a;
      let definition;
      const setDefinition = (d) => definition = d;
      return _a = class extends Enum {
        constructor(registry, value, index) {
          super(registry, Types, value, index, { definition, setDefinition });
        }
      }, (() => {
        const keys2 = Array.isArray(Types) ? Types : Object.keys(Types);
        const count = keys2.length;
        const asKeys = new Array(count);
        const isKeys = new Array(count);
        for (let i = 0; i < count; i++) {
          const name = stringPascalCase(keys2[i]);
          asKeys[i] = `as${name}`;
          isKeys[i] = `is${name}`;
        }
        objectProperties(_a.prototype, isKeys, (_3, i, self2) => self2.type === keys2[i]);
        objectProperties(_a.prototype, asKeys, (k, i, self2) => {
          if (self2.type !== keys2[i]) {
            throw new Error(`Cannot convert '${self2.type}' via ${k}`);
          }
          return self2.value;
        });
      })(), _a;
    }
    get encodedLength() {
      return 1 + this.__internal__raw.encodedLength;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get index() {
      return this.__internal__indexes[this.__internal__entryIndex];
    }
    get inner() {
      return this.__internal__raw;
    }
    get isBasic() {
      return this.__internal__isBasic;
    }
    get isEmpty() {
      return this.__internal__raw.isEmpty;
    }
    get isNone() {
      return this.__internal__raw instanceof Null;
    }
    get defIndexes() {
      return this.__internal__indexes;
    }
    get defKeys() {
      return Object.keys(this.__internal__def);
    }
    get type() {
      return this.defKeys[this.__internal__entryIndex];
    }
    get value() {
      return this.__internal__raw;
    }
    eq(other) {
      if (isU8a(other)) {
        return !this.toU8a().some((entry, index) => entry !== other[index]);
      } else if (isNumber(other)) {
        return this.toNumber() === other;
      } else if (this.__internal__isBasic && isString(other)) {
        return this.type === other;
      } else if (isHex(other)) {
        return this.toHex() === other;
      } else if (other instanceof Enum) {
        return this.index === other.index && this.value.eq(other.value);
      } else if (isObject(other)) {
        return this.value.eq(other[this.type]);
      }
      return this.value.eq(other);
    }
    inspect() {
      if (this.__internal__isBasic) {
        return { outer: [new Uint8Array([this.index])] };
      }
      const { inner, outer = [] } = this.__internal__raw.inspect();
      return {
        inner,
        outer: [new Uint8Array([this.index]), ...outer]
      };
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toHuman(isExtended) {
      return this.__internal__isBasic || this.isNone ? this.type : { [this.type]: this.__internal__raw.toHuman(isExtended) };
    }
    toJSON() {
      return this.__internal__isBasic ? this.type : { [stringCamelCase(this.type)]: this.__internal__raw.toJSON() };
    }
    toNumber() {
      return this.index;
    }
    toPrimitive() {
      return this.__internal__isBasic ? this.type : { [stringCamelCase(this.type)]: this.__internal__raw.toPrimitive() };
    }
    _toRawStruct() {
      if (this.__internal__isBasic) {
        return this.__internal__isIndexed ? this.defKeys.reduce((out, key, index) => {
          out[key] = this.__internal__indexes[index];
          return out;
        }, {}) : this.defKeys;
      }
      const entries = Object.entries(this.__internal__def);
      return typesToMap(this.registry, entries.reduce((out, [key, { Type: Type2 }], i) => {
        out[0][i] = Type2;
        out[1][i] = key;
        return out;
      }, [new Array(entries.length), new Array(entries.length)]));
    }
    toRawType() {
      return stringify({ _enum: this._toRawStruct() });
    }
    toString() {
      return this.isNone ? this.type : stringify(this.toJSON());
    }
    toU8a(isBare) {
      return isBare ? this.__internal__raw.toU8a(isBare) : u8aConcatStrict([
        new Uint8Array([this.index]),
        this.__internal__raw.toU8a(isBare)
      ]);
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/Int.js
  var Int = class extends AbstractInt {
    constructor(registry, value = 0, bitLength) {
      super(registry, value, bitLength, true);
    }
    static with(bitLength, typeName) {
      return class extends Int {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }
        toRawType() {
          return typeName || super.toRawType();
        }
      };
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/Option.js
  var None = class extends Null {
    toRawType() {
      return "None";
    }
  };
  function decodeOption(registry, Type2, value) {
    if (value instanceof Type2) {
      return value;
    } else if (value instanceof Option) {
      if (value.value instanceof Type2) {
        return value.value;
      } else if (value.isNone) {
        return new None(registry);
      }
      return new Type2(registry, value.value);
    } else if (isNull(value) || isUndefined(value) || value === "0x" || value instanceof None) {
      return new None(registry);
    } else if (isU8a(value)) {
      return !value.length || value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1));
    }
    return new Type2(registry, value);
  }
  var Option = class {
    constructor(registry, typeName, value, { definition, setDefinition = identity } = {}) {
      const Type2 = definition || setDefinition(typeToConstructor(registry, typeName));
      const decoded = isU8a(value) && value.length && !isCodec(value) ? value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1)) : decodeOption(registry, Type2, value);
      this.registry = registry;
      this.__internal__Type = Type2;
      this.__internal__raw = decoded;
      if (decoded?.initialU8aLength) {
        this.initialU8aLength = 1 + decoded.initialU8aLength;
      }
    }
    static with(Type2) {
      let definition;
      const setDefinition = (d) => {
        definition = d;
        return d;
      };
      return class extends Option {
        constructor(registry, value) {
          super(registry, Type2, value, { definition, setDefinition });
        }
      };
    }
    get encodedLength() {
      return 1 + this.__internal__raw.encodedLength;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.isNone;
    }
    get isNone() {
      return this.__internal__raw instanceof None;
    }
    get isSome() {
      return !this.isNone;
    }
    get value() {
      return this.__internal__raw;
    }
    eq(other) {
      if (other instanceof Option) {
        return this.isSome === other.isSome && this.value.eq(other.value);
      }
      return this.value.eq(other);
    }
    inspect() {
      if (this.isNone) {
        return { outer: [new Uint8Array([0])] };
      }
      const { inner, outer = [] } = this.__internal__raw.inspect();
      return {
        inner,
        outer: [new Uint8Array([1]), ...outer]
      };
    }
    toHex() {
      return this.isNone ? "0x" : u8aToHex(this.toU8a().subarray(1));
    }
    toHuman(isExtended) {
      return this.__internal__raw.toHuman(isExtended);
    }
    toJSON() {
      return this.isNone ? null : this.__internal__raw.toJSON();
    }
    toPrimitive() {
      return this.isNone ? null : this.__internal__raw.toPrimitive();
    }
    toRawType(isBare) {
      const wrapped = this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType();
      return isBare ? wrapped : `Option<${wrapped}>`;
    }
    toString() {
      return this.__internal__raw.toString();
    }
    toU8a(isBare) {
      if (isBare) {
        return this.__internal__raw.toU8a(true);
      }
      const u8a2 = new Uint8Array(this.encodedLength);
      if (this.isSome) {
        u8a2.set([1]);
        u8a2.set(this.__internal__raw.toU8a(), 1);
      }
      return u8a2;
    }
    unwrap() {
      if (this.isNone) {
        throw new Error("Option: unwrapping a None value");
      }
      return this.__internal__raw;
    }
    unwrapOr(defaultValue) {
      return this.isSome ? this.unwrap() : defaultValue;
    }
    unwrapOrDefault() {
      return this.isSome ? this.unwrap() : new this.__internal__Type(this.registry);
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/Result.js
  var Result = class extends Enum {
    constructor(registry, Ok, Err, value) {
      super(registry, { Ok, Err }, value);
    }
    static with(Types) {
      return class extends Result {
        constructor(registry, value) {
          super(registry, Types.Ok, Types.Err, value);
        }
      };
    }
    get asErr() {
      if (!this.isErr) {
        throw new Error("Cannot extract Err value from Ok result, check isErr first");
      }
      return this.value;
    }
    get asOk() {
      if (!this.isOk) {
        throw new Error("Cannot extract Ok value from Err result, check isOk first");
      }
      return this.value;
    }
    get isEmpty() {
      return this.isOk && this.value.isEmpty;
    }
    get isErr() {
      return !this.isOk;
    }
    get isOk() {
      return this.index === 0;
    }
    toRawType() {
      const Types = this._toRawStruct();
      return `Result<${Types.Ok},${Types.Err}>`;
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/Tuple.js
  function decodeTuple(registry, result, value, Classes) {
    if (Array.isArray(value)) {
      const Types = Classes[0];
      for (let i = 0, count = Types.length; i < count; i++) {
        try {
          const entry = value?.[i];
          result[i] = entry instanceof Types[i] ? entry : new Types[i](registry, entry);
        } catch (error) {
          throw new Error(`Tuple: failed on ${i}:: ${error.message}`);
        }
      }
      return [result, 0];
    } else if (isHex(value)) {
      return decodeU8a(registry, result, u8aToU8a(value), Classes);
    } else if (!value || !result.length) {
      const Types = Classes[0];
      for (let i = 0, count = Types.length; i < count; i++) {
        result[i] = new Types[i](registry);
      }
      return [result, 0];
    }
    throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${stringify(value)}`);
  }
  var Tuple = class extends AbstractArray {
    constructor(registry, Types, value, { definition, setDefinition = identity } = {}) {
      const Classes = definition || setDefinition(Array.isArray(Types) ? [typesToConstructors(registry, Types), []] : isFunction(Types) || isString(Types) ? [[typeToConstructor(registry, Types)], []] : mapToTypeMap(registry, Types));
      super(registry, Classes[0].length);
      this.initialU8aLength = (isU8a(value) ? decodeU8a(registry, this, value, Classes) : decodeTuple(registry, this, value, Classes))[1];
      this.__internal__Types = Classes;
    }
    static with(Types) {
      let definition;
      const setDefinition = (d) => definition = d;
      return class extends Tuple {
        constructor(registry, value) {
          super(registry, Types, value, { definition, setDefinition });
        }
      };
    }
    get encodedLength() {
      let total = 0;
      for (let i = 0, count = this.length; i < count; i++) {
        total += this[i].encodedLength;
      }
      return total;
    }
    get Types() {
      return this.__internal__Types[1].length ? this.__internal__Types[1] : this.__internal__Types[0].map((T) => new T(this.registry).toRawType());
    }
    inspect() {
      return {
        inner: this.inspectInner()
      };
    }
    toRawType() {
      const types2 = this.__internal__Types[0].map((T) => this.registry.getClassName(T) || new T(this.registry).toRawType());
      return `(${types2.join(",")})`;
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(isBare) {
      return u8aConcatStrict(this.toU8aInner(isBare));
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/UInt.js
  var UInt = class extends AbstractInt {
    static with(bitLength, typeName) {
      return class extends UInt {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }
        toRawType() {
          return typeName || super.toRawType();
        }
      };
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/Vec.js
  var MAX_LENGTH = 64 * 1024;
  var l3 = logger("Vec");
  function decodeVecLength(value) {
    if (Array.isArray(value)) {
      return [value, value.length, 0];
    } else if (isU8a(value) || isHex(value)) {
      const u8a2 = u8aToU8a(value);
      const [startAt, length] = compactFromU8aLim(u8a2);
      if (length > MAX_LENGTH) {
        throw new Error(`Vec length ${length.toString()} exceeds ${MAX_LENGTH}`);
      }
      return [u8a2, length, startAt];
    } else if (!value) {
      return [null, 0, 0];
    }
    throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${stringify(value)}`);
  }
  function decodeVec(registry, result, value, startAt, Type2) {
    if (Array.isArray(value)) {
      const count = result.length;
      for (let i = 0; i < count; i++) {
        const entry = value[i];
        try {
          result[i] = entry instanceof Type2 ? entry : new Type2(registry, entry);
        } catch (error) {
          l3.error(`Unable to decode on index ${i}`, error.message);
          throw error;
        }
      }
      return [0, 0];
    } else if (!value) {
      return [0, 0];
    }
    return decodeU8aVec(registry, result, u8aToU8a(value), startAt, Type2);
  }
  var Vec = class extends AbstractArray {
    constructor(registry, Type2, value = [], { definition, setDefinition = identity } = {}) {
      const [decodeFrom, length, startAt] = decodeVecLength(value);
      super(registry, length);
      this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
      this.initialU8aLength = (isU8a(decodeFrom) ? decodeU8aVec(registry, this, decodeFrom, startAt, this.__internal__Type) : decodeVec(registry, this, decodeFrom, startAt, this.__internal__Type))[0];
    }
    static with(Type2) {
      let definition;
      const setDefinition = (d) => definition = d;
      return class extends Vec {
        constructor(registry, value) {
          super(registry, Type2, value, { definition, setDefinition });
        }
      };
    }
    get Type() {
      return this.__internal__Type.name;
    }
    indexOf(other) {
      const check = other instanceof this.__internal__Type ? other : new this.__internal__Type(this.registry, other);
      for (let i = 0, count = this.length; i < count; i++) {
        if (check.eq(this[i])) {
          return i;
        }
      }
      return -1;
    }
    toRawType() {
      return `Vec<${this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType()}>`;
    }
  };

  // ../../node_modules/@polkadot/types-codec/base/VecFixed.js
  var VecFixed = class extends AbstractArray {
    constructor(registry, Type2, length, value = [], { definition, setDefinition = identity } = {}) {
      super(registry, length);
      this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
      this.initialU8aLength = (isU8a(value) ? decodeU8aVec(registry, this, value, 0, this.__internal__Type) : decodeVec(registry, this, value, 0, this.__internal__Type))[1];
    }
    static with(Type2, length) {
      let definition;
      const setDefinition = (d) => definition = d;
      return class extends VecFixed {
        constructor(registry, value) {
          super(registry, Type2, length, value, { definition, setDefinition });
        }
      };
    }
    get Type() {
      return new this.__internal__Type(this.registry).toRawType();
    }
    get encodedLength() {
      let total = 0;
      for (let i = 0, count = this.length; i < count; i++) {
        total += this[i].encodedLength;
      }
      return total;
    }
    inspect() {
      return {
        inner: this.inspectInner()
      };
    }
    toU8a() {
      const encoded = this.toU8aInner();
      return encoded.length ? u8aConcatStrict(encoded) : new Uint8Array([]);
    }
    toRawType() {
      return `[${this.Type};${this.length}]`;
    }
  };

  // ../../node_modules/@polkadot/types-codec/native/Raw.js
  var Raw = class extends Uint8Array {
    static get [Symbol.species]() {
      return Uint8Array;
    }
    constructor(registry, value, initialU8aLength) {
      super(u8aToU8a(value));
      this.registry = registry;
      this.initialU8aLength = initialU8aLength;
    }
    get encodedLength() {
      return this.length;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isAscii() {
      return isAscii(this);
    }
    get isEmpty() {
      return !this.length || isUndefined(this.find((b) => !!b));
    }
    get isUtf8() {
      return isUtf8(this);
    }
    bitLength() {
      return this.length * 8;
    }
    eq(other) {
      if (other instanceof Uint8Array) {
        return this.length === other.length && !this.some((b, index) => b !== other[index]);
      }
      return this.eq(u8aToU8a(other));
    }
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    toHex() {
      return u8aToHex(this);
    }
    toHuman() {
      return this.toPrimitive();
    }
    toJSON() {
      return this.toHex();
    }
    toPrimitive() {
      if (this.isAscii) {
        const text = this.toUtf8();
        if (isAscii(text)) {
          return text;
        }
      }
      return this.toJSON();
    }
    toRawType() {
      return "Raw";
    }
    toString() {
      return this.toHex();
    }
    toU8a(_isBare) {
      return Uint8Array.from(this);
    }
    toUtf8() {
      if (!this.isUtf8) {
        throw new Error("The character sequence is not a valid Utf8 string");
      }
      return u8aToString(this);
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/BitVec.js
  function decodeBitVecU8a(value) {
    if (!value || !value.length) {
      return [0, new Uint8Array()];
    }
    const [offset2, length] = compactFromU8aLim(value);
    const total = offset2 + Math.ceil(length / 8);
    if (total > value.length) {
      throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [length, value.subarray(offset2, total)];
  }
  function decodeBitVec(value) {
    if (Array.isArray(value) || isString(value)) {
      const u8a2 = u8aToU8a(value);
      return [u8a2.length / 8, u8a2];
    }
    return decodeBitVecU8a(value);
  }
  var BitVec = class extends Raw {
    constructor(registry, value, isMsb = false) {
      const [decodedLength, u8a2] = decodeBitVec(value);
      super(registry, u8a2);
      this.__internal__decodedLength = decodedLength;
      this.__internal__isMsb = isMsb;
    }
    get encodedLength() {
      return this.length + compactToU8a(this.__internal__decodedLength).length;
    }
    inspect() {
      return {
        outer: [compactToU8a(this.__internal__decodedLength), super.toU8a()]
      };
    }
    toBoolArray() {
      const map3 = [...this.toU8a(true)].map((v3) => [
        !!(v3 & 128),
        !!(v3 & 64),
        !!(v3 & 32),
        !!(v3 & 16),
        !!(v3 & 8),
        !!(v3 & 4),
        !!(v3 & 2),
        !!(v3 & 1)
      ]);
      const count = map3.length;
      const result = new Array(8 * count);
      for (let i = 0; i < count; i++) {
        const off = i * 8;
        const v3 = map3[i];
        for (let j = 0; j < 8; j++) {
          result[off + j] = this.__internal__isMsb ? v3[j] : v3[7 - j];
        }
      }
      return result;
    }
    toHuman() {
      return `0b${[...this.toU8a(true)].map((d) => `00000000${d.toString(2)}`.slice(-8)).map((s) => this.__internal__isMsb ? s : s.split("").reverse().join("")).join("_")}`;
    }
    toRawType() {
      return "BitVec";
    }
    toU8a(isBare) {
      const bitVec = super.toU8a(isBare);
      return isBare ? bitVec : u8aConcatStrict([compactToU8a(this.__internal__decodedLength), bitVec]);
    }
  };

  // ../../node_modules/@polkadot/types-codec/native/Struct.js
  function noopSetDefinition(d) {
    return d;
  }
  function decodeStructFromObject(registry, [Types, keys2], value, jsonMap) {
    let jsonObj;
    const typeofArray = Array.isArray(value);
    const typeofMap = value instanceof Map;
    const count = keys2.length;
    if (!typeofArray && !typeofMap && !isObject(value)) {
      throw new Error(`Struct: Cannot decode value ${stringify(value)} (typeof ${typeof value}), expected an input object, map or array`);
    } else if (typeofArray && value.length !== count) {
      throw new Error(`Struct: Unable to map ${stringify(value)} array to object with known keys ${keys2.join(", ")}`);
    }
    const raw = new Array(count);
    for (let i = 0; i < count; i++) {
      const key = keys2[i];
      const jsonKey = jsonMap.get(key) || key;
      const Type2 = Types[i];
      let assign;
      try {
        if (typeofArray) {
          assign = value[i];
        } else if (typeofMap) {
          assign = jsonKey && value.get(jsonKey);
        } else {
          assign = jsonKey && value[jsonKey];
          if (isUndefined(assign)) {
            if (isUndefined(jsonObj)) {
              const entries = Object.entries(value);
              jsonObj = {};
              for (let e = 0, ecount = entries.length; e < ecount; e++) {
                jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
              }
            }
            assign = jsonKey && jsonObj[jsonKey];
          }
        }
        raw[i] = [
          key,
          assign instanceof Type2 ? assign : new Type2(registry, assign)
        ];
      } catch (error) {
        let type = Type2.name;
        try {
          type = new Type2(registry).toRawType();
        } catch {
        }
        throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
      }
    }
    return [raw, 0];
  }
  var Struct = class extends Map {
    constructor(registry, Types, value, jsonMap = /* @__PURE__ */ new Map(), { definition, setDefinition = noopSetDefinition } = {}) {
      const typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
      const [decoded, decodedLength] = isU8a(value) || isHex(value) ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a(value), typeMap) : value instanceof Struct ? [value, 0] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
      super(decoded);
      this.initialU8aLength = decodedLength;
      this.registry = registry;
      this.__internal__jsonMap = jsonMap;
      this.__internal__Types = typeMap;
    }
    static with(Types, jsonMap) {
      var _a;
      let definition;
      const setDefinition = (d) => definition = d;
      return _a = class extends Struct {
        constructor(registry, value) {
          super(registry, Types, value, jsonMap, { definition, setDefinition });
        }
      }, (() => {
        const keys2 = Object.keys(Types);
        objectProperties(_a.prototype, keys2, (k, _3, self2) => self2.get(k));
      })(), _a;
    }
    get defKeys() {
      return this.__internal__Types[1];
    }
    get isEmpty() {
      for (const v3 of this.values()) {
        if (!v3.isEmpty) {
          return false;
        }
      }
      return true;
    }
    get encodedLength() {
      let total = 0;
      for (const v3 of this.values()) {
        total += v3.encodedLength;
      }
      return total;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get Type() {
      const result = {};
      const [Types, keys2] = this.__internal__Types;
      for (let i = 0, count = keys2.length; i < count; i++) {
        result[keys2[i]] = new Types[i](this.registry).toRawType();
      }
      return result;
    }
    eq(other) {
      return compareMap(this, other);
    }
    get(key) {
      return super.get(key);
    }
    getAtIndex(index) {
      return this.toArray()[index];
    }
    getT(key) {
      return super.get(key);
    }
    inspect(isBare) {
      const inner = [];
      for (const [k, v3] of this.entries()) {
        inner.push({
          ...v3.inspect(!isBare || isBoolean(isBare) ? isBare : isBare[k]),
          name: stringCamelCase(k)
        });
      }
      return {
        inner
      };
    }
    toArray() {
      return [...this.values()];
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toHuman(isExtended) {
      const json = {};
      for (const [k, v3] of this.entries()) {
        json[k] = v3.toHuman(isExtended);
      }
      return json;
    }
    toJSON() {
      const json = {};
      for (const [k, v3] of this.entries()) {
        json[this.__internal__jsonMap.get(k) || k] = v3.toJSON();
      }
      return json;
    }
    toPrimitive() {
      const json = {};
      for (const [k, v3] of this.entries()) {
        json[k] = v3.toPrimitive();
      }
      return json;
    }
    toRawType() {
      return stringify(typesToMap(this.registry, this.__internal__Types));
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(isBare) {
      const encoded = [];
      for (const [k, v3] of this.entries()) {
        encoded.push(v3.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[k]));
      }
      return u8aConcatStrict(encoded);
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/Map.js
  var l4 = logger("Map");
  function decodeMapFromU8a(registry, KeyClass, ValClass, u8a2) {
    const output2 = /* @__PURE__ */ new Map();
    const [offset2, count] = compactFromU8aLim(u8a2);
    const types2 = [];
    for (let i = 0; i < count; i++) {
      types2.push(KeyClass, ValClass);
    }
    const [values, decodedLength] = decodeU8a(registry, new Array(types2.length), u8a2.subarray(offset2), [types2, []]);
    for (let i = 0, count2 = values.length; i < count2; i += 2) {
      output2.set(values[i], values[i + 1]);
    }
    return [KeyClass, ValClass, output2, offset2 + decodedLength];
  }
  function decodeMapFromMap(registry, KeyClass, ValClass, value) {
    const output2 = /* @__PURE__ */ new Map();
    for (const [key, val] of value.entries()) {
      const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;
      try {
        output2.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex && typeof key === "string" ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l4.error("Failed to decode key or value:", error.message);
        throw error;
      }
    }
    return [KeyClass, ValClass, output2, 0];
  }
  function decodeMap(registry, keyType, valType, value) {
    const KeyClass = typeToConstructor(registry, keyType);
    const ValClass = typeToConstructor(registry, valType);
    if (!value) {
      return [KeyClass, ValClass, /* @__PURE__ */ new Map(), 0];
    } else if (isU8a(value) || isHex(value)) {
      return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));
    } else if (value instanceof Map) {
      return decodeMapFromMap(registry, KeyClass, ValClass, value);
    } else if (isObject(value)) {
      return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
    }
    throw new Error("Map: cannot decode type");
  }
  var CodecMap = class extends Map {
    constructor(registry, keyType, valType, rawValue, type = "HashMap") {
      const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
      super(type === "BTreeMap" ? sortMap(decoded) : decoded);
      this.registry = registry;
      this.initialU8aLength = decodedLength;
      this.__internal__KeyClass = KeyClass;
      this.__internal__ValClass = ValClass;
      this.__internal__type = type;
    }
    get encodedLength() {
      let len = compactToU8a(this.size).length;
      for (const [k, v3] of this.entries()) {
        len += k.encodedLength + v3.encodedLength;
      }
      return len;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.size === 0;
    }
    eq(other) {
      return compareMap(this, other);
    }
    inspect() {
      const inner = [];
      for (const [k, v3] of this.entries()) {
        inner.push(k.inspect());
        inner.push(v3.inspect());
      }
      return {
        inner,
        outer: [compactToU8a(this.size)]
      };
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toHuman(isExtended) {
      const json = {};
      for (const [k, v3] of this.entries()) {
        json[k instanceof Raw && k.isAscii ? k.toUtf8() : k.toString()] = v3.toHuman(isExtended);
      }
      return json;
    }
    toJSON() {
      const json = {};
      for (const [k, v3] of this.entries()) {
        json[k.toString()] = v3.toJSON();
      }
      return json;
    }
    toPrimitive() {
      const json = {};
      for (const [k, v3] of this.entries()) {
        json[k instanceof Raw && k.isAscii ? k.toUtf8() : k.toString()] = v3.toPrimitive();
      }
      return json;
    }
    toRawType() {
      return `${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass) || new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(isBare) {
      const encoded = [];
      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }
      for (const [k, v3] of this.entries()) {
        encoded.push(k.toU8a(isBare), v3.toU8a(isBare));
      }
      return u8aConcatStrict(encoded);
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/BTreeMap.js
  var BTreeMap = class extends CodecMap {
    static with(keyType, valType) {
      return class extends BTreeMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value, "BTreeMap");
        }
      };
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/BTreeSet.js
  var l5 = logger("BTreeSet");
  function decodeSetFromU8a(registry, ValClass, u8a2) {
    const output2 = /* @__PURE__ */ new Set();
    const [offset2, count] = compactFromU8aLim(u8a2);
    const result = new Array(count);
    const [decodedLength] = decodeU8aVec(registry, result, u8a2, offset2, ValClass);
    for (let i = 0; i < count; i++) {
      output2.add(result[i]);
    }
    return [ValClass, output2, decodedLength];
  }
  function decodeSetFromSet(registry, ValClass, value) {
    const output2 = /* @__PURE__ */ new Set();
    value.forEach((val) => {
      try {
        output2.add(val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l5.error("Failed to decode key or value:", error.message);
        throw error;
      }
    });
    return [ValClass, output2, 0];
  }
  function decodeSet(registry, valType, value) {
    const ValClass = typeToConstructor(registry, valType);
    if (!value) {
      return [ValClass, /* @__PURE__ */ new Set(), 0];
    } else if (isU8a(value) || isHex(value)) {
      return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));
    } else if (Array.isArray(value) || value instanceof Set) {
      return decodeSetFromSet(registry, ValClass, value);
    }
    throw new Error("BTreeSet: cannot decode type");
  }
  var BTreeSet = class extends Set {
    constructor(registry, valType, rawValue) {
      const [ValClass, values, decodedLength] = decodeSet(registry, valType, rawValue);
      super(sortSet(values));
      this.registry = registry;
      this.initialU8aLength = decodedLength;
      this.__internal__ValClass = ValClass;
    }
    static with(valType) {
      return class extends BTreeSet {
        constructor(registry, value) {
          super(registry, valType, value);
        }
      };
    }
    get encodedLength() {
      let len = compactToU8a(this.size).length;
      for (const v3 of this.values()) {
        len += v3.encodedLength;
      }
      return len;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.size === 0;
    }
    get strings() {
      return [...super.values()].map((v3) => v3.toString());
    }
    eq(other) {
      return compareSet(this, other);
    }
    inspect() {
      const inner = [];
      for (const v3 of this.values()) {
        inner.push(v3.inspect());
      }
      return {
        inner,
        outer: [compactToU8a(this.size)]
      };
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toHuman(isExtended) {
      const json = [];
      for (const v3 of this.values()) {
        json.push(v3.toHuman(isExtended));
      }
      return json;
    }
    toJSON() {
      const json = [];
      for (const v3 of this.values()) {
        json.push(v3.toJSON());
      }
      return json;
    }
    toRawType() {
      return `BTreeSet<${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
    }
    toPrimitive() {
      const json = [];
      for (const v3 of this.values()) {
        json.push(v3.toPrimitive());
      }
      return json;
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(isBare) {
      const encoded = [];
      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }
      for (const v3 of this.values()) {
        encoded.push(v3.toU8a(isBare));
      }
      return u8aConcatStrict(encoded);
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/Bytes.js
  var MAX_LENGTH2 = 10 * 1024 * 1024;
  function decodeBytesU8a(value) {
    if (!value.length) {
      return [new Uint8Array(), 0];
    }
    const [offset2, length] = compactFromU8aLim(value);
    const total = offset2 + length;
    if (length > MAX_LENGTH2) {
      throw new Error(`Bytes length ${length.toString()} exceeds ${MAX_LENGTH2}`);
    } else if (total > value.length) {
      throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [value.subarray(offset2, total), total];
  }
  var Bytes = class extends Raw {
    constructor(registry, value) {
      const [u8a2, decodedLength] = isU8a(value) && !(value instanceof Raw) ? decodeBytesU8a(value) : Array.isArray(value) || isString(value) ? [u8aToU8a(value), 0] : [value, 0];
      super(registry, u8a2, decodedLength);
    }
    get encodedLength() {
      return this.length + compactToU8a(this.length).length;
    }
    inspect(isBare) {
      const clength = compactToU8a(this.length);
      return {
        outer: isBare ? [super.toU8a()] : this.length ? [clength, super.toU8a()] : [clength]
      };
    }
    toRawType() {
      return "Bytes";
    }
    toU8a(isBare) {
      return isBare ? super.toU8a(isBare) : compactAddLength(this);
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/HashMap.js
  var HashMap = class extends CodecMap {
    static with(keyType, valType) {
      return class extends HashMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value);
        }
      };
    }
  };

  // ../../node_modules/@polkadot/types-codec/native/Bool.js
  var bool2 = class extends Boolean {
    constructor(registry, value = false) {
      super(isU8a(value) ? value[0] === 1 : value instanceof Boolean ? value.valueOf() : !!value);
      this.initialU8aLength = 1;
      this.registry = registry;
    }
    get encodedLength() {
      return 1;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.isFalse;
    }
    get isFalse() {
      return !this.isTrue;
    }
    get isTrue() {
      return this.valueOf();
    }
    eq(other) {
      return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
    }
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.valueOf();
    }
    toPrimitive() {
      return this.toJSON();
    }
    toRawType() {
      return "bool";
    }
    toString() {
      return this.toJSON().toString();
    }
    toU8a(_isBare) {
      return new Uint8Array([this.valueOf() ? 1 : 0]);
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/OptionBool.js
  function decodeU8a2(registry, value) {
    return value[0] === 0 ? null : new bool2(registry, value[0] === 1);
  }
  var OptionBool = class extends Option {
    constructor(registry, value) {
      super(registry, bool2, isU8a(value) || isHex(value) ? decodeU8a2(registry, u8aToU8a(value)) : value);
      this.initialU8aLength = 1;
    }
    get encodedLength() {
      return 1;
    }
    get isFalse() {
      return this.isSome ? !this.value.valueOf() : false;
    }
    get isTrue() {
      return this.isSome ? this.value.valueOf() : false;
    }
    inspect() {
      return { outer: [this.toU8a()] };
    }
    toRawType(isBare) {
      return isBare ? "bool" : "Option<bool>";
    }
    toU8a(isBare) {
      if (isBare) {
        return super.toU8a(true);
      }
      return this.isSome ? new Uint8Array([this.isTrue ? 1 : 2]) : new Uint8Array([0]);
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/Range.js
  var Range = class extends Tuple {
    constructor(registry, Type2, value, { rangeName = "Range" } = {}) {
      super(registry, [Type2, Type2], value);
      this.__internal__rangeName = rangeName;
    }
    static with(Type2) {
      return class extends Range {
        constructor(registry, value) {
          super(registry, Type2, value);
        }
      };
    }
    get start() {
      return this[0];
    }
    get end() {
      return this[1];
    }
    toRawType() {
      return `${this.__internal__rangeName}<${this.start.toRawType()}>`;
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/RangeInclusive.js
  var RangeInclusive = class extends Range {
    constructor(registry, Type2, value) {
      super(registry, Type2, value, { rangeName: "RangeInclusive" });
    }
    static with(Type2) {
      return class extends RangeInclusive {
        constructor(registry, value) {
          super(registry, Type2, value);
        }
      };
    }
  };

  // ../../node_modules/@polkadot/types-codec/native/Text.js
  var MAX_LENGTH3 = 128 * 1024;
  function decodeText(value) {
    if (isU8a(value)) {
      if (!value.length) {
        return ["", 0];
      }
      if (value instanceof Raw) {
        return [u8aToString(value), 0];
      }
      const [offset2, length] = compactFromU8aLim(value);
      const total = offset2 + length;
      if (length > MAX_LENGTH3) {
        throw new Error(`Text: length ${length.toString()} exceeds ${MAX_LENGTH3}`);
      } else if (total > value.length) {
        throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
      }
      return [u8aToString(value.subarray(offset2, total)), total];
    } else if (isHex(value)) {
      return [u8aToString(hexToU8a(value)), 0];
    }
    return [value ? value.toString() : "", 0];
  }
  var Text = class extends String {
    constructor(registry, value) {
      const [str, decodedLength] = decodeText(value);
      super(str);
      this.__internal__override = null;
      this.registry = registry;
      this.initialU8aLength = decodedLength;
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.length === 0;
    }
    get length() {
      return super.length;
    }
    eq(other) {
      return isString(other) ? this.toString() === other.toString() : false;
    }
    inspect() {
      const value = stringToU8a(super.toString());
      return {
        outer: value.length ? [compactToU8a(value.length), value] : [compactToU8a(value.length)]
      };
    }
    setOverride(override) {
      this.__internal__override = override;
    }
    toHex() {
      return u8aToHex(this.toU8a(true));
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.toString();
    }
    toPrimitive() {
      return this.toJSON();
    }
    toRawType() {
      return "Text";
    }
    toString() {
      return this.__internal__override || super.toString();
    }
    toU8a(isBare) {
      const encoded = stringToU8a(super.toString());
      return isBare ? encoded : compactAddLength(encoded);
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/Type.js
  var Type = class extends Text {
    constructor(registry, value = "") {
      super(registry, value);
      this.setOverride(sanitize(this.toString()));
    }
    toRawType() {
      return "Type";
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/U8aFixed.js
  function decodeU8aFixed(value, bitLength) {
    const u8a2 = u8aToU8a(value);
    const byteLength = bitLength / 8;
    if (!u8a2.length) {
      return [new Uint8Array(byteLength), 0];
    }
    if (isU8a(value) ? u8a2.length < byteLength : u8a2.length !== byteLength) {
      throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a2.length} bytes`);
    }
    return [u8a2.subarray(0, byteLength), byteLength];
  }
  var U8aFixed = class extends Raw {
    constructor(registry, value = new Uint8Array(), bitLength = 256) {
      const [u8a2, decodedLength] = decodeU8aFixed(value, bitLength);
      super(registry, u8a2, decodedLength);
    }
    static with(bitLength, typeName) {
      return class extends U8aFixed {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }
        toRawType() {
          return typeName || super.toRawType();
        }
      };
    }
    toRawType() {
      return `[u8;${this.length}]`;
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/WrapperKeepOpaque.js
  function decodeRaw(registry, typeName, value) {
    const Type2 = typeToConstructor(registry, typeName);
    if (isU8a(value) || isHex(value)) {
      try {
        const [, u8a2] = isHex(value) ? [0, u8aToU8a(value)] : value instanceof Raw ? [0, value.subarray()] : compactStripLength(value);
        return [Type2, new Type2(registry, u8a2), value];
      } catch {
        return [Type2, null, value];
      }
    }
    const instance = new Type2(registry, value);
    return [Type2, instance, compactAddLength(instance.toU8a())];
  }
  var WrapperKeepOpaque = class extends Bytes {
    constructor(registry, typeName, value, { opaqueName = "WrapperKeepOpaque" } = {}) {
      const [Type2, decoded, u8a2] = decodeRaw(registry, typeName, value);
      super(registry, u8a2);
      this.__internal__Type = Type2;
      this.__internal__decoded = decoded;
      this.__internal__opaqueName = opaqueName;
    }
    static with(Type2) {
      return class extends WrapperKeepOpaque {
        constructor(registry, value) {
          super(registry, Type2, value);
        }
      };
    }
    get isDecoded() {
      return !!this.__internal__decoded;
    }
    inspect() {
      return this.__internal__decoded ? {
        inner: [this.__internal__decoded.inspect()],
        outer: [compactToU8a(this.length)]
      } : {
        outer: [compactToU8a(this.length), this.toU8a(true)]
      };
    }
    toHuman(isExtended) {
      return this.__internal__decoded ? this.__internal__decoded.toHuman(isExtended) : super.toHuman();
    }
    toPrimitive() {
      return this.__internal__decoded ? this.__internal__decoded.toPrimitive() : super.toPrimitive();
    }
    toRawType() {
      return `${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type) || (this.__internal__decoded ? this.__internal__decoded.toRawType() : new this.__internal__Type(this.registry).toRawType())}>`;
    }
    toString() {
      return this.__internal__decoded ? this.__internal__decoded.toString() : super.toString();
    }
    unwrap() {
      if (!this.__internal__decoded) {
        throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);
      }
      return this.__internal__decoded;
    }
  };

  // ../../node_modules/@polkadot/types-codec/extended/WrapperOpaque.js
  var WrapperOpaque = class extends WrapperKeepOpaque {
    constructor(registry, typeName, value) {
      super(registry, typeName, value, { opaqueName: "WrapperOpaque" });
    }
    static with(Type2) {
      return class extends WrapperOpaque {
        constructor(registry, value) {
          super(registry, Type2, value);
        }
      };
    }
    get inner() {
      return this.unwrap();
    }
  };

  // ../../node_modules/@polkadot/types-codec/native/Float.js
  var Float = class extends Number {
    constructor(registry, value, { bitLength = 32 } = {}) {
      super(isU8a(value) || isHex(value) ? value.length === 0 ? 0 : u8aToFloat(u8aToU8a(value), { bitLength }) : value || 0);
      this.__internal__bitLength = bitLength;
      this.encodedLength = bitLength / 8;
      this.initialU8aLength = this.encodedLength;
      this.registry = registry;
    }
    static with(bitLength) {
      return class extends Float {
        constructor(registry, value) {
          super(registry, value, { bitLength });
        }
      };
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.valueOf() === 0;
    }
    eq(other) {
      return this.valueOf() === Number(other);
    }
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toHuman() {
      return this.toString();
    }
    toJSON() {
      return this.toHex();
    }
    toNumber() {
      return this.valueOf();
    }
    toPrimitive() {
      return this.toNumber();
    }
    toRawType() {
      return `f${this.__internal__bitLength}`;
    }
    toU8a(_isBare) {
      return floatToU8a(this, {
        bitLength: this.__internal__bitLength
      });
    }
  };

  // ../../node_modules/@polkadot/types-codec/native/Json.js
  function decodeJson(value) {
    return Object.entries(value || {});
  }
  var Json = class extends Map {
    constructor(registry, value) {
      const decoded = decodeJson(value);
      super(decoded);
      this.registry = registry;
      objectProperties(this, decoded.map(([k]) => k), (k) => this.get(k));
    }
    get encodedLength() {
      return 0;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return [...this.keys()].length === 0;
    }
    eq(other) {
      return compareMap(this, other);
    }
    getT(key) {
      return this.get(key);
    }
    inspect() {
      throw new Error("Unimplemented");
    }
    toHex() {
      throw new Error("Unimplemented");
    }
    toHuman() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = isFunction(value.toHuman) ? value.toHuman() : value;
        return json;
      }, {});
    }
    toJSON() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = value;
        return json;
      }, {});
    }
    toPrimitive() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = isFunction(value.toPrimitive) ? value.toPrimitive() : value;
        return json;
      }, {});
    }
    toRawType() {
      return "Json";
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(_isBare) {
      throw new Error("Unimplemented");
    }
  };

  // ../../node_modules/@polkadot/types-codec/native/Set.js
  function encodeSet(setValues, values) {
    const encoded = new import_bn.default(0);
    for (let i = 0, count = values.length; i < count; i++) {
      encoded.ior(bnToBn(setValues[values[i]] || 0));
    }
    return encoded;
  }
  function decodeSetArray(setValues, values) {
    const count = values.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      const key = values[i];
      if (isUndefined(setValues[key])) {
        throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(", ")}`);
      }
      result[i] = key;
    }
    return result;
  }
  function decodeSetNumber(setValues, _value) {
    const bn = bnToBn(_value);
    const keys2 = Object.keys(setValues);
    const result = [];
    for (let i = 0, count = keys2.length; i < count; i++) {
      const key = keys2[i];
      if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
        result.push(key);
      }
    }
    const computed = encodeSet(setValues, result);
    if (!bn.eq(computed)) {
      throw new Error(`Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(", ")}`);
    }
    return result;
  }
  function decodeSet2(setValues, value = 0, bitLength) {
    if (bitLength % 8 !== 0) {
      throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
    }
    const byteLength = bitLength / 8;
    if (isU8a(value)) {
      return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), { isLe: true }));
    } else if (isString(value)) {
      return decodeSet2(setValues, u8aToU8a(value), byteLength);
    } else if (value instanceof Set || Array.isArray(value)) {
      const input = Array.isArray(value) ? value : [...value.values()];
      return decodeSetArray(setValues, input);
    }
    return decodeSetNumber(setValues, value);
  }
  var CodecSet = class extends Set {
    constructor(registry, setValues, value, bitLength = 8) {
      super(decodeSet2(setValues, value, bitLength));
      this.add = (key) => {
        if (this.__internal__allowed && isUndefined(this.__internal__allowed[key])) {
          throw new Error(`Set: Invalid key '${key}' on add`);
        }
        super.add(key);
        return this;
      };
      this.registry = registry;
      this.__internal__allowed = setValues;
      this.__internal__byteLength = bitLength / 8;
    }
    static with(values, bitLength) {
      var _a;
      return _a = class extends CodecSet {
        constructor(registry, value) {
          super(registry, values, value, bitLength);
        }
      }, (() => {
        const keys2 = Object.keys(values);
        const count = keys2.length;
        const isKeys = new Array(count);
        for (let i = 0; i < count; i++) {
          isKeys[i] = `is${stringPascalCase(keys2[i])}`;
        }
        objectProperties(_a.prototype, isKeys, (_3, i, self2) => self2.strings.includes(keys2[i]));
      })(), _a;
    }
    get encodedLength() {
      return this.__internal__byteLength;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.size === 0;
    }
    get strings() {
      return [...super.values()];
    }
    get valueEncoded() {
      return encodeSet(this.__internal__allowed, this.strings);
    }
    eq(other) {
      if (Array.isArray(other)) {
        return compareArray(this.strings.sort(), other.sort());
      } else if (other instanceof Set) {
        return this.eq([...other.values()]);
      } else if (isNumber(other) || isBn(other)) {
        return this.valueEncoded.eq(bnToBn(other));
      }
      return false;
    }
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.strings;
    }
    toNumber() {
      return this.valueEncoded.toNumber();
    }
    toPrimitive() {
      return this.toJSON();
    }
    toRawType() {
      return stringify({ _set: this.__internal__allowed });
    }
    toString() {
      return `[${this.strings.join(", ")}]`;
    }
    toU8a(_isBare) {
      return bnToU8a(this.valueEncoded, {
        bitLength: this.__internal__byteLength * 8,
        isLe: true
      });
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/F32.js
  var f32 = class extends Float.with(32) {
    constructor() {
      super(...arguments);
      this.__FloatType = "f32";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/F64.js
  var f64 = class extends Float.with(64) {
    constructor() {
      super(...arguments);
      this.__FloatType = "f64";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/I8.js
  var i8 = class extends Int.with(8) {
    constructor() {
      super(...arguments);
      this.__IntType = "i8";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/I16.js
  var i16 = class extends Int.with(16) {
    constructor() {
      super(...arguments);
      this.__IntType = "i16";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/I32.js
  var i32 = class extends Int.with(32) {
    constructor() {
      super(...arguments);
      this.__IntType = "i32";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/I64.js
  var i64 = class extends Int.with(64) {
    constructor() {
      super(...arguments);
      this.__IntType = "i64";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/I128.js
  var i128 = class extends Int.with(128) {
    constructor() {
      super(...arguments);
      this.__IntType = "i128";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/I256.js
  var i256 = class extends Int.with(256) {
    constructor() {
      super(...arguments);
      this.__IntType = "i256";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/ISize.js
  var isize = class extends i32 {
    constructor(registry, value) {
      super(registry, value);
      throw new Error("The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.");
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/U8.js
  var u82 = class extends UInt.with(8) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u8";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/U16.js
  var u162 = class extends UInt.with(16) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u16";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/U32.js
  var u323 = class extends UInt.with(32) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u32";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/U64.js
  var u642 = class extends UInt.with(64) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u64";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/U128.js
  var u128 = class extends UInt.with(128) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u128";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/U256.js
  var u256 = class extends UInt.with(256) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u256";
    }
  };

  // ../../node_modules/@polkadot/types-codec/primitive/USize.js
  var usize = class extends u323 {
    constructor(registry, value) {
      super(registry, value);
      throw new Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.");
    }
  };

  // ../../node_modules/@polkadot/types-create/util/typeSplit.js
  function typeSplit(type) {
    const result = [];
    let c2 = 0;
    let f = 0;
    let s = 0;
    let t = 0;
    let start2 = 0;
    for (let i = 0, count = type.length; i < count; i++) {
      switch (type[i]) {
        case ",": {
          if (!(c2 || f || s || t)) {
            result.push(type.substring(start2, i).trim());
            start2 = i + 1;
          }
          break;
        }
        case "<":
          c2++;
          break;
        case ">":
          c2--;
          break;
        case "[":
          f++;
          break;
        case "]":
          f--;
          break;
        case "{":
          s++;
          break;
        case "}":
          s--;
          break;
        case "(":
          t++;
          break;
        case ")":
          t--;
          break;
      }
    }
    if (c2 || f || s || t) {
      throw new Error(`Invalid definition (missing terminators) found in ${type}`);
    }
    result.push(type.substring(start2, type.length).trim());
    return result;
  }

  // ../../node_modules/@polkadot/types-create/util/getTypeDef.js
  var KNOWN_INTERNALS = ["_alias", "_fallback"];
  function getTypeString(typeOrObj) {
    return isString(typeOrObj) ? typeOrObj.toString() : JSON.stringify(typeOrObj);
  }
  function isRustEnum2(details) {
    const values = Object.values(details);
    if (values.some((v3) => isNumber(v3))) {
      if (!values.every((v3) => isNumber(v3) && v3 >= 0 && v3 <= 255)) {
        throw new Error("Invalid number-indexed enum definition");
      }
      return false;
    }
    return true;
  }
  function _decodeEnum(value, details, count, fallbackType) {
    value.info = TypeDefInfo.Enum;
    value.fallbackType = fallbackType;
    if (Array.isArray(details)) {
      value.sub = details.map((name, index) => ({
        index,
        info: TypeDefInfo.Plain,
        name,
        type: "Null"
      }));
    } else if (isRustEnum2(details)) {
      value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread({}, getTypeDef(getTypeString(typeOrObj || "Null"), { name }, count), { index }));
    } else {
      value.sub = Object.entries(details).map(([name, index]) => ({
        index,
        info: TypeDefInfo.Plain,
        name,
        type: "Null"
      }));
    }
    return value;
  }
  function _decodeSet(value, details, fallbackType) {
    value.info = TypeDefInfo.Set;
    value.fallbackType = fallbackType;
    value.length = details._bitLength;
    value.sub = Object.entries(details).filter(([name]) => !name.startsWith("_")).map(([name, index]) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
    return value;
  }
  function _decodeStruct(value, type, _3, count) {
    const parsed = JSON.parse(type);
    const keys2 = Object.keys(parsed);
    if (keys2.includes("_enum")) {
      return _decodeEnum(value, parsed._enum, count, parsed._fallback);
    } else if (keys2.includes("_set")) {
      return _decodeSet(value, parsed._set, parsed._fallback);
    }
    value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : void 0;
    value.fallbackType = parsed._fallback;
    value.sub = keys2.filter((name) => !KNOWN_INTERNALS.includes(name)).map((name) => getTypeDef(getTypeString(parsed[name]), { name }, count));
    return value;
  }
  function _decodeFixedVec(value, type, _3, count) {
    const max3 = type.length - 1;
    let index = -1;
    let inner = 0;
    for (let i = 1; i < max3 && index === -1; i++) {
      switch (type[i]) {
        case ";": {
          if (inner === 0) {
            index = i;
          }
          break;
        }
        case "[":
        case "(":
        case "<":
          inner++;
          break;
        case "]":
        case ")":
        case ">":
          inner--;
          break;
      }
    }
    if (index === -1) {
      throw new Error(`${type}: Unable to extract location of ';'`);
    }
    const vecType = type.substring(1, index);
    const [strLength, displayName] = type.substring(index + 1, max3).split(";");
    const length = parseInt(strLength.trim(), 10);
    if (length > 2048) {
      throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
    }
    value.displayName = displayName;
    value.length = length;
    value.sub = getTypeDef(vecType, {}, count);
    return value;
  }
  function _decodeTuple(value, _3, subType, count) {
    value.sub = subType.length === 0 ? [] : typeSplit(subType).map((inner) => getTypeDef(inner, {}, count));
    return value;
  }
  function _decodeAnyInt(value, type, _3, clazz) {
    const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(",");
    const length = parseInt(strLength.trim(), 10);
    if (length > 8192 || length % 8) {
      throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
    }
    value.displayName = displayName;
    value.length = length;
    return value;
  }
  function _decodeInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, "Int");
  }
  function _decodeUInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, "UInt");
  }
  function _decodeDoNotConstruct(value, type, _3) {
    const NAME_LENGTH = "DoNotConstruct".length;
    value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
    return value;
  }
  function hasWrapper(type, [start2, end2]) {
    return type.substring(0, start2.length) === start2 && type.slice(-1 * end2.length) === end2;
  }
  var nestedExtraction = [
    ["[", "]", TypeDefInfo.VecFixed, _decodeFixedVec],
    ["{", "}", TypeDefInfo.Struct, _decodeStruct],
    ["(", ")", TypeDefInfo.Tuple, _decodeTuple],
    ["BTreeMap<", ">", TypeDefInfo.BTreeMap, _decodeTuple],
    ["HashMap<", ">", TypeDefInfo.HashMap, _decodeTuple],
    ["Int<", ">", TypeDefInfo.Int, _decodeInt],
    ["Result<", ">", TypeDefInfo.Result, _decodeTuple],
    ["UInt<", ">", TypeDefInfo.UInt, _decodeUInt],
    ["DoNotConstruct<", ">", TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]
  ];
  var wrappedExtraction = [
    ["BTreeSet<", ">", TypeDefInfo.BTreeSet],
    ["Compact<", ">", TypeDefInfo.Compact],
    ["Linkage<", ">", TypeDefInfo.Linkage],
    ["Opaque<", ">", TypeDefInfo.WrapperOpaque],
    ["Option<", ">", TypeDefInfo.Option],
    ["Range<", ">", TypeDefInfo.Range],
    ["RangeInclusive<", ">", TypeDefInfo.RangeInclusive],
    ["Vec<", ">", TypeDefInfo.Vec],
    ["WrapperKeepOpaque<", ">", TypeDefInfo.WrapperKeepOpaque],
    ["WrapperOpaque<", ">", TypeDefInfo.WrapperOpaque]
  ];
  function extractSubType(type, [start2, end2]) {
    return type.substring(start2.length, type.length - end2.length);
  }
  function getTypeDef(_type, { displayName, name } = {}, count = 0) {
    const type = sanitize(_type);
    const value = { displayName, info: TypeDefInfo.Plain, name, type };
    if (++count > 64) {
      throw new Error("getTypeDef: Maximum nested limit reached");
    }
    const nested = nestedExtraction.find((nested2) => hasWrapper(type, nested2));
    if (nested) {
      value.info = nested[2];
      return nested[3](value, type, extractSubType(type, nested), count);
    }
    const wrapped = wrappedExtraction.find((wrapped2) => hasWrapper(type, wrapped2));
    if (wrapped) {
      value.info = wrapped[2];
      value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
    }
    return value;
  }

  // ../../node_modules/@polkadot/types-create/create/class.js
  function getTypeDefType({ lookupName, type }) {
    return lookupName || type;
  }
  function getSubDefArray(value) {
    if (!Array.isArray(value.sub)) {
      throw new Error(`Expected subtype as TypeDef[] in ${stringify(value)}`);
    }
    return value.sub;
  }
  function getSubDef(value) {
    if (!value.sub || Array.isArray(value.sub)) {
      throw new Error(`Expected subtype as TypeDef in ${stringify(value)}`);
    }
    return value.sub;
  }
  function getSubType(value) {
    return getTypeDefType(getSubDef(value));
  }
  function getTypeClassMap(value) {
    const subs = getSubDefArray(value);
    const map3 = {};
    for (let i = 0, count = subs.length; i < count; i++) {
      map3[subs[i].name] = getTypeDefType(subs[i]);
    }
    return map3;
  }
  function getTypeClassArray(value) {
    return getSubDefArray(value).map(getTypeDefType);
  }
  function createInt(Clazz, { displayName, length }) {
    if (!isNumber(length)) {
      throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
    }
    return Clazz.with(length, displayName);
  }
  function createHashMap(Clazz, value) {
    const [keyType, valueType] = getTypeClassArray(value);
    return Clazz.with(keyType, valueType);
  }
  function createWithSub(Clazz, value) {
    return Clazz.with(getSubType(value));
  }
  var infoMapping = {
    [TypeDefInfo.BTreeMap]: (_registry, value) => createHashMap(BTreeMap, value),
    [TypeDefInfo.BTreeSet]: (_registry, value) => createWithSub(BTreeSet, value),
    [TypeDefInfo.Compact]: (_registry, value) => createWithSub(Compact, value),
    [TypeDefInfo.DoNotConstruct]: (_registry, value) => DoNotConstruct.with(value.displayName || value.type),
    [TypeDefInfo.Enum]: (_registry, value) => {
      const subs = getSubDefArray(value);
      return Enum.with(subs.every(({ type }) => type === "Null") ? subs.reduce((out, { index, name }, count) => {
        out[name] = index || count;
        return out;
      }, {}) : getTypeClassMap(value));
    },
    [TypeDefInfo.HashMap]: (_registry, value) => createHashMap(HashMap, value),
    [TypeDefInfo.Int]: (_registry, value) => createInt(Int, value),
    [TypeDefInfo.Linkage]: (_registry, value) => {
      const type = `Option<${getSubType(value)}>`;
      const Clazz = Struct.with({ previous: type, next: type });
      Clazz.prototype.toRawType = function() {
        return `Linkage<${this.next.toRawType(true)}>`;
      };
      return Clazz;
    },
    [TypeDefInfo.Null]: (_registry, _value) => Null,
    [TypeDefInfo.Option]: (_registry, value) => {
      if (!value.sub || Array.isArray(value.sub)) {
        throw new Error("Expected type information for Option");
      }
      return createWithSub(Option, value);
    },
    [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
    [TypeDefInfo.Range]: (_registry, value) => createWithSub(Range, value),
    [TypeDefInfo.RangeInclusive]: (_registry, value) => createWithSub(RangeInclusive, value),
    [TypeDefInfo.Result]: (_registry, value) => {
      const [Ok, Err] = getTypeClassArray(value);
      return Result.with({ Err, Ok });
    },
    [TypeDefInfo.Set]: (_registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, { index, name }) => {
      result[name] = index;
      return result;
    }, {}), value.length),
    [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
    [TypeDefInfo.Struct]: (_registry, value) => Struct.with(getTypeClassMap(value), value.alias),
    [TypeDefInfo.Tuple]: (_registry, value) => Tuple.with(getTypeClassArray(value)),
    [TypeDefInfo.UInt]: (_registry, value) => createInt(UInt, value),
    [TypeDefInfo.Vec]: (_registry, { sub }) => {
      if (!sub || Array.isArray(sub)) {
        throw new Error("Expected type information for vector");
      }
      return sub.type === "u8" ? Bytes : Vec.with(getTypeDefType(sub));
    },
    [TypeDefInfo.VecFixed]: (_registry, { displayName, length, sub }) => {
      if (!isNumber(length) || !sub || Array.isArray(sub)) {
        throw new Error("Expected length & type information for fixed vector");
      }
      return sub.type === "u8" ? U8aFixed.with(length * 8, displayName) : VecFixed.with(getTypeDefType(sub), length);
    },
    [TypeDefInfo.WrapperKeepOpaque]: (_registry, value) => createWithSub(WrapperKeepOpaque, value),
    [TypeDefInfo.WrapperOpaque]: (_registry, value) => createWithSub(WrapperOpaque, value)
  };
  function constructTypeClass(registry, typeDef) {
    try {
      const Type2 = infoMapping[typeDef.info](registry, typeDef);
      if (!Type2) {
        throw new Error("No class created");
      }
      if (!Type2.__fallbackType && typeDef.fallbackType) {
        Type2.__fallbackType = typeDef.fallbackType;
      }
      return Type2;
    } catch (error) {
      throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);
    }
  }
  function getTypeClass(registry, typeDef) {
    return registry.getUnsafe(typeDef.type, false, typeDef);
  }
  function createClassUnsafe(registry, type) {
    return registry.getUnsafe(type) || getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type));
  }

  // ../../node_modules/@polkadot/types-create/create/type.js
  function checkInstance(created, matcher) {
    const u8a2 = created.toU8a();
    const rawType = created.toRawType();
    const isOk = u8aEq(u8a2, matcher) || ["Bytes", "Text", "Type"].includes(rawType) && matcher.length === created.length || created.isEmpty && matcher.every((v3) => !v3);
    if (!isOk) {
      throw new Error(`${rawType}:: Decoded input doesn't match input, received ${u8aToHex(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex(u8a2, 512)} (${u8a2.length} bytes)`);
    }
  }
  function checkPedantic(created, [value]) {
    if (isU8a(value)) {
      checkInstance(created, value);
    } else if (isHex(value)) {
      checkInstance(created, u8aToU8a(value));
    }
  }
  function initType(registry, Type2, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
    const created = new (isOptional ? Option.with(Type2) : Type2)(registry, ...params);
    isPedantic && checkPedantic(created, params);
    if (blockHash) {
      created.createdAtHash = createTypeUnsafe(registry, "BlockHash", [blockHash]);
    }
    if (isFallback) {
      created.isStorageFallback = true;
    }
    return created;
  }
  function createTypeUnsafe(registry, type, params = [], options = {}) {
    let Clazz = null;
    let firstError = null;
    try {
      Clazz = createClassUnsafe(registry, type);
      return initType(registry, Clazz, params, options);
    } catch (error) {
      firstError = new Error(`createType(${type}):: ${error.message}`);
    }
    if (Clazz && Clazz.__fallbackType) {
      try {
        Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
        return initType(registry, Clazz, params, options);
      } catch {
      }
    }
    throw firstError;
  }

  // ../../node_modules/@polkadot/types-create/util/encodeTypes.js
  var stringIdentity = (value) => value.toString();
  var INFO_WRAP = ["BTreeMap", "BTreeSet", "Compact", "HashMap", "Option", "Result", "Vec"];
  function paramsNotation(outer, inner, transform = stringIdentity) {
    return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(", ")}>` : ""}`;
  }
  function encodeWithParams(registry, typeDef, outer) {
    const { info: info6, sub } = typeDef;
    switch (info6) {
      case TypeDefInfo.BTreeMap:
      case TypeDefInfo.BTreeSet:
      case TypeDefInfo.Compact:
      case TypeDefInfo.HashMap:
      case TypeDefInfo.Linkage:
      case TypeDefInfo.Option:
      case TypeDefInfo.Range:
      case TypeDefInfo.RangeInclusive:
      case TypeDefInfo.Result:
      case TypeDefInfo.Vec:
      case TypeDefInfo.WrapperKeepOpaque:
      case TypeDefInfo.WrapperOpaque:
        return paramsNotation(outer, sub, (p) => encodeTypeDef(registry, p));
    }
    throw new Error(`Unable to encode ${stringify(typeDef)} with params`);
  }
  function encodeSubTypes(registry, sub, asEnum, extra) {
    const names = sub.map(({ name }) => name);
    if (!names.every((n) => !!n)) {
      throw new Error(`Subtypes does not have consistent names, ${names.join(", ")}`);
    }
    const inner = objectSpread({}, extra);
    for (let i = 0, count = sub.length; i < count; i++) {
      const def = sub[i];
      inner[def.name] = encodeTypeDef(registry, def);
    }
    return stringify(asEnum ? { _enum: inner } : inner);
  }
  var encoders = {
    [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeMap"),
    [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeSet"),
    [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Compact"),
    [TypeDefInfo.DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName }) => `DoNotConstruct<${lookupName || displayName || (isUndefined(lookupIndex) ? "Unknown" : registry.createLookupType(lookupIndex))}>`,
    [TypeDefInfo.Enum]: (registry, { sub }) => {
      if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Enum type");
      }
      return sub.every(({ type }) => type === "Null") ? stringify({ _enum: sub.map(({ name }, index) => `${name || `Empty${index}`}`) }) : encodeSubTypes(registry, sub, true);
    },
    [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "HashMap"),
    [TypeDefInfo.Int]: (_registry, { length = 32 }) => `Int<${length}>`,
    [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Linkage"),
    [TypeDefInfo.Null]: (_registry, _typeDef) => "Null",
    [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Option"),
    [TypeDefInfo.Plain]: (_registry, { displayName, type }) => displayName || type,
    [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Range"),
    [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, "RangeInclusive"),
    [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Result"),
    [TypeDefInfo.Set]: (_registry, { length = 8, sub }) => {
      if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Set type");
      }
      return stringify({
        _set: sub.reduce((all3, { index, name }, count) => objectSpread(all3, { [`${name || `Unknown${index || count}`}`]: index || count }), { _bitLength: length || 8 })
      });
    },
    [TypeDefInfo.Si]: (_registry, { lookupName, type }) => lookupName || type,
    [TypeDefInfo.Struct]: (registry, { alias: alias2, sub }) => {
      if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Struct type");
      }
      return encodeSubTypes(registry, sub, false, alias2 ? {
        _alias: [...alias2.entries()].reduce((all3, [k, v3]) => objectSpread(all3, { [k]: v3 }), {})
      } : {});
    },
    [TypeDefInfo.Tuple]: (registry, { sub }) => {
      if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Tuple type");
      }
      return `(${sub.map((type) => encodeTypeDef(registry, type)).join(",")})`;
    },
    [TypeDefInfo.UInt]: (_registry, { length = 32 }) => `UInt<${length}>`,
    [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Vec"),
    [TypeDefInfo.VecFixed]: (_registry, { length, sub }) => {
      if (!isNumber(length) || !sub || Array.isArray(sub)) {
        throw new Error("Unable to encode VecFixed type");
      }
      return `[${sub.type};${length}]`;
    },
    [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperKeepOpaque"),
    [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperOpaque")
  };
  function encodeType(registry, typeDef, withLookup = true) {
    return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
  }
  function encodeTypeDef(registry, typeDef) {
    return typeDef.displayName && !INFO_WRAP.some((i) => typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
  }
  function withTypeString(registry, typeDef) {
    return objectSpread({}, typeDef, {
      type: encodeType(registry, typeDef, false)
    });
  }

  // ../../node_modules/@polkadot/types-create/util/xcm.js
  var XCM_MAPPINGS = ["AssetInstance", "Fungibility", "Junction", "Junctions", "MultiAsset", "MultiAssetFilter", "MultiLocation", "Response", "WildFungibility", "WildMultiAsset", "Xcm", "XcmError", "XcmOrder"];
  function mapXcmTypes(version) {
    return XCM_MAPPINGS.reduce((all3, key) => objectSpread(all3, { [key]: `${key}${version}` }), {});
  }

  // ../../node_modules/@polkadot/types/interfaces/xcm/v0.js
  var v02 = {
    FungibilityV0: "FungibilityV1",
    WildFungibilityV0: "WildFungibilityV1",
    AssetInstanceV0: {
      _enum: {
        Undefined: "Null",
        Index8: "u8",
        Index16: "Compact<u16>",
        Index32: "Compact<u32>",
        Index64: "Compact<u64>",
        Index128: "Compact<u128>",
        Array4: "[u8; 4]",
        Array8: "[u8; 8]",
        Array16: "[u8; 16]",
        Array32: "[u8; 32]",
        Blob: "Vec<u8>"
      }
    },
    JunctionV0: {
      _enum: {
        Parent: "Null",
        Parachain: "Compact<u32>",
        AccountId32: {
          network: "NetworkId",
          id: "AccountId"
        },
        AccountIndex64: {
          network: "NetworkId",
          index: "Compact<u64>"
        },
        AccountKey20: {
          network: "NetworkId",
          key: "[u8; 20]"
        },
        PalletInstance: "u8",
        GeneralIndex: "Compact<u128>",
        GeneralKey: "Vec<u8>",
        OnlyChild: "Null",
        Plurality: {
          id: "BodyId",
          part: "BodyPart"
        }
      }
    },
    MultiAssetV0: {
      _enum: {
        None: "Null",
        All: "Null",
        AllFungible: "Null",
        AllNonFungible: "Null",
        AllAbstractFungible: "Vec<u8>",
        AllAbstractNonFungible: "Vec<u8>",
        AllConcreteFungible: "MultiLocationV0",
        AllConcreteNonFungible: "MultiLocationV0",
        AbstractFungible: {
          id: "Vec<u8>",
          instance: "Compact<u128>"
        },
        AbstractNonFungible: {
          class: "Vec<u8>",
          instance: "AssetInstanceV0"
        },
        ConcreteFungible: {
          id: "MultiLocationV0",
          amount: "Compact<u128>"
        },
        ConcreteNonFungible: {
          class: "MultiLocationV0",
          instance: "AssetInstanceV0"
        }
      }
    },
    MultiLocationV0: {
      _enum: {
        Here: "Null",
        X1: "JunctionV0",
        X2: "(JunctionV0, JunctionV0)",
        X3: "(JunctionV0, JunctionV0, JunctionV0)",
        X4: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
        X5: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
        X6: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
        X7: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
        X8: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
      }
    },
    OriginKindV0: {
      _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
    },
    ResponseV0: {
      _enum: {
        Assets: "Vec<MultiAssetV0>"
      }
    },
    XcmV0: {
      _enum: {
        WithdrawAsset: {
          assets: "Vec<MultiAssetV0>",
          effects: "Vec<XcmOrderV0>"
        },
        ReserveAssetDeposit: {
          assets: "Vec<MultiAssetV0>",
          effects: "Vec<XcmOrderV0>"
        },
        ReceiveTeleportedAsset: {
          assets: "Vec<MultiAssetV0>",
          effects: "Vec<XcmOrderV0>"
        },
        QueryResponse: {
          queryId: "Compact<u64>",
          response: "ResponseV0"
        },
        TransferAsset: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0"
        },
        TransferReserveAsset: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0",
          effects: "Vec<XcmOrderV0>"
        },
        Transact: {
          originType: "XcmOriginKind",
          requireWeightAtMost: "u64",
          call: "DoubleEncodedCall"
        },
        HrmpNewChannelOpenRequest: {
          sender: "Compact<u32>",
          maxMessageSize: "Compact<u32>",
          maxCapacity: "Compact<u32>"
        },
        HrmpChannelAccepted: {
          recipient: "Compact<u32>"
        },
        HrmpChannelClosing: {
          initiator: "Compact<u32>",
          sender: "Compact<u32>",
          recipient: "Compact<u32>"
        },
        RelayedFrom: {
          who: "MultiLocationV0",
          message: "XcmV0"
        }
      }
    },
    XcmErrorV0: {
      _enum: {
        Undefined: "Null",
        Overflow: "Null",
        Unimplemented: "Null",
        UnhandledXcmVersion: "Null",
        UnhandledXcmMessage: "Null",
        UnhandledEffect: "Null",
        EscalationOfPrivilege: "Null",
        UntrustedReserveLocation: "Null",
        UntrustedTeleportLocation: "Null",
        DestinationBufferOverflow: "Null",
        SendFailed: "Null",
        CannotReachDestination: "(MultiLocation, Xcm)",
        MultiLocationFull: "Null",
        FailedToDecode: "Null",
        BadOrigin: "Null",
        ExceedsMaxMessageSize: "Null",
        FailedToTransactAsset: "Null",
        WeightLimitReached: "Weight",
        Wildcard: "Null",
        TooMuchWeightRequired: "Null",
        NotHoldingFees: "Null",
        WeightNotComputable: "Null",
        Barrier: "Null",
        NotWithdrawable: "Null",
        LocationCannotHold: "Null",
        TooExpensive: "Null",
        AssetNotFound: "Null",
        RecursionLimitReached: "Null"
      }
    },
    XcmOrderV0: {
      _enum: {
        Null: "Null",
        DepositAsset: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0"
        },
        DepositReserveAsset: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0",
          effects: "Vec<XcmOrderV0>"
        },
        ExchangeAsset: {
          give: "Vec<MultiAssetV0>",
          receive: "Vec<MultiAssetV0>"
        },
        InitiateReserveWithdraw: {
          assets: "Vec<MultiAssetV0>",
          reserve: "MultiLocationV0",
          effects: "Vec<XcmOrderV0>"
        },
        InitiateTeleport: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0",
          effects: "Vec<XcmOrderV0>"
        },
        QueryHolding: {
          queryId: "Compact<u64>",
          dest: "MultiLocationV0",
          assets: "Vec<MultiAssetV0>"
        },
        BuyExecution: {
          fees: "MultiAssetV0",
          weight: "u64",
          debt: "u64",
          haltOnError: "bool",
          xcm: "Vec<XcmV0>"
        }
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/xcm/v1.js
  var v16 = {
    AssetInstanceV1: {
      _enum: {
        Undefined: "Null",
        Index: "Compact<u128>",
        Array4: "[u8; 4]",
        Array8: "[u8; 8]",
        Array16: "[u8; 16]",
        Array32: "[u8; 32]",
        Blob: "Bytes"
      }
    },
    FungibilityV1: {
      _enum: {
        Fungible: "Compact<u128>",
        NonFungible: "AssetInstanceV1"
      }
    },
    JunctionV1: {
      _enum: {
        Parachain: "Compact<u32>",
        AccountId32: {
          network: "NetworkId",
          id: "AccountId"
        },
        AccountIndex64: {
          network: "NetworkId",
          index: "Compact<u64>"
        },
        AccountKey20: {
          network: "NetworkId",
          key: "[u8; 20]"
        },
        PalletInstance: "u8",
        GeneralIndex: "Compact<u128>",
        GeneralKey: "Vec<u8>",
        OnlyChild: "Null",
        Plurality: {
          id: "BodyId",
          part: "BodyPart"
        }
      }
    },
    JunctionsV1: {
      _enum: {
        Here: "Null",
        X1: "JunctionV1",
        X2: "(JunctionV1, JunctionV1)",
        X3: "(JunctionV1, JunctionV1, JunctionV1)",
        X4: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
        X5: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
        X6: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
        X7: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
        X8: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
      }
    },
    MultiAssetsV1: "Vec<MultiAssetV1>",
    MultiAssetV1: {
      id: "XcmAssetId",
      fungibility: "FungibilityV1"
    },
    MultiAssetFilterV1: {
      _enum: {
        Definite: "MultiAssetsV1",
        Wild: "WildMultiAssetV1"
      }
    },
    MultiLocationV1: {
      parents: "u8",
      interior: "JunctionsV1"
    },
    OriginKindV1: "OriginKindV0",
    ResponseV1: {
      _enum: {
        Assets: "MultiAssetsV1"
      }
    },
    WildFungibilityV1: {
      _enum: ["Fungible", "NonFungible"]
    },
    WildMultiAssetV1: {
      _enum: {
        All: "Null",
        AllOf: {
          id: "XcmAssetId",
          fungibility: "WildFungibilityV1"
        }
      }
    },
    XcmV1: {
      _enum: {
        WithdrawAsset: {
          assets: "MultiAssetsV1",
          effects: "Vec<XcmOrderV1>"
        },
        ReserveAssetDeposit: {
          assets: "MultiAssetsV1",
          effects: "Vec<XcmOrderV1>"
        },
        ReceiveTeleportedAsset: {
          assets: "MultiAssetsV1",
          effects: "Vec<XcmOrderV1>"
        },
        QueryResponse: {
          queryId: "Compact<u64>",
          response: "ResponseV1"
        },
        TransferAsset: {
          assets: "MultiAssetsV1",
          dest: "MultiLocationV1"
        },
        TransferReserveAsset: {
          assets: "MultiAssetsV1",
          dest: "MultiLocationV1",
          effects: "Vec<XcmOrderV1>"
        },
        Transact: {
          originType: "XcmOriginKind",
          requireWeightAtMost: "u64",
          call: "DoubleEncodedCall"
        },
        HrmpNewChannelOpenRequest: {
          sender: "Compact<u32>",
          maxMessageSize: "Compact<u32>",
          maxCapacity: "Compact<u32>"
        },
        HrmpChannelAccepted: {
          recipient: "Compact<u32>"
        },
        HrmpChannelClosing: {
          initiator: "Compact<u32>",
          sender: "Compact<u32>",
          recipient: "Compact<u32>"
        },
        RelayedFrom: {
          who: "MultiLocationV1",
          message: "XcmV1"
        }
      }
    },
    XcmErrorV1: {
      _enum: {
        Undefined: "Null",
        Overflow: "Null",
        Unimplemented: "Null",
        UnhandledXcmVersion: "Null",
        UnhandledXcmMessage: "Null",
        UnhandledEffect: "Null",
        EscalationOfPrivilege: "Null",
        UntrustedReserveLocation: "Null",
        UntrustedTeleportLocation: "Null",
        DestinationBufferOverflow: "Null",
        SendFailed: "Null",
        CannotReachDestination: "(MultiLocationV1, XcmV1)",
        MultiLocationFull: "Null",
        FailedToDecode: "Null",
        BadOrigin: "Null",
        ExceedsMaxMessageSize: "Null",
        FailedToTransactAsset: "Null",
        WeightLimitReached: "Weight",
        Wildcard: "Null",
        TooMuchWeightRequired: "Null",
        NotHoldingFees: "Null",
        WeightNotComputable: "Null",
        Barrier: "Null",
        NotWithdrawable: "Null",
        LocationCannotHold: "Null",
        TooExpensive: "Null",
        AssetNotFound: "Null",
        DestinationUnsupported: "Null",
        RecursionLimitReached: "Null"
      }
    },
    XcmOrderV1: {
      _enum: {
        Noop: "Null",
        DepositAsset: {
          assets: "MultiAssetFilterV1",
          maxAssets: "u32",
          beneficiary: "MultiLocationV1"
        },
        DepositReserveAsset: {
          assets: "MultiAssetFilterV1",
          maxAssets: "u32",
          dest: "MultiLocationV1",
          effects: "Vec<XcmOrderV1>"
        },
        ExchangeAsset: {
          give: "MultiAssetFilterV1",
          receive: "MultiAssetsV1"
        },
        InitiateReserveWithdraw: {
          assets: "MultiAssetFilterV1",
          reserve: "MultiLocationV1",
          effects: "Vec<XcmOrderV1>"
        },
        InitiateTeleport: {
          assets: "MultiAssetFilterV1",
          dest: "MultiLocationV1",
          effects: "Vec<XcmOrderV1>"
        },
        QueryHolding: {
          queryId: "Compact<u64>",
          dest: "MultiLocationV1",
          assets: "MultiAssetFilterV1"
        },
        BuyExecution: {
          fees: "MultiAssetV1",
          weight: "u64",
          debt: "u64",
          haltOnError: "bool",
          instructions: "Vec<XcmV1>"
        }
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/xcm/v2.js
  var v2 = {
    AssetInstanceV2: "AssetInstanceV1",
    FungibilityV2: "FungibilityV1",
    JunctionV2: "JunctionV1",
    JunctionsV2: "JunctionsV1",
    MultiAssetsV2: "MultiAssetsV1",
    MultiAssetV2: "MultiAssetV1",
    MultiAssetFilterV2: "MultiAssetFilterV1",
    MultiLocationV2: "MultiLocationV1",
    OriginKindV2: "OriginKindV1",
    WildFungibilityV2: "WildFungibilityV1",
    ResponseV2: {
      _enum: {
        Null: "Null",
        Assets: "MultiAssetsV2",
        ExecutionResult: "ResponseV2Result"
      }
    },
    ResponseV2Error: "(u32, XcmErrorV2)",
    ResponseV2Result: "Result<Null, ResponseV2Error>",
    WeightLimitV2: {
      _enum: {
        Unlimited: "Null",
        Limited: "Compact<u64>"
      }
    },
    InstructionV2: {
      _enum: {
        WithdrawAsset: "MultiAssetsV2",
        ReserveAssetDeposited: "MultiAssetsV2",
        ReceiveTeleportedAsset: "MultiAssetsV2",
        QueryResponse: {
          queryId: "Compact<u64>",
          response: "ResponseV2",
          maxWeight: "Compact<u64>"
        },
        TransferAsset: {
          assets: "MultiAssetsV2",
          beneficiary: "MultiLocationV2"
        },
        TransferReserveAsset: {
          assets: "MultiAssetsV2",
          dest: "MultiLocationV2",
          xcm: "XcmV2"
        },
        Transact: {
          originType: "OriginKindV2",
          requireWeightAtMost: "u64",
          call: "DoubleEncodedCall"
        },
        HrmpNewChannelOpenRequest: {
          sender: "Compact<u32>",
          maxMessageSize: "Compact<u32>",
          maxCapacity: "Compact<u32>"
        },
        HrmpChannelAccepted: {
          recipient: "Compact<u32>"
        },
        HrmpChannelClosing: {
          initiator: "Compact<u32>",
          sender: "Compact<u32>",
          recipient: "Compact<u32>"
        },
        ClearOrigin: "Null",
        DescendOrigin: "InteriorMultiLocation",
        ReportError: {
          queryId: "Compact<u64>",
          dest: "MultiLocationV2",
          maxResponseWeight: "Compact<u64>"
        },
        DepositAsset: {
          assets: "MultiAssetFilterV2",
          maxAssets: "u32",
          beneficiary: "MultiLocationV2"
        },
        DepositReserveAsset: {
          assets: "MultiAssetFilterV2",
          maxAssets: "u32",
          dest: "MultiLocationV2",
          xcm: "XcmV2"
        },
        ExchangeAsset: {
          give: "MultiAssetFilterV2",
          receive: "MultiAssetsV2"
        },
        InitiateReserveWithdraw: {
          assets: "MultiAssetFilterV2",
          reserve: "MultiLocationV2",
          xcm: "XcmV2"
        },
        InitiateTeleport: {
          assets: "MultiAssetFilterV2",
          dest: "MultiLocationV2",
          xcm: "XcmV2"
        },
        QueryHolding: {
          query_id: "Compact<u64>",
          dest: "MultiLocationV2",
          assets: "MultiAssetFilterV2",
          maxResponse_Weight: "Compact<u64>"
        },
        BuyExecution: {
          fees: "MultiAssetV2",
          weightLimit: "WeightLimitV2"
        },
        RefundSurplus: "Null",
        SetErrorHandler: "XcmV2",
        SetAppendix: "XcmV2",
        ClearError: "Null",
        ClaimAsset: {
          assets: "MultiAssetsV2",
          ticket: "MultiLocationV2"
        },
        Trap: "u64"
      }
    },
    WildMultiAssetV2: "WildMultiAssetV1",
    XcmV2: "Vec<InstructionV2>",
    XcmErrorV2: {
      _enum: {
        Undefined: "Null",
        Overflow: "Null",
        Unimplemented: "Null",
        UnhandledXcmVersion: "Null",
        UnhandledXcmMessage: "Null",
        UnhandledEffect: "Null",
        EscalationOfPrivilege: "Null",
        UntrustedReserveLocation: "Null",
        UntrustedTeleportLocation: "Null",
        DestinationBufferOverflow: "Null",
        MultiLocationFull: "Null",
        MultiLocationNotInvertible: "Null",
        FailedToDecode: "Null",
        BadOrigin: "Null",
        ExceedsMaxMessageSize: "Null",
        FailedToTransactAsset: "Null",
        WeightLimitReached: "Weight",
        Wildcard: "Null",
        TooMuchWeightRequired: "Null",
        NotHoldingFees: "Null",
        WeightNotComputable: "Null",
        Barrier: "Null",
        NotWithdrawable: "Null",
        LocationCannotHold: "Null",
        TooExpensive: "Null",
        AssetNotFound: "Null",
        DestinationUnsupported: "Null",
        RecursionLimitReached: "Null",
        Transport: "Null",
        Unroutable: "Null",
        UnknownWeightRequired: "Null",
        Trap: "u64",
        UnknownClaim: "Null",
        InvalidLocation: "Null"
      }
    },
    XcmOrderV2: "XcmOrderV1"
  };

  // ../../node_modules/@polkadot/types/interfaces/xcm/definitions.js
  var XCM_LATEST = "V2";
  var xcm = {
    XcmOrigin: {
      _enum: {
        Xcm: "MultiLocation"
      }
    },
    XcmpMessageFormat: {
      _enum: ["ConcatenatedVersionedXcm", "ConcatenatedEncodedBlob", "Signals"]
    },
    XcmAssetId: {
      _enum: {
        Concrete: "MultiLocation",
        Abstract: "Bytes"
      }
    },
    InboundStatus: {
      _enum: ["Ok", "Suspended"]
    },
    OutboundStatus: {
      _enum: ["Ok", "Suspended"]
    },
    MultiAssets: "Vec<MultiAsset>"
  };
  var location = {
    BodyId: {
      _enum: {
        Unit: "Null",
        Named: "Vec<u8>",
        Index: "Compact<u32>",
        Executive: "Null",
        Technical: "Null",
        Legislative: "Null",
        Judicial: "Null"
      }
    },
    BodyPart: {
      _enum: {
        Voice: "Null",
        Members: "Compact<u32>",
        Fraction: {
          nom: "Compact<u32>",
          denom: "Compact<u32>"
        },
        AtLeastProportion: {
          nom: "Compact<u32>",
          denom: "Compact<u32>"
        },
        MoreThanProportion: {
          nom: "Compact<u32>",
          denom: "Compact<u32>"
        }
      }
    },
    InteriorMultiLocation: "Junctions",
    NetworkId: {
      _enum: {
        Any: "Null",
        Named: "Vec<u8>",
        Polkadot: "Null",
        Kusama: "Null"
      }
    }
  };
  var definitions_default58 = {
    rpc: {},
    types: {
      ...location,
      ...xcm,
      ...v02,
      ...v16,
      ...v2,
      ...mapXcmTypes(XCM_LATEST),
      DoubleEncodedCall: {
        encoded: "Vec<u8>"
      },
      XcmOriginKind: {
        _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
      },
      Outcome: {
        _enum: {
          Complete: "Weight",
          Incomplete: "(Weight, XcmErrorV0)",
          Error: "XcmErrorV0"
        }
      },
      QueryId: "u64",
      QueryStatus: {
        _enum: {
          Pending: {
            responder: "VersionedMultiLocation",
            maybeNotify: "Option<(u8, u8)>",
            timeout: "BlockNumber"
          },
          Ready: {
            response: "VersionedResponse",
            at: "BlockNumber"
          }
        }
      },
      QueueConfigData: {
        suspendThreshold: "u32",
        dropThreshold: "u32",
        resumeThreshold: "u32",
        thresholdWeight: "Weight",
        weightRestrictDecay: "Weight"
      },
      VersionMigrationStage: {
        _enum: {
          MigrateSupportedVersion: "Null",
          MigrateVersionNotifiers: "Null",
          NotifyCurrentTargets: "Option<Bytes>",
          MigrateAndNotifyOldTargets: "Null"
        }
      },
      VersionedMultiAsset: {
        _enum: {
          V0: "MultiAssetV0",
          V1: "MultiAssetV1",
          V2: "MultiAssetV2"
        }
      },
      VersionedMultiAssets: {
        _enum: {
          V0: "Vec<MultiAssetV0>",
          V1: "MultiAssetsV1",
          V2: "MultiAssetsV2"
        }
      },
      VersionedMultiLocation: {
        _enum: {
          V0: "MultiLocationV0",
          V1: "MultiLocationV1",
          V2: "MultiLocationV2"
        }
      },
      VersionedResponse: {
        V0: "ResponseV0",
        V1: "ResponseV1",
        V2: "ResponseV2"
      },
      VersionedXcm: {
        _enum: {
          V0: "XcmV0",
          V1: "XcmV1",
          V2: "XcmV2"
        }
      },
      XcmVersion: "u32"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/contractsAbi/definitions.js
  var layout = {
    ContractCryptoHasher: {
      _enum: ["Blake2x256", "Sha2x256", "Keccak256"]
    },
    ContractDiscriminant: "u32",
    ContractLayoutArray: {
      offset: "ContractLayoutKey",
      len: "u32",
      cellsPerElem: "u64",
      layout: "ContractStorageLayout"
    },
    ContractLayoutCell: {
      key: "ContractLayoutKey",
      ty: "SiLookupTypeId"
    },
    ContractLayoutEnum: {
      dispatchKey: "ContractLayoutKey",
      variants: "BTreeMap<ContractDiscriminant, ContractLayoutStruct>"
    },
    ContractLayoutHash: {
      offset: "ContractLayoutKey",
      strategy: "ContractLayoutHashingStrategy",
      layout: "ContractStorageLayout"
    },
    ContractLayoutHashingStrategy: {
      hasher: "ContractCryptoHasher",
      postfix: "Vec<u8>",
      prefix: "Vec<u8>"
    },
    ContractLayoutKey: "[u8; 32]",
    ContractLayoutStruct: {
      fields: "Vec<ContractLayoutStructField>"
    },
    ContractLayoutStructField: {
      layout: "ContractStorageLayout",
      name: "Text"
    },
    ContractStorageLayout: {
      _enum: {
        Cell: "ContractLayoutCell",
        Hash: "ContractLayoutHash",
        Array: "ContractLayoutArray",
        Struct: "ContractLayoutStruct",
        Enum: "ContractLayoutEnum"
      }
    }
  };
  var spec = {
    ContractConstructorSpecV0: {
      name: "Text",
      selector: "ContractSelector",
      args: "Vec<ContractMessageParamSpecV0>",
      docs: "Vec<Text>"
    },
    ContractConstructorSpecV1: {
      name: "Vec<Text>",
      selector: "ContractSelector",
      args: "Vec<ContractMessageParamSpecV0>",
      docs: "Vec<Text>"
    },
    ContractConstructorSpecV2: {
      label: "Text",
      selector: "ContractSelector",
      args: "Vec<ContractMessageParamSpecV2>",
      docs: "Vec<Text>"
    },
    ContractConstructorSpecV3: {
      label: "Text",
      selector: "ContractSelector",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV2>",
      docs: "Vec<Text>"
    },
    ContractContractSpecV0: {
      constructors: "Vec<ContractConstructorSpecV0>",
      messages: "Vec<ContractMessageSpecV0>",
      events: "Vec<ContractEventSpecV0>",
      docs: "Vec<Text>"
    },
    ContractContractSpecV1: {
      constructors: "Vec<ContractConstructorSpecV1>",
      messages: "Vec<ContractMessageSpecV1>",
      events: "Vec<ContractEventSpecV1>",
      docs: "Vec<Text>"
    },
    ContractContractSpecV2: {
      constructors: "Vec<ContractConstructorSpecV2>",
      messages: "Vec<ContractMessageSpecV2>",
      events: "Vec<ContractEventSpecV2>",
      docs: "Vec<Text>"
    },
    ContractContractSpecV3: {
      constructors: "Vec<ContractConstructorSpecV3>",
      messages: "Vec<ContractMessageSpecV2>",
      events: "Vec<ContractEventSpecV2>",
      docs: "Vec<Text>"
    },
    ContractContractSpecV4: "ContractContractSpecV3",
    ContractDisplayName: "SiPath",
    ContractEventParamSpecV0: {
      name: "Text",
      indexed: "bool",
      type: "ContractTypeSpec",
      docs: "Vec<Text>"
    },
    ContractEventParamSpecV2: {
      label: "Text",
      indexed: "bool",
      type: "ContractTypeSpec",
      docs: "Vec<Text>"
    },
    ContractEventSpecV0: {
      name: "Text",
      args: "Vec<ContractEventParamSpecV0>",
      docs: "Vec<Text>"
    },
    ContractEventSpecV1: {
      name: "Text",
      args: "Vec<ContractEventParamSpecV0>",
      docs: "Vec<Text>"
    },
    ContractEventSpecV2: {
      label: "Text",
      args: "Vec<ContractEventParamSpecV2>",
      docs: "Vec<Text>"
    },
    ContractMessageParamSpecV0: {
      name: "Text",
      type: "ContractTypeSpec"
    },
    ContractMessageParamSpecV2: {
      label: "Text",
      type: "ContractTypeSpec"
    },
    ContractMessageSpecV0: {
      name: "Text",
      selector: "ContractSelector",
      mutates: "bool",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV0>",
      returnType: "Option<ContractTypeSpec>",
      docs: "Vec<Text>"
    },
    ContractMessageSpecV1: {
      name: "Vec<Text>",
      selector: "ContractSelector",
      mutates: "bool",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV0>",
      returnType: "Option<ContractTypeSpec>",
      docs: "Vec<Text>"
    },
    ContractMessageSpecV2: {
      label: "Text",
      selector: "ContractSelector",
      mutates: "bool",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV2>",
      returnType: "Option<ContractTypeSpec>",
      docs: "Vec<Text>"
    },
    ContractSelector: "[u8; 4]",
    ContractTypeSpec: {
      type: "SiLookupTypeId",
      displayName: "ContractDisplayName"
    }
  };
  var latest = {
    ContractConstructorSpecLatest: "ContractConstructorSpecV3",
    ContractEventSpecLatest: "ContractEventSpecV2",
    ContractEventParamSpecLatest: "ContractEventParamSpecV2",
    ContractMessageParamSpecLatest: "ContractMessageParamSpecV2",
    ContractMessageSpecLatest: "ContractMessageSpecV2",
    ContractMetadataLatest: "ContractMetadataV4"
  };
  var definitions_default59 = {
    rpc: {},
    types: {
      ...layout,
      ...spec,
      ...latest,
      ContractProjectInfo: {
        source: "ContractProjectSource",
        contract: "ContractProjectContract"
      },
      ContractMetadataV0: {
        metadataVersion: "Text",
        types: "Vec<Si0Type>",
        spec: "ContractContractSpecV0"
      },
      ContractMetadataV1: {
        types: "Vec<PortableType>",
        spec: "ContractContractSpecV1"
      },
      ContractMetadataV2: {
        types: "Vec<PortableType>",
        spec: "ContractContractSpecV2"
      },
      ContractMetadataV3: {
        types: "Vec<PortableType>",
        spec: "ContractContractSpecV3"
      },
      ContractMetadataV4: "ContractMetadataV3",
      ContractMetadata: {
        _enum: {
          V0: "ContractMetadataV0",
          V1: "ContractMetadataV1",
          V2: "ContractMetadataV2",
          V3: "ContractMetadataV3",
          V4: "ContractMetadataV4"
        }
      },
      ContractProjectV0: {
        metadataVersion: "Text",
        source: "ContractProjectSource",
        contract: "ContractProjectContract",
        types: "Vec<Si0Type>",
        spec: "ContractContractSpecV0"
      },
      ContractProject: "(ContractProjectInfo, ContractMetadata)",
      ContractProjectContract: {
        _alias: {
          docs: "documentation"
        },
        name: "Text",
        version: "Text",
        authors: "Vec<Text>",
        description: "Option<Text>",
        docs: "Option<Text>",
        repository: "Option<Text>",
        homepage: "Option<Text>",
        license: "Option<Text>"
      },
      ContractProjectSource: {
        _alias: {
          wasmHash: "hash"
        },
        wasmHash: "[u8; 32]",
        language: "Text",
        compiler: "Text",
        wasm: "Raw"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/eth/rpc.js
  var netRpc = {
    listening: {
      aliasSection: "net",
      description: "Returns true if client is actively listening for network connections. Otherwise false.",
      params: [],
      type: "bool"
    },
    peerCount: {
      aliasSection: "net",
      description: "Returns number of peers connected to node.",
      params: [],
      type: "Text"
    },
    version: {
      aliasSection: "net",
      description: "Returns protocol version.",
      params: [],
      type: "Text"
    }
  };
  var web3Rpc = {
    clientVersion: {
      aliasSection: "web3",
      description: "Returns current client version.",
      params: [],
      type: "Text"
    },
    sha3: {
      aliasSection: "web3",
      description: "Returns sha3 of the given data",
      params: [{ name: "data", type: "Bytes" }],
      type: "H256"
    }
  };
  var rpc10 = {
    ...netRpc,
    ...web3Rpc,
    accounts: {
      description: "Returns accounts list.",
      params: [],
      type: "Vec<H160>"
    },
    blockNumber: {
      description: "Returns the blockNumber",
      params: [],
      type: "U256"
    },
    call: {
      description: "Call contract, returning the output data.",
      params: [
        {
          name: "request",
          type: "EthCallRequest"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "Bytes"
    },
    chainId: {
      description: "Returns the chain ID used for transaction signing at the current best block. None is returned if not available.",
      params: [],
      type: "U64"
    },
    coinbase: {
      description: "Returns block author.",
      params: [],
      type: "H160"
    },
    estimateGas: {
      description: "Estimate gas needed for execution of given contract.",
      params: [
        {
          name: "request",
          type: "EthCallRequest"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    feeHistory: {
      description: "Returns fee history for given block count & reward percentiles",
      params: [
        {
          name: "blockCount",
          type: "U256"
        },
        {
          name: "newestBlock",
          type: "BlockNumber"
        },
        {
          name: "rewardPercentiles",
          type: "Option<Vec<f64>>"
        }
      ],
      type: "EthFeeHistory"
    },
    gasPrice: {
      description: "Returns current gas price.",
      params: [],
      type: "U256"
    },
    getBalance: {
      description: "Returns balance of the given account.",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    getBlockByHash: {
      description: "Returns block with given hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        },
        {
          name: "full",
          type: "bool"
        }
      ],
      type: "Option<EthRichBlock>"
    },
    getBlockByNumber: {
      description: "Returns block with given number.",
      params: [
        {
          name: "block",
          type: "BlockNumber"
        },
        { name: "full", type: "bool" }
      ],
      type: "Option<EthRichBlock>"
    },
    getBlockTransactionCountByHash: {
      description: "Returns the number of transactions in a block with given hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "U256"
    },
    getBlockTransactionCountByNumber: {
      description: "Returns the number of transactions in a block with given block number.",
      params: [
        {
          name: "block",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    getCode: {
      description: "Returns the code at given address at given time (block number).",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "Bytes"
    },
    getFilterChanges: {
      description: "Returns filter changes since last poll.",
      params: [
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthFilterChanges"
    },
    getFilterLogs: {
      description: "Returns all logs matching given filter (in a range 'from' - 'to').",
      params: [
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "Vec<EthLog>"
    },
    getLogs: {
      description: "Returns logs matching given filter object.",
      params: [
        {
          name: "filter",
          type: "EthFilter"
        }
      ],
      type: "Vec<EthLog>"
    },
    getProof: {
      description: "Returns proof for account and storage.",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          name: "storageKeys",
          type: "Vec<H256>"
        },
        {
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "EthAccount"
    },
    getStorageAt: {
      description: "Returns content of the storage at given address.",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          name: "index",
          type: "U256"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "H256"
    },
    getTransactionByBlockHashAndIndex: {
      description: "Returns transaction at given block hash and index.",
      params: [
        {
          name: "hash",
          type: "H256"
        },
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthTransaction"
    },
    getTransactionByBlockNumberAndIndex: {
      description: "Returns transaction by given block number and index.",
      params: [
        {
          name: "number",
          type: "BlockNumber"
        },
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthTransaction"
    },
    getTransactionByHash: {
      description: "Get transaction by its hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "EthTransaction"
    },
    getTransactionCount: {
      description: "Returns the number of transactions sent from given address at given time (block number).",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    getTransactionReceipt: {
      description: "Returns transaction receipt by transaction hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "EthReceipt"
    },
    getUncleByBlockHashAndIndex: {
      description: "Returns an uncles at given block and index.",
      params: [
        {
          name: "hash",
          type: "H256"
        },
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthRichBlock"
    },
    getUncleByBlockNumberAndIndex: {
      description: "Returns an uncles at given block and index.",
      params: [
        {
          name: "number",
          type: "BlockNumber"
        },
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthRichBlock"
    },
    getUncleCountByBlockHash: {
      description: "Returns the number of uncles in a block with given hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "U256"
    },
    getUncleCountByBlockNumber: {
      description: "Returns the number of uncles in a block with given block number.",
      params: [
        {
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    getWork: {
      description: "Returns the hash of the current block, the seedHash, and the boundary condition to be met.",
      params: [],
      type: "EthWork"
    },
    hashrate: {
      description: "Returns the number of hashes per second that the node is mining with.",
      params: [],
      type: "U256"
    },
    maxPriorityFeePerGas: {
      description: "Returns max priority fee per gas",
      params: [],
      type: "U256"
    },
    mining: {
      description: "Returns true if client is actively mining new blocks.",
      params: [],
      type: "bool"
    },
    newBlockFilter: {
      description: "Returns id of new block filter.",
      params: [],
      type: "U256"
    },
    newFilter: {
      description: "Returns id of new filter.",
      params: [
        {
          name: "filter",
          type: "EthFilter"
        }
      ],
      type: "U256"
    },
    newPendingTransactionFilter: {
      description: "Returns id of new block filter.",
      params: [],
      type: "U256"
    },
    protocolVersion: {
      description: "Returns protocol version encoded as a string (quotes are necessary).",
      params: [],
      type: "u64"
    },
    sendRawTransaction: {
      description: "Sends signed transaction, returning its hash.",
      params: [
        {
          name: "bytes",
          type: "Bytes"
        }
      ],
      type: "H256"
    },
    sendTransaction: {
      description: "Sends transaction; will block waiting for signer to return the transaction hash",
      params: [
        {
          name: "tx",
          type: "EthTransactionRequest"
        }
      ],
      type: "H256"
    },
    submitHashrate: {
      description: "Used for submitting mining hashrate.",
      params: [
        {
          name: "index",
          type: "U256"
        },
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "bool"
    },
    submitWork: {
      description: "Used for submitting a proof-of-work solution.",
      params: [
        {
          name: "nonce",
          type: "H64"
        },
        {
          name: "headerHash",
          type: "H256"
        },
        {
          name: "mixDigest",
          type: "H256"
        }
      ],
      type: "bool"
    },
    subscribe: {
      description: "Subscribe to Eth subscription.",
      params: [
        { name: "kind", type: "EthSubKind" },
        {
          isOptional: true,
          name: "params",
          type: "EthSubParams"
        }
      ],
      pubsub: [
        "subscription",
        "subscribe",
        "unsubscribe"
      ],
      type: "Null"
    },
    syncing: {
      description: "Returns an object with data about the sync status or false.",
      params: [],
      type: "EthSyncStatus"
    },
    uninstallFilter: {
      description: "Uninstalls filter.",
      params: [
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "bool"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/eth/runtime.js
  var runtime24 = {
    ConvertTransactionRuntimeApi: [
      {
        methods: {
          convert_transaction: {
            description: "Converts an Ethereum-style transaction to Extrinsic",
            params: [
              {
                name: "transaction",
                type: "TransactionV2"
              }
            ],
            type: "Extrinsic"
          }
        },
        version: 2
      }
    ],
    DebugRuntimeApi: [
      {
        methods: {
          trace_block: {
            description: "Trace all block extrinsics",
            params: [
              {
                name: "extrinsics",
                type: "Vec<Extrinsic>"
              },
              {
                name: "knownTransactions",
                type: "Vec<H256>"
              }
            ],
            type: "Result<(), DispatchError>"
          },
          trace_transaction: {
            description: "Trace transaction extrinsics",
            params: [
              {
                name: "extrinsics",
                type: "Vec<Extrinsic>"
              },
              {
                name: "transaction",
                type: "EthTransaction"
              }
            ],
            type: "Result<(), DispatchError>"
          }
        },
        version: 4
      }
    ],
    EthereumRuntimeRPCApi: [
      {
        methods: {
          account_basic: {
            description: "Returns pallet_evm::Accounts by address.",
            params: [
              {
                name: "address",
                type: "H160"
              }
            ],
            type: "EvmAccount"
          },
          account_code_at: {
            description: "For a given account address, returns pallet_evm::AccountCodes.",
            params: [
              {
                name: "address",
                type: "H160"
              }
            ],
            type: "Bytes"
          },
          author: {
            description: "Returns the converted FindAuthor::find_author authority id.",
            params: [],
            type: "H160"
          },
          call: {
            description: "Returns a frame_ethereum::call response. If `estimate` is true,",
            params: [
              {
                name: "from",
                type: "H160"
              },
              {
                name: "to",
                type: "H160"
              },
              {
                name: "data",
                type: "Vec<u8>"
              },
              {
                name: "value",
                type: "U256"
              },
              {
                name: "gasLimit",
                type: "U256"
              },
              {
                name: "maxFeePerGas",
                type: "Option<U256>"
              },
              {
                name: "maxPriorityFeePerGas",
                type: "Option<U256>"
              },
              {
                name: "nonce",
                type: "Option<U256>"
              },
              {
                name: "estimate",
                type: "bool"
              },
              {
                name: "accessList",
                type: "Option<Vec<(H160, Vec<H256>)>>"
              }
            ],
            type: "Result<EvmCallInfo, DispatchError>"
          },
          chain_id: {
            description: "Returns runtime defined pallet_evm::ChainId.",
            params: [],
            type: "u64"
          },
          create: {
            description: "Returns a frame_ethereum::call response. If `estimate` is true,",
            params: [
              {
                name: "from",
                type: "H160"
              },
              {
                name: "data",
                type: "Vec<u8>"
              },
              {
                name: "value",
                type: "U256"
              },
              {
                name: "gasLimit",
                type: "U256"
              },
              {
                name: "maxFeePerGas",
                type: "Option<U256>"
              },
              {
                name: "maxPriorityFeePerGas",
                type: "Option<U256>"
              },
              {
                name: "nonce",
                type: "Option<U256>"
              },
              {
                name: "estimate",
                type: "bool"
              },
              {
                name: "accessList",
                type: "Option<Vec<(H160, Vec<H256>)>>"
              }
            ],
            type: "Result<EvmCreateInfo, DispatchError>"
          },
          current_all: {
            description: "Return all the current data for a block in a single runtime call.",
            params: [],
            type: "(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)"
          },
          current_block: {
            description: "Return the current block.",
            params: [],
            type: "BlockV2"
          },
          current_receipts: {
            description: "Return the current receipt.",
            params: [],
            type: "Option<Vec<EthReceiptV3>>"
          },
          current_transaction_statuses: {
            description: "Return the current transaction status.",
            params: [],
            type: "Option<Vec<EthTransactionStatus>>"
          },
          elasticity: {
            description: "Return the elasticity multiplier.",
            params: [],
            type: "Option<Permill>"
          },
          extrinsic_filter: {
            description: "Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.",
            params: [
              {
                name: "xts",
                type: "Vec<Extrinsic>"
              }
            ],
            type: "Vec<TransactionV2>"
          },
          gas_price: {
            description: "Returns FixedGasPrice::min_gas_price",
            params: [],
            type: "u256"
          },
          storage_at: {
            description: "For a given account address and index, returns pallet_evm::AccountStorages.",
            params: [
              {
                name: "address",
                type: "H160"
              },
              {
                name: "index",
                type: "u256"
              }
            ],
            type: "H256"
          }
        },
        version: 4
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/eth/definitions.js
  var V0 = {
    BlockV0: {
      header: "EthHeader",
      transactions: "Vec<TransactionV0>",
      ommers: "Vec<EthHeader>"
    },
    LegacyTransaction: {
      nonce: "U256",
      gasPrice: "U256",
      gasLimit: "U256",
      action: "EthTransactionAction",
      value: "U256",
      input: "Bytes",
      signature: "EthTransactionSignature"
    },
    TransactionV0: "LegacyTransaction"
  };
  var V1 = {
    BlockV1: {
      header: "EthHeader",
      transactions: "Vec<TransactionV1>",
      ommers: "Vec<EthHeader>"
    },
    EIP2930Transaction: {
      chainId: "u64",
      nonce: "U256",
      gasPrice: "U256",
      gasLimit: "U256",
      action: "EthTransactionAction",
      value: "U256",
      input: "Bytes",
      accessList: "EthAccessList",
      oddYParity: "bool",
      r: "H256",
      s: "H256"
    },
    TransactionV1: {
      _enum: {
        Legacy: "LegacyTransaction",
        EIP2930: "EIP2930Transaction"
      }
    }
  };
  var V2 = {
    BlockV2: {
      header: "EthHeader",
      transactions: "Vec<TransactionV2>",
      ommers: "Vec<EthHeader>"
    },
    EIP1559Transaction: {
      chainId: "u64",
      nonce: "U256",
      maxPriorityFeePerGas: "U256",
      maxFeePerGas: "U256",
      gasLimit: "U256",
      action: "EthTransactionAction",
      value: "U256",
      input: "Bytes",
      accessList: "EthAccessList",
      oddYParity: "bool",
      r: "H256",
      s: "H256"
    },
    TransactionV2: {
      _enum: {
        Legacy: "LegacyTransaction",
        EIP2930: "EIP2930Transaction",
        EIP1559: "EIP1559Transaction"
      }
    }
  };
  var types = {
    ...V0,
    ...V1,
    ...V2,
    EthereumAccountId: "GenericEthereumAccountId",
    EthereumAddress: "GenericEthereumAccountId",
    EthereumLookupSource: "GenericEthereumLookupSource",
    EthereumSignature: "[u8; 65]",
    EthAccessListItem: {
      address: "EthAddress",
      slots: "Vec<H256>"
    },
    EthAccessList: "Vec<EthAccessListItem>",
    EthAccount: {
      address: "EthAddress",
      balance: "U256",
      nonce: "U256",
      codeHash: "H256",
      storageHash: "H256",
      accountProof: "Vec<Bytes>",
      storageProof: "Vec<EthStorageProof>"
    },
    EthAddress: "H160",
    EthBlock: {
      header: "EthHeader",
      transactions: "Vec<EthTransaction>",
      ommers: "Vec<EthHeader>"
    },
    EthHeader: {
      parentHash: "H256",
      ommersHash: "H256",
      beneficiary: "EthAddress",
      stateRoot: "H256",
      transactionsRoot: "H256",
      receiptsRoot: "H256",
      logsBloom: "EthBloom",
      difficulty: "U256",
      number: "U256",
      gasLimit: "U256",
      gasUsed: "U256",
      timestamp: "u64",
      extraData: "Bytes",
      mixMash: "H256",
      nonce: "H64"
    },
    EthRichBlock: {
      _alias: {
        blockHash: "hash",
        blockSize: "size"
      },
      blockHash: "Option<H256>",
      parentHash: "H256",
      sha3Uncles: "H256",
      author: "EthAddress",
      miner: "EthAddress",
      stateRoot: "H256",
      transactionsRoot: "H256",
      receiptsRoot: "H256",
      number: "Option<U256>",
      gasUsed: "U256",
      gasLimit: "U256",
      extraData: "Bytes",
      logsBloom: "EthBloom",
      timestamp: "U256",
      difficulty: "U256",
      totalDifficulty: "Option<U256>",
      sealFields: "Vec<Bytes>",
      uncles: "Vec<H256>",
      transactions: "Vec<EthTransaction>",
      blockSize: "Option<U256>"
    },
    EthBloom: "H2048",
    EthCallRequest: {
      from: "Option<EthAddress>",
      to: "Option<EthAddress>",
      gasPrice: "Option<U256>",
      gas: "Option<U256>",
      value: "Option<U256>",
      data: "Option<Bytes>",
      nonce: "Option<U256>"
    },
    EthFeeHistory: {
      oldestBlock: "U256",
      baseFeePerGas: "Vec<U256>",
      gasUsedRatio: "Vec<f64>",
      reward: "Option<Vec<Vec<U256>>>"
    },
    EthFilter: {
      fromBlock: "Option<BlockNumber>",
      toBlock: "Option<BlockNumber>",
      blockHash: "Option<H256>",
      address: "Option<EthFilterAddress>",
      topics: "Option<EthFilterTopic>"
    },
    EthFilterAddress: {
      _enum: {
        Single: "EthAddress",
        Multiple: "Vec<EthAddress>",
        Null: "Null"
      }
    },
    EthFilterChanges: {
      _enum: {
        Logs: "Vec<EthLog>",
        Hashes: "Vec<H256>",
        Empty: "Null"
      }
    },
    EthFilterTopic: {
      _enum: {
        Single: "EthFilterTopicInner",
        Multiple: "Vec<EthFilterTopicInner>",
        Null: "Null"
      }
    },
    EthFilterTopicEntry: "Option<H256>",
    EthFilterTopicInner: {
      _enum: {
        Single: "EthFilterTopicEntry",
        Multiple: "Vec<EthFilterTopicEntry>",
        Null: "Null"
      }
    },
    EthRichHeader: {
      _alias: {
        blockHash: "hash",
        blockSize: "size"
      },
      blockHash: "Option<H256>",
      parentHash: "H256",
      sha3Uncles: "H256",
      author: "EthAddress",
      miner: "EthAddress",
      stateRoot: "H256",
      transactionsRoot: "H256",
      receiptsRoot: "H256",
      number: "Option<U256>",
      gasUsed: "U256",
      gasLimit: "U256",
      extraData: "Bytes",
      logsBloom: "EthBloom",
      timestamp: "U256",
      difficulty: "U256",
      sealFields: "Vec<Bytes>",
      blockSize: "Option<U256>"
    },
    EthLog: {
      address: "EthAddress",
      topics: "Vec<H256>",
      data: "Bytes",
      blockHash: "Option<H256>",
      blockNumber: "Option<U256>",
      transactionHash: "Option<H256>",
      transactionIndex: "Option<U256>",
      logIndex: "Option<U256>",
      transactionLogIndex: "Option<U256>",
      removed: "bool"
    },
    EthReceipt: {
      transactionHash: "Option<H256>",
      transactionIndex: "Option<U256>",
      blockHash: "Option<H256>",
      from: "Option<EthAddress>",
      to: "Option<EthAddress>",
      blockNumber: "Option<U256>",
      cumulativeGasUsed: "U256",
      gasUsed: "Option<U256>",
      contractAddress: "Option<EthAddress>",
      logs: "Vec<EthLog>",
      root: "Option<H256>",
      logsBloom: "EthBloom",
      statusCode: "Option<U64>"
    },
    EthReceiptV0: "EthReceipt",
    EthReceiptV3: "EthReceipt",
    EthStorageProof: {
      key: "U256",
      value: "U256",
      proof: "Vec<Bytes>"
    },
    EthSubKind: {
      _enum: ["newHeads", "logs", "newPendingTransactions", "syncing"]
    },
    EthSubParams: {
      _enum: {
        None: "Null",
        Logs: "EthFilter"
      }
    },
    EthSubResult: {
      _enum: {
        Header: "EthRichHeader",
        Log: "EthLog",
        TransactionHash: "H256",
        SyncState: "EthSyncStatus"
      }
    },
    EthSyncInfo: {
      startingBlock: "U256",
      currentBlock: "U256",
      highestBlock: "U256",
      warpChunksAmount: "Option<U256>",
      warpChunksProcessed: "Option<U256>"
    },
    EthSyncStatus: {
      _enum: {
        Info: "EthSyncInfo",
        None: "Null"
      }
    },
    EthTransaction: {
      hash: "H256",
      nonce: "U256",
      blockHash: "Option<H256>",
      blockNumber: "Option<U256>",
      transactionIndex: "Option<U256>",
      from: "H160",
      to: "Option<H160>",
      value: "U256",
      gasPrice: "Option<U256>",
      maxFeePerGas: "Option<U256>",
      maxPriorityFeePerGas: "Option<U256>",
      gas: "U256",
      input: "Bytes",
      creates: "Option<H160>",
      raw: "Bytes",
      publicKey: "Option<H512>",
      chainId: "Option<U64>",
      standardV: "U256",
      v: "U256",
      r: "U256",
      s: "U256",
      accessList: "Option<Vec<EthAccessListItem>>",
      transactionType: "Option<U256>"
    },
    EthTransactionSignature: {
      v: "u64",
      r: "H256",
      s: "H256"
    },
    EthTransactionAction: {
      _enum: {
        Call: "H160",
        Create: "Null"
      }
    },
    EthTransactionCondition: {
      _enum: {
        block: "u64",
        time: "u64"
      }
    },
    EthTransactionRequest: {
      from: "Option<EthAddress>",
      to: "Option<EthAddress>",
      gasPrice: "Option<U256>",
      gas: "Option<U256>",
      value: "Option<U256>",
      data: "Option<Bytes>",
      nonce: "Option<U256>"
    },
    EthTransactionStatus: {
      transactionHash: "H256",
      transactionIndex: "u32",
      from: "EthAddress",
      to: "Option<EthAddress>",
      contractAddress: "Option<EthAddress>",
      logs: "Vec<EthLog>",
      logsBloom: "EthBloom"
    },
    EthWork: {
      powHash: "H256",
      seedHash: "H256",
      target: "H256",
      number: "Option<u64>"
    }
  };
  var definitions_default60 = { rpc: rpc10, runtime: runtime24, types };

  // ../../node_modules/@polkadot/types/interfaces/nimbus/runtime.js
  var runtime25 = {
    AuthorFilterAPI: [
      {
        methods: {
          can_author: {
            description: "The runtime api used to predict whether an author will be eligible in the given slot",
            params: [
              {
                name: "author",
                type: "AccountId"
              },
              {
                name: "relayParent",
                type: "u32"
              },
              {
                name: "parentHeader",
                type: "Header"
              }
            ],
            type: "bool"
          }
        },
        version: 2
      },
      {
        methods: {
          can_author: {
            description: "The runtime api used to predict whether an author will be eligible in the given slot",
            params: [
              {
                name: "author",
                type: "AccountId"
              },
              {
                name: "relayParent",
                type: "u32"
              }
            ],
            type: "bool"
          }
        },
        version: 1
      }
    ],
    NimbusApi: [
      {
        methods: {
          can_author: {
            description: "The runtime api used to predict whether a Nimbus author will be eligible in the given slot",
            params: [
              {
                name: "author",
                type: "AccountId"
              },
              {
                name: "relayParent",
                type: "u32"
              },
              {
                name: "parentHeader",
                type: "Header"
              }
            ],
            type: "bool"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/nimbus/definitions.js
  var definitions_default61 = {
    rpc: {},
    runtime: runtime25,
    types: {}
  };

  // ../../node_modules/@polkadot/types/interfaces/ormlOracle/runtime.js
  var runtime26 = {
    OracleApi: [
      {
        methods: {
          get_all_values: {
            description: "Retrieves all values",
            params: [
              {
                name: "providerId",
                type: "Raw"
              }
            ],
            type: "Raw"
          },
          get_value: {
            description: "Retrieves a single value",
            params: [
              {
                name: "providerId",
                type: "Raw"
              },
              {
                name: "key",
                type: "Raw"
              }
            ],
            type: "Option<Raw>"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/ormlOracle/definitions.js
  var definitions_default62 = {
    rpc: {},
    runtime: runtime26,
    types: {}
  };

  // ../../node_modules/@polkadot/types/interfaces/ormlTokens/runtime.js
  var runtime27 = {
    TokensApi: [
      {
        methods: {
          query_existential_deposit: {
            description: "Query the existential amount for a specific currency",
            params: [
              {
                name: "currencyId",
                type: "Raw"
              }
            ],
            type: "u128"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/ormlTokens/definitions.js
  var definitions_default63 = {
    rpc: {},
    runtime: runtime27,
    types: {}
  };

  // ../../node_modules/@polkadot/types/interfaces/rpc/rpc.js
  var rpc11 = {
    methods: {
      description: "Retrieves the list of RPC methods that are exposed by the node",
      params: [],
      type: "RpcMethods"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/rpc/definitions.js
  var definitions_default64 = {
    rpc: rpc11,
    types: {
      RpcMethods: {
        version: "u32",
        methods: "Vec<Text>"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/author/rpc.js
  var rpc12 = {
    hasKey: {
      description: "Returns true if the keystore has private keys for the given public key and key type.",
      isUnsafe: true,
      params: [
        {
          name: "publicKey",
          type: "Bytes"
        },
        {
          name: "keyType",
          type: "Text"
        }
      ],
      type: "bool"
    },
    hasSessionKeys: {
      description: "Returns true if the keystore has private keys for the given session public keys.",
      isUnsafe: true,
      params: [
        {
          name: "sessionKeys",
          type: "Bytes"
        }
      ],
      type: "bool"
    },
    insertKey: {
      description: "Insert a key into the keystore.",
      isUnsafe: true,
      params: [
        {
          name: "keyType",
          type: "Text"
        },
        {
          name: "suri",
          type: "Text"
        },
        {
          name: "publicKey",
          type: "Bytes"
        }
      ],
      type: "Bytes"
    },
    pendingExtrinsics: {
      description: "Returns all pending extrinsics, potentially grouped by sender",
      params: [],
      type: "Vec<Extrinsic>"
    },
    removeExtrinsic: {
      description: "Remove given extrinsic from the pool and temporarily ban it to prevent reimporting",
      isUnsafe: true,
      params: [
        {
          name: "bytesOrHash",
          type: "Vec<ExtrinsicOrHash>"
        }
      ],
      type: "Vec<Hash>"
    },
    rotateKeys: {
      description: "Generate new session keys and returns the corresponding public keys",
      isUnsafe: true,
      params: [],
      type: "Bytes"
    },
    submitAndWatchExtrinsic: {
      description: "Submit and subscribe to watch an extrinsic until unsubscribed",
      isSigned: true,
      params: [
        {
          name: "extrinsic",
          type: "Extrinsic"
        }
      ],
      pubsub: [
        "extrinsicUpdate",
        "submitAndWatchExtrinsic",
        "unwatchExtrinsic"
      ],
      type: "ExtrinsicStatus"
    },
    submitExtrinsic: {
      description: "Submit a fully formatted extrinsic for block inclusion",
      isSigned: true,
      params: [
        {
          name: "extrinsic",
          type: "Extrinsic"
        }
      ],
      type: "Hash"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/author/definitions.js
  var definitions_default65 = {
    rpc: rpc12,
    types: {
      ExtrinsicOrHash: {
        _enum: {
          Hash: "Hash",
          Extrinsic: "Bytes"
        }
      },
      ExtrinsicStatus: {
        _enum: {
          Future: "Null",
          Ready: "Null",
          Broadcast: "Vec<Text>",
          InBlock: "Hash",
          Retracted: "Hash",
          FinalityTimeout: "Hash",
          Finalized: "Hash",
          Usurped: "Hash",
          Dropped: "Null",
          Invalid: "Null"
        }
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/chain/rpc.js
  var rpc13 = {
    getBlock: {
      description: "Get header and body of a relay chain block",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "hash",
          type: "BlockHash"
        }
      ],
      type: "SignedBlock"
    },
    getBlockHash: {
      description: "Get the block hash for a specific block",
      params: [
        {
          isOptional: true,
          name: "blockNumber",
          type: "BlockNumber"
        }
      ],
      type: "BlockHash"
    },
    getFinalizedHead: {
      alias: ["chain_getFinalisedHead"],
      description: "Get hash of the last finalized block in the canon chain",
      params: [],
      type: "BlockHash"
    },
    getHeader: {
      alias: ["chain_getHead"],
      description: "Retrieves the header for a specific block",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "hash",
          type: "BlockHash"
        }
      ],
      type: "Header"
    },
    subscribeAllHeads: {
      description: "Retrieves the newest header via subscription",
      params: [],
      pubsub: [
        "allHead",
        "subscribeAllHeads",
        "unsubscribeAllHeads"
      ],
      type: "Header"
    },
    subscribeFinalizedHeads: {
      alias: ["chain_subscribeFinalisedHeads", "chain_unsubscribeFinalisedHeads"],
      description: "Retrieves the best finalized header via subscription",
      params: [],
      pubsub: [
        "finalizedHead",
        "subscribeFinalizedHeads",
        "unsubscribeFinalizedHeads"
      ],
      type: "Header"
    },
    subscribeNewHeads: {
      alias: ["chain_unsubscribeNewHeads", "subscribe_newHead", "unsubscribe_newHead"],
      description: "Retrieves the best header via subscription",
      params: [],
      pubsub: [
        "newHead",
        "subscribeNewHead",
        "unsubscribeNewHead"
      ],
      type: "Header"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/chain/definitions.js
  var definitions_default66 = {
    rpc: rpc13,
    types: {
      BlockHash: "Hash"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/childstate/rpc.js
  var rpc14 = {
    getKeys: {
      description: "Returns the keys with prefix from a child storage, leave empty to get all the keys",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "prefix",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getKeysPaged: {
      alias: ["childstate_getKeysPagedAt"],
      description: "Returns the keys with prefix from a child storage with pagination support",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "prefix",
          type: "StorageKey"
        },
        {
          name: "count",
          type: "u32"
        },
        {
          isOptional: true,
          name: "startKey",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getStorage: {
      description: "Returns a child storage entry at a specific block state",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Option<StorageData>"
    },
    getStorageEntries: {
      description: "Returns child storage entries for multiple keys at a specific block state",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Vec<Option<StorageData>>"
    },
    getStorageHash: {
      description: "Returns the hash of a child storage entry at a block state",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Option<Hash>"
    },
    getStorageSize: {
      description: "Returns the size of a child storage entry at a block state",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Option<u64>"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/childstate/definitions.js
  var definitions_default67 = {
    rpc: rpc14,
    types: {
      PrefixedStorageKey: "StorageKey"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/offchain/rpc.js
  var rpc15 = {
    localStorageGet: {
      description: "Get offchain local storage under given key and prefix",
      isUnsafe: true,
      params: [
        {
          name: "kind",
          type: "StorageKind"
        },
        {
          name: "key",
          type: "Bytes"
        }
      ],
      type: "Option<Bytes>"
    },
    localStorageSet: {
      description: "Set offchain local storage under given key and prefix",
      isUnsafe: true,
      params: [
        {
          name: "kind",
          type: "StorageKind"
        },
        {
          name: "key",
          type: "Bytes"
        },
        {
          name: "value",
          type: "Bytes"
        }
      ],
      type: "Null"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/offchain/runtime.js
  var runtime28 = {
    OffchainWorkerApi: [
      {
        methods: {
          offchain_worker: {
            description: "Starts the off-chain task for given block header.",
            params: [
              {
                name: "header",
                type: "Header"
              }
            ],
            type: "Null"
          }
        },
        version: 2
      },
      {
        methods: {
          offchain_worker: {
            description: "Starts the off-chain task for given block header.",
            params: [
              {
                name: "number",
                type: "BlockNumber"
              }
            ],
            type: "Null"
          }
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/offchain/definitions.js
  var definitions_default68 = {
    rpc: rpc15,
    runtime: runtime28,
    types: {
      StorageKind: {
        _enum: {
          PERSISTENT: 1,
          LOCAL: 2
        }
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/payment/rpc.js
  var rpc16 = {
    queryFeeDetails: {
      deprecated: "Use `api.call.transactionPaymentApi.queryFeeDetails` instead",
      description: "Query the detailed fee of a given encoded extrinsic",
      params: [
        {
          name: "extrinsic",
          type: "Bytes"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "FeeDetails"
    },
    queryInfo: {
      deprecated: "Use `api.call.transactionPaymentApi.queryInfo` instead",
      description: "Retrieves the fee information for an encoded extrinsic",
      params: [
        {
          name: "extrinsic",
          type: "Bytes"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "RuntimeDispatchInfoV1"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/payment/runtime.js
  var V1_TO_V4_SHARED_PAY = {
    query_fee_details: {
      description: "The transaction fee details",
      params: [
        {
          name: "uxt",
          type: "Extrinsic"
        },
        {
          name: "len",
          type: "u32"
        }
      ],
      type: "FeeDetails"
    }
  };
  var V1_TO_V3_SHARED_CALL = {
    query_call_fee_details: {
      description: "The call fee details",
      params: [
        {
          name: "call",
          type: "Call"
        },
        {
          name: "len",
          type: "u32"
        }
      ],
      type: "FeeDetails"
    }
  };
  var V2_TO_V4_SHARED_PAY = {
    query_info: {
      description: "The transaction info",
      params: [
        {
          name: "uxt",
          type: "Extrinsic"
        },
        {
          name: "len",
          type: "u32"
        }
      ],
      type: "RuntimeDispatchInfo"
    }
  };
  var V2_V3_SHARED_CALL = {
    query_call_info: {
      description: "The call info",
      params: [
        {
          name: "call",
          type: "Call"
        },
        {
          name: "len",
          type: "u32"
        }
      ],
      type: "RuntimeDispatchInfo"
    }
  };
  var V3_SHARED_PAY_CALL = {
    query_length_to_fee: {
      description: "Query the output of the current LengthToFee given some input",
      params: [
        {
          name: "length",
          type: "u32"
        }
      ],
      type: "Balance"
    },
    query_weight_to_fee: {
      description: "Query the output of the current WeightToFee given some input",
      params: [
        {
          name: "weight",
          type: "Weight"
        }
      ],
      type: "Balance"
    }
  };
  var runtime29 = {
    TransactionPaymentApi: [
      {
        methods: {
          ...V3_SHARED_PAY_CALL,
          ...V2_TO_V4_SHARED_PAY,
          ...V1_TO_V4_SHARED_PAY
        },
        version: 4
      },
      {
        methods: {
          ...V3_SHARED_PAY_CALL,
          ...V2_TO_V4_SHARED_PAY,
          ...V1_TO_V4_SHARED_PAY
        },
        version: 3
      },
      {
        methods: {
          ...V2_TO_V4_SHARED_PAY,
          ...V1_TO_V4_SHARED_PAY
        },
        version: 2
      },
      {
        methods: {
          query_info: {
            description: "The transaction info",
            params: [
              {
                name: "uxt",
                type: "Extrinsic"
              },
              {
                name: "len",
                type: "u32"
              }
            ],
            type: "RuntimeDispatchInfo"
          },
          ...V1_TO_V4_SHARED_PAY
        },
        version: 1
      }
    ],
    TransactionPaymentCallApi: [
      {
        methods: {
          ...V3_SHARED_PAY_CALL,
          ...V2_V3_SHARED_CALL,
          ...V1_TO_V3_SHARED_CALL
        },
        version: 3
      },
      {
        methods: {
          ...V2_V3_SHARED_CALL,
          ...V1_TO_V3_SHARED_CALL
        },
        version: 2
      },
      {
        methods: {
          CALL: {
            description: "The call info",
            params: [
              {
                name: "call",
                type: "Call"
              },
              {
                name: "len",
                type: "u32"
              }
            ],
            type: "RuntimeDispatchInfo"
          },
          ...V1_TO_V3_SHARED_CALL
        },
        version: 1
      }
    ]
  };

  // ../../node_modules/@polkadot/types/interfaces/payment/definitions.js
  var definitions_default69 = {
    rpc: rpc16,
    runtime: runtime29,
    types: {
      FeeDetails: {
        inclusionFee: "Option<InclusionFee>"
      },
      InclusionFee: {
        baseFee: "Balance",
        lenFee: "Balance",
        adjustedWeightFee: "Balance"
      },
      RuntimeDispatchInfo: {
        weight: "Weight",
        class: "DispatchClass",
        partialFee: "Balance"
      },
      RuntimeDispatchInfoV1: {
        weight: "WeightV1",
        class: "DispatchClass",
        partialFee: "Balance"
      },
      RuntimeDispatchInfoV2: {
        weight: "WeightV2",
        class: "DispatchClass",
        partialFee: "Balance"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/state/rpc.js
  var rpc17 = {
    call: {
      alias: ["state_callAt"],
      description: "Perform a call to a builtin on the chain",
      params: [
        {
          name: "method",
          type: "Text"
        },
        {
          name: "data",
          type: "Bytes"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Bytes"
    },
    getChildKeys: {
      description: "Retrieves the keys with prefix of a specific child storage",
      params: [
        {
          name: "childStorageKey",
          type: "StorageKey"
        },
        {
          name: "childDefinition",
          type: "StorageKey"
        },
        {
          name: "childType",
          type: "u32"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getChildReadProof: {
      description: "Returns proof of storage for child key entries at a specific block state.",
      params: [
        {
          name: "childStorageKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ReadProof"
    },
    getChildStorage: {
      description: "Retrieves the child storage for a key",
      params: [
        {
          name: "childStorageKey",
          type: "StorageKey"
        },
        {
          name: "childDefinition",
          type: "StorageKey"
        },
        {
          name: "childType",
          type: "u32"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "StorageData"
    },
    getChildStorageHash: {
      description: "Retrieves the child storage hash",
      params: [
        {
          name: "childStorageKey",
          type: "StorageKey"
        },
        {
          name: "childDefinition",
          type: "StorageKey"
        },
        {
          name: "childType",
          type: "u32"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Hash"
    },
    getChildStorageSize: {
      description: "Retrieves the child storage size",
      params: [
        {
          name: "childStorageKey",
          type: "StorageKey"
        },
        {
          name: "childDefinition",
          type: "StorageKey"
        },
        {
          name: "childType",
          type: "u32"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "u64"
    },
    getKeys: {
      deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
      description: "Retrieves the keys with a certain prefix",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getKeysPaged: {
      alias: ["state_getKeysPagedAt"],
      description: "Returns the keys with prefix with pagination support.",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          name: "count",
          type: "u32"
        },
        {
          isOptional: true,
          name: "startKey",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getMetadata: {
      description: "Returns the runtime metadata",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Metadata"
    },
    getPairs: {
      deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
      description: "Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",
      isUnsafe: true,
      params: [
        {
          name: "prefix",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<KeyValue>"
    },
    getReadProof: {
      description: "Returns proof of storage entries at a specific block state",
      params: [
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ReadProof"
    },
    getRuntimeVersion: {
      alias: ["chain_getRuntimeVersion"],
      description: "Get the runtime version",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "RuntimeVersion"
    },
    getStorage: {
      alias: ["state_getStorageAt"],
      description: "Retrieves the storage for a key",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "StorageData"
    },
    getStorageHash: {
      alias: ["state_getStorageHashAt"],
      description: "Retrieves the storage hash",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Hash"
    },
    getStorageSize: {
      alias: ["state_getStorageSizeAt"],
      description: "Retrieves the storage size",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "u64"
    },
    queryStorage: {
      description: "Query historical storage entries (by key) starting from a start block",
      isUnsafe: true,
      params: [
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          name: "fromBlock",
          type: "Hash"
        },
        {
          isOptional: true,
          name: "toBlock",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageChangeSet>"
    },
    queryStorageAt: {
      description: "Query storage entries (by key) starting at block hash given as the second parameter",
      params: [
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageChangeSet>"
    },
    subscribeRuntimeVersion: {
      alias: ["chain_subscribeRuntimeVersion", "chain_unsubscribeRuntimeVersion"],
      description: "Retrieves the runtime version via subscription",
      params: [],
      pubsub: [
        "runtimeVersion",
        "subscribeRuntimeVersion",
        "unsubscribeRuntimeVersion"
      ],
      type: "RuntimeVersion"
    },
    subscribeStorage: {
      description: "Subscribes to storage changes for the provided keys",
      params: [
        {
          isOptional: true,
          name: "keys",
          type: "Vec<StorageKey>"
        }
      ],
      pubsub: [
        "storage",
        "subscribeStorage",
        "unsubscribeStorage"
      ],
      type: "StorageChangeSet"
    },
    traceBlock: {
      description: "Provides a way to trace the re-execution of a single block",
      isUnsafe: true,
      params: [
        {
          name: "block",
          type: "Hash"
        },
        {
          name: "targets",
          type: "Option<Text>"
        },
        {
          name: "storageKeys",
          type: "Option<Text>"
        },
        {
          name: "methods",
          type: "Option<Text>"
        }
      ],
      type: "TraceBlockResponse"
    },
    trieMigrationStatus: {
      description: "Check current migration state",
      isUnsafe: true,
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "MigrationStatusResult"
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/state/definitions.js
  var definitions_default70 = {
    rpc: rpc17,
    types: {
      ApiId: "[u8; 8]",
      BlockTrace: {
        blockHash: "Text",
        parentHash: "Text",
        tracingTargets: "Text",
        storageKeys: "Text",
        spans: "Vec<BlockTraceSpan>",
        events: "Vec<BlockTraceEvent>"
      },
      BlockTraceEvent: {
        target: "Text",
        data: "BlockTraceEventData",
        parentId: "Option<u64>"
      },
      BlockTraceEventData: {
        stringValues: "HashMap<Text, Text>"
      },
      BlockTraceSpan: {
        id: "u64",
        parentId: "Option<u64>",
        name: "Text",
        target: "Text",
        wasm: "bool"
      },
      KeyValueOption: "(StorageKey, Option<StorageData>)",
      MigrationStatusResult: {
        topRemainingToMigrate: "u64",
        childRemainingToMigrate: "u64"
      },
      ReadProof: {
        at: "Hash",
        proof: "Vec<Bytes>"
      },
      RuntimeVersionApi: "(ApiId, u32)",
      RuntimeVersion: {
        specName: "Text",
        implName: "Text",
        authoringVersion: "u32",
        specVersion: "u32",
        implVersion: "u32",
        apis: "Vec<RuntimeVersionApi>",
        transactionVersion: "u32",
        stateVersion: "u8"
      },
      RuntimeVersionPre4: {
        specName: "Text",
        implName: "Text",
        authoringVersion: "u32",
        specVersion: "u32",
        implVersion: "u32",
        apis: "Vec<RuntimeVersionApi>",
        transactionVersion: "u32"
      },
      RuntimeVersionPre3: {
        specName: "Text",
        implName: "Text",
        authoringVersion: "u32",
        specVersion: "u32",
        implVersion: "u32",
        apis: "Vec<RuntimeVersionApi>"
      },
      RuntimeVersionPartial: {
        specName: "Text",
        specVersion: "u32",
        apis: "Vec<RuntimeVersionApi>"
      },
      SpecVersion: "u32",
      StorageChangeSet: {
        block: "Hash",
        changes: "Vec<KeyValueOption>"
      },
      TraceBlockResponse: {
        _enum: {
          TraceError: "TraceError",
          BlockTrace: "BlockTrace"
        }
      },
      TraceError: {
        error: "Text"
      }
    }
  };

  // ../../node_modules/@polkadot/types/interfaces/jsonrpc.js
  var jsonrpc = {};
  Object.keys(definitions_exports).forEach((s) => Object.entries(definitions_exports[s].rpc || {}).forEach(([method, def]) => {
    const section2 = def.aliasSection || s;
    if (!jsonrpc[section2]) {
      jsonrpc[section2] = {};
    }
    jsonrpc[section2][method] = objectSpread({}, def, {
      isSubscription: !!def.pubsub,
      jsonrpc: `${section2}_${method}`,
      method,
      section: section2
    });
  }));
  var jsonrpc_default = jsonrpc;

  // ../../node_modules/@polkadot/types/metadata/PortableRegistry/PortableRegistry.js
  var l6 = logger("PortableRegistry");
  var TYPE_UNWRAP = { toNumber: () => -1 };
  var PRIMITIVE_ALIAS = {
    Char: "u32",
    Str: "Text"
  };
  var PATHS_ALIAS = splitNamespace([
    "sp_core::crypto::AccountId32",
    "sp_runtime::generic::era::Era",
    "sp_runtime::multiaddress::MultiAddress",
    "fp_account::AccountId20",
    "account::AccountId20",
    "polkadot_runtime_common::claims::EthereumAddress",
    "frame_support::weights::weight_v2::Weight",
    "sp_weights::weight_v2::Weight",
    "*_democracy::vote::Vote",
    "*_conviction_voting::vote::Vote",
    "*_identity::types::Data",
    "sp_core::OpaqueMetadata",
    "sp_core::OpaquePeerId",
    "sp_core::offchain::OpaqueMultiaddr",
    "primitive_types::*",
    "sp_arithmetic::per_things::*",
    "*_runtime::RuntimeCall",
    "*_runtime::RuntimeEvent",
    "ink::env::types::*",
    "ink::primitives::types::*",
    "ink_env::types::*",
    "ink_primitives::types::*"
  ]);
  var PATHS_SET = splitNamespace([
    "pallet_identity::types::BitFlags"
  ]);
  var BITVEC_NS_LSB = ["bitvec::order::Lsb0", "BitOrderLsb0"];
  var BITVEC_NS_MSB = ["bitvec::order::Msb0", "BitOrderMsb0"];
  var BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB];
  var WRAPPERS = ["BoundedBTreeMap", "BoundedBTreeSet", "BoundedVec", "Box", "BTreeMap", "BTreeSet", "Cow", "Option", "Range", "RangeInclusive", "Result", "WeakBoundedVec", "WrapperKeepOpaque", "WrapperOpaque"];
  var RESERVED = [
    "entries",
    "keys",
    "new",
    "size",
    "hash",
    "registry"
  ];
  var PATH_RM_INDEX_1 = ["generic", "misc", "pallet", "traits", "types"];
  function sanitizeDocs(docs) {
    const count = docs.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = docs[i].toString();
    }
    return result;
  }
  function splitNamespace(values) {
    const count = values.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = values[i].split("::");
    }
    return result;
  }
  function matchParts(first2, second) {
    return first2.length === second.length && first2.every((a, index) => {
      const b = second[index].toString();
      if (a === "*" || a === b) {
        return true;
      }
      if (a.includes("*") && a.includes("_") && b.includes("_")) {
        let suba = a.split("_");
        let subb = b.split("_");
        if (suba[0] === "*") {
          const indexOf = subb.indexOf(suba[1]);
          if (indexOf !== -1) {
            suba = suba.slice(1);
            subb = subb.slice(indexOf);
          }
        }
        if (suba.length === 2 && suba[1] === "*" && suba[0] === subb[0]) {
          return true;
        }
        return matchParts(suba, subb);
      }
      return false;
    });
  }
  function getAliasPath({ def, path }) {
    if (["frame_support::weights::weight_v2::Weight", "sp_weights::weight_v2::Weight"].includes(path.join("::"))) {
      return !def.isComposite || def.asComposite.fields.length === 1 ? "WeightV1" : null;
    }
    return path.length && PATHS_ALIAS.some((a) => matchParts(a, path)) ? path[path.length - 1].toString() : null;
  }
  function extractNameFlat(portable, lookupIndex, params, path, isInternal = false) {
    const count = path.length;
    if (count === 0 || WRAPPERS.includes(path[count - 1].toString())) {
      return null;
    }
    const camels = new Array(count);
    const lowers = new Array(count);
    for (let i = 0; i < count; i++) {
      const c2 = stringPascalCase(isInternal ? path[i].replace("pallet_", "") : path[i]);
      const l15 = c2.toLowerCase();
      camels[i] = c2;
      lowers[i] = l15;
    }
    let name = "";
    for (let i = 0; i < count; i++) {
      const l15 = lowers[i];
      if (i !== 1 || !PATH_RM_INDEX_1.includes(l15)) {
        if (l15 !== lowers[i + 1]) {
          name += camels[i];
        }
      }
    }
    if (camels[1] === "RawOrigin" && count === 2 && params.length === 2 && params[1].type.isSome) {
      const instanceType = portable[params[1].type.unwrap().toNumber()];
      if (instanceType.type.path.length === 2) {
        name = `${name}${instanceType.type.path[1].toString()}`;
      }
    }
    return { lookupIndex, name, params };
  }
  function extractName(portable, lookupIndex, { type: { params, path } }) {
    return extractNameFlat(portable, lookupIndex, params, path);
  }
  function nextDupeMatches(name, startAt, names) {
    const result = [names[startAt]];
    for (let i = startAt + 1, count = names.length; i < count; i++) {
      const v3 = names[i];
      if (v3.name === name) {
        result.push(v3);
      }
    }
    return result;
  }
  function rewriteDupes(input, rewrite) {
    const count = input.length;
    for (let i = 0; i < count; i++) {
      const a = input[i];
      for (let j = i + 1; j < count; j++) {
        const b = input[j];
        if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
          return false;
        }
      }
    }
    for (let i = 0; i < count; i++) {
      const p = input[i];
      rewrite[p.lookupIndex] = p.name;
    }
    return true;
  }
  function removeDupeNames(lookup, portable, names) {
    const rewrite = {};
    return names.map((original, startAt) => {
      const { lookupIndex, name, params } = original;
      if (!name) {
        return null;
      } else if (rewrite[lookupIndex]) {
        return original;
      }
      const allSame = nextDupeMatches(name, startAt, names);
      if (allSame.length === 1) {
        return original;
      }
      const anyDiff = allSame.some((o) => params.length !== o.params.length || params.some((p, index) => !p.name.eq(o.params[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber()));
      if (!anyDiff) {
        return original;
      }
      const paramIdx = params.findIndex(({ type }, index) => allSame.every(({ params: params2 }, aIndex) => params2[index].type.isSome && (aIndex === 0 || !params2[index].type.eq(type))));
      if (paramIdx === -1) {
        return original;
      }
      const sameCount = allSame.length;
      const adjusted = new Array(sameCount);
      for (let i = 0; i < sameCount; i++) {
        const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
        const { def, path } = lookup.getSiType(params2[paramIdx].type.unwrap());
        if (!def.isPrimitive && !path.length) {
          return null;
        }
        adjusted[i] = {
          lookupIndex: lookupIndex2,
          name: def.isPrimitive ? `${name2}${def.asPrimitive.toString()}` : `${name2}${path[path.length - 1].toString()}`
        };
      }
      if (rewriteDupes(adjusted, rewrite)) {
        return original;
      }
      for (let i = 0; i < sameCount; i++) {
        const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
        const { def, path } = lookup.getSiType(params2[paramIdx].type.unwrap());
        const flat = extractNameFlat(portable, lookupIndex2, params2, path, true);
        if (def.isPrimitive || !flat) {
          return null;
        }
        adjusted[i] = {
          lookupIndex: lookupIndex2,
          name: `${name2}${flat.name}`
        };
      }
      if (rewriteDupes(adjusted, rewrite)) {
        return original;
      }
      return null;
    }).filter((n) => !!n).map(({ lookupIndex, name, params }) => ({
      lookupIndex,
      name: rewrite[lookupIndex] || name,
      params
    }));
  }
  function registerTypes(lookup, lookups, names, params) {
    lookup.registry.register(lookups);
    if (params.SpRuntimeUncheckedExtrinsic) {
      const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
      const siAddress = lookup.getSiType(addrParam.type.unwrap());
      const siSignature = lookup.getSiType(sigParam.type.unwrap());
      const nsSignature = siSignature.path.join("::");
      let nsAccountId = siAddress.path.join("::");
      const isMultiAddress = nsAccountId === "sp_runtime::multiaddress::MultiAddress";
      if (isMultiAddress) {
        const [idParam] = siAddress.params;
        nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join("::");
      }
      lookup.registry.register({
        AccountId: nsAccountId.endsWith("::AccountId20") || nsAccountId.endsWith("::H160") ? "AccountId20" : "AccountId32",
        Address: isMultiAddress ? "MultiAddress" : "AccountId",
        ExtrinsicSignature: ["sp_runtime::MultiSignature"].includes(nsSignature) ? "MultiSignature" : names[sigParam.type.unwrap().toNumber()] || "MultiSignature"
      });
    }
  }
  function extractAliases(params, isContract) {
    const hasParams = Object.keys(params).some((k) => !k.startsWith("Pallet"));
    const alias2 = {};
    if (params.SpRuntimeUncheckedExtrinsic) {
      const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
      alias2[type.unwrap().toNumber()] = "Call";
    } else if (hasParams && !isContract) {
      l6.warn("Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic");
    }
    if (params.FrameSystemEventRecord) {
      const [{ type }] = params.FrameSystemEventRecord;
      alias2[type.unwrap().toNumber()] = "Event";
    } else if (hasParams && !isContract) {
      l6.warn("Unable to determine runtime Event type, cannot inspect frame_system::EventRecord");
    }
    return alias2;
  }
  function extractTypeInfo(lookup, portable) {
    const nameInfo = [];
    const types2 = {};
    for (let i = 0, count = portable.length; i < count; i++) {
      const type = portable[i];
      const lookupIndex = type.id.toNumber();
      const extracted = extractName(portable, lookupIndex, portable[i]);
      if (extracted) {
        nameInfo.push(extracted);
      }
      types2[lookupIndex] = type;
    }
    const lookups = {};
    const names = {};
    const params = {};
    const dedup = removeDupeNames(lookup, portable, nameInfo);
    for (let i = 0, count = dedup.length; i < count; i++) {
      const { lookupIndex, name, params: p } = dedup[i];
      names[lookupIndex] = name;
      lookups[name] = lookup.registry.createLookupType(lookupIndex);
      params[name] = p;
    }
    return { lookups, names, params, types: types2 };
  }
  var PortableRegistry = class extends Struct {
    constructor(registry, value, isContract) {
      super(registry, {
        types: "Vec<PortableType>"
      }, value);
      this.__internal__typeDefs = {};
      const { lookups, names, params, types: types2 } = extractTypeInfo(this, this.types);
      this.__internal__alias = extractAliases(params, isContract);
      this.__internal__lookups = lookups;
      this.__internal__names = names;
      this.__internal__params = params;
      this.__internal__types = types2;
    }
    get names() {
      return Object.values(this.__internal__names).sort();
    }
    get types() {
      return this.getT("types");
    }
    register() {
      registerTypes(this, this.__internal__lookups, this.__internal__names, this.__internal__params);
    }
    getName(lookupId) {
      return this.__internal__names[this.__internal__getLookupId(lookupId)];
    }
    getSiType(lookupId) {
      const found = (this.__internal__types || this.types)[this.__internal__getLookupId(lookupId)];
      if (!found) {
        throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
      }
      return found.type;
    }
    getTypeDef(lookupId) {
      const lookupIndex = this.__internal__getLookupId(lookupId);
      if (!this.__internal__typeDefs[lookupIndex]) {
        const lookupName = this.__internal__names[lookupIndex];
        const empty2 = {
          info: TypeDefInfo.DoNotConstruct,
          lookupIndex,
          lookupName,
          type: this.registry.createLookupType(lookupIndex)
        };
        if (lookupName) {
          this.__internal__typeDefs[lookupIndex] = empty2;
        }
        const extracted = this.__internal__extract(this.getSiType(lookupId), lookupIndex);
        if (!lookupName) {
          this.__internal__typeDefs[lookupIndex] = empty2;
        }
        Object.keys(extracted).forEach((k) => {
          if (k !== "lookupName" || extracted[k]) {
            this.__internal__typeDefs[lookupIndex][k] = extracted[k];
          }
        });
        if (extracted.info === TypeDefInfo.Plain) {
          this.__internal__typeDefs[lookupIndex].lookupNameRoot = this.__internal__typeDefs[lookupIndex].lookupName;
          delete this.__internal__typeDefs[lookupIndex].lookupName;
        }
      }
      return this.__internal__typeDefs[lookupIndex];
    }
    sanitizeField(name) {
      let nameField = null;
      let nameOrig = null;
      if (name.isSome) {
        nameField = stringCamelCase(name.unwrap());
        if (nameField.includes("#")) {
          nameOrig = nameField;
          nameField = nameOrig.replace(/#/g, "_");
        } else if (RESERVED.includes(nameField)) {
          nameOrig = nameField;
          nameField = `${nameField}_`;
        }
      }
      return [nameField, nameOrig];
    }
    __internal__createSiDef(lookupId) {
      const typeDef = this.getTypeDef(lookupId);
      const lookupIndex = lookupId.toNumber();
      return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
        docs: typeDef.docs,
        info: TypeDefInfo.Si,
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        type: this.registry.createLookupType(lookupId)
      } : typeDef;
    }
    __internal__getLookupId(lookupId) {
      if (isString(lookupId)) {
        if (!this.registry.isLookupType(lookupId)) {
          throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
        }
        return parseInt(lookupId.replace("Lookup", ""), 10);
      } else if (isNumber(lookupId)) {
        return lookupId;
      }
      return lookupId.toNumber();
    }
    __internal__extract(type, lookupIndex) {
      const namespace = type.path.join("::");
      let typeDef;
      const aliasType = this.__internal__alias[lookupIndex] || getAliasPath(type);
      try {
        if (aliasType) {
          typeDef = this.__internal__extractAliasPath(lookupIndex, aliasType);
        } else {
          switch (type.def.type) {
            case "Array":
              typeDef = this.__internal__extractArray(lookupIndex, type.def.asArray);
              break;
            case "BitSequence":
              typeDef = this.__internal__extractBitSequence(lookupIndex, type.def.asBitSequence);
              break;
            case "Compact":
              typeDef = this.__internal__extractCompact(lookupIndex, type.def.asCompact);
              break;
            case "Composite":
              typeDef = this.__internal__extractComposite(lookupIndex, type, type.def.asComposite);
              break;
            case "HistoricMetaCompat":
              typeDef = this.__internal__extractHistoric(lookupIndex, type.def.asHistoricMetaCompat);
              break;
            case "Primitive":
              typeDef = this.__internal__extractPrimitive(lookupIndex, type);
              break;
            case "Sequence":
              typeDef = this.__internal__extractSequence(lookupIndex, type.def.asSequence);
              break;
            case "Tuple":
              typeDef = this.__internal__extractTuple(lookupIndex, type.def.asTuple);
              break;
            case "Variant":
              typeDef = this.__internal__extractVariant(lookupIndex, type, type.def.asVariant);
              break;
            default:
              assertUnreachable(type.def.type);
          }
        }
      } catch (error) {
        throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ""}: Error extracting ${stringify(type)}: ${error.message}`);
      }
      return objectSpread({
        docs: sanitizeDocs(type.docs),
        namespace
      }, typeDef);
    }
    __internal__extractArray(_3, { len, type }) {
      const length = len.toNumber();
      if (length > 2048) {
        throw new Error("Only support for [Type; <length>], where length <= 2048");
      }
      return withTypeString(this.registry, {
        info: TypeDefInfo.VecFixed,
        length,
        sub: this.__internal__createSiDef(type)
      });
    }
    __internal__extractBitSequence(_3, { bitOrderType, bitStoreType }) {
      const a = this.__internal__createSiDef(bitOrderType);
      const b = this.__internal__createSiDef(bitStoreType);
      const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || "") ? [a, b] : [b, a];
      if (!bitOrder.namespace || !BITVEC_NS.includes(bitOrder.namespace)) {
        throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || "<unknown>"}`);
      } else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== "u8") {
        throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
      }
      const isLsb = BITVEC_NS_LSB.includes(bitOrder.namespace);
      if (!isLsb) {
      }
      return {
        info: TypeDefInfo.Plain,
        type: "BitVec"
      };
    }
    __internal__extractCompact(_3, { type }) {
      return withTypeString(this.registry, {
        info: TypeDefInfo.Compact,
        sub: this.__internal__createSiDef(type)
      });
    }
    __internal__extractComposite(lookupIndex, { params, path }, { fields }) {
      if (path.length) {
        const pathFirst = path[0].toString();
        const pathLast = path[path.length - 1].toString();
        if (path.length === 1 && pathFirst === "BTreeMap") {
          if (params.length !== 2) {
            throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: TypeDefInfo.BTreeMap,
            sub: params.map(({ type }) => this.__internal__createSiDef(type.unwrap()))
          });
        } else if (path.length === 1 && pathFirst === "BTreeSet") {
          if (params.length !== 1) {
            throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: TypeDefInfo.BTreeSet,
            sub: this.__internal__createSiDef(params[0].type.unwrap())
          });
        } else if (["Range", "RangeInclusive"].includes(pathFirst)) {
          if (params.length !== 1) {
            throw new Error(`Range requires 1 parameter, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: pathFirst === "Range" ? TypeDefInfo.Range : TypeDefInfo.RangeInclusive,
            sub: this.__internal__createSiDef(params[0].type.unwrap()),
            type: pathFirst
          });
        } else if (["WrapperKeepOpaque", "WrapperOpaque"].includes(pathLast)) {
          if (params.length !== 1) {
            throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: pathLast === "WrapperKeepOpaque" ? TypeDefInfo.WrapperKeepOpaque : TypeDefInfo.WrapperOpaque,
            sub: this.__internal__createSiDef(params[0].type.unwrap()),
            type: pathLast
          });
        }
      }
      return PATHS_SET.some((p) => matchParts(p, path)) ? this.__internal__extractCompositeSet(lookupIndex, params, fields) : this.__internal__extractFields(lookupIndex, fields);
    }
    __internal__extractCompositeSet(_3, params, fields) {
      if (params.length !== 1 || fields.length !== 1) {
        throw new Error("Set handling expects param/field as single entries");
      }
      return withTypeString(this.registry, {
        info: TypeDefInfo.Set,
        length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
        sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index, name }) => ({
          index: index.toNumber(),
          info: TypeDefInfo.Plain,
          name: name.toString(),
          type: "Null"
        }))
      });
    }
    __internal__extractFields(lookupIndex, fields) {
      let isStruct = true;
      let isTuple = true;
      const count = fields.length;
      for (let f = 0; f < count; f++) {
        const { name } = fields[f];
        isStruct = isStruct && name.isSome;
        isTuple = isTuple && name.isNone;
      }
      if (!isTuple && !isStruct) {
        throw new Error("Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)");
      }
      if (count === 0) {
        return {
          info: TypeDefInfo.Null,
          type: "Null"
        };
      } else if (isTuple && count === 1) {
        const typeDef = this.__internal__createSiDef(fields[0].type);
        return objectSpread({}, typeDef, lookupIndex === -1 ? null : {
          lookupIndex,
          lookupName: this.__internal__names[lookupIndex],
          lookupNameRoot: typeDef.lookupName
        }, fields[0].typeName.isSome ? { typeName: sanitize(fields[0].typeName.unwrap()) } : null);
      }
      const [sub, alias2] = this.__internal__extractFieldsAlias(fields);
      return withTypeString(this.registry, objectSpread({
        info: isTuple ? TypeDefInfo.Tuple : TypeDefInfo.Struct,
        sub
      }, alias2.size ? { alias: alias2 } : null, lookupIndex === -1 ? null : {
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex]
      }));
    }
    __internal__extractFieldsAlias(fields) {
      const alias2 = /* @__PURE__ */ new Map();
      const count = fields.length;
      const sub = new Array(count);
      for (let i = 0; i < count; i++) {
        const { docs, name, type, typeName } = fields[i];
        const typeDef = this.__internal__createSiDef(type);
        if (name.isNone) {
          sub[i] = typeDef;
        } else {
          const [nameField, nameOrig] = this.sanitizeField(name);
          if (nameField && nameOrig) {
            alias2.set(nameField, nameOrig);
          }
          sub[i] = objectSpread({
            docs: sanitizeDocs(docs),
            name: nameField
          }, typeDef, typeName.isSome ? { typeName: sanitize(typeName.unwrap()) } : null);
        }
      }
      return [sub, alias2];
    }
    __internal__extractHistoric(_3, type) {
      return objectSpread({
        displayName: type.toString(),
        isFromSi: true
      }, getTypeDef(type));
    }
    __internal__extractPrimitive(_3, type) {
      const typeStr = type.def.asPrimitive.type.toString();
      return {
        info: TypeDefInfo.Plain,
        type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
      };
    }
    __internal__extractAliasPath(_3, type) {
      return {
        info: TypeDefInfo.Plain,
        type
      };
    }
    __internal__extractSequence(lookupIndex, { type }) {
      const sub = this.__internal__createSiDef(type);
      if (sub.type === "u8") {
        return {
          info: TypeDefInfo.Plain,
          type: "Bytes"
        };
      }
      return withTypeString(this.registry, {
        info: TypeDefInfo.Vec,
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        sub
      });
    }
    __internal__extractTuple(lookupIndex, ids) {
      if (ids.length === 0) {
        return {
          info: TypeDefInfo.Null,
          type: "Null"
        };
      } else if (ids.length === 1) {
        return this.getTypeDef(ids[0]);
      }
      const sub = ids.map((t) => this.__internal__createSiDef(t));
      return withTypeString(this.registry, {
        info: TypeDefInfo.Tuple,
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        sub
      });
    }
    __internal__extractVariant(lookupIndex, { params, path }, { variants }) {
      if (path.length) {
        const specialVariant = path[0].toString();
        if (specialVariant === "Option") {
          if (params.length !== 1) {
            throw new Error(`Option requires 1 parameter, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: TypeDefInfo.Option,
            sub: this.__internal__createSiDef(params[0].type.unwrap())
          });
        } else if (specialVariant === "Result") {
          if (params.length !== 2) {
            throw new Error(`Result requires 2 parameters, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: TypeDefInfo.Result,
            sub: params.map(({ type }, index) => objectSpread({
              name: ["Ok", "Error"][index]
            }, this.__internal__createSiDef(type.unwrap())))
          });
        }
      }
      if (variants.length === 0) {
        return {
          info: TypeDefInfo.Null,
          type: "Null"
        };
      }
      return this.__internal__extractVariantEnum(lookupIndex, variants);
    }
    __internal__extractVariantEnum(lookupIndex, variants) {
      const sub = [];
      variants.slice().sort((a, b) => a.index.cmp(b.index)).forEach(({ fields, index: bnIndex, name }) => {
        const index = bnIndex.toNumber();
        while (sub.length !== index) {
          sub.push({
            index: sub.length,
            info: TypeDefInfo.Null,
            name: `__Unused${sub.length}`,
            type: "Null"
          });
        }
        sub.push(objectSpread(this.__internal__extractFields(-1, fields), {
          index,
          name: name.toString()
        }));
      });
      return withTypeString(this.registry, {
        info: TypeDefInfo.Enum,
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        sub
      });
    }
  };

  // ../../node_modules/@polkadot/types/metadata/PortableRegistry/toV1.js
  function convertType(key) {
    return (registry, { type }) => registry.createType("Si1TypeDef", {
      [key]: {
        type: type.toNumber()
      }
    });
  }
  function convertArray(registry, { len, type }) {
    return registry.createType("Si1TypeDef", {
      Array: {
        len,
        type: type.toNumber()
      }
    });
  }
  function convertBitSequence(registry, { bitOrderType, bitStoreType }) {
    return registry.createType("Si1TypeDef", {
      BitSequence: {
        bitOrderType: bitOrderType.toNumber(),
        bitStoreType: bitStoreType.toNumber()
      }
    });
  }
  var convertCompact = convertType("Compact");
  function convertComposite(registry, { fields }) {
    return registry.createType("Si1TypeDef", {
      Composite: {
        fields: convertFields(registry, fields)
      }
    });
  }
  function convertFields(registry, fields) {
    return fields.map(({ docs, name, type, typeName }) => registry.createType("Si1Field", {
      docs,
      name,
      type: type.toNumber(),
      typeName
    }));
  }
  function convertPhantom(registry, path) {
    console.warn(`Converting phantom type ${path.map((p) => p.toString()).join("::")} to empty tuple`);
    return registry.createType("Si1TypeDef", {
      Tuple: []
    });
  }
  function convertPrimitive(registry, prim) {
    return registry.createType("Si1TypeDef", {
      Primitive: prim.toString()
    });
  }
  var convertSequence = convertType("Sequence");
  function convertTuple(registry, types2) {
    return registry.createType("Si1TypeDef", {
      Tuple: types2.map((t) => t.toNumber())
    });
  }
  function convertVariant(registry, { variants }) {
    return registry.createType("Si1TypeDef", {
      Variant: {
        variants: variants.map(({ discriminant, docs, fields, name }, index) => registry.createType("Si1Variant", {
          docs,
          fields: convertFields(registry, fields),
          index: discriminant.isSome ? discriminant.unwrap().toNumber() : index,
          name
        }))
      }
    });
  }
  function convertDef(registry, { def, path }) {
    let result;
    switch (def.type) {
      case "Array":
        result = convertArray(registry, def.asArray);
        break;
      case "BitSequence":
        result = convertBitSequence(registry, def.asBitSequence);
        break;
      case "Compact":
        result = convertCompact(registry, def.asCompact);
        break;
      case "Composite":
        result = convertComposite(registry, def.asComposite);
        break;
      case "Phantom":
        result = convertPhantom(registry, path);
        break;
      case "Primitive":
        result = convertPrimitive(registry, def.asPrimitive);
        break;
      case "Sequence":
        result = convertSequence(registry, def.asSequence);
        break;
      case "Tuple":
        result = convertTuple(registry, def.asTuple);
        break;
      case "Variant":
        result = convertVariant(registry, def.asVariant);
        break;
      default:
        assertUnreachable(def.type);
    }
    return result;
  }
  function toV1(registry, types2) {
    return types2.map((t, index) => registry.createType("PortableType", {
      id: index + 1,
      type: {
        def: convertDef(registry, t),
        docs: [],
        params: t.params.map((p) => registry.createType("Si1TypeParameter", {
          type: p.toNumber()
        })),
        path: t.path.map((p) => p.toString())
      }
    }));
  }

  // ../../node_modules/@polkadot/types/metadata/util/flattenUniq.js
  function flattenUniq(list, result = []) {
    for (let i = 0, count = list.length; i < count; i++) {
      const entry = list[i];
      if (Array.isArray(entry)) {
        flattenUniq(entry, result);
      } else {
        result.push(entry);
      }
    }
    return [...new Set(result)];
  }

  // ../../node_modules/@polkadot/types/metadata/util/getSiName.js
  function getSiName(lookup, type) {
    const typeDef = lookup.getTypeDef(type);
    return typeDef.lookupName || typeDef.type;
  }

  // ../../node_modules/@polkadot/types/metadata/util/extractTypes.js
  function extractSubSingle(_3, { sub }) {
    const { lookupName, type } = sub;
    return extractTypes([lookupName || type]);
  }
  function extractSubArray(_3, { sub }) {
    return extractTypes(sub.map(({ lookupName, type }) => lookupName || type));
  }
  function unhandled(type, { info: info6 }) {
    throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info6]})`);
  }
  var mapping = {
    [TypeDefInfo.BTreeMap]: extractSubArray,
    [TypeDefInfo.BTreeSet]: extractSubSingle,
    [TypeDefInfo.Compact]: extractSubSingle,
    [TypeDefInfo.DoNotConstruct]: unhandled,
    [TypeDefInfo.Enum]: extractSubArray,
    [TypeDefInfo.HashMap]: extractSubArray,
    [TypeDefInfo.Int]: unhandled,
    [TypeDefInfo.Linkage]: extractSubSingle,
    [TypeDefInfo.Null]: unhandled,
    [TypeDefInfo.Option]: extractSubSingle,
    [TypeDefInfo.Plain]: (_3, typeDef) => typeDef.lookupName || typeDef.type,
    [TypeDefInfo.Range]: extractSubSingle,
    [TypeDefInfo.RangeInclusive]: extractSubSingle,
    [TypeDefInfo.Result]: extractSubArray,
    [TypeDefInfo.Set]: extractSubArray,
    [TypeDefInfo.Si]: unhandled,
    [TypeDefInfo.Struct]: extractSubArray,
    [TypeDefInfo.Tuple]: extractSubArray,
    [TypeDefInfo.UInt]: unhandled,
    [TypeDefInfo.Vec]: extractSubSingle,
    [TypeDefInfo.VecFixed]: extractSubSingle,
    [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
    [TypeDefInfo.WrapperOpaque]: extractSubSingle
  };
  function extractTypes(types2) {
    const count = types2.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      const type = types2[i];
      const typeDef = getTypeDef(type);
      result[i] = mapping[typeDef.info](type, typeDef);
    }
    return result;
  }

  // ../../node_modules/@polkadot/types/metadata/util/validateTypes.js
  var l7 = logger("metadata");
  function validateTypes(registry, throwError2, types2) {
    const missing = flattenUniq(extractTypes(types2)).filter((type) => !registry.hasType(type) && !registry.isLookupType(type)).sort();
    if (missing.length !== 0) {
      const message = `Unknown types found, no types for ${missing.join(", ")}`;
      if (throwError2) {
        throw new Error(message);
      } else {
        l7.warn(message);
      }
    }
    return types2;
  }

  // ../../node_modules/@polkadot/types/metadata/util/getUniqTypes.js
  function extractTypes2(lookup, types2) {
    return types2.map(({ type }) => lookup.getTypeDef(type).type);
  }
  function extractFieldTypes(lookup, type) {
    return lookup.getSiType(type).def.asVariant.variants.map(({ fields }) => extractTypes2(lookup, fields));
  }
  function getPalletNames({ lookup, pallets }) {
    return pallets.reduce((all3, { calls, constants, events: events2, storage }) => {
      all3.push([extractTypes2(lookup, constants)]);
      if (calls.isSome) {
        all3.push(extractFieldTypes(lookup, calls.unwrap().type));
      }
      if (events2.isSome) {
        all3.push(extractFieldTypes(lookup, events2.unwrap().type));
      }
      if (storage.isSome) {
        all3.push(storage.unwrap().items.map(({ type }) => {
          if (type.isPlain) {
            return [lookup.getTypeDef(type.asPlain).type];
          }
          const { hashers, key, value } = type.asMap;
          return hashers.length === 1 ? [
            lookup.getTypeDef(value).type,
            lookup.getTypeDef(key).type
          ] : [
            lookup.getTypeDef(value).type,
            ...lookup.getSiType(key).def.asTuple.map((t) => lookup.getTypeDef(t).type)
          ];
        }));
      }
      return all3;
    }, []);
  }
  function getUniqTypes(registry, meta, throwError2) {
    return validateTypes(registry, throwError2, flattenUniq(getPalletNames(meta)));
  }

  // ../../node_modules/@polkadot/types/metadata/util/toCallsOnly.js
  function trimDocs(docs) {
    const strings = docs.map((d) => d.toString().trim());
    const firstEmpty = strings.findIndex((d) => !d.length);
    return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
  }
  function toCallsOnly(registry, { extrinsic, lookup, pallets }) {
    return registry.createTypeUnsafe("MetadataLatest", [{
      extrinsic,
      lookup: {
        types: lookup.types.map(({ id, type }) => registry.createTypeUnsafe("PortableType", [{
          id,
          type: objectSpread({}, type, { docs: trimDocs(type.docs) })
        }]))
      },
      pallets: pallets.map(({ calls, index, name }) => ({
        calls: registry.createTypeUnsafe("Option<PalletCallMetadataLatest>", [calls.unwrapOr(null)]),
        index,
        name
      }))
    }]).toJSON();
  }

  // ../../node_modules/@polkadot/types/util/storage.js
  function unwrapStorageSi(type) {
    return type.isPlain ? type.asPlain : type.asMap.value;
  }
  function unwrapStorageType(registry, type, isOptional) {
    const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
    return isOptional ? `Option<${outputType}>` : outputType;
  }

  // ../../node_modules/@polkadot/types/create/lazy.js
  function lazyVariants(lookup, { type }, getName, creator) {
    const result = {};
    const variants = lookup.getSiType(type).def.asVariant.variants;
    for (let i = 0, count = variants.length; i < count; i++) {
      lazyMethod(result, variants[i], creator, getName, i);
    }
    return result;
  }

  // ../../node_modules/@polkadot/types/extrinsic/signedExtensions/emptyCheck.js
  var emptyCheck = {
    extrinsic: {},
    payload: {}
  };

  // ../../node_modules/@polkadot/types/extrinsic/signedExtensions/polkadot.js
  var polkadot = {
    LimitParathreadCommits: emptyCheck,
    OnlyStakingAndClaims: emptyCheck,
    PrevalidateAttests: emptyCheck,
    RestrictFunctionality: emptyCheck,
    TransactionCallFilter: emptyCheck,
    ValidateDoubleVoteReports: emptyCheck
  };

  // ../../node_modules/@polkadot/types/extrinsic/signedExtensions/shell.js
  var shell = {
    DisallowSigned: emptyCheck
  };

  // ../../node_modules/@polkadot/types/extrinsic/signedExtensions/statemint.js
  var statemint = {
    ChargeAssetTxPayment: {
      extrinsic: {
        tip: "Compact<Balance>",
        assetId: "Option<AssetId>"
      },
      payload: {}
    }
  };

  // ../../node_modules/@polkadot/types/extrinsic/signedExtensions/substrate.js
  var CheckMortality = {
    extrinsic: {
      era: "ExtrinsicEra"
    },
    payload: {
      blockHash: "Hash"
    }
  };
  var substrate = {
    ChargeTransactionPayment: {
      extrinsic: {
        tip: "Compact<Balance>"
      },
      payload: {}
    },
    CheckBlockGasLimit: emptyCheck,
    CheckEra: CheckMortality,
    CheckGenesis: {
      extrinsic: {},
      payload: {
        genesisHash: "Hash"
      }
    },
    CheckMortality,
    CheckNonZeroSender: emptyCheck,
    CheckNonce: {
      extrinsic: {
        nonce: "Compact<Index>"
      },
      payload: {}
    },
    CheckSpecVersion: {
      extrinsic: {},
      payload: {
        specVersion: "u32"
      }
    },
    CheckTxVersion: {
      extrinsic: {},
      payload: {
        transactionVersion: "u32"
      }
    },
    CheckVersion: {
      extrinsic: {},
      payload: {
        specVersion: "u32"
      }
    },
    CheckWeight: emptyCheck,
    LockStakingStatus: emptyCheck,
    ValidateEquivocationReport: emptyCheck
  };

  // ../../node_modules/@polkadot/types/extrinsic/signedExtensions/index.js
  var allExtensions = objectSpread({}, substrate, polkadot, shell, statemint);
  var fallbackExtensions = [
    "CheckVersion",
    "CheckGenesis",
    "CheckEra",
    "CheckNonce",
    "CheckWeight",
    "ChargeTransactionPayment",
    "CheckBlockGasLimit"
  ];
  function findUnknownExtensions(extensions, userExtensions = {}) {
    const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
    return extensions.filter((k) => !names.includes(k));
  }
  function expandExtensionTypes(extensions, type, userExtensions = {}) {
    return extensions.map((k) => userExtensions[k] || allExtensions[k]).filter((info6) => !!info6).reduce((result, info6) => objectSpread(result, info6[type]), {});
  }

  // ../../node_modules/@polkadot/types/generic/Event.js
  function decodeEvent(registry, value) {
    if (!value || !value.length) {
      return { DataType: Null };
    }
    const index = value.subarray(0, 2);
    return {
      DataType: registry.findMetaEvent(index),
      value: {
        data: value.subarray(2),
        index
      }
    };
  }
  var GenericEventData = class extends Tuple {
    constructor(registry, value, meta, section2 = "<unknown>", method = "<unknown>") {
      const fields = meta?.fields || [];
      super(registry, fields.map(({ type }) => registry.createLookupType(type)), value);
      this.__internal__names = null;
      this.__internal__meta = meta;
      this.__internal__method = method;
      this.__internal__section = section2;
      this.__internal__typeDef = fields.map(({ type }) => registry.lookup.getTypeDef(type));
      const names = fields.map(({ name }) => registry.lookup.sanitizeField(name)[0]).filter((n) => !!n);
      if (names.length === fields.length) {
        this.__internal__names = names;
        objectProperties(this, names, (_3, i) => this[i]);
      }
    }
    get meta() {
      return this.__internal__meta;
    }
    get method() {
      return this.__internal__method;
    }
    get names() {
      return this.__internal__names;
    }
    get section() {
      return this.__internal__section;
    }
    get typeDef() {
      return this.__internal__typeDef;
    }
    toHuman(isExtended) {
      if (this.__internal__names !== null) {
        const json = {};
        for (let i = 0, count = this.__internal__names.length; i < count; i++) {
          json[this.__internal__names[i]] = this[i].toHuman(isExtended);
        }
        return json;
      }
      return super.toHuman(isExtended);
    }
  };
  var GenericEvent = class extends Struct {
    constructor(registry, _value) {
      const { DataType, value } = decodeEvent(registry, _value);
      super(registry, {
        index: "EventId",
        data: DataType
      }, value);
    }
    get data() {
      return this.getT("data");
    }
    get index() {
      return this.getT("index");
    }
    get meta() {
      return this.data.meta;
    }
    get method() {
      return this.data.method;
    }
    get section() {
      return this.data.section;
    }
    get typeDef() {
      return this.data.typeDef;
    }
    toHuman(isExpanded) {
      return objectSpread({
        method: this.method,
        section: this.section
      }, isExpanded ? { docs: this.meta.docs.map((d) => d.toString()) } : null, super.toHuman(isExpanded));
    }
  };

  // ../../node_modules/@polkadot/types/index.types.js
  var index_types_exports = {};
  __export(index_types_exports, {
    BitVec: () => BitVec,
    Bool: () => bool2,
    Bytes: () => Bytes,
    Data: () => Data2,
    F32: () => f32,
    F64: () => f64,
    GenericAccountId: () => GenericAccountId,
    GenericAccountId32: () => GenericAccountId,
    GenericAccountId33: () => GenericAccountId33,
    GenericAccountIndex: () => GenericAccountIndex,
    GenericAddress: () => GenericMultiAddress,
    GenericBlock: () => GenericBlock,
    GenericCall: () => GenericCall,
    GenericChainProperties: () => GenericChainProperties,
    GenericConsensusEngineId: () => GenericConsensusEngineId,
    GenericEthereumAccountId: () => GenericEthereumAccountId,
    GenericEthereumLookupSource: () => GenericEthereumLookupSource,
    GenericEvent: () => GenericEvent,
    GenericEventData: () => GenericEventData,
    GenericExtrinsic: () => GenericExtrinsic,
    GenericExtrinsicEra: () => GenericExtrinsicEra,
    GenericExtrinsicPayload: () => GenericExtrinsicPayload,
    GenericExtrinsicPayloadUnknown: () => GenericExtrinsicPayloadUnknown,
    GenericExtrinsicPayloadV4: () => GenericExtrinsicPayloadV4,
    GenericExtrinsicSignatureV4: () => GenericExtrinsicSignatureV4,
    GenericExtrinsicUnknown: () => GenericExtrinsicUnknown,
    GenericExtrinsicV4: () => GenericExtrinsicV4,
    GenericImmortalEra: () => ImmortalEra,
    GenericLookupSource: () => GenericLookupSource,
    GenericMortalEra: () => MortalEra,
    GenericMultiAddress: () => GenericMultiAddress,
    GenericSignerPayload: () => GenericSignerPayload,
    GenericVote: () => GenericVote,
    I128: () => i128,
    I16: () => i16,
    I256: () => i256,
    I32: () => i32,
    I64: () => i64,
    I8: () => i8,
    ISize: () => isize,
    Null: () => Null,
    OptionBool: () => OptionBool,
    StorageKey: () => StorageKey,
    Text: () => Text,
    Type: () => Type,
    U128: () => u128,
    U16: () => u162,
    U256: () => u256,
    U32: () => u323,
    U64: () => u642,
    U8: () => u82,
    USize: () => usize,
    bool: () => bool2,
    f32: () => f32,
    f64: () => f64,
    i128: () => i128,
    i16: () => i16,
    i256: () => i256,
    i32: () => i32,
    i64: () => i64,
    i8: () => i8,
    isize: () => isize,
    u128: () => u128,
    u16: () => u162,
    u256: () => u256,
    u32: () => u323,
    u64: () => u642,
    u8: () => u82,
    usize: () => usize
  });

  // ../../node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js
  var EXTRINSIC_VERSION = 4;
  var GenericExtrinsicV4 = class extends Struct {
    constructor(registry, value, { isSigned } = {}) {
      super(registry, {
        signature: "ExtrinsicSignatureV4",
        method: "Call"
      }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
    }
    static decodeExtrinsic(registry, value, isSigned = false) {
      if (value instanceof GenericExtrinsicV4) {
        return value;
      } else if (value instanceof registry.createClassUnsafe("Call")) {
        return { method: value };
      } else if (isU8a(value)) {
        const signature = registry.createTypeUnsafe("ExtrinsicSignatureV4", [value, { isSigned }]);
        const method = registry.createTypeUnsafe("Call", [value.subarray(signature.encodedLength)]);
        return {
          method,
          signature
        };
      }
      return value || {};
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get method() {
      return this.getT("method");
    }
    get signature() {
      return this.getT("signature");
    }
    get version() {
      return EXTRINSIC_VERSION;
    }
    addSignature(signer, signature, payload) {
      this.signature.addSignature(signer, signature, payload);
      return this;
    }
    sign(account3, options) {
      this.signature.sign(this.method, account3, options);
      return this;
    }
    signFake(signer, options) {
      this.signature.signFake(this.method, signer, options);
      return this;
    }
  };

  // ../../node_modules/@polkadot/types/extrinsic/constants.js
  var BIT_SIGNED = 128;
  var BIT_UNSIGNED = 0;
  var EMPTY_U8A = new Uint8Array();
  var DEFAULT_VERSION = 4;
  var IMMORTAL_ERA = new Uint8Array([0]);
  var UNMASK_VERSION = 127;

  // ../../node_modules/@polkadot/types/extrinsic/Extrinsic.js
  var VERSIONS = [
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicV4"
  ];
  function newFromValue(registry, value, version) {
    if (value instanceof GenericExtrinsic) {
      return value.unwrap();
    }
    const isSigned = (version & BIT_SIGNED) === BIT_SIGNED;
    const type = VERSIONS[version & UNMASK_VERSION] || VERSIONS[0];
    return registry.createTypeUnsafe(type, [value, { isSigned, version }]);
  }
  function decodeExtrinsic(registry, value, version = DEFAULT_VERSION) {
    if (isU8a(value) || Array.isArray(value) || isHex(value)) {
      return decodeU8a3(registry, u8aToU8a(value), version);
    } else if (value instanceof registry.createClassUnsafe("Call")) {
      return newFromValue(registry, { method: value }, version);
    }
    return newFromValue(registry, value, version);
  }
  function decodeU8a3(registry, value, version) {
    if (!value.length) {
      return newFromValue(registry, new Uint8Array(), version);
    }
    const [offset2, length] = compactFromU8a(value);
    const total = offset2 + length.toNumber();
    if (total > value.length) {
      throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    const data = value.subarray(offset2, total);
    return newFromValue(registry, data.subarray(1), data[0]);
  }
  var ExtrinsicBase = class extends AbstractBase {
    constructor(registry, value, initialU8aLength) {
      super(registry, value, initialU8aLength);
      const signKeys = Object.keys(registry.getSignedExtensionTypes());
      const getter = (key) => this.inner.signature[key];
      for (let i = 0, count = signKeys.length; i < count; i++) {
        objectProperty(this, signKeys[i], getter);
      }
    }
    get args() {
      return this.method.args;
    }
    get argsDef() {
      return this.method.argsDef;
    }
    get callIndex() {
      return this.method.callIndex;
    }
    get data() {
      return this.method.data;
    }
    get era() {
      return this.inner.signature.era;
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get isSigned() {
      return this.inner.signature.isSigned;
    }
    get length() {
      return this.toU8a(true).length;
    }
    get meta() {
      return this.method.meta;
    }
    get method() {
      return this.inner.method;
    }
    get nonce() {
      return this.inner.signature.nonce;
    }
    get signature() {
      return this.inner.signature.signature;
    }
    get signer() {
      return this.inner.signature.signer;
    }
    get tip() {
      return this.inner.signature.tip;
    }
    get type() {
      return this.inner.version;
    }
    get inner() {
      return this.unwrap();
    }
    get version() {
      return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
    }
    is(other) {
      return this.method.is(other);
    }
    unwrap() {
      return super.unwrap();
    }
  };
  var GenericExtrinsic = class extends ExtrinsicBase {
    constructor(registry, value, { version } = {}) {
      super(registry, decodeExtrinsic(registry, value, version));
    }
    get hash() {
      if (!this.__internal__hashCache) {
        this.__internal__hashCache = super.hash;
      }
      return this.__internal__hashCache;
    }
    addSignature(signer, signature, payload) {
      this.inner.addSignature(signer, signature, payload);
      this.__internal__hashCache = void 0;
      return this;
    }
    inspect() {
      const encoded = u8aConcat(...this.toU8aInner());
      return {
        inner: this.isSigned ? this.inner.inspect().inner : this.inner.method.inspect().inner,
        outer: [compactToU8a(encoded.length), new Uint8Array([this.version])]
      };
    }
    sign(account3, options) {
      this.inner.sign(account3, options);
      this.__internal__hashCache = void 0;
      return this;
    }
    signFake(signer, options) {
      this.inner.signFake(signer, options);
      this.__internal__hashCache = void 0;
      return this;
    }
    toHex(isBare) {
      return u8aToHex(this.toU8a(isBare));
    }
    toHuman(isExpanded) {
      return objectSpread({}, {
        isSigned: this.isSigned,
        method: this.method.toHuman(isExpanded)
      }, this.isSigned ? {
        era: this.era.toHuman(isExpanded),
        nonce: this.nonce.toHuman(isExpanded),
        signature: this.signature.toHex(),
        signer: this.signer.toHuman(isExpanded),
        tip: this.tip.toHuman(isExpanded)
      } : null);
    }
    toJSON() {
      return this.toHex();
    }
    toRawType() {
      return "Extrinsic";
    }
    toU8a(isBare) {
      const encoded = u8aConcat(...this.toU8aInner());
      return isBare ? encoded : compactAddLength(encoded);
    }
    toU8aInner() {
      return [
        new Uint8Array([this.version]),
        this.inner.toU8a()
      ];
    }
  };
  GenericExtrinsic.LATEST_EXTRINSIC_VERSION = EXTRINSIC_VERSION;

  // ../../node_modules/@polkadot/types/extrinsic/ExtrinsicEra.js
  function getTrailingZeros(period) {
    const binary = period.toString(2);
    let index = 0;
    while (binary[binary.length - 1 - index] === "0") {
      index++;
    }
    return index;
  }
  function decodeMortalEra(registry, value) {
    if (isU8a(value) || isHex(value) || Array.isArray(value)) {
      return decodeMortalU8a(registry, u8aToU8a(value));
    } else if (!value) {
      return [new u642(registry), new u642(registry)];
    } else if (isObject(value)) {
      return decodeMortalObject(registry, value);
    }
    throw new Error("Invalid data passed to Mortal era");
  }
  function decodeMortalObject(registry, value) {
    const { current, period } = value;
    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
    const phase = current % calPeriod;
    const quantizeFactor = Math.max(calPeriod >> 12, 1);
    const quantizedPhase = phase / quantizeFactor * quantizeFactor;
    return [new u642(registry, calPeriod), new u642(registry, quantizedPhase)];
  }
  function decodeMortalU8a(registry, value) {
    if (value.length === 0) {
      return [new u642(registry), new u642(registry)];
    }
    const first2 = u8aToBn(value.subarray(0, 1)).toNumber();
    const second = u8aToBn(value.subarray(1, 2)).toNumber();
    const encoded = first2 + (second << 8);
    const period = 2 << encoded % (1 << 4);
    const quantizeFactor = Math.max(period >> 12, 1);
    const phase = (encoded >> 4) * quantizeFactor;
    if (period < 4 || phase >= period) {
      throw new Error("Invalid data passed to Mortal era");
    }
    return [new u642(registry, period), new u642(registry, phase)];
  }
  function decodeExtrinsicEra(value = new Uint8Array()) {
    if (isU8a(value)) {
      return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
    } else if (!value) {
      return new Uint8Array([0]);
    } else if (value instanceof GenericExtrinsicEra) {
      return decodeExtrinsicEra(value.toU8a());
    } else if (isHex(value)) {
      return decodeExtrinsicEra(hexToU8a(value));
    } else if (isObject(value)) {
      const entries = Object.entries(value).map(([k, v3]) => [k.toLowerCase(), v3]);
      const mortal = entries.find(([k]) => k.toLowerCase() === "mortalera");
      const immortal = entries.find(([k]) => k.toLowerCase() === "immortalera");
      return mortal ? { MortalEra: mortal[1] } : immortal ? { ImmortalEra: immortal[1] } : { MortalEra: value };
    }
    throw new Error("Invalid data passed to Era");
  }
  var ImmortalEra = class extends Raw {
    constructor(registry, _value) {
      super(registry, IMMORTAL_ERA);
    }
  };
  var MortalEra = class extends Tuple {
    constructor(registry, value) {
      super(registry, {
        period: u642,
        phase: u642
      }, decodeMortalEra(registry, value));
    }
    get encodedLength() {
      return 2;
    }
    get period() {
      return this[0];
    }
    get phase() {
      return this[1];
    }
    toHuman() {
      return {
        period: formatNumber(this.period),
        phase: formatNumber(this.phase)
      };
    }
    toJSON() {
      return this.toHex();
    }
    toU8a(_isBare) {
      const period = this.period.toNumber();
      const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + (this.phase.toNumber() / Math.max(period >> 12, 1) << 4);
      return new Uint8Array([
        encoded & 255,
        encoded >> 8
      ]);
    }
    birth(current) {
      const phase = this.phase.toNumber();
      const period = this.period.toNumber();
      return ~~((Math.max(bnToBn(current).toNumber(), phase) - phase) / period) * period + phase;
    }
    death(current) {
      return this.birth(current) + this.period.toNumber();
    }
  };
  var GenericExtrinsicEra = class extends Enum {
    constructor(registry, value) {
      super(registry, {
        ImmortalEra,
        MortalEra
      }, decodeExtrinsicEra(value));
    }
    get encodedLength() {
      return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
    }
    get asImmortalEra() {
      if (!this.isImmortalEra) {
        throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
      }
      return this.inner;
    }
    get asMortalEra() {
      if (!this.isMortalEra) {
        throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
      }
      return this.inner;
    }
    get isImmortalEra() {
      return this.index === 0;
    }
    get isMortalEra() {
      return this.index > 0;
    }
    toU8a(isBare) {
      return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
    }
  };

  // ../../node_modules/@polkadot/types/extrinsic/ExtrinsicPayload.js
  var VERSIONS2 = [
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadV4"
  ];
  function decodeExtrinsicPayload(registry, value, version = DEFAULT_VERSION) {
    if (value instanceof GenericExtrinsicPayload) {
      return value.unwrap();
    }
    return registry.createTypeUnsafe(VERSIONS2[version] || VERSIONS2[0], [value, { version }]);
  }
  var GenericExtrinsicPayload = class extends AbstractBase {
    constructor(registry, value, { version } = {}) {
      super(registry, decodeExtrinsicPayload(registry, value, version));
    }
    get blockHash() {
      return this.inner.blockHash;
    }
    get era() {
      return this.inner.era;
    }
    get genesisHash() {
      return this.inner.genesisHash || this.registry.createTypeUnsafe("Hash", []);
    }
    get method() {
      return this.inner.method;
    }
    get nonce() {
      return this.inner.nonce;
    }
    get specVersion() {
      return this.inner.specVersion || this.registry.createTypeUnsafe("u32", []);
    }
    get tip() {
      return this.inner.tip || this.registry.createTypeUnsafe("Compact<Balance>", []);
    }
    get transactionVersion() {
      return this.inner.transactionVersion || this.registry.createTypeUnsafe("u32", []);
    }
    eq(other) {
      return this.inner.eq(other);
    }
    sign(signerPair) {
      const signature = this.inner.sign(signerPair);
      return {
        signature: u8aToHex(signature)
      };
    }
    toHuman(isExtended) {
      return this.inner.toHuman(isExtended);
    }
    toJSON() {
      return this.toHex();
    }
    toRawType() {
      return "ExtrinsicPayload";
    }
    toString() {
      return this.toHex();
    }
    toU8a(isBare) {
      return super.toU8a(isBare ? { method: true } : false);
    }
  };

  // ../../node_modules/@polkadot/types/extrinsic/ExtrinsicPayloadUnknown.js
  var GenericExtrinsicPayloadUnknown = class extends Struct {
    constructor(registry, _value, { version = 0 } = {}) {
      super(registry, {});
      throw new Error(`Unsupported extrinsic payload version ${version}`);
    }
  };

  // ../../node_modules/@polkadot/types/extrinsic/ExtrinsicUnknown.js
  var GenericExtrinsicUnknown = class extends Struct {
    constructor(registry, _value, { isSigned = false, version = 0 } = {}) {
      super(registry, {});
      throw new Error(`Unsupported ${isSigned ? "" : "un"}signed extrinsic version ${version & UNMASK_VERSION}`);
    }
  };

  // ../../node_modules/@polkadot/types/extrinsic/SignerPayload.js
  var knownTypes = {
    address: "Address",
    blockHash: "Hash",
    blockNumber: "BlockNumber",
    era: "ExtrinsicEra",
    genesisHash: "Hash",
    method: "Call",
    nonce: "Compact<Index>",
    runtimeVersion: "RuntimeVersion",
    signedExtensions: "Vec<Text>",
    tip: "Compact<Balance>",
    version: "u8"
  };
  var GenericSignerPayload = class extends Struct {
    constructor(registry, value) {
      const extensionTypes = objectSpread({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
      super(registry, objectSpread({}, extensionTypes, knownTypes), value);
      this.__internal__extraTypes = {};
      const getter = (key) => this.get(key);
      for (const [key, type] of Object.entries(extensionTypes)) {
        if (!knownTypes[key]) {
          this.__internal__extraTypes[key] = type;
        }
        objectProperty(this, key, getter);
      }
    }
    get address() {
      return this.getT("address");
    }
    get blockHash() {
      return this.getT("blockHash");
    }
    get blockNumber() {
      return this.getT("blockNumber");
    }
    get era() {
      return this.getT("era");
    }
    get genesisHash() {
      return this.getT("genesisHash");
    }
    get method() {
      return this.getT("method");
    }
    get nonce() {
      return this.getT("nonce");
    }
    get runtimeVersion() {
      return this.getT("runtimeVersion");
    }
    get signedExtensions() {
      return this.getT("signedExtensions");
    }
    get tip() {
      return this.getT("tip");
    }
    get version() {
      return this.getT("version");
    }
    toPayload() {
      const result = {};
      const keys2 = Object.keys(this.__internal__extraTypes);
      for (let i = 0, count = keys2.length; i < count; i++) {
        const key = keys2[i];
        const value = this.get(key);
        const isOption = value instanceof Option;
        if (!isOption || value.isSome) {
          result[key] = value.toHex();
        }
      }
      return objectSpread(result, {
        address: this.address.toString(),
        blockHash: this.blockHash.toHex(),
        blockNumber: this.blockNumber.toHex(),
        era: this.era.toHex(),
        genesisHash: this.genesisHash.toHex(),
        method: this.method.toHex(),
        nonce: this.nonce.toHex(),
        signedExtensions: this.signedExtensions.map((e) => e.toString()),
        specVersion: this.runtimeVersion.specVersion.toHex(),
        tip: this.tip.toHex(),
        transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
        version: this.version.toNumber()
      });
    }
    toRaw() {
      const payload = this.toPayload();
      const data = u8aToHex(this.registry.createTypeUnsafe("ExtrinsicPayload", [payload, { version: payload.version }]).toU8a({ method: true }));
      return {
        address: payload.address,
        data,
        type: "payload"
      };
    }
  };

  // ../../node_modules/@polkadot/types/extrinsic/util.js
  function sign(registry, signerPair, u8a2, options) {
    const encoded = u8a2.length > 256 ? registry.hash(u8a2) : u8a2;
    return signerPair.sign(encoded, options);
  }

  // ../../node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
  var GenericExtrinsicPayloadV4 = class extends Struct {
    constructor(registry, value) {
      super(registry, objectSpread({ method: "Bytes" }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
      this.__internal__signOptions = {
        withType: registry.createTypeUnsafe("ExtrinsicSignature", []) instanceof Enum
      };
    }
    inspect() {
      return super.inspect({ method: true });
    }
    get blockHash() {
      return this.getT("blockHash");
    }
    get era() {
      return this.getT("era");
    }
    get genesisHash() {
      return this.getT("genesisHash");
    }
    get method() {
      return this.getT("method");
    }
    get nonce() {
      return this.getT("nonce");
    }
    get specVersion() {
      return this.getT("specVersion");
    }
    get tip() {
      return this.getT("tip");
    }
    get transactionVersion() {
      return this.getT("transactionVersion");
    }
    get assetId() {
      return this.getT("assetId");
    }
    sign(signerPair) {
      return sign(this.registry, signerPair, this.toU8a({ method: true }), this.__internal__signOptions);
    }
  };

  // ../../node_modules/@polkadot/types/extrinsic/v4/ExtrinsicSignature.js
  var FAKE_SIGNATURE = new Uint8Array(256).fill(1);
  function toAddress(registry, address) {
    return registry.createTypeUnsafe("Address", [isU8a(address) ? u8aToHex(address) : address]);
  }
  var GenericExtrinsicSignatureV4 = class extends Struct {
    constructor(registry, value, { isSigned } = {}) {
      const signTypes = registry.getSignedExtensionTypes();
      super(registry, objectSpread(
        { signer: "Address", signature: "ExtrinsicSignature" },
        signTypes
      ), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
      this.__internal__signKeys = Object.keys(signTypes);
      objectProperties(this, this.__internal__signKeys, (k) => this.get(k));
    }
    static decodeExtrinsicSignature(value, isSigned = false) {
      if (!value) {
        return EMPTY_U8A;
      } else if (value instanceof GenericExtrinsicSignatureV4) {
        return value;
      }
      return isSigned ? value : EMPTY_U8A;
    }
    get encodedLength() {
      return this.isSigned ? super.encodedLength : 0;
    }
    get isSigned() {
      return !this.signature.isEmpty;
    }
    get era() {
      return this.getT("era");
    }
    get nonce() {
      return this.getT("nonce");
    }
    get signature() {
      return this.multiSignature.value || this.multiSignature;
    }
    get multiSignature() {
      return this.getT("signature");
    }
    get signer() {
      return this.getT("signer");
    }
    get tip() {
      return this.getT("tip");
    }
    _injectSignature(signer, signature, payload) {
      for (let i = 0, count = this.__internal__signKeys.length; i < count; i++) {
        const k = this.__internal__signKeys[i];
        const v3 = payload.get(k);
        if (!isUndefined(v3)) {
          this.set(k, v3);
        }
      }
      this.set("signer", signer);
      this.set("signature", signature);
      return this;
    }
    addSignature(signer, signature, payload) {
      return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe("ExtrinsicSignature", [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
    }
    createPayload(method, options) {
      const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
      return new GenericExtrinsicPayloadV4(this.registry, objectSpread({}, options, {
        era: era || IMMORTAL_ERA,
        method: method.toHex(),
        specVersion,
        transactionVersion
      }));
    }
    sign(method, account3, options) {
      if (!account3 || !account3.addressRaw) {
        throw new Error(`Expected a valid keypair for signing, found ${stringify(account3)}`);
      }
      const payload = this.createPayload(method, options);
      return this._injectSignature(toAddress(this.registry, account3.addressRaw), this.registry.createTypeUnsafe("ExtrinsicSignature", [payload.sign(account3)]), payload);
    }
    signFake(method, address, options) {
      if (!address) {
        throw new Error(`Expected a valid address for signing, found ${stringify(address)}`);
      }
      const payload = this.createPayload(method, options);
      return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe("ExtrinsicSignature", [FAKE_SIGNATURE]), payload);
    }
    toU8a(isBare) {
      return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;
    }
  };

  // ../../node_modules/@polkadot/types/generic/AccountId.js
  function decodeAccountId(value) {
    if (isU8a(value) || Array.isArray(value)) {
      return u8aToU8a(value);
    } else if (!value) {
      return new Uint8Array();
    } else if (isHex(value)) {
      return hexToU8a(value);
    } else if (isString(value)) {
      return decodeAddress(value.toString());
    }
    throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
  }
  var BaseAccountId = class extends U8aFixed {
    constructor(registry, allowedBits = 256 | 264, value) {
      const decoded = decodeAccountId(value);
      const decodedBits = decoded.length * 8;
      if (decodedBits < allowedBits && decoded.some((b) => b)) {
        throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
      }
      super(registry, decoded, allowedBits);
    }
    eq(other) {
      return super.eq(decodeAccountId(other));
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.toString();
    }
    toPrimitive() {
      return this.toJSON();
    }
    toString() {
      return encodeAddress(this, this.registry.chainSS58);
    }
    toRawType() {
      return "AccountId";
    }
  };
  var GenericAccountId = class extends BaseAccountId {
    constructor(registry, value) {
      super(registry, 256, value);
    }
  };
  var GenericAccountId33 = class extends BaseAccountId {
    constructor(registry, value) {
      super(registry, 264, value);
    }
  };

  // ../../node_modules/@polkadot/types/generic/AccountIndex.js
  var PREFIX_1BYTE = 239;
  var PREFIX_2BYTE = 252;
  var PREFIX_4BYTE = 253;
  var PREFIX_8BYTE = 254;
  var MAX_1BYTE = new import_bn.default(PREFIX_1BYTE);
  var MAX_2BYTE = new import_bn.default(1).shln(16);
  var MAX_4BYTE = new import_bn.default(1).shln(32);
  function decodeAccountIndex(value) {
    if (value instanceof GenericAccountIndex) {
      return value.toBn();
    } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {
      return value;
    }
    return decodeAccountIndex(decodeAddress(value));
  }
  var GenericAccountIndex = class extends u323 {
    constructor(registry, value = new import_bn.default(0)) {
      super(registry, decodeAccountIndex(value));
    }
    static calcLength(_value) {
      const value = bnToBn(_value);
      if (value.lte(MAX_1BYTE)) {
        return 1;
      } else if (value.lt(MAX_2BYTE)) {
        return 2;
      } else if (value.lt(MAX_4BYTE)) {
        return 4;
      }
      return 8;
    }
    static readLength(input) {
      const first2 = input[0];
      if (first2 === PREFIX_2BYTE) {
        return [1, 2];
      } else if (first2 === PREFIX_4BYTE) {
        return [1, 4];
      } else if (first2 === PREFIX_8BYTE) {
        return [1, 8];
      }
      return [0, 1];
    }
    static writeLength(input) {
      switch (input.length) {
        case 2:
          return new Uint8Array([PREFIX_2BYTE]);
        case 4:
          return new Uint8Array([PREFIX_4BYTE]);
        case 8:
          return new Uint8Array([PREFIX_8BYTE]);
        default:
          return new Uint8Array([]);
      }
    }
    eq(other) {
      if (isBn(other) || isNumber(other)) {
        return super.eq(other);
      }
      return super.eq(this.registry.createTypeUnsafe("AccountIndex", [other]));
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.toString();
    }
    toPrimitive() {
      return this.toJSON();
    }
    toString() {
      const length = GenericAccountIndex.calcLength(this);
      return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
    }
    toRawType() {
      return "AccountIndex";
    }
  };

  // ../../node_modules/@polkadot/types/generic/Block.js
  var GenericBlock = class extends Struct {
    constructor(registry, value) {
      super(registry, {
        header: "Header",
        extrinsics: "Vec<Extrinsic>"
      }, value);
    }
    get contentHash() {
      return this.registry.hash(this.toU8a());
    }
    get extrinsics() {
      return this.getT("extrinsics");
    }
    get hash() {
      return this.header.hash;
    }
    get header() {
      return this.getT("header");
    }
  };

  // ../../node_modules/@polkadot/types/generic/Call.js
  function getArgsDef(registry, meta) {
    return meta.fields.reduce((result, { name, type }, index) => {
      result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
      return result;
    }, {});
  }
  function decodeCallViaObject(registry, value, _meta) {
    const { args, callIndex } = value;
    const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex;
    const meta = _meta || registry.findMetaCall(lookupIndex).meta;
    return {
      args,
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  function decodeCallViaU8a(registry, value, _meta) {
    const callIndex = registry.firstCallIndex.slice();
    callIndex.set(value.subarray(0, 2), 0);
    const meta = _meta || registry.findMetaCall(callIndex).meta;
    return {
      args: value.subarray(2),
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  function decodeCall(registry, value = new Uint8Array(), _meta) {
    if (isU8a(value) || isHex(value)) {
      return decodeCallViaU8a(registry, u8aToU8a(value), _meta);
    } else if (isObject(value) && value.callIndex && value.args) {
      return decodeCallViaObject(registry, value, _meta);
    }
    throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
  }
  var GenericCallIndex = class extends U8aFixed {
    constructor(registry, value) {
      super(registry, value, 16);
    }
    toPrimitive() {
      return this.toHex();
    }
  };
  var GenericCall = class extends Struct {
    constructor(registry, value, meta) {
      const decoded = decodeCall(registry, value, meta);
      try {
        super(registry, {
          callIndex: GenericCallIndex,
          args: Struct.with(decoded.argsDef)
        }, decoded);
      } catch (error) {
        let method = "unknown.unknown";
        try {
          const c2 = registry.findMetaCall(decoded.callIndex);
          method = `${c2.section}.${c2.method}`;
        } catch {
        }
        throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
      }
      this._meta = decoded.meta;
    }
    get args() {
      return [...this.getT("args").values()];
    }
    get argsDef() {
      return getArgsDef(this.registry, this.meta);
    }
    get argsEntries() {
      return [...this.getT("args").entries()];
    }
    get callIndex() {
      return this.getT("callIndex").toU8a();
    }
    get data() {
      return this.getT("args").toU8a();
    }
    get meta() {
      return this._meta;
    }
    get method() {
      return this.registry.findMetaCall(this.callIndex).method;
    }
    get section() {
      return this.registry.findMetaCall(this.callIndex).section;
    }
    is(other) {
      return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
    }
    toHuman(isExpanded) {
      let call;
      try {
        call = this.registry.findMetaCall(this.callIndex);
      } catch {
      }
      return objectSpread({
        args: this.argsEntries.reduce((args, [n, a]) => objectSpread(args, { [n]: a.toHuman(isExpanded) }), {}),
        method: call?.method,
        section: call?.section
      }, isExpanded && call ? { docs: call.meta.docs.map((d) => d.toString()) } : null);
    }
    toRawType() {
      return "Call";
    }
  };

  // ../../node_modules/@polkadot/types/generic/ChainProperties.js
  function createValue(registry, type, value, asArray = true) {
    if (value && isFunction(value.unwrapOrDefault)) {
      return value;
    }
    return registry.createTypeUnsafe(type, [
      asArray ? isNull(value) || isUndefined(value) ? null : Array.isArray(value) ? value : [value] : value
    ]);
  }
  function decodeValue(registry, key, value) {
    return key === "ss58Format" ? createValue(registry, "Option<u32>", value, false) : key === "tokenDecimals" ? createValue(registry, "Option<Vec<u32>>", value) : key === "tokenSymbol" ? createValue(registry, "Option<Vec<Text>>", value) : value;
  }
  function decode(registry, value) {
    return (value && isFunction(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all3, [key, value2]) => {
      all3[key] = decodeValue(registry, key, value2);
      return all3;
    }, {
      ss58Format: registry.createTypeUnsafe("Option<u32>", []),
      tokenDecimals: registry.createTypeUnsafe("Option<Vec<u32>>", []),
      tokenSymbol: registry.createTypeUnsafe("Option<Vec<Text>>", [])
    });
  }
  var GenericChainProperties = class extends Json {
    constructor(registry, value) {
      super(registry, decode(registry, value));
    }
    get ss58Format() {
      return this.getT("ss58Format");
    }
    get tokenDecimals() {
      return this.getT("tokenDecimals");
    }
    get tokenSymbol() {
      return this.getT("tokenSymbol");
    }
  };

  // ../../node_modules/@polkadot/types/generic/ConsensusEngineId.js
  var CID_AURA = /* @__PURE__ */ stringToU8a("aura");
  var CID_BABE = /* @__PURE__ */ stringToU8a("BABE");
  var CID_GRPA = /* @__PURE__ */ stringToU8a("FRNK");
  var CID_POW = /* @__PURE__ */ stringToU8a("pow_");
  var CID_NMBS = /* @__PURE__ */ stringToU8a("nmbs");
  function getAuraAuthor(registry, bytes3, sessionValidators) {
    return sessionValidators[registry.createTypeUnsafe("RawAuraPreDigest", [bytes3.toU8a(true)]).slotNumber.mod(new import_bn.default(sessionValidators.length)).toNumber()];
  }
  function getBabeAuthor(registry, bytes3, sessionValidators) {
    const digest = registry.createTypeUnsafe("RawBabePreDigestCompat", [bytes3.toU8a(true)]);
    return sessionValidators[digest.value.toNumber()];
  }
  function getBytesAsAuthor(registry, bytes3) {
    return registry.createTypeUnsafe("AccountId", [bytes3]);
  }
  var GenericConsensusEngineId = class extends U8aFixed {
    constructor(registry, value) {
      super(registry, isNumber(value) ? bnToU8a(value, { isLe: false }) : value, 32);
    }
    get isAura() {
      return this.eq(CID_AURA);
    }
    get isBabe() {
      return this.eq(CID_BABE);
    }
    get isGrandpa() {
      return this.eq(CID_GRPA);
    }
    get isPow() {
      return this.eq(CID_POW);
    }
    get isNimbus() {
      return this.eq(CID_NMBS);
    }
    extractAuthor(bytes3, sessionValidators) {
      if (sessionValidators?.length) {
        if (this.isAura) {
          return getAuraAuthor(this.registry, bytes3, sessionValidators);
        } else if (this.isBabe) {
          return getBabeAuthor(this.registry, bytes3, sessionValidators);
        }
      }
      if (this.isPow || this.isNimbus) {
        return getBytesAsAuthor(this.registry, bytes3);
      }
      return void 0;
    }
    toHuman() {
      return this.toString();
    }
    toRawType() {
      return "ConsensusEngineId";
    }
    toString() {
      return this.isAscii ? u8aToString(this) : u8aToHex(this);
    }
  };

  // ../../node_modules/@polkadot/types/generic/LookupSource.js
  var ACCOUNT_ID_PREFIX = new Uint8Array([255]);
  function decodeString(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 32 ? registry.createTypeUnsafe("AccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn(decoded)]);
  }
  function decodeU8a4(registry, value) {
    if (value.length === 32) {
      return registry.createTypeUnsafe("AccountId", [value]);
    } else if (value[0] === 255) {
      return registry.createTypeUnsafe("AccountId", [value.subarray(1)]);
    }
    const [offset2, length] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe("AccountIndex", [u8aToBn(value.subarray(offset2, offset2 + length))]);
  }
  function decodeAddressOrIndex(registry, value) {
    return value instanceof GenericLookupSource ? value.inner : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : Array.isArray(value) || isHex(value) || isU8a(value) ? decodeU8a4(registry, u8aToU8a(value)) : decodeString(registry, value);
  }
  var GenericLookupSource = class extends AbstractBase {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAddressOrIndex(registry, value));
    }
    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + (rawLength > 1 ? 1 : 0);
    }
    get _rawLength() {
      return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
    }
    inspect() {
      const value = this.inner.toU8a().subarray(0, this._rawLength);
      return {
        outer: [
          new Uint8Array(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(value) : ACCOUNT_ID_PREFIX),
          value
        ]
      };
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toRawType() {
      return "Address";
    }
    toU8a(isBare) {
      const encoded = this.inner.toU8a().subarray(0, this._rawLength);
      return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
    }
  };

  // ../../node_modules/@polkadot/types/generic/MultiAddress.js
  function decodeU8a5(registry, u8a2) {
    if ([0, 32].includes(u8a2.length)) {
      return { Id: u8a2 };
    } else if (u8a2.length === 20) {
      return { Address20: u8a2 };
    } else if (u8a2.length <= 8) {
      return { Index: registry.createTypeUnsafe("AccountIndex", [u8a2]).toNumber() };
    }
    return u8a2;
  }
  function decodeMultiAny(registry, value) {
    if (value instanceof GenericAccountId) {
      return { Id: value };
    } else if (isU8a(value)) {
      return decodeU8a5(registry, value);
    } else if (value instanceof GenericMultiAddress) {
      return value;
    } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {
      return { Index: isNumber(value) ? value : value.toNumber() };
    } else if (isString(value)) {
      return decodeU8a5(registry, decodeAddress(value.toString()));
    }
    return value;
  }
  var GenericMultiAddress = class extends Enum {
    constructor(registry, value) {
      super(registry, {
        Id: "AccountId",
        Index: "Compact<AccountIndex>",
        Raw: "Bytes",
        Address32: "H256",
        Address20: "H160"
      }, decodeMultiAny(registry, value));
    }
    inspect() {
      const { inner, outer = [] } = this.inner.inspect();
      return {
        inner,
        outer: [new Uint8Array([this.index]), ...outer]
      };
    }
    toString() {
      return this.value.toString();
    }
  };

  // ../../node_modules/@polkadot/types/generic/Vote.js
  var AYE_BITS = 128;
  var NAY_BITS = 0;
  var CON_MASK = 127;
  var DEF_CONV = 0;
  function decodeVoteBool(value) {
    return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
  }
  function decodeVoteU8a(value) {
    return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
  }
  function decodeVoteType(registry, value) {
    return new Uint8Array([
      (new bool2(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe("Conviction", [value.conviction || DEF_CONV]).index
    ]);
  }
  function decodeVote(registry, value) {
    if (isU8a(value)) {
      return decodeVoteU8a(value);
    } else if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {
      return decodeVoteBool(new bool2(registry, value).isTrue);
    } else if (isNumber(value)) {
      return decodeVoteBool(value < 0);
    }
    return decodeVoteType(registry, value);
  }
  var GenericVote = class extends U8aFixed {
    constructor(registry, value) {
      const decoded = decodeVote(registry, value);
      super(registry, decoded, 8);
      this.__internal__aye = (decoded[0] & AYE_BITS) === AYE_BITS;
      this.__internal__conviction = this.registry.createTypeUnsafe("Conviction", [decoded[0] & CON_MASK]);
    }
    get conviction() {
      return this.__internal__conviction;
    }
    get isAye() {
      return this.__internal__aye;
    }
    get isNay() {
      return !this.isAye;
    }
    toHuman(isExpanded) {
      return {
        conviction: this.conviction.toHuman(isExpanded),
        vote: this.isAye ? "Aye" : "Nay"
      };
    }
    toPrimitive() {
      return {
        aye: this.isAye,
        conviction: this.conviction.toPrimitive()
      };
    }
    toRawType() {
      return "Vote";
    }
  };

  // ../../node_modules/@polkadot/types/ethereum/AccountId.js
  function decodeAccountId2(value) {
    if (isU8a(value) || Array.isArray(value)) {
      return u8aToU8a(value);
    } else if (isHex(value) || isEthereumAddress(value.toString())) {
      return hexToU8a(value.toString());
    } else if (isString(value)) {
      return u8aToU8a(value);
    }
    return value;
  }
  var GenericEthereumAccountId = class extends U8aFixed {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAccountId2(value), 160);
    }
    eq(other) {
      return !!other && super.eq(decodeAccountId2(other));
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.toString();
    }
    toPrimitive() {
      return this.toJSON();
    }
    toString() {
      return ethereumEncode(this);
    }
    toRawType() {
      return "AccountId";
    }
  };

  // ../../node_modules/@polkadot/types/ethereum/LookupSource.js
  var ACCOUNT_ID_PREFIX2 = new Uint8Array([255]);
  function decodeString2(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 20 ? registry.createTypeUnsafe("EthereumAccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn(decoded)]);
  }
  function decodeU8a6(registry, value) {
    if (value.length === 20) {
      return registry.createTypeUnsafe("EthereumAccountId", [value]);
    } else if (value[0] === 255) {
      return registry.createTypeUnsafe("EthereumAccountId", [value.subarray(1)]);
    }
    const [offset2, length] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe("AccountIndex", [u8aToBn(value.subarray(offset2, offset2 + length))]);
  }
  function decodeAddressOrIndex2(registry, value) {
    return value instanceof GenericEthereumLookupSource ? value.inner : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isU8a(value) || Array.isArray(value) || isHex(value) ? decodeU8a6(registry, u8aToU8a(value)) : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : decodeString2(registry, value);
  }
  var GenericEthereumLookupSource = class extends AbstractBase {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAddressOrIndex2(registry, value));
    }
    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + (rawLength > 1 ? 1 : 0);
    }
    get _rawLength() {
      return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
    }
    toHex() {
      return u8aToHex(this.toU8a());
    }
    toRawType() {
      return "Address";
    }
    toU8a(isBare) {
      const encoded = this.inner.toU8a().subarray(0, this._rawLength);
      return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX2, encoded);
    }
  };

  // ../../node_modules/@polkadot/types/primitive/Data.js
  function decodeDataU8a(registry, value) {
    const indicator = value[0];
    if (!indicator) {
      return [void 0, void 0];
    } else if (indicator >= 1 && indicator <= 33) {
      const length = indicator - 1;
      const data = value.subarray(1, length + 1);
      return [registry.createTypeUnsafe("Raw", [data]), 1];
    } else if (indicator >= 34 && indicator <= 37) {
      return [value.subarray(1, 32 + 1), indicator - 32];
    }
    throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
  }
  function decodeData(registry, value) {
    if (isU8a(value) || isString(value)) {
      return decodeDataU8a(registry, u8aToU8a(value));
    } else if (!value) {
      return [void 0, void 0];
    }
    return [value, void 0];
  }
  var Data2 = class extends Enum {
    constructor(registry, value) {
      super(registry, {
        None: "Null",
        Raw: "Bytes",
        BlakeTwo256: "H256",
        Sha256: "H256",
        Keccak256: "H256",
        ShaThree256: "H256"
      }, ...decodeData(registry, value));
      if (this.isRaw && this.asRaw.length > 32) {
        throw new Error("Data.Raw values are limited to a maximum length of 32 bytes");
      }
    }
    get asBlakeTwo256() {
      return this.value;
    }
    get asKeccak256() {
      return this.value;
    }
    get asRaw() {
      return this.value;
    }
    get asSha256() {
      return this.value;
    }
    get asShaThree256() {
      return this.value;
    }
    get isBlakeTwo256() {
      return this.index === 2;
    }
    get isKeccak256() {
      return this.index === 4;
    }
    get isNone() {
      return this.index === 0;
    }
    get isRaw() {
      return this.index === 1;
    }
    get isSha256() {
      return this.index === 3;
    }
    get isShaThree256() {
      return this.index === 5;
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    toU8a() {
      if (this.index === 0) {
        return new Uint8Array(1);
      } else if (this.index === 1) {
        const data = this.value.toU8a(true);
        const length = Math.min(data.length, 32);
        const u8a3 = new Uint8Array(length + 1);
        u8a3.set([length + 1], 0);
        u8a3.set(data.subarray(0, length), 1);
        return u8a3;
      }
      const u8a2 = new Uint8Array(33);
      u8a2.set([this.index + 32], 0);
      u8a2.set(this.value.toU8a(), 1);
      return u8a2;
    }
  };

  // ../../node_modules/@polkadot/types/primitive/StorageKey.js
  var HASHER_MAP = {
    Blake2_128: [16, false],
    Blake2_128Concat: [16, true],
    Blake2_256: [32, false],
    Identity: [0, true],
    Twox128: [16, false],
    Twox256: [32, false],
    Twox64Concat: [8, true]
  };
  function decodeStorageKey(value) {
    if (isU8a(value) || !value || isString(value)) {
      return { key: value };
    } else if (value instanceof StorageKey) {
      return {
        key: value,
        method: value.method,
        section: value.section
      };
    } else if (isFunction(value)) {
      return {
        key: value(),
        method: value.method,
        section: value.section
      };
    } else if (Array.isArray(value)) {
      const [fn2, args = []] = value;
      if (!isFunction(fn2)) {
        throw new Error("Expected function input for key construction");
      }
      if (fn2.meta && fn2.meta.type.isMap) {
        const map3 = fn2.meta.type.asMap;
        if (!Array.isArray(args) || args.length !== map3.hashers.length) {
          throw new Error(`Expected an array of ${map3.hashers.length} values as params to a Map query`);
        }
      }
      return {
        key: fn2(...args),
        method: fn2.method,
        section: fn2.section
      };
    }
    throw new Error(`Unable to convert input ${value} to StorageKey`);
  }
  function decodeHashers(registry, value, hashers) {
    let offset2 = 32;
    const count = hashers.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      const [hasher, type] = hashers[i];
      const [hashLen, canDecode] = HASHER_MAP[hasher.type];
      const decoded = canDecode ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset2 + hashLen)]) : registry.createTypeUnsafe("Raw", [value.subarray(offset2, offset2 + hashLen)]);
      offset2 += hashLen + (canDecode ? decoded.encodedLength : 0);
      result[i] = decoded;
    }
    return result;
  }
  function decodeArgsFromMeta(registry, value, meta) {
    if (!meta || !meta.type.isMap) {
      return [];
    }
    const { hashers, key } = meta.type.asMap;
    const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
    return decodeHashers(registry, value, hashers.map((h, i) => [h, keys2[i]]));
  }
  function getMeta(value) {
    if (value instanceof StorageKey) {
      return value.meta;
    } else if (isFunction(value)) {
      return value.meta;
    } else if (Array.isArray(value)) {
      const [fn2] = value;
      return fn2.meta;
    }
    return void 0;
  }
  function getType(registry, value) {
    if (value instanceof StorageKey) {
      return value.outputType;
    } else if (isFunction(value)) {
      return unwrapStorageType(registry, value.meta.type);
    } else if (Array.isArray(value)) {
      const [fn2] = value;
      if (fn2.meta) {
        return unwrapStorageType(registry, fn2.meta.type);
      }
    }
    return "Raw";
  }
  var StorageKey = class extends Bytes {
    constructor(registry, value, override = {}) {
      const { key, method, section: section2 } = decodeStorageKey(value);
      super(registry, key);
      this.__internal__outputType = getType(registry, value);
      this.setMeta(getMeta(value), override.section || section2, override.method || method);
    }
    get args() {
      return this.__internal__args;
    }
    get meta() {
      return this.__internal__meta;
    }
    get method() {
      return this.__internal__method;
    }
    get outputType() {
      return this.__internal__outputType;
    }
    get section() {
      return this.__internal__section;
    }
    is(key) {
      return key.section === this.section && key.method === this.method;
    }
    setMeta(meta, section2, method) {
      this.__internal__meta = meta;
      this.__internal__method = method || this.__internal__method;
      this.__internal__section = section2 || this.__internal__section;
      if (meta) {
        this.__internal__outputType = unwrapStorageType(this.registry, meta.type);
      }
      try {
        this.__internal__args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
      } catch {
      }
      return this;
    }
    toHuman() {
      return this.__internal__args.length ? this.__internal__args.map((a) => a.toHuman()) : super.toHuman();
    }
    toRawType() {
      return "StorageKey";
    }
  };

  // ../../node_modules/@polkadot/types/metadata/decorate/util.js
  function convert(fn2) {
    return ({ name }) => fn2(name);
  }
  var objectNameToCamel = /* @__PURE__ */ convert(stringCamelCase);
  var objectNameToString = /* @__PURE__ */ convert((n) => n.toString());

  // ../../node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js
  function isTx(tx, callIndex) {
    return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
  }
  function createUnchecked(registry, section2, callIndex, callMetadata) {
    const expectedArgs = callMetadata.fields;
    const funcName = stringCamelCase(callMetadata.name);
    const extrinsicFn = (...args) => {
      if (expectedArgs.length !== args.length) {
        throw new Error(`Extrinsic ${section2}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
      }
      return registry.createTypeUnsafe("Call", [{ args, callIndex }, callMetadata]);
    };
    extrinsicFn.is = (tx) => isTx(tx, callIndex);
    extrinsicFn.callIndex = callIndex;
    extrinsicFn.meta = callMetadata;
    extrinsicFn.method = funcName;
    extrinsicFn.section = section2;
    extrinsicFn.toJSON = () => callMetadata.toJSON();
    return extrinsicFn;
  }

  // ../../node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js
  function filterCallsSome({ calls }) {
    return calls.isSome;
  }
  function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
    const { fields, index } = variant;
    const count = fields.length;
    const args = new Array(count);
    for (let i = 0; i < count; i++) {
      const { name, type, typeName } = fields[i];
      args[i] = objectSpread({
        name: stringCamelCase(name.unwrapOr(`param${i}`)),
        type: getSiName(lookup, type)
      }, typeName.isSome ? { typeName: typeName.unwrap() } : null);
    }
    return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe("FunctionMetadataLatest", [objectSpread({ args }, variant)]));
  }
  function decorateExtrinsics(registry, { lookup, pallets }, version) {
    const result = {};
    const filtered = pallets.filter(filterCallsSome);
    for (let i = 0, count = filtered.length; i < count; i++) {
      const { calls, index, name } = filtered[i];
      const sectionName = stringCamelCase(name);
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    }
    return result;
  }

  // ../../node_modules/@polkadot/types/metadata/v9/toV10.js
  function createStorageHasher(registry, hasher) {
    if (hasher.toNumber() >= 2) {
      return registry.createTypeUnsafe("StorageHasherV10", [hasher.toNumber() + 1]);
    }
    return registry.createTypeUnsafe("StorageHasherV10", [hasher]);
  }
  function createStorageType(registry, entryType) {
    if (entryType.isMap) {
      return [objectSpread({}, entryType.asMap, {
        hasher: createStorageHasher(registry, entryType.asMap.hasher)
      }), 1];
    }
    if (entryType.isDoubleMap) {
      return [objectSpread({}, entryType.asDoubleMap, {
        hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
        key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
      }), 2];
    }
    return [entryType.asPlain, 0];
  }
  function convertModule(registry, mod2) {
    const storage = mod2.storage.unwrapOr(null);
    return registry.createTypeUnsafe("ModuleMetadataV10", [objectSpread({}, mod2, {
      storage: storage ? objectSpread({}, storage, {
        items: storage.items.map((item) => objectSpread({}, item, {
          type: registry.createTypeUnsafe("StorageEntryTypeV10", createStorageType(registry, item.type))
        }))
      }) : null
    })]);
  }
  function toV10(registry, { modules }) {
    return registry.createTypeUnsafe("MetadataV10", [{
      modules: modules.map((mod2) => convertModule(registry, mod2))
    }]);
  }

  // ../../node_modules/@polkadot/types/metadata/v10/toV11.js
  function toV11(registry, { modules }) {
    return registry.createTypeUnsafe("MetadataV11", [{
      extrinsic: {
        signedExtensions: [],
        version: 0
      },
      modules
    }]);
  }

  // ../../node_modules/@polkadot/types/metadata/v11/toV12.js
  function toV12(registry, { extrinsic, modules }) {
    return registry.createTypeUnsafe("MetadataV12", [{
      extrinsic,
      modules: modules.map((mod2) => registry.createTypeUnsafe("ModuleMetadataV12", [objectSpread({}, mod2, { index: 255 })]))
    }]);
  }

  // ../../node_modules/@polkadot/types/metadata/v12/toV13.js
  function toV13(registry, v122) {
    return registry.createTypeUnsafe("MetadataV13", [v122]);
  }

  // ../../node_modules/@polkadot/types/interfaces/alias.js
  var typesAlias = {
    assets: {
      Approval: "AssetApproval",
      ApprovalKey: "AssetApprovalKey",
      Balance: "TAssetBalance",
      DestroyWitness: "AssetDestroyWitness"
    },
    babe: {
      EquivocationProof: "BabeEquivocationProof"
    },
    balances: {
      Status: "BalanceStatus"
    },
    beefy: {
      AuthorityId: "BeefyId"
    },
    contracts: {
      StorageKey: "ContractStorageKey"
    },
    electionProviderMultiPhase: {
      Phase: "ElectionPhase"
    },
    ethereum: {
      Block: "EthBlock",
      Header: "EthHeader",
      Receipt: "EthReceipt",
      Transaction: "EthTransaction",
      TransactionStatus: "EthTransactionStatus"
    },
    evm: {
      Account: "EvmAccount",
      Log: "EvmLog",
      Vicinity: "EvmVicinity"
    },
    grandpa: {
      Equivocation: "GrandpaEquivocation",
      EquivocationProof: "GrandpaEquivocationProof"
    },
    identity: {
      Judgement: "IdentityJudgement"
    },
    inclusion: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    paraDisputes: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    paraInclusion: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    paraScheduler: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    paraShared: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    parachains: {
      Id: "ParaId"
    },
    parasDisputes: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    parasInclusion: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    parasScheduler: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    parasShared: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    proposeParachain: {
      Proposal: "ParachainProposal"
    },
    proxy: {
      Announcement: "ProxyAnnouncement"
    },
    scheduler: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    shared: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    society: {
      Judgement: "SocietyJudgement",
      Vote: "SocietyVote"
    },
    staking: {
      Compact: "CompactAssignments"
    },
    treasury: {
      Proposal: "TreasuryProposal"
    },
    xcm: {
      AssetId: "XcmAssetId"
    },
    xcmPallet: {
      AssetId: "XcmAssetId"
    }
  };
  function getAliasTypes({ knownTypes: knownTypes2 }, section2) {
    return {
      ...typesAlias[section2] ?? {},
      ...knownTypes2.typesAlias?.[section2] ?? {}
    };
  }

  // ../../node_modules/@polkadot/types/metadata/v13/toV14.js
  var BOXES = [["<", ">"], ["<", ","], [",", ">"], ["(", ")"], ["(", ","], [",", ","], [",", ")"]];
  function compatType(specs, _type) {
    const type = _type.toString();
    const index = specs.findIndex(({ def }) => def.HistoricMetaCompat === type);
    if (index !== -1) {
      return index;
    }
    return specs.push({
      def: {
        HistoricMetaCompat: type
      }
    }) - 1;
  }
  function compatTypes(specs, ...types2) {
    for (let i = 0, count = types2.length; i < count; i++) {
      compatType(specs, types2[i]);
    }
  }
  function makeTupleType(specs, entries) {
    return specs.push({
      def: {
        Tuple: entries
      }
    }) - 1;
  }
  function makeVariantType(modName, variantType, specs, variants) {
    return specs.push({
      def: {
        Variant: { variants }
      },
      path: [`pallet_${modName.toString()}`, "pallet", variantType]
    }) - 1;
  }
  function registerOriginCaller(registry, modules, metaVersion) {
    registry.register({
      OriginCaller: {
        _enum: modules.map((mod2, index) => [
          mod2.name.toString(),
          metaVersion >= 12 ? mod2.index.toNumber() : index
        ]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
          for (let i = Object.keys(result).length; i < index; i++) {
            result[`Empty${i}`] = "Null";
          }
          result[name] = knownOrigins[name] || "Null";
          return result;
        }, {})
      }
    });
  }
  function setTypeOverride(sectionTypes, types2) {
    types2.forEach((type) => {
      const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
      if (override) {
        type.setOverride(sectionTypes[override]);
      } else {
        const orig = type.toString();
        const alias2 = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result2, [a, z]) => result2.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);
        if (orig !== alias2) {
          type.setOverride(alias2);
        }
      }
    });
  }
  function convertCalls(specs, registry, modName, calls, sectionTypes) {
    const variants = calls.map(({ args, docs, name }, index) => {
      setTypeOverride(sectionTypes, args.map(({ type }) => type));
      return registry.createTypeUnsafe("SiVariant", [{
        docs,
        fields: args.map(({ name: name2, type }) => registry.createTypeUnsafe("SiField", [{ name: name2, type: compatType(specs, type) }])),
        index,
        name
      }]);
    });
    return registry.createTypeUnsafe("PalletCallMetadataV14", [{
      type: makeVariantType(modName, "Call", specs, variants)
    }]);
  }
  function convertConstants(specs, registry, constants, sectionTypes) {
    return constants.map(({ docs, name, type, value }) => {
      setTypeOverride(sectionTypes, [type]);
      return registry.createTypeUnsafe("PalletConstantMetadataV14", [{
        docs,
        name,
        type: compatType(specs, type),
        value
      }]);
    });
  }
  function convertErrors(specs, registry, modName, errors, _sectionTypes) {
    const variants = errors.map(({ docs, name }, index) => registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: [],
      index,
      name
    }]));
    return registry.createTypeUnsafe("PalletErrorMetadataV14", [{
      type: makeVariantType(modName, "Error", specs, variants)
    }]);
  }
  function convertEvents(specs, registry, modName, events2, sectionTypes) {
    const variants = events2.map(({ args, docs, name }, index) => {
      setTypeOverride(sectionTypes, args);
      return registry.createTypeUnsafe("SiVariant", [{
        docs,
        fields: args.map((t) => registry.createTypeUnsafe("SiField", [{ type: compatType(specs, t) }])),
        index,
        name
      }]);
    });
    return registry.createTypeUnsafe("PalletEventMetadataV14", [{
      type: makeVariantType(modName, "Event", specs, variants)
    }]);
  }
  function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys: keys2, value }) {
    setTypeOverride(sectionTypes, [value, ...Array.isArray(keys2) ? keys2 : [keys2]]);
    return registry.createTypeUnsafe("StorageEntryTypeV14", [{
      Map: {
        hashers,
        key: hashers.length === 1 ? compatType(specs, keys2[0]) : makeTupleType(specs, keys2.map((t) => compatType(specs, t))),
        value: isLinked ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys2[0].toString()}>)`) : compatType(specs, value)
      }
    }]);
  }
  function convertStorage(specs, registry, { items, prefix: prefix2 }, sectionTypes) {
    return registry.createTypeUnsafe("PalletStorageMetadataV14", [{
      items: items.map(({ docs, fallback, modifier, name, type }) => {
        let entryType;
        if (type.isPlain) {
          const plain = type.asPlain;
          setTypeOverride(sectionTypes, [plain]);
          entryType = registry.createTypeUnsafe("StorageEntryTypeV14", [{
            Plain: compatType(specs, plain)
          }]);
        } else if (type.isMap) {
          const map3 = type.asMap;
          entryType = createMapEntry(specs, registry, sectionTypes, {
            hashers: [map3.hasher],
            isLinked: map3.linked.isTrue,
            isOptional: modifier.isOptional,
            keys: [map3.key],
            value: map3.value
          });
        } else if (type.isDoubleMap) {
          const dm = type.asDoubleMap;
          entryType = createMapEntry(specs, registry, sectionTypes, {
            hashers: [dm.hasher, dm.key2Hasher],
            isLinked: false,
            isOptional: modifier.isOptional,
            keys: [dm.key1, dm.key2],
            value: dm.value
          });
        } else {
          const nm = type.asNMap;
          entryType = createMapEntry(specs, registry, sectionTypes, {
            hashers: nm.hashers,
            isLinked: false,
            isOptional: modifier.isOptional,
            keys: nm.keyVec,
            value: nm.value
          });
        }
        return registry.createTypeUnsafe("StorageEntryMetadataV14", [{
          docs,
          fallback,
          modifier,
          name,
          type: entryType
        }]);
      }),
      prefix: prefix2
    }]);
  }
  function convertExtrinsic(registry, { signedExtensions, version }) {
    return registry.createTypeUnsafe("ExtrinsicMetadataV14", [{
      signedExtensions: signedExtensions.map((identifier) => ({
        identifier,
        type: 0
      })),
      type: 0,
      version
    }]);
  }
  function createPallet(specs, registry, mod2, { calls, constants, errors, events: events2, storage }) {
    const sectionTypes = getAliasTypes(registry, stringCamelCase(mod2.name));
    return registry.createTypeUnsafe("PalletMetadataV14", [{
      calls: calls && convertCalls(specs, registry, mod2.name, calls, sectionTypes),
      constants: convertConstants(specs, registry, constants, sectionTypes),
      errors: errors && convertErrors(specs, registry, mod2.name, errors, sectionTypes),
      events: events2 && convertEvents(specs, registry, mod2.name, events2, sectionTypes),
      index: mod2.index,
      name: mod2.name,
      storage: storage && convertStorage(specs, registry, storage, sectionTypes)
    }]);
  }
  function toV14(registry, v132, metaVersion) {
    const specs = [];
    compatTypes(specs, "Null", "u8", "u16", "u32", "u64");
    registerOriginCaller(registry, v132.modules, metaVersion);
    const extrinsic = convertExtrinsic(registry, v132.extrinsic);
    const pallets = v132.modules.map((mod2) => createPallet(specs, registry, mod2, {
      calls: mod2.calls.unwrapOr(null),
      constants: mod2.constants,
      errors: mod2.errors.length ? mod2.errors : null,
      events: mod2.events.unwrapOr(null),
      storage: mod2.storage.unwrapOr(null)
    }));
    return registry.createTypeUnsafe("MetadataV14", [{
      extrinsic,
      lookup: {
        types: specs.map((type, id) => registry.createTypeUnsafe("PortableType", [{ id, type }]))
      },
      pallets
    }]);
  }

  // ../../node_modules/@polkadot/types/metadata/v14/toV15.js
  function toV15(registry, v142, _3) {
    return registry.createTypeUnsafe("MetadataV15", [v142]);
  }

  // ../../node_modules/@polkadot/types/metadata/v15/toLatest.js
  function toLatest(_registry, v152, _metaVersion) {
    return v152;
  }

  // ../../node_modules/@polkadot/types/metadata/MagicNumber.js
  var MAGIC_NUMBER = 1635018093;
  var MagicNumber = class extends u323 {
    constructor(registry, value) {
      super(registry, value);
      if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
        throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe("u32", [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
      }
    }
  };

  // ../../node_modules/@polkadot/types/metadata/MetadataVersioned.js
  var KNOWN_VERSIONS = [15, 14, 13, 12, 11, 10, 9];
  var LATEST_VERSION = KNOWN_VERSIONS[0];
  var TO_CALLS_VERSION = 14;
  var MetadataVersioned = class extends Struct {
    constructor(registry, value) {
      super(registry, {
        magicNumber: MagicNumber,
        metadata: "MetadataAll"
      }, value);
      this.__internal__converted = /* @__PURE__ */ new Map();
      this.__internal__assertVersion = (version) => {
        if (this.version > version) {
          throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);
        }
        return this.version === version;
      };
      this.__internal__getVersion = (version, fromPrev) => {
        if (version !== "latest" && this.__internal__assertVersion(version)) {
          const asCurr = `asV${version}`;
          return this.__internal__metadata()[asCurr];
        }
        if (!this.__internal__converted.has(version)) {
          const asPrev = version === "latest" ? `asV${LATEST_VERSION}` : `asV${version - 1}`;
          this.__internal__converted.set(version, fromPrev(this.registry, this[asPrev], this.version));
        }
        return this.__internal__converted.get(version);
      };
      this.__internal__metadata = () => {
        return this.getT("metadata");
      };
    }
    get asCallsOnly() {
      return new MetadataVersioned(this.registry, {
        magicNumber: this.magicNumber,
        metadata: this.registry.createTypeUnsafe("MetadataAll", [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])
      });
    }
    get asV9() {
      this.__internal__assertVersion(9);
      return this.__internal__metadata().asV9;
    }
    get asV10() {
      return this.__internal__getVersion(10, toV10);
    }
    get asV11() {
      return this.__internal__getVersion(11, toV11);
    }
    get asV12() {
      return this.__internal__getVersion(12, toV12);
    }
    get asV13() {
      return this.__internal__getVersion(13, toV13);
    }
    get asV14() {
      return this.__internal__getVersion(14, toV14);
    }
    get asV15() {
      return this.__internal__getVersion(15, toV15);
    }
    get asLatest() {
      return this.__internal__getVersion("latest", toLatest);
    }
    get magicNumber() {
      return this.getT("magicNumber");
    }
    get version() {
      return this.__internal__metadata().index;
    }
    getUniqTypes(throwError2) {
      return getUniqTypes(this.registry, this.asLatest, throwError2);
    }
    toJSON() {
      this.asLatest;
      return super.toJSON();
    }
  };

  // ../../node_modules/@polkadot/types/metadata/Metadata.js
  var EMPTY_METADATA = new Uint8Array([109, 101, 116, 97, 9]);
  var VERSION_IDX = EMPTY_METADATA.length - 1;
  function decodeU8a7(registry, u8a2) {
    if (u8a2.length === 0) {
      return EMPTY_METADATA;
    } else if (u8a2[VERSION_IDX] === 9) {
      try {
        return new MetadataVersioned(registry, u8a2);
      } catch {
        u8a2[VERSION_IDX] = 10;
      }
    }
    return u8a2;
  }
  var Metadata = class extends MetadataVersioned {
    constructor(registry, value) {
      super(registry, isU8a(value) || isString(value) ? decodeU8a7(registry, u8aToU8a(value)) : value);
    }
  };

  // ../../node_modules/@polkadot/types/metadata/decorate/constants/index.js
  function decorateConstants(registry, { pallets }, _version) {
    const result = {};
    for (let i = 0, count = pallets.length; i < count; i++) {
      const { constants, name } = pallets[i];
      if (!constants.isEmpty) {
        lazyMethod(result, stringCamelCase(name), () => lazyMethods({}, constants, (constant) => {
          const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a(constant.value.toHex())]);
          codec.meta = constant;
          return codec;
        }, objectNameToCamel));
      }
    }
    return result;
  }

  // ../../node_modules/@polkadot/types/metadata/decorate/errors/index.js
  function variantToMeta(lookup, variant) {
    return objectSpread({ args: variant.fields.map(({ type }) => lookup.getTypeDef(type).type) }, variant);
  }
  function decorateErrors(registry, { lookup, pallets }, version) {
    const result = {};
    for (let i = 0, count = pallets.length; i < count; i++) {
      const { errors, index, name } = pallets[i];
      if (errors.isSome) {
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, (variant) => ({
          is: (errorMod) => isCodec(errorMod) && isCodec(errorMod.index) && errorMod.index.eq(sectionIndex) && (isU8a(errorMod.error) ? errorMod.error[0] === variant.index.toNumber() : isCodec(errorMod.error) && errorMod.error.eq(variant.index)),
          meta: registry.createTypeUnsafe("ErrorMetadataLatest", [variantToMeta(lookup, variant)])
        })));
      }
    }
    return result;
  }

  // ../../node_modules/@polkadot/types/metadata/decorate/events/index.js
  function filterEventsSome({ events: events2 }) {
    return events2.isSome;
  }
  function decorateEvents(registry, { lookup, pallets }, version) {
    const result = {};
    const filtered = pallets.filter(filterEventsSome);
    for (let i = 0, count = filtered.length; i < count; i++) {
      const { events: events2, index, name } = filtered[i];
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events2.unwrap(), objectNameToString, (variant) => ({
        is: (eventRecord) => isCodec(eventRecord) && isU8a(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
        meta: registry.createTypeUnsafe("EventMetadataLatest", [variantToMeta(lookup, variant)])
      })));
    }
    return result;
  }

  // ../../node_modules/@polkadot/types/metadata/decorate/storage/getHasher.js
  var DEFAULT_FN = (data) => xxhashAsU8a(data, 128);
  var HASHERS = {
    Blake2_128: (data) => blake2AsU8a(data, 128),
    Blake2_128Concat: (data) => u8aConcat(blake2AsU8a(data, 128), u8aToU8a(data)),
    Blake2_256: (data) => blake2AsU8a(data, 256),
    Identity: (data) => u8aToU8a(data),
    Twox128: (data) => xxhashAsU8a(data, 128),
    Twox256: (data) => xxhashAsU8a(data, 256),
    Twox64Concat: (data) => u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data))
  };
  function getHasher(hasher) {
    return HASHERS[hasher.type] || DEFAULT_FN;
  }

  // ../../node_modules/@polkadot/types/metadata/decorate/storage/createFunction.js
  var NO_RAW_ARGS = {
    args: [],
    hashers: [],
    keys: []
  };
  function filterDefined(a) {
    return !isUndefined(a);
  }
  function assertArgs({ method, section: section2 }, { args, keys: keys2 }) {
    if (!Array.isArray(args)) {
      throw new Error(`Call to ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs ${keys2.length} arguments`);
    } else if (args.filter(filterDefined).length !== keys2.length) {
      throw new Error(`Call to ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs ${keys2.length} arguments, found [${args.join(", ")}]`);
    }
  }
  function createKeyRawParts(registry, itemFn, { args, hashers, keys: keys2 }) {
    const count = keys2.length;
    const extra = new Array(count);
    for (let i = 0; i < count; i++) {
      extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys2[i]), [args[i]]).toU8a());
    }
    return [
      [
        xxhashAsU8a(itemFn.prefix, 128),
        xxhashAsU8a(itemFn.method, 128)
      ],
      extra
    ];
  }
  function createKeyInspect(registry, itemFn, args) {
    assertArgs(itemFn, args);
    const { meta } = itemFn;
    const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
    let types2 = [];
    if (meta.type.isMap) {
      const { hashers, key } = meta.type.asMap;
      types2 = hashers.length === 1 ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`] : registry.lookup.getSiType(key).def.asTuple.map((k, i) => `${hashers[i].type}(${getSiName(registry.lookup, k)})`);
    }
    const names = ["module", "method"].concat(...args.args.map((_3, i) => types2[i]));
    return {
      inner: prefix2.concat(...extra).map((v3, i) => ({ name: names[i], outer: [v3] }))
    };
  }
  function createKeyRaw(registry, itemFn, args) {
    const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
    return u8aConcat(...prefix2, ...extra);
  }
  function createKey(registry, itemFn, args) {
    assertArgs(itemFn, args);
    return compactAddLength(createKeyRaw(registry, itemFn, args));
  }
  function createStorageInspect(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    return (...args) => {
      if (type.isPlain) {
        return options.skipHashing ? { inner: [], name: "wellKnown", outer: [u8aToU8a(options.key)] } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
      }
      const { hashers, key } = type.asMap;
      return hashers.length === 1 ? createKeyInspect(registry, itemFn, { args, hashers, keys: [key] }) : createKeyInspect(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
    };
  }
  function createStorageFn(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    let cacheKey = null;
    return (...args) => {
      if (type.isPlain) {
        if (!cacheKey) {
          cacheKey = options.skipHashing ? compactAddLength(u8aToU8a(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
        }
        return cacheKey;
      }
      const { hashers, key } = type.asMap;
      return hashers.length === 1 ? createKey(registry, itemFn, { args, hashers, keys: [key] }) : createKey(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
    };
  }
  function createWithMeta(registry, itemFn, options) {
    const { meta, method, prefix: prefix2, section: section2 } = itemFn;
    const storageFn = createStorageFn(registry, itemFn, options);
    storageFn.inspect = createStorageInspect(registry, itemFn, options);
    storageFn.meta = meta;
    storageFn.method = stringCamelCase(method);
    storageFn.prefix = prefix2;
    storageFn.section = section2;
    storageFn.toJSON = () => objectSpread({ storage: { method, prefix: prefix2, section: section2 } }, meta.toJSON());
    return storageFn;
  }
  function extendHeadMeta(registry, { meta: { docs, name, type }, section: section2 }, { method }, iterFn) {
    const meta = registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
      docs,
      fallback: registry.createTypeUnsafe("Bytes", []),
      modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [1]),
      name,
      type: registry.createTypeUnsafe("StorageEntryTypeLatest", [type.asMap.key, 0])
    }]);
    iterFn.meta = meta;
    const fn2 = (...args) => registry.createTypeUnsafe("StorageKey", [iterFn(...args), { method, section: section2 }]);
    fn2.meta = meta;
    return fn2;
  }
  function extendPrefixedMap(registry, itemFn, storageFn) {
    const { meta: { type }, method, section: section2 } = itemFn;
    storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
      if (args.length && (type.isPlain || args.length >= type.asMap.hashers.length)) {
        throw new Error(`Iteration of ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs arguments to be at least one less than the full arguments, found [${args.join(", ")}]`);
      }
      if (args.length) {
        if (type.isMap) {
          const { hashers, key } = type.asMap;
          const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
          return new Raw(registry, createKeyRaw(registry, itemFn, { args, hashers: hashers.slice(0, args.length), keys: keysVec.slice(0, args.length) }));
        }
      }
      return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
    });
    return storageFn;
  }
  function createFunction(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    const storageFn = createWithMeta(registry, itemFn, options);
    if (type.isMap) {
      extendPrefixedMap(registry, itemFn, storageFn);
    }
    storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || compactStripLength(storageFn())[1];
    return storageFn;
  }

  // ../../node_modules/@polkadot/types/metadata/decorate/storage/util.js
  function findSiPrimitive(registry, _prim) {
    const prim = _prim.toLowerCase();
    return registry.lookup.types.find((t) => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
  }
  function findSiType(registry, orig) {
    let portable = findSiPrimitive(registry, orig);
    if (!portable && orig === "Bytes") {
      const u83 = findSiPrimitive(registry, "u8");
      if (u83) {
        portable = registry.lookup.types.find((t) => t.type.def.isSequence && t.type.def.asSequence.type.eq(u83.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(orig));
      }
    }
    if (!portable) {
      console.warn(`Unable to map ${orig} to a lookup index`);
    }
    return portable;
  }
  function createRuntimeFunction({ method, prefix: prefix2, section: section2 }, key, { docs, type }) {
    return (registry) => createFunction(registry, {
      meta: registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
        docs: registry.createTypeUnsafe("Vec<Text>", [[docs]]),
        modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", ["Required"]),
        name: registry.createTypeUnsafe("Text", [method]),
        toJSON: () => key,
        type: registry.createTypeUnsafe("StorageEntryTypeLatest", [{ Plain: findSiType(registry, type)?.id || 0 }])
      }]),
      method,
      prefix: prefix2,
      section: section2
    }, { key, skipHashing: true });
  }

  // ../../node_modules/@polkadot/types/metadata/decorate/storage/substrate.js
  var prefix = "Substrate";
  var section = "substrate";
  function createSubstrateFn(method, key, meta) {
    return createRuntimeFunction({ method, prefix, section }, key, meta);
  }
  var substrate2 = {
    changesTrieConfig: createSubstrateFn("changesTrieConfig", ":changes_trie", {
      docs: "Changes trie configuration is stored under this key.",
      type: "u32"
    }),
    childStorageKeyPrefix: createSubstrateFn("childStorageKeyPrefix", ":child_storage:", {
      docs: "Prefix of child storage keys.",
      type: "u32"
    }),
    code: createSubstrateFn("code", ":code", {
      docs: "Wasm code of the runtime.",
      type: "Bytes"
    }),
    extrinsicIndex: createSubstrateFn("extrinsicIndex", ":extrinsic_index", {
      docs: "Current extrinsic index (u32) is stored under this key.",
      type: "u32"
    }),
    heapPages: createSubstrateFn("heapPages", ":heappages", {
      docs: "Number of wasm linear memory pages required for execution of the runtime.",
      type: "u64"
    })
  };

  // ../../node_modules/@polkadot/types/metadata/decorate/storage/getStorage.js
  function getStorage(registry) {
    const storage = {};
    const entries = Object.entries(substrate2);
    for (let e = 0, count = entries.length; e < count; e++) {
      storage[entries[e][0]] = entries[e][1](registry);
    }
    return { substrate: storage };
  }

  // ../../node_modules/@polkadot/types/metadata/decorate/storage/index.js
  var VERSION_NAME = "palletVersion";
  var VERSION_KEY = ":__STORAGE_VERSION__:";
  var VERSION_DOCS = { docs: "Returns the current pallet version from storage", type: "u16" };
  function decorateStorage(registry, { pallets }, _metaVersion) {
    const result = getStorage(registry);
    for (let i = 0, count = pallets.length; i < count; i++) {
      const { name, storage } = pallets[i];
      if (storage.isSome) {
        const section2 = stringCamelCase(name);
        const { items, prefix: _prefix } = storage.unwrap();
        const prefix2 = _prefix.toString();
        lazyMethod(result, section2, () => lazyMethods({
          palletVersion: createRuntimeFunction({ method: VERSION_NAME, prefix: prefix2, section: section2 }, createKeyRaw(registry, { method: VERSION_KEY, prefix: name.toString() }, NO_RAW_ARGS), VERSION_DOCS)(registry)
        }, items, (meta) => createFunction(registry, { meta, method: meta.name.toString(), prefix: prefix2, section: section2 }, {}), objectNameToCamel));
      }
    }
    return result;
  }

  // ../../node_modules/@polkadot/types/metadata/decorate/index.js
  function expandMetadata(registry, metadata) {
    if (!(metadata instanceof Metadata)) {
      throw new Error("You need to pass a valid Metadata instance to Decorated");
    }
    const latest2 = metadata.asLatest;
    const version = metadata.version;
    return {
      consts: decorateConstants(registry, latest2, version),
      errors: decorateErrors(registry, latest2, version),
      events: decorateEvents(registry, latest2, version),
      query: decorateStorage(registry, latest2, version),
      registry,
      tx: decorateExtrinsics(registry, latest2, version)
    };
  }

  // ../../node_modules/@polkadot/types/create/registry.js
  var DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
  var l8 = logger("registry");
  function sortDecimalStrings(a, b) {
    return parseInt(a, 10) - parseInt(b, 10);
  }
  function valueToString(v3) {
    return v3.toString();
  }
  function getFieldArgs(lookup, fields) {
    const count = fields.length;
    const args = new Array(count);
    for (let i = 0; i < count; i++) {
      args[i] = lookup.getTypeDef(fields[i].type).type;
    }
    return args;
  }
  function clearRecord(record) {
    const keys2 = Object.keys(record);
    for (let i = 0, count = keys2.length; i < count; i++) {
      delete record[keys2[i]];
    }
  }
  function getVariantStringIdx({ index }) {
    return index.toString();
  }
  function injectErrors(_3, { lookup, pallets }, version, result) {
    clearRecord(result);
    for (let i = 0, count = pallets.length; i < count; i++) {
      const { errors, index, name } = pallets[i];
      if (errors.isSome) {
        const sectionName = stringCamelCase(name);
        lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index: index2, name: name2 }) => ({
          args: getFieldArgs(lookup, fields),
          docs: docs.map(valueToString),
          fields,
          index: index2.toNumber(),
          method: name2.toString(),
          name: name2.toString(),
          section: sectionName
        })));
      }
    }
  }
  function injectEvents(registry, { lookup, pallets }, version, result) {
    const filtered = pallets.filter(filterEventsSome);
    clearRecord(result);
    for (let i = 0, count = filtered.length; i < count; i++) {
      const { events: events2, index, name } = filtered[i];
      lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, events2.unwrap(), getVariantStringIdx, (variant) => {
        const meta = registry.createType("EventMetadataLatest", objectSpread({}, variant, { args: getFieldArgs(lookup, variant.fields) }));
        return class extends GenericEventData {
          constructor(registry2, value) {
            super(registry2, value, meta, stringCamelCase(name), variant.name.toString());
          }
        };
      }));
    }
  }
  function injectExtrinsics(registry, { lookup, pallets }, version, result, mapping2) {
    const filtered = pallets.filter(filterCallsSome);
    clearRecord(result);
    clearRecord(mapping2);
    for (let i = 0, count = filtered.length; i < count; i++) {
      const { calls, index, name } = filtered[i];
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      const sectionName = stringCamelCase(name);
      const allCalls = calls.unwrap();
      lazyMethod(result, sectionIndex, () => lazyVariants(lookup, allCalls, getVariantStringIdx, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
      const { path } = registry.lookup.getSiType(allCalls.type);
      const palletIdx = path.findIndex((v3) => v3.eq("pallet"));
      if (palletIdx !== -1) {
        const name2 = stringCamelCase(path.slice(0, palletIdx).map((p, i2) => i2 === 0 ? p.replace(/^(frame|pallet)_/, "") : p).join(" "));
        if (!mapping2[name2]) {
          mapping2[name2] = [sectionName];
        } else {
          mapping2[name2].push(sectionName);
        }
      }
    }
  }
  function extractProperties(registry, metadata) {
    const original = registry.getChainProperties();
    const constants = decorateConstants(registry, metadata.asLatest, metadata.version);
    const ss58Format = constants.system && (constants.system.sS58Prefix || constants.system.ss58Prefix);
    if (!ss58Format) {
      return original;
    }
    const { tokenDecimals, tokenSymbol } = original || {};
    return registry.createTypeUnsafe("ChainProperties", [{ ss58Format, tokenDecimals, tokenSymbol }]);
  }
  var TypeRegistry = class {
    constructor(createdAtHash) {
      this.__internal__classes = /* @__PURE__ */ new Map();
      this.__internal__definitions = /* @__PURE__ */ new Map();
      this.__internal__firstCallIndex = null;
      this.__internal__hasher = blake2AsU8a;
      this.__internal__knownTypes = {};
      this.__internal__metadataVersion = 0;
      this.__internal__signedExtensions = fallbackExtensions;
      this.__internal__unknownTypes = /* @__PURE__ */ new Map();
      this.__internal__metadataCalls = {};
      this.__internal__metadataErrors = {};
      this.__internal__metadataEvents = {};
      this.__internal__moduleMap = {};
      this.__internal__registerObject = (obj) => {
        const entries = Object.entries(obj);
        for (let e = 0, count = entries.length; e < count; e++) {
          const [name, type] = entries[e];
          if (isFunction(type)) {
            this.__internal__classes.set(name, type);
          } else {
            const def = isString(type) ? type : stringify(type);
            if (name === def) {
              throw new Error(`Unable to register circular ${name} === ${def}`);
            }
            if (this.__internal__classes.has(name)) {
              this.__internal__classes.delete(name);
            }
            this.__internal__definitions.set(name, def);
          }
        }
      };
      this.__internal__registerLookup = (lookup) => {
        this.setLookup(lookup);
        let Weight = null;
        if (this.hasType("SpWeightsWeightV2Weight")) {
          const weightv2 = this.createType("SpWeightsWeightV2Weight");
          Weight = weightv2.refTime && weightv2.proofSize ? "SpWeightsWeightV2Weight" : "WeightV1";
        } else if (!isBn(this.createType("Weight"))) {
          Weight = "WeightV1";
        }
        if (Weight) {
          this.register({ Weight });
        }
      };
      this.__internal__knownDefaults = objectSpread({ Json, Metadata, PortableRegistry, Raw }, index_types_exports);
      this.__internal__knownDefaultsEntries = Object.entries(this.__internal__knownDefaults);
      this.__internal__knownDefinitions = definitions_exports;
      const allKnown = Object.values(this.__internal__knownDefinitions);
      for (let i = 0, count = allKnown.length; i < count; i++) {
        this.register(allKnown[i].types);
      }
      if (createdAtHash) {
        this.createdAtHash = this.createType("BlockHash", createdAtHash);
      }
    }
    get chainDecimals() {
      if (this.__internal__chainProperties?.tokenDecimals.isSome) {
        const allDecimals = this.__internal__chainProperties.tokenDecimals.unwrap();
        if (allDecimals.length) {
          return allDecimals.map((b) => b.toNumber());
        }
      }
      return [12];
    }
    get chainSS58() {
      return this.__internal__chainProperties?.ss58Format.isSome ? this.__internal__chainProperties.ss58Format.unwrap().toNumber() : void 0;
    }
    get chainTokens() {
      if (this.__internal__chainProperties?.tokenSymbol.isSome) {
        const allTokens = this.__internal__chainProperties.tokenSymbol.unwrap();
        if (allTokens.length) {
          return allTokens.map(valueToString);
        }
      }
      return [formatBalance.getDefaults().unit];
    }
    get firstCallIndex() {
      return this.__internal__firstCallIndex || DEFAULT_FIRST_CALL_IDX;
    }
    isLookupType(value) {
      return /Lookup\d+$/.test(value);
    }
    createLookupType(lookupId) {
      return `Lookup${typeof lookupId === "number" ? lookupId : lookupId.toNumber()}`;
    }
    get knownTypes() {
      return this.__internal__knownTypes;
    }
    get lookup() {
      return assertReturn(this.__internal__lookup, "PortableRegistry has not been set on this registry");
    }
    get metadata() {
      return assertReturn(this.__internal__metadata, "Metadata has not been set on this registry");
    }
    get unknownTypes() {
      return [...this.__internal__unknownTypes.keys()];
    }
    get signedExtensions() {
      return this.__internal__signedExtensions;
    }
    clearCache() {
      this.__internal__classes = /* @__PURE__ */ new Map();
    }
    createClass(type) {
      return createClassUnsafe(this, type);
    }
    createClassUnsafe(type) {
      return createClassUnsafe(this, type);
    }
    createType(type, ...params) {
      return createTypeUnsafe(this, type, params);
    }
    createTypeUnsafe(type, params, options) {
      return createTypeUnsafe(this, type, params, options);
    }
    findMetaCall(callIndex) {
      const [section2, method] = [callIndex[0], callIndex[1]];
      return assertReturn(this.__internal__metadataCalls[`${section2}`] && this.__internal__metadataCalls[`${section2}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section2}, ${method}]/[${callIndex.toString()}]`);
    }
    findMetaError(errorIndex) {
      const [section2, method] = isU8a(errorIndex) ? [errorIndex[0], errorIndex[1]] : [
        errorIndex.index.toNumber(),
        isU8a(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()
      ];
      return assertReturn(this.__internal__metadataErrors[`${section2}`] && this.__internal__metadataErrors[`${section2}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section2}, ${method}]/[${errorIndex.toString()}]`);
    }
    findMetaEvent(eventIndex) {
      const [section2, method] = [eventIndex[0], eventIndex[1]];
      return assertReturn(this.__internal__metadataEvents[`${section2}`] && this.__internal__metadataEvents[`${section2}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section2}, ${method}]/[${eventIndex.toString()}]`);
    }
    get(name, withUnknown, knownTypeDef) {
      return this.getUnsafe(name, withUnknown, knownTypeDef);
    }
    getUnsafe(name, withUnknown, knownTypeDef) {
      let Type2 = this.__internal__classes.get(name) || this.__internal__knownDefaults[name];
      if (!Type2) {
        const definition = this.__internal__definitions.get(name);
        let BaseType;
        if (definition) {
          BaseType = createClassUnsafe(this, definition);
        } else if (knownTypeDef) {
          BaseType = constructTypeClass(this, knownTypeDef);
        } else if (withUnknown) {
          l8.warn(`Unable to resolve type ${name}, it will fail on construction`);
          this.__internal__unknownTypes.set(name, true);
          BaseType = DoNotConstruct.with(name);
        }
        if (BaseType) {
          Type2 = class extends BaseType {
          };
          this.__internal__classes.set(name, Type2);
          if (knownTypeDef && isNumber(knownTypeDef.lookupIndex)) {
            this.__internal__classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type2);
          }
        }
      }
      return Type2;
    }
    getChainProperties() {
      return this.__internal__chainProperties;
    }
    getClassName(Type2) {
      const names = [];
      for (const [name, Clazz] of this.__internal__knownDefaultsEntries) {
        if (Type2 === Clazz) {
          names.push(name);
        }
      }
      for (const [name, Clazz] of this.__internal__classes.entries()) {
        if (Type2 === Clazz) {
          names.push(name);
        }
      }
      return names.length ? names.sort().reverse()[0] : void 0;
    }
    getDefinition(typeName) {
      return this.__internal__definitions.get(typeName);
    }
    getModuleInstances(specName, moduleName) {
      return this.__internal__knownTypes?.typesBundle?.spec?.[specName.toString()]?.instances?.[moduleName] || this.__internal__moduleMap[moduleName];
    }
    getOrThrow(name) {
      const Clazz = this.get(name);
      if (!Clazz) {
        throw new Error(`type ${name} not found`);
      }
      return Clazz;
    }
    getOrUnknown(name) {
      return this.get(name, true);
    }
    getSignedExtensionExtra() {
      return expandExtensionTypes(this.__internal__signedExtensions, "payload", this.__internal__userExtensions);
    }
    getSignedExtensionTypes() {
      return expandExtensionTypes(this.__internal__signedExtensions, "extrinsic", this.__internal__userExtensions);
    }
    hasClass(name) {
      return this.__internal__classes.has(name) || !!this.__internal__knownDefaults[name];
    }
    hasDef(name) {
      return this.__internal__definitions.has(name);
    }
    hasType(name) {
      return !this.__internal__unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
    }
    hash(data) {
      return this.createType("CodecHash", this.__internal__hasher(data));
    }
    register(arg1, arg2) {
      if (isFunction(arg1)) {
        this.__internal__classes.set(arg1.name, arg1);
      } else if (isString(arg1)) {
        if (!isFunction(arg2)) {
          throw new Error(`Expected class definition passed to '${arg1}' registration`);
        } else if (arg1 === arg2.toString()) {
          throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
        }
        this.__internal__classes.set(arg1, arg2);
      } else {
        this.__internal__registerObject(arg1);
      }
    }
    setChainProperties(properties) {
      if (properties) {
        this.__internal__chainProperties = properties;
      }
    }
    setHasher(hasher) {
      this.__internal__hasher = hasher || blake2AsU8a;
    }
    setKnownTypes(knownTypes2) {
      this.__internal__knownTypes = knownTypes2;
    }
    setLookup(lookup) {
      this.__internal__lookup = lookup;
      lookup.register();
    }
    setMetadata(metadata, signedExtensions, userExtensions, noInitWarn) {
      this.__internal__metadata = metadata.asLatest;
      this.__internal__metadataVersion = metadata.version;
      this.__internal__firstCallIndex = null;
      this.__internal__registerLookup(this.__internal__metadata.lookup);
      injectExtrinsics(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataCalls, this.__internal__moduleMap);
      injectErrors(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataErrors);
      injectEvents(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataEvents);
      const [defSection] = Object.keys(this.__internal__metadataCalls).sort(sortDecimalStrings);
      if (defSection) {
        const [defMethod] = Object.keys(this.__internal__metadataCalls[defSection]).sort(sortDecimalStrings);
        if (defMethod) {
          this.__internal__firstCallIndex = new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]);
        }
      }
      this.setSignedExtensions(signedExtensions || (this.__internal__metadata.extrinsic.version.gt(BN_ZERO) ? this.__internal__metadata.extrinsic.signedExtensions.map(({ identifier }) => identifier.toString()) : fallbackExtensions), userExtensions, noInitWarn);
      this.setChainProperties(extractProperties(this, metadata));
    }
    setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions, noInitWarn) {
      this.__internal__signedExtensions = signedExtensions;
      this.__internal__userExtensions = userExtensions;
      if (!noInitWarn) {
        const unknown = findUnknownExtensions(this.__internal__signedExtensions, this.__internal__userExtensions);
        if (unknown.length) {
          l8.warn(`Unknown signed extensions ${unknown.join(", ")} found, treating them as no-effect`);
        }
      }
    }
  };

  // ../../node_modules/@polkadot/rpc-core/util/refCountDelay.js
  function refCountDelay(delay = 1750) {
    return (source) => {
      let [state, refCount2, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
      return new Observable((ob) => {
        source.subscribe(ob);
        if (refCount2++ === 0) {
          if (state === 1) {
            scheduler.unsubscribe();
          } else {
            connection = source.connect();
          }
          state = 3;
        }
        return () => {
          if (--refCount2 === 0) {
            if (state === 2) {
              state = 0;
              scheduler.unsubscribe();
            } else {
              state = 1;
              scheduler = asapScheduler.schedule(() => {
                state = 0;
                connection.unsubscribe();
              }, delay);
            }
          }
        };
      });
    };
  }

  // ../../node_modules/@polkadot/rpc-core/util/drr.js
  function CMP(a, b) {
    return stringify({ t: a }) === stringify({ t: b });
  }
  function ERR(error) {
    throw error;
  }
  function NOOP() {
  }
  function drr({ delay, skipChange = false, skipTimeout = false } = {}) {
    return (source$) => source$.pipe(
      catchError(ERR),
      skipChange ? tap(NOOP) : distinctUntilChanged(CMP),
      publishReplay(1),
      skipTimeout ? refCount() : refCountDelay(delay)
    );
  }

  // ../../node_modules/@polkadot/rpc-core/util/memo.js
  function memo(instanceId, inner) {
    const options = { getInstanceId: () => instanceId };
    const cached = memoize((...params) => new Observable((observer) => {
      const subscription = inner(...params).subscribe(observer);
      return () => {
        cached.unmemoize(...params);
        subscription.unsubscribe();
      };
    }).pipe(drr()), options);
    return cached;
  }

  // ../../node_modules/@polkadot/rpc-core/bundle.js
  var l9 = logger("rpc-core");
  var EMPTY_META = {
    fallback: void 0,
    modifier: { isOptional: true },
    type: {
      asMap: { linked: { isTrue: false } },
      isMap: false
    }
  };
  function logErrorMessage(method, { noErrorLog, params, type }, error) {
    if (noErrorLog) {
      return;
    }
    l9.error(`${method}(${params.map(({ isOptional, name, type: type2 }) => `${name}${isOptional ? "?" : ""}: ${type2}`).join(", ")}): ${type}:: ${error.message}`);
  }
  function isTreatAsHex(key) {
    return ["0x3a636f6465"].includes(key.toHex());
  }
  var RpcCore = class {
    constructor(instanceId, registry, { isPedantic = true, provider, userRpc = {} }) {
      this.__internal__storageCache = /* @__PURE__ */ new Map();
      this.mapping = /* @__PURE__ */ new Map();
      this.sections = [];
      if (!provider || !isFunction(provider.send)) {
        throw new Error("Expected Provider to API create");
      }
      this.__internal__instanceId = instanceId;
      this.__internal__isPedantic = isPedantic;
      this.__internal__registryDefault = registry;
      this.provider = provider;
      const sectionNames = Object.keys(jsonrpc_default);
      this.sections.push(...sectionNames);
      this.addUserInterfaces(userRpc);
    }
    get isConnected() {
      return this.provider.isConnected;
    }
    connect() {
      return this.provider.connect();
    }
    disconnect() {
      return this.provider.disconnect();
    }
    setRegistrySwap(registrySwap) {
      this.__internal__getBlockRegistry = memoize(registrySwap, {
        getInstanceId: () => this.__internal__instanceId
      });
    }
    setResolveBlockHash(resolveBlockHash) {
      this.__internal__getBlockHash = memoize(resolveBlockHash, {
        getInstanceId: () => this.__internal__instanceId
      });
    }
    addUserInterfaces(userRpc) {
      this.sections.push(...Object.keys(userRpc).filter((k) => !this.sections.includes(k)));
      for (let s = 0, scount = this.sections.length; s < scount; s++) {
        const section2 = this.sections[s];
        const defs = objectSpread({}, jsonrpc_default[section2], userRpc[section2]);
        const methods = Object.keys(defs);
        for (let m = 0, mcount = methods.length; m < mcount; m++) {
          const method = methods[m];
          const def = defs[method];
          const jsonrpc2 = def.endpoint || `${section2}_${method}`;
          if (!this.mapping.has(jsonrpc2)) {
            const isSubscription2 = !!def.pubsub;
            if (!this[section2]) {
              this[section2] = {};
            }
            this.mapping.set(jsonrpc2, objectSpread({}, def, { isSubscription: isSubscription2, jsonrpc: jsonrpc2, method, section: section2 }));
            lazyMethod(this[section2], method, () => isSubscription2 ? this._createMethodSubscribe(section2, method, def) : this._createMethodSend(section2, method, def));
          }
        }
      }
    }
    _memomize(creator, def) {
      const memoOpts = { getInstanceId: () => this.__internal__instanceId };
      const memoized = memoize(creator(true), memoOpts);
      memoized.raw = memoize(creator(false), memoOpts);
      memoized.meta = def;
      return memoized;
    }
    _formatResult(isScale, registry, blockHash, method, def, params, result) {
      return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
    }
    _createMethodSend(section2, method, def) {
      const rpcName = def.endpoint || `${section2}_${method}`;
      const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
      let memoized = null;
      const callWithRegistry = async (isScale, values) => {
        const blockId = hashIndex === -1 ? null : values[hashIndex];
        const blockHash = blockId && def.params[hashIndex].type === "BlockNumber" ? await this.__internal__getBlockHash?.(blockId) : blockId;
        const { registry } = isScale && blockHash && this.__internal__getBlockRegistry ? await this.__internal__getBlockRegistry(u8aToU8a(blockHash)) : { registry: this.__internal__registryDefault };
        const params = this._formatParams(registry, null, def, values);
        const result = await this.provider.send(rpcName, params.map((p) => p.toJSON()), !!blockHash);
        return this._formatResult(isScale, registry, blockHash, method, def, params, result);
      };
      const creator = (isScale) => (...values) => {
        const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
        return new Observable((observer) => {
          callWithRegistry(isScale, values).then((value) => {
            observer.next(value);
            observer.complete();
          }).catch((error) => {
            logErrorMessage(method, def, error);
            observer.error(error);
            observer.complete();
          });
          return () => {
            if (isScale) {
              memoized?.unmemoize(...values);
            } else {
              memoized?.raw.unmemoize(...values);
            }
          };
        }).pipe(
          publishReplay(1),
          isDelayed ? refCountDelay() : refCount()
        );
      };
      memoized = this._memomize(creator, def);
      return memoized;
    }
    _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
      return new Promise((resolve, reject) => {
        this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch((error) => {
          errorHandler(error);
          reject(error);
        });
      });
    }
    _createMethodSubscribe(section2, method, def) {
      const [updateType, subMethod, unsubMethod] = def.pubsub;
      const subName = `${section2}_${subMethod}`;
      const unsubName = `${section2}_${unsubMethod}`;
      const subType = `${section2}_${updateType}`;
      let memoized = null;
      const creator = (isScale) => (...values) => {
        return new Observable((observer) => {
          let subscriptionPromise = Promise.resolve(null);
          const registry = this.__internal__registryDefault;
          const errorHandler = (error) => {
            logErrorMessage(method, def, error);
            observer.error(error);
          };
          try {
            const params = this._formatParams(registry, null, def, values);
            const update = (error, result) => {
              if (error) {
                logErrorMessage(method, def, error);
                return;
              }
              try {
                observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
              } catch (error2) {
                observer.error(error2);
              }
            };
            subscriptionPromise = this._createSubscriber({ paramsJson: params.map((p) => p.toJSON()), subName, subType, update }, errorHandler);
          } catch (error) {
            errorHandler(error);
          }
          return () => {
            if (isScale) {
              memoized?.unmemoize(...values);
            } else {
              memoized?.raw.unmemoize(...values);
            }
            subscriptionPromise.then((subscriptionId) => isNull(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch((error) => logErrorMessage(method, def, error));
          };
        }).pipe(drr());
      };
      memoized = this._memomize(creator, def);
      return memoized;
    }
    _formatParams(registry, blockHash, def, inputs) {
      const count = inputs.length;
      const reqCount = def.params.filter(({ isOptional }) => !isOptional).length;
      if (count < reqCount || count > def.params.length) {
        throw new Error(`Expected ${def.params.length} parameters${reqCount === def.params.length ? "" : ` (${def.params.length - reqCount} optional)`}, ${count} found instead`);
      }
      const params = new Array(count);
      for (let i = 0; i < count; i++) {
        params[i] = registry.createTypeUnsafe(def.params[i].type, [inputs[i]], { blockHash });
      }
      return params;
    }
    _formatOutput(registry, blockHash, method, rpc18, params, result) {
      if (rpc18.type === "StorageData") {
        const key = params[0];
        return this._formatStorageData(registry, blockHash, key, result);
      } else if (rpc18.type === "StorageChangeSet") {
        const keys2 = params[0];
        return keys2 ? this._formatStorageSet(registry, result.block, keys2, result.changes) : registry.createType("StorageChangeSet", result);
      } else if (rpc18.type === "Vec<StorageChangeSet>") {
        const jsonSet = result;
        const count = jsonSet.length;
        const mapped = new Array(count);
        for (let i = 0; i < count; i++) {
          const { block, changes } = jsonSet[i];
          mapped[i] = [
            registry.createType("BlockHash", block),
            this._formatStorageSet(registry, block, params[0], changes)
          ];
        }
        return method === "queryStorageAt" ? mapped[0][1] : mapped;
      }
      return registry.createTypeUnsafe(rpc18.type, [result], { blockHash });
    }
    _formatStorageData(registry, blockHash, key, value) {
      const isEmpty = isNull(value);
      const input = isEmpty ? null : isTreatAsHex(key) ? value : u8aToU8a(value);
      return this._newType(registry, blockHash, key, input, isEmpty);
    }
    _formatStorageSet(registry, blockHash, keys2, changes) {
      const count = keys2.length;
      const withCache = count !== 1;
      const values = new Array(count);
      for (let i = 0; i < count; i++) {
        values[i] = this._formatStorageSetEntry(registry, blockHash, keys2[i], changes, withCache, i);
      }
      return values;
    }
    _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
      const hexKey = key.toHex();
      const found = changes.find(([key2]) => key2 === hexKey);
      const isNotFound = isUndefined(found);
      if (isNotFound && withCache) {
        const cached = this.__internal__storageCache.get(hexKey);
        if (cached) {
          return cached;
        }
      }
      const value = isNotFound ? null : found[1];
      const isEmpty = isNull(value);
      const input = isEmpty || isTreatAsHex(key) ? value : u8aToU8a(value);
      const codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
      this.__internal__storageCache.set(hexKey, codec);
      return codec;
    }
    _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
      const type = key.outputType || "Raw";
      const meta = key.meta || EMPTY_META;
      const entryNum = entryIndex === -1 ? "" : ` entry ${entryIndex}:`;
      try {
        return registry.createTypeUnsafe(type, [
          isEmpty ? meta.fallback ? type.includes("Linkage<") ? u8aConcat(hexToU8a(meta.fallback.toHex()), new Uint8Array(2)) : hexToU8a(meta.fallback.toHex()) : void 0 : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], { blockHash, isPedantic: this.__internal__isPedantic }) : input
        ], { blockHash, isFallback: isEmpty && !!meta.fallback, isOptional: meta.modifier.isOptional, isPedantic: this.__internal__isPedantic && !meta.modifier.isOptional });
      } catch (error) {
        throw new Error(`Unable to decode storage ${key.section || "unknown"}.${key.method || "unknown"}:${entryNum}: ${error.message}`);
      }
    }
  };

  // ../../node_modules/@polkadot/api-derive/util/blockNumber.js
  function unwrapBlockNumber(hdr) {
    return isCompact(hdr.number) ? hdr.number.unwrap() : hdr.number;
  }

  // ../../node_modules/@polkadot/api-derive/util/cacheImpl.js
  var deriveNoopCache = {
    del: () => void 0,
    forEach: () => void 0,
    get: () => void 0,
    set: (_3, value) => value
  };

  // ../../node_modules/@polkadot/api-derive/util/cache.js
  var CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1e3);
  var deriveCache;
  function wrapCache(keyStart, cache) {
    return {
      del: (partial) => cache.del(`${keyStart}${partial}`),
      forEach: cache.forEach,
      get: (partial) => {
        const key = `${keyStart}${partial}`;
        const cached = cache.get(key);
        if (cached) {
          cached.x = Date.now();
          cache.set(key, cached);
          return cached.v;
        }
        return void 0;
      },
      set: (partial, v3) => {
        cache.set(`${keyStart}${partial}`, { v: v3, x: Date.now() });
      }
    };
  }
  function clearCache(cache) {
    const now = Date.now();
    const all3 = [];
    cache.forEach((key, { x }) => {
      now - x > CHACHE_EXPIRY && all3.push(key);
    });
    all3.forEach((key) => cache.del(key));
  }
  function setDeriveCache(prefix2 = "", cache) {
    deriveCache = cache ? wrapCache(`derive:${prefix2}:`, cache) : deriveNoopCache;
    if (cache) {
      clearCache(cache);
    }
  }
  setDeriveCache();

  // ../../node_modules/@polkadot/api-derive/util/first.js
  function firstObservable(obs) {
    return obs.pipe(map2(([a]) => a));
  }
  function firstMemo(fn2) {
    return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn2(api, ...args)));
  }

  // ../../node_modules/@polkadot/api-derive/util/lazy.js
  function lazyDeriveSection(result, section2, getKeys2, creator) {
    lazyMethod(result, section2, () => lazyMethods({}, getKeys2(section2), (method) => creator(section2, method)));
  }

  // ../../node_modules/@polkadot/api-derive/accounts/index.js
  var accounts_exports = {};
  __export(accounts_exports, {
    _flags: () => _flags,
    _identity: () => _identity,
    accountId: () => accountId,
    flags: () => flags,
    hasIdentity: () => hasIdentity,
    hasIdentityMulti: () => hasIdentityMulti,
    idAndIndex: () => idAndIndex,
    idToIndex: () => idToIndex,
    identity: () => identity3,
    indexToId: () => indexToId,
    indexes: () => indexes,
    info: () => info
  });

  // ../../node_modules/@polkadot/api-derive/accounts/accountId.js
  function accountId(instanceId, api) {
    return memo(instanceId, (address) => {
      const decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
      if (decoded.length > 8) {
        return of(api.registry.createType("AccountId", decoded));
      }
      const accountIndex = api.registry.createType("AccountIndex", decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map2((a) => assertReturn(a, "Unable to retrieve accountId")));
    });
  }

  // ../../node_modules/@polkadot/api-derive/accounts/flags.js
  function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
    const addrStr = address && address.toString();
    const isIncluded = (id) => id.toString() === addrStr;
    return {
      isCouncil: (electionsMembers?.map((r) => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),
      isSociety: (societyMembers || []).some(isIncluded),
      isSudo: sudoKey?.toString() === addrStr,
      isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
    };
  }
  function _flags(instanceId, api) {
    return memo(instanceId, () => {
      const results = [void 0, [], [], [], void 0];
      const calls = [
        (api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections)?.members,
        api.query.council?.members,
        api.query.technicalCommittee?.members,
        api.query.society?.members,
        api.query.sudo?.key
      ];
      const filtered = calls.filter((c2) => c2);
      if (!filtered.length) {
        return of(results);
      }
      return api.queryMulti(filtered).pipe(map2((values) => {
        let resultIndex = -1;
        for (let i = 0, count = calls.length; i < count; i++) {
          if (isFunction(calls[i])) {
            results[i] = values[++resultIndex];
          }
        }
        return results;
      }));
    });
  }
  function flags(instanceId, api) {
    return memo(instanceId, (address) => api.derive.accounts._flags().pipe(map2((r) => parseFlags(address, r))));
  }

  // ../../node_modules/@polkadot/api-derive/accounts/idAndIndex.js
  function idAndIndex(instanceId, api) {
    return memo(instanceId, (address) => {
      try {
        const decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
        if (decoded.length > 8) {
          const accountId2 = api.registry.createType("AccountId", decoded);
          return api.derive.accounts.idToIndex(accountId2).pipe(map2((accountIndex2) => [accountId2, accountIndex2]));
        }
        const accountIndex = api.registry.createType("AccountIndex", decoded);
        return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map2((accountId2) => [accountId2, accountIndex]));
      } catch {
        return of([void 0, void 0]);
      }
    });
  }

  // ../../node_modules/@polkadot/api-derive/accounts/identity.js
  var UNDEF_HEX = { toHex: () => void 0 };
  function dataAsString(data) {
    return data.isRaw ? u8aToString(data.asRaw.toU8a(true)) : data.isNone ? void 0 : data.toHex();
  }
  function extractOther(additional) {
    return additional.reduce((other, [_key, _value]) => {
      const key = dataAsString(_key);
      const value = dataAsString(_value);
      if (key && value) {
        other[key] = value;
      }
      return other;
    }, {});
  }
  function extractIdentity(identityOfOpt, superOf) {
    if (!identityOfOpt?.isSome) {
      return { judgements: [] };
    }
    const { info: info6, judgements } = identityOfOpt.unwrap();
    const topDisplay = dataAsString(info6.display);
    return {
      display: superOf && dataAsString(superOf[1]) || topDisplay,
      displayParent: superOf && topDisplay,
      email: dataAsString(info6.email),
      image: dataAsString(info6.image),
      judgements,
      legal: dataAsString(info6.legal),
      other: extractOther(info6.additional),
      parent: superOf && superOf[0],
      pgp: info6.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
      riot: dataAsString(info6.riot),
      twitter: dataAsString(info6.twitter),
      web: dataAsString(info6.web)
    };
  }
  function getParent(api, identityOfOpt, superOfOpt) {
    if (identityOfOpt?.isSome) {
      return of([identityOfOpt, void 0]);
    } else if (superOfOpt?.isSome) {
      const superOf = superOfOpt.unwrap();
      return combineLatest([
        api.derive.accounts._identity(superOf[0]).pipe(map2(([info6]) => info6)),
        of(superOf)
      ]);
    }
    return of([void 0, void 0]);
  }
  function _identity(instanceId, api) {
    return memo(instanceId, (accountId2) => accountId2 && api.query.identity?.identityOf ? combineLatest([
      api.query.identity.identityOf(accountId2),
      api.query.identity.superOf(accountId2)
    ]) : of([void 0, void 0]));
  }
  function identity3(instanceId, api) {
    return memo(instanceId, (accountId2) => api.derive.accounts._identity(accountId2).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map2(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
  }
  var hasIdentity = /* @__PURE__ */ firstMemo((api, accountId2) => api.derive.accounts.hasIdentityMulti([accountId2]));
  function hasIdentityMulti(instanceId, api) {
    return memo(instanceId, (accountIds) => api.query.identity?.identityOf ? combineLatest([
      api.query.identity.identityOf.multi(accountIds),
      api.query.identity.superOf.multi(accountIds)
    ]).pipe(map2(([identities, supers]) => identities.map((identityOfOpt, index) => {
      const superOfOpt = supers[index];
      const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : void 0;
      let display;
      if (identityOfOpt && identityOfOpt.isSome) {
        const value = dataAsString(identityOfOpt.unwrap().info.display);
        if (value && !isHex(value)) {
          display = value;
        }
      }
      return { display, hasIdentity: !!(display || parentId), parentId };
    }))) : of(accountIds.map(() => ({ hasIdentity: false }))));
  }

  // ../../node_modules/@polkadot/api-derive/accounts/idToIndex.js
  function idToIndex(instanceId, api) {
    return memo(instanceId, (accountId2) => api.derive.accounts.indexes().pipe(map2((indexes3) => (indexes3 || {})[accountId2.toString()])));
  }

  // ../../node_modules/@polkadot/api-derive/accounts/indexes.js
  var indicesCache = null;
  function queryAccounts(api) {
    return api.query.indices.accounts.entries().pipe(map2((entries) => entries.reduce((indexes3, [key, idOpt]) => {
      if (idOpt.isSome) {
        indexes3[idOpt.unwrap()[0].toString()] = api.registry.createType("AccountIndex", key.args[0]);
      }
      return indexes3;
    }, {})));
  }
  function indexes(instanceId, api) {
    return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map2((indices) => {
      indicesCache = indices;
      return indices;
    })));
  }

  // ../../node_modules/@polkadot/api-derive/accounts/indexToId.js
  function indexToId(instanceId, api) {
    return memo(instanceId, (accountIndex) => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map2((optResult) => optResult.unwrapOr([])[0])) : of(void 0));
  }

  // ../../node_modules/@polkadot/api-derive/accounts/info.js
  function retrieveNick(api, accountId2) {
    return (accountId2 && api.query.nicks?.nameOf ? api.query.nicks.nameOf(accountId2) : of(void 0)).pipe(map2((nameOf) => nameOf?.isSome ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts.nicks.maxLength.toNumber()) : void 0));
  }
  function info(instanceId, api) {
    return memo(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId2, accountIndex]) => combineLatest([
      of({ accountId: accountId2, accountIndex }),
      api.derive.accounts.identity(accountId2),
      retrieveNick(api, accountId2)
    ])), map2(([{ accountId: accountId2, accountIndex }, identity4, nickname]) => ({
      accountId: accountId2,
      accountIndex,
      identity: identity4,
      nickname
    }))));
  }

  // ../../node_modules/@polkadot/api-derive/alliance/index.js
  var alliance_exports = {};
  __export(alliance_exports, {
    hasProposals: () => hasProposals2,
    members: () => members2,
    prime: () => prime2,
    proposal: () => proposal2,
    proposalCount: () => proposalCount2,
    proposalHashes: () => proposalHashes2,
    proposals: () => proposals2
  });

  // ../../node_modules/@polkadot/api-derive/collective/helpers.js
  function getInstance(api, section2) {
    const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section2);
    const name = instances && instances.length ? instances[0] : section2;
    return api.query[name];
  }
  function withSection(section2, fn2) {
    return (instanceId, api) => memo(instanceId, fn2(getInstance(api, section2), api, instanceId));
  }
  function callMethod(method, empty2) {
    return (section2) => withSection(section2, (query2) => () => isFunction(query2?.[method]) ? query2[method]() : of(empty2));
  }

  // ../../node_modules/@polkadot/api-derive/collective/members.js
  var members = /* @__PURE__ */ callMethod("members", []);

  // ../../node_modules/@polkadot/api-derive/collective/prime.js
  function prime(section2) {
    return withSection(section2, (query2) => () => isFunction(query2?.prime) ? query2.prime().pipe(map2((o) => o.unwrapOr(null))) : of(null));
  }

  // ../../node_modules/@polkadot/api-derive/collective/proposals.js
  function parse(api, [hashes, proposals8, votes2]) {
    return proposals8.map((o, index) => ({
      hash: api.registry.createType("Hash", hashes[index]),
      proposal: o && o.isSome ? o.unwrap() : null,
      votes: votes2[index].unwrapOr(null)
    }));
  }
  function _proposalsFrom(api, query2, hashes) {
    return (isFunction(query2?.proposals) && hashes.length ? combineLatest([
      of(hashes),
      query2.proposalOf.multi(hashes).pipe(catchError(() => of(hashes.map(() => null)))),
      query2.voting.multi(hashes)
    ]) : of([[], [], []])).pipe(map2((r) => parse(api, r)));
  }
  function hasProposals(section2) {
    return withSection(section2, (query2) => () => of(isFunction(query2?.proposals)));
  }
  function proposals(section2) {
    return withSection(section2, (query2, api) => () => api.derive[section2].proposalHashes().pipe(switchMap((all3) => _proposalsFrom(api, query2, all3))));
  }
  function proposal(section2) {
    return withSection(section2, (query2, api) => (hash4) => isFunction(query2?.proposals) ? firstObservable(_proposalsFrom(api, query2, [hash4])) : of(null));
  }
  var proposalCount = /* @__PURE__ */ callMethod("proposalCount", null);
  var proposalHashes = /* @__PURE__ */ callMethod("proposals", []);

  // ../../node_modules/@polkadot/api-derive/alliance/index.js
  var members2 = /* @__PURE__ */ members("allianceMotion");
  var hasProposals2 = /* @__PURE__ */ hasProposals("allianceMotion");
  var proposal2 = /* @__PURE__ */ proposal("allianceMotion");
  var proposalCount2 = /* @__PURE__ */ proposalCount("allianceMotion");
  var proposalHashes2 = /* @__PURE__ */ proposalHashes("allianceMotion");
  var proposals2 = /* @__PURE__ */ proposals("allianceMotion");
  var prime2 = /* @__PURE__ */ prime("allianceMotion");

  // ../../node_modules/@polkadot/api-derive/bagsList/index.js
  var bagsList_exports = {};
  __export(bagsList_exports, {
    _getIds: () => _getIds,
    all: () => all,
    expand: () => expand,
    get: () => get,
    getExpanded: () => getExpanded,
    listNodes: () => listNodes
  });

  // ../../node_modules/@polkadot/api-derive/bagsList/util.js
  function getQueryInterface(api) {
    return api.query.voterBagsList || api.query.bagsList || api.query.voterList;
  }

  // ../../node_modules/@polkadot/api-derive/bagsList/get.js
  function orderBags(ids, bags) {
    const sorted = ids.map((id, index) => ({
      bag: bags[index].unwrapOr(null),
      id,
      key: id.toString()
    })).sort((a, b) => b.id.cmp(a.id));
    const max3 = sorted.length - 1;
    return sorted.map((entry, index) => objectSpread(entry, {
      bagLower: index === max3 ? BN_ZERO : sorted[index + 1].id,
      bagUpper: entry.id,
      index
    }));
  }
  function _getIds(instanceId, api) {
    const query2 = getQueryInterface(api);
    return memo(instanceId, (_ids) => {
      const ids = _ids.map((id) => bnToBn(id));
      return ids.length ? query2.listBags.multi(ids).pipe(map2((bags) => orderBags(ids, bags))) : of([]);
    });
  }
  function all(instanceId, api) {
    const query2 = getQueryInterface(api);
    return memo(instanceId, () => query2.listBags.keys().pipe(switchMap((keys2) => api.derive.bagsList._getIds(keys2.map(({ args: [id] }) => id))), map2((list) => list.filter(({ bag }) => bag))));
  }
  function get(instanceId, api) {
    return memo(instanceId, (id) => api.derive.bagsList._getIds([bnToBn(id)]).pipe(map2((bags) => bags[0])));
  }

  // ../../node_modules/@polkadot/api-derive/bagsList/getExpanded.js
  function expand(instanceId, api) {
    return memo(instanceId, (bag) => api.derive.bagsList.listNodes(bag.bag).pipe(map2((nodes) => objectSpread({ nodes }, bag))));
  }
  function getExpanded(instanceId, api) {
    return memo(instanceId, (id) => api.derive.bagsList.get(id).pipe(switchMap((bag) => api.derive.bagsList.expand(bag))));
  }

  // ../../node_modules/@polkadot/api-derive/bagsList/listNodes.js
  function traverseLinks(api, head) {
    const subject = new BehaviorSubject(head);
    const query2 = getQueryInterface(api);
    return subject.pipe(
      switchMap((account3) => query2.listNodes(account3)),
      tap((node) => {
        nextTick(() => {
          node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();
        });
      }),
      toArray(),
      map2((all3) => all3.map((o) => o.unwrap()))
    );
  }
  function listNodes(instanceId, api) {
    return memo(instanceId, (bag) => bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : of([]));
  }

  // ../../node_modules/@polkadot/api-derive/balances/index.js
  var balances_exports = {};
  __export(balances_exports, {
    account: () => account,
    all: () => all2,
    votingBalance: () => votingBalance,
    votingBalances: () => votingBalances
  });

  // ../../node_modules/@polkadot/api-derive/balances/all.js
  var VESTING_ID = "0x76657374696e6720";
  function calcLocked(api, bestNumber2, locks2) {
    let lockedBalance = api.registry.createType("Balance");
    let lockedBreakdown = [];
    let vestingLocked = api.registry.createType("Balance");
    let allLocked = false;
    if (Array.isArray(locks2)) {
      lockedBreakdown = locks2.filter(({ until }) => !until || bestNumber2 && until.gt(bestNumber2));
      allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());
      vestingLocked = api.registry.createType("Balance", lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new import_bn.default(0)));
      const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());
      if (notAll.length) {
        lockedBalance = api.registry.createType("Balance", bnMax(...notAll.map(({ amount }) => amount)));
      }
    }
    return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
  }
  function calcShared(api, bestNumber2, data, locks2) {
    const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber2, locks2);
    return objectSpread({}, data, {
      availableBalance: api.registry.createType("Balance", allLocked ? 0 : bnMax(new import_bn.default(0), data?.freeBalance ? data.freeBalance.sub(lockedBalance) : new import_bn.default(0))),
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    });
  }
  function calcVesting(bestNumber2, shared, _vesting) {
    const vesting = _vesting || [];
    const isVesting = !shared.vestingLocked.isZero();
    const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber2.gt(startingBlock) ? bnMin(locked, perBlock.mul(bestNumber2.sub(startingBlock))) : BN_ZERO);
    const vestedBalance = vestedBalances.reduce((all3, value) => all3.iadd(value), new import_bn.default(0));
    const vestingTotal = vesting.reduce((all3, { locked }) => all3.iadd(locked), new import_bn.default(0));
    return {
      isVesting,
      vestedBalance,
      vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO,
      vesting: vesting.map(({ locked, perBlock, startingBlock }, index) => ({
        endBlock: locked.div(perBlock).iadd(startingBlock),
        locked,
        perBlock,
        startingBlock,
        vested: vestedBalances[index]
      })).filter(({ locked }) => !locked.isZero()),
      vestingTotal
    };
  }
  function calcBalances(api, result) {
    const [data, [vesting, allLocks, namedReserves], bestNumber2] = result;
    const shared = calcShared(api, bestNumber2, data, allLocks[0]);
    return objectSpread(shared, calcVesting(bestNumber2, shared, vesting), {
      accountId: data.accountId,
      accountNonce: data.accountNonce,
      additional: allLocks.slice(1).map((l15, index) => calcShared(api, bestNumber2, data.additional[index], l15)),
      namedReserves
    });
  }
  function queryOld(api, accountId2) {
    return combineLatest([
      api.query.balances.locks(accountId2),
      api.query.balances.vesting(accountId2)
    ]).pipe(map2(([locks2, optVesting]) => {
      let vestingNew = null;
      if (optVesting.isSome) {
        const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
        vestingNew = api.registry.createType("VestingInfo", { locked, perBlock, startingBlock });
      }
      return [
        vestingNew ? [vestingNew] : null,
        [locks2],
        []
      ];
    }));
  }
  var isNonNullable = (nullable) => !!nullable;
  function createCalls(calls) {
    return [
      calls.map((c2) => !c2),
      calls.filter(isNonNullable)
    ];
  }
  function queryCurrent(api, accountId2, balanceInstances = ["balances"]) {
    const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m) => api.derive[m]?.customLocks || api.query[m]?.locks));
    const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m) => api.query[m]?.reserves));
    return combineLatest([
      api.query.vesting?.vesting ? api.query.vesting.vesting(accountId2) : of(api.registry.createType("Option<VestingInfo>")),
      lockQueries.length ? combineLatest(lockQueries.map((c2) => c2(accountId2))) : of([]),
      reserveQueries.length ? combineLatest(reserveQueries.map((c2) => c2(accountId2))) : of([])
    ]).pipe(map2(([opt, locks2, reserves]) => {
      let offsetLock = -1;
      let offsetReserve = -1;
      const vesting = opt.unwrapOr(null);
      return [
        vesting ? Array.isArray(vesting) ? vesting : [vesting] : null,
        lockEmpty.map((e) => e ? api.registry.createType("Vec<BalanceLock>") : locks2[++offsetLock]),
        reserveEmpty.map((e) => e ? api.registry.createType("Vec<PalletBalancesReserveData>") : reserves[++offsetReserve])
      ];
    }));
  }
  function all2(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
    return memo(instanceId, (address) => combineLatest([
      api.derive.balances.account(address),
      isFunction(api.query.system?.account) || isFunction(api.query.balances?.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)
    ]).pipe(switchMap(([account3, locks2]) => combineLatest([
      of(account3),
      of(locks2),
      api.derive.chain.bestNumber()
    ])), map2((result) => calcBalances(api, result))));
  }

  // ../../node_modules/@polkadot/api-derive/balances/account.js
  function zeroBalance(api) {
    return api.registry.createType("Balance");
  }
  function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
    const votingBalance2 = api.registry.createType("Balance", freeBalance.toBn());
    return {
      freeBalance,
      frozenFee,
      frozenMisc,
      reservedBalance,
      votingBalance: votingBalance2
    };
  }
  function calcBalances2(api, [accountId2, [accountNonce, [primary, ...additional]]]) {
    return objectSpread({
      accountId: accountId2,
      accountNonce,
      additional: additional.map((b) => getBalance(api, b))
    }, getBalance(api, primary));
  }
  function queryBalancesFree(api, accountId2) {
    return combineLatest([
      api.query.balances.freeBalance(accountId2),
      api.query.balances.reservedBalance(accountId2),
      api.query.system.accountNonce(accountId2)
    ]).pipe(map2(([freeBalance, reservedBalance, accountNonce]) => [
      accountNonce,
      [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]
    ]));
  }
  function queryNonceOnly(api, accountId2) {
    const fill = (nonce) => [
      nonce,
      [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
    ];
    return isFunction(api.query.system.account) ? api.query.system.account(accountId2).pipe(map2(({ nonce }) => fill(nonce))) : isFunction(api.query.system.accountNonce) ? api.query.system.accountNonce(accountId2).pipe(map2((nonce) => fill(nonce))) : of(fill(api.registry.createType("Index")));
  }
  function queryBalancesAccount(api, accountId2, modules = ["balances"]) {
    const balances = modules.map((m) => api.derive[m]?.customAccount || api.query[m]?.account).filter((q) => isFunction(q));
    const extract = (nonce, data) => [
      nonce,
      data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])
    ];
    return balances.length ? isFunction(api.query.system.account) ? combineLatest([
      api.query.system.account(accountId2),
      ...balances.map((c2) => c2(accountId2))
    ]).pipe(map2(([{ nonce }, ...balances2]) => extract(nonce, balances2))) : combineLatest([
      api.query.system.accountNonce(accountId2),
      ...balances.map((c2) => c2(accountId2))
    ]).pipe(map2(([nonce, ...balances2]) => extract(nonce, balances2))) : queryNonceOnly(api, accountId2);
  }
  function querySystemAccount(api, accountId2) {
    return api.query.system.account(accountId2).pipe(map2((infoOrTuple) => {
      const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
      const nonce = infoOrTuple.nonce || infoOrTuple[0];
      if (!data || data.isEmpty) {
        return [
          nonce,
          [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
        ];
      }
      const { feeFrozen, free, miscFrozen, reserved } = data;
      return [
        nonce,
        [[free, reserved, feeFrozen, miscFrozen]]
      ];
    }));
  }
  function account(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
    const nonDefaultBalances = balanceInstances && balanceInstances[0] !== "balances";
    return memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId2) => accountId2 ? combineLatest([
      of(accountId2),
      nonDefaultBalances ? queryBalancesAccount(api, accountId2, balanceInstances) : isFunction(api.query.system?.account) ? querySystemAccount(api, accountId2) : isFunction(api.query.balances?.account) ? queryBalancesAccount(api, accountId2) : isFunction(api.query.balances?.freeBalance) ? queryBalancesFree(api, accountId2) : queryNonceOnly(api, accountId2)
    ]) : of([api.registry.createType("AccountId"), [
      api.registry.createType("Index"),
      [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
    ]])), map2((result) => calcBalances2(api, result))));
  }

  // ../../node_modules/@polkadot/api-derive/balances/votingBalances.js
  function votingBalances(instanceId, api) {
    return memo(instanceId, (addresses) => !addresses || !addresses.length ? of([]) : combineLatest(addresses.map((accountId2) => api.derive.balances.account(accountId2))));
  }

  // ../../node_modules/@polkadot/api-derive/balances/index.js
  var votingBalance = all2;

  // ../../node_modules/@polkadot/api-derive/bounties/index.js
  var bounties_exports = {};
  __export(bounties_exports, {
    bounties: () => bounties
  });

  // ../../node_modules/@polkadot/api-derive/bounties/helpers/filterBountyProposals.js
  function filterBountiesProposals(api, allProposals) {
    const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
    const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
    return allProposals.filter((proposal6) => bountyProposalCalls.find((bountyCall) => proposal6.proposal && bountyCall.is(proposal6.proposal)));
  }

  // ../../node_modules/@polkadot/api-derive/bounties/bounties.js
  function parseResult([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
    const bounties2 = [];
    maybeBounties.forEach((bounty, index) => {
      if (bounty.isSome) {
        bounties2.push({
          bounty: bounty.unwrap(),
          description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
          index: ids[index],
          proposals: bountyProposals.filter((bountyProposal) => bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
        });
      }
    });
    return bounties2;
  }
  function bounties(instanceId, api) {
    const bountyBase = api.query.bounties || api.query.treasury;
    return memo(instanceId, () => bountyBase.bounties ? combineLatest([
      bountyBase.bountyCount(),
      api.query.council ? api.query.council.proposalCount() : of(0)
    ]).pipe(switchMap(() => combineLatest([
      bountyBase.bounties.keys(),
      api.derive.council ? api.derive.council.proposals() : of([])
    ])), switchMap(([keys2, proposals8]) => {
      const ids = keys2.map(({ args: [id] }) => id);
      return combineLatest([
        bountyBase.bounties.multi(ids),
        bountyBase.bountyDescriptions.multi(ids),
        of(ids),
        of(filterBountiesProposals(api, proposals8))
      ]);
    }), map2(parseResult)) : of(parseResult([[], [], [], []])));
  }

  // ../../node_modules/@polkadot/api-derive/chain/index.js
  var chain_exports = {};
  __export(chain_exports, {
    _getHeaderRange: () => _getHeaderRange,
    bestNumber: () => bestNumber,
    bestNumberFinalized: () => bestNumberFinalized,
    bestNumberLag: () => bestNumberLag,
    getBlock: () => getBlock,
    getBlockByNumber: () => getBlockByNumber,
    getHeader: () => getHeader,
    subscribeFinalizedHeads: () => subscribeFinalizedHeads,
    subscribeNewBlocks: () => subscribeNewBlocks,
    subscribeNewHeads: () => subscribeNewHeads
  });

  // ../../node_modules/@polkadot/api-derive/chain/util.js
  function createBlockNumberDerive(fn2) {
    return (instanceId, api) => memo(instanceId, () => fn2(api).pipe(map2(unwrapBlockNumber)));
  }
  function getAuthorDetailsWithAt(header, queryAt) {
    const validators2 = queryAt.session?.validators ? queryAt.session.validators() : of(null);
    const { logs: [log] } = header.digest;
    const loggedAuthor = log && (log.isConsensus && log.asConsensus[0].isNimbus && log.asConsensus[1] || log.isPreRuntime && log.asPreRuntime[0].isNimbus && log.asPreRuntime[1]);
    if (loggedAuthor) {
      if (queryAt.authorMapping?.mappingWithDeposit) {
        return combineLatest([
          of(header),
          validators2,
          queryAt.authorMapping.mappingWithDeposit(loggedAuthor).pipe(map2((o) => o.unwrapOr({ account: null }).account))
        ]);
      }
      if (queryAt.parachainStaking?.selectedCandidates && queryAt.session?.nextKeys) {
        const loggedHex = loggedAuthor.toHex();
        return combineLatest([
          of(header),
          validators2,
          queryAt.parachainStaking.selectedCandidates().pipe(mergeMap((selectedCandidates) => combineLatest([
            of(selectedCandidates),
            queryAt.session.nextKeys.multi(selectedCandidates).pipe(map2((nextKeys) => nextKeys.findIndex((o) => o.unwrapOrDefault().nimbus.toHex() === loggedHex)))
          ])), map2(([selectedCandidates, index]) => index === -1 ? null : selectedCandidates[index]))
        ]);
      }
    }
    return combineLatest([
      of(header),
      validators2,
      of(null)
    ]);
  }
  function getAuthorDetails(api, header, blockHash) {
    return api.queryAt(header.parentHash.isEmpty ? blockHash || header.hash : header.parentHash).pipe(switchMap((queryAt) => getAuthorDetailsWithAt(header, queryAt)));
  }

  // ../../node_modules/@polkadot/api-derive/chain/bestNumber.js
  var bestNumber = /* @__PURE__ */ createBlockNumberDerive((api) => api.rpc.chain.subscribeNewHeads());

  // ../../node_modules/@polkadot/api-derive/chain/bestNumberFinalized.js
  var bestNumberFinalized = /* @__PURE__ */ createBlockNumberDerive((api) => api.rpc.chain.subscribeFinalizedHeads());

  // ../../node_modules/@polkadot/api-derive/chain/bestNumberLag.js
  function bestNumberLag(instanceId, api) {
    return memo(instanceId, () => combineLatest([
      api.derive.chain.bestNumber(),
      api.derive.chain.bestNumberFinalized()
    ]).pipe(map2(([bestNumber2, bestNumberFinalized2]) => api.registry.createType("BlockNumber", bestNumber2.sub(bestNumberFinalized2)))));
  }

  // ../../node_modules/@polkadot/api-derive/type/util.js
  function extractAuthor(digest, sessionValidators) {
    const [citem] = digest.logs.filter((e) => e.isConsensus);
    const [pitem] = digest.logs.filter((e) => e.isPreRuntime);
    const [sitem] = digest.logs.filter((e) => e.isSeal);
    let accountId2;
    try {
      if (pitem) {
        const [engine, data] = pitem.asPreRuntime;
        accountId2 = engine.extractAuthor(data, sessionValidators);
      }
      if (!accountId2 && citem) {
        const [engine, data] = citem.asConsensus;
        accountId2 = engine.extractAuthor(data, sessionValidators);
      }
      if (!accountId2 && sitem) {
        const [engine, data] = sitem.asSeal;
        accountId2 = engine.extractAuthor(data, sessionValidators);
      }
    } catch {
    }
    return accountId2;
  }

  // ../../node_modules/@polkadot/api-derive/type/HeaderExtended.js
  function createHeaderExtended(registry, header, validators2, author) {
    const HeaderBase = registry.createClass("Header");
    class Implementation extends HeaderBase {
      constructor(registry2, header2, validators3, author2) {
        super(registry2, header2);
        this.__internal__author = author2 || extractAuthor(this.digest, validators3 || []);
        this.createdAtHash = header2?.createdAtHash;
      }
      get author() {
        return this.__internal__author;
      }
    }
    return new Implementation(registry, header, validators2, author);
  }

  // ../../node_modules/@polkadot/api-derive/type/SignedBlockExtended.js
  function mapExtrinsics(extrinsics, records) {
    return extrinsics.map((extrinsic, index) => {
      let dispatchError;
      let dispatchInfo;
      const events2 = records.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({ event }) => {
        if (event.section === "system") {
          if (event.method === "ExtrinsicSuccess") {
            dispatchInfo = event.data[0];
          } else if (event.method === "ExtrinsicFailed") {
            dispatchError = event.data[0];
            dispatchInfo = event.data[1];
          }
        }
        return event;
      });
      return { dispatchError, dispatchInfo, events: events2, extrinsic };
    });
  }
  function createSignedBlockExtended(registry, block, events2, validators2, author) {
    const SignedBlockBase = registry.createClass("SignedBlock");
    class Implementation extends SignedBlockBase {
      constructor(registry2, block2, events3, validators3, author2) {
        super(registry2, block2);
        this.__internal__author = author2 || extractAuthor(this.block.header.digest, validators3 || []);
        this.__internal__events = events3 || [];
        this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);
        this.createdAtHash = block2?.createdAtHash;
      }
      get author() {
        return this.__internal__author;
      }
      get events() {
        return this.__internal__events;
      }
      get extrinsics() {
        return this.__internal__extrinsics;
      }
    }
    return new Implementation(registry, block, events2, validators2, author);
  }

  // ../../node_modules/@polkadot/api-derive/chain/getBlock.js
  function getBlock(instanceId, api) {
    return memo(instanceId, (blockHash) => combineLatest([
      api.rpc.chain.getBlock(blockHash),
      api.queryAt(blockHash)
    ]).pipe(switchMap(([signedBlock, queryAt]) => combineLatest([
      of(signedBlock),
      queryAt.system.events(),
      getAuthorDetails(api, signedBlock.block.header, blockHash)
    ])), map2(([signedBlock, events2, [, validators2, author]]) => createSignedBlockExtended(events2.registry, signedBlock, events2, validators2, author))));
  }

  // ../../node_modules/@polkadot/api-derive/chain/getBlockByNumber.js
  function getBlockByNumber(instanceId, api) {
    return memo(instanceId, (blockNumber) => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap((h) => api.derive.chain.getBlock(h))));
  }

  // ../../node_modules/@polkadot/api-derive/chain/getHeader.js
  function getHeader(instanceId, api) {
    return memo(instanceId, (blockHash) => api.rpc.chain.getHeader(blockHash).pipe(switchMap((header) => getAuthorDetails(api, header, blockHash)), map2(([header, validators2, author]) => createHeaderExtended((validators2 || header).registry, header, validators2, author))));
  }

  // ../../node_modules/@polkadot/api-derive/chain/subscribeFinalizedHeads.js
  function _getHeaderRange(instanceId, api) {
    return memo(instanceId, (startHash, endHash, prev = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap((header) => header.parentHash.eq(endHash) ? of([header, ...prev]) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev]))));
  }
  function subscribeFinalizedHeads(instanceId, api) {
    return memo(instanceId, () => {
      let prevHash = null;
      return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap((header) => {
        const endHash = prevHash;
        const startHash = header.parentHash;
        prevHash = header.createdAtHash = header.hash;
        return endHash === null || startHash.eq(endHash) ? of(header) : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap((headers) => from(headers)));
      }));
    });
  }

  // ../../node_modules/@polkadot/api-derive/chain/subscribeNewBlocks.js
  function subscribeNewBlocks(instanceId, api) {
    return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
  }

  // ../../node_modules/@polkadot/api-derive/chain/subscribeNewHeads.js
  function subscribeNewHeads(instanceId, api) {
    return memo(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe(switchMap((header) => getAuthorDetails(api, header)), map2(([header, validators2, author]) => {
      header.createdAtHash = header.hash;
      return createHeaderExtended(header.registry, header, validators2, author);
    })));
  }

  // ../../node_modules/@polkadot/api-derive/contracts/index.js
  var contracts_exports = {};
  __export(contracts_exports, {
    fees: () => fees
  });

  // ../../node_modules/@polkadot/api-derive/contracts/fees.js
  function queryConstants(api) {
    return of([
      api.consts.contracts.callBaseFee || api.registry.createType("Balance"),
      api.consts.contracts.contractFee || api.registry.createType("Balance"),
      api.consts.contracts.creationFee || api.registry.createType("Balance"),
      api.consts.contracts.transactionBaseFee || api.registry.createType("Balance"),
      api.consts.contracts.transactionByteFee || api.registry.createType("Balance"),
      api.consts.contracts.transferFee || api.registry.createType("Balance"),
      api.consts.contracts.rentByteFee,
      api.consts.contracts.rentDepositOffset,
      api.consts.contracts.surchargeReward,
      api.consts.contracts.tombstoneDeposit
    ]);
  }
  function fees(instanceId, api) {
    return memo(instanceId, () => {
      return queryConstants(api).pipe(map2(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
        callBaseFee,
        contractFee,
        creationFee,
        rentByteFee,
        rentDepositOffset,
        surchargeReward,
        tombstoneDeposit,
        transactionBaseFee,
        transactionByteFee,
        transferFee
      })));
    });
  }

  // ../../node_modules/@polkadot/api-derive/council/index.js
  var council_exports = {};
  __export(council_exports, {
    hasProposals: () => hasProposals3,
    members: () => members3,
    prime: () => prime3,
    proposal: () => proposal3,
    proposalCount: () => proposalCount3,
    proposalHashes: () => proposalHashes3,
    proposals: () => proposals3,
    votes: () => votes,
    votesOf: () => votesOf
  });

  // ../../node_modules/@polkadot/api-derive/council/votes.js
  function isVoter(value) {
    return !Array.isArray(value);
  }
  function retrieveStakeOf(elections) {
    return elections.stakeOf.entries().pipe(map2((entries) => entries.map(([{ args: [accountId2] }, stake]) => [accountId2, stake])));
  }
  function retrieveVoteOf(elections) {
    return elections.votesOf.entries().pipe(map2((entries) => entries.map(([{ args: [accountId2] }, votes2]) => [accountId2, votes2])));
  }
  function retrievePrev(api, elections) {
    return combineLatest([
      retrieveStakeOf(elections),
      retrieveVoteOf(elections)
    ]).pipe(map2(([stakes, votes2]) => {
      const result = [];
      votes2.forEach(([voter, votes3]) => {
        result.push([voter, { stake: api.registry.createType("Balance"), votes: votes3 }]);
      });
      stakes.forEach(([staker, stake]) => {
        const entry = result.find(([voter]) => voter.eq(staker));
        if (entry) {
          entry[1].stake = stake;
        } else {
          result.push([staker, { stake, votes: [] }]);
        }
      });
      return result;
    }));
  }
  function retrieveCurrent(elections) {
    return elections.voting.entries().pipe(map2((entries) => entries.map(([{ args: [accountId2] }, value]) => [
      accountId2,
      isVoter(value) ? { stake: value.stake, votes: value.votes } : { stake: value[0], votes: value[1] }
    ])));
  }
  function votes(instanceId, api) {
    const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
    return memo(instanceId, () => elections ? elections.stakeOf ? retrievePrev(api, elections) : retrieveCurrent(elections) : of([]));
  }

  // ../../node_modules/@polkadot/api-derive/council/votesOf.js
  function votesOf(instanceId, api) {
    return memo(instanceId, (accountId2) => api.derive.council.votes().pipe(map2((votes2) => (votes2.find(([from2]) => from2.eq(accountId2)) || [null, { stake: api.registry.createType("Balance"), votes: [] }])[1])));
  }

  // ../../node_modules/@polkadot/api-derive/council/index.js
  var members3 = /* @__PURE__ */ members("council");
  var hasProposals3 = /* @__PURE__ */ hasProposals("council");
  var proposal3 = /* @__PURE__ */ proposal("council");
  var proposalCount3 = /* @__PURE__ */ proposalCount("council");
  var proposalHashes3 = /* @__PURE__ */ proposalHashes("council");
  var proposals3 = /* @__PURE__ */ proposals("council");
  var prime3 = /* @__PURE__ */ prime("council");

  // ../../node_modules/@polkadot/api-derive/crowdloan/index.js
  var crowdloan_exports = {};
  __export(crowdloan_exports, {
    childKey: () => childKey,
    contributions: () => contributions,
    ownContributions: () => ownContributions
  });

  // ../../node_modules/@polkadot/api-derive/crowdloan/childKey.js
  function createChildKey(info6) {
    return u8aToHex(u8aConcat(":child_storage:default:", blake2AsU8a(u8aConcat("crowdloan", (info6.fundIndex || info6.trieIndex).toU8a()))));
  }
  function childKey(instanceId, api) {
    return memo(instanceId, (paraId) => api.query.crowdloan.funds(paraId).pipe(map2((optInfo) => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
  }

  // ../../node_modules/@polkadot/api-derive/crowdloan/util.js
  function extractContributed(paraId, events2) {
    const added = [];
    const removed = [];
    return events2.filter(({ event: { data: [, eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["Contributed", "Withdrew"].includes(method) && eventParaId.eq(paraId)).reduce((result, { event: { data: [accountId2], method } }) => {
      if (method === "Contributed") {
        result.added.push(accountId2.toHex());
      } else {
        result.removed.push(accountId2.toHex());
      }
      return result;
    }, { added, blockHash: events2.createdAtHash?.toHex() || "-", removed });
  }

  // ../../node_modules/@polkadot/api-derive/crowdloan/contributions.js
  var PAGE_SIZE_K = 1e3;
  function _getUpdates(api, paraId) {
    let added = [];
    let removed = [];
    return api.query.system.events().pipe(switchMap((events2) => {
      const changes = extractContributed(paraId, events2);
      if (changes.added.length || changes.removed.length) {
        added = added.concat(...changes.added);
        removed = removed.concat(...changes.removed);
        return of({ added, addedDelta: changes.added, blockHash: events2.createdAtHash?.toHex() || "-", removed, removedDelta: changes.removed });
      }
      return EMPTY;
    }), startWith({ added, addedDelta: [], blockHash: "-", removed, removedDelta: [] }));
  }
  function _eventTriggerAll(api, paraId) {
    return api.query.system.events().pipe(switchMap((events2) => {
      const items = events2.filter(({ event: { data: [eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["AllRefunded", "Dissolved", "PartiallyRefunded"].includes(method) && eventParaId.eq(paraId));
      return items.length ? of(events2.createdAtHash?.toHex() || "-") : EMPTY;
    }), startWith("-"));
  }
  function _getKeysPaged(api, childKey2) {
    const subject = new BehaviorSubject(void 0);
    return subject.pipe(
      switchMap((startKey) => api.rpc.childstate.getKeysPaged(childKey2, "0x", PAGE_SIZE_K, startKey)),
      tap((keys2) => {
        nextTick(() => {
          keys2.length === PAGE_SIZE_K ? subject.next(keys2[PAGE_SIZE_K - 1].toHex()) : subject.complete();
        });
      }),
      toArray(),
      map2((keyArr) => arrayFlatten(keyArr))
    );
  }
  function _getAll(api, paraId, childKey2) {
    return _eventTriggerAll(api, paraId).pipe(switchMap(() => isFunction(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey2) : api.rpc.childstate.getKeys(childKey2, "0x")), map2((keys2) => keys2.map((k) => k.toHex())));
  }
  function _contributions(api, paraId, childKey2) {
    return combineLatest([
      _getAll(api, paraId, childKey2),
      _getUpdates(api, paraId)
    ]).pipe(map2(([keys2, { added, blockHash, removed }]) => {
      const contributorsMap = {};
      keys2.forEach((k) => {
        contributorsMap[k] = true;
      });
      added.forEach((k) => {
        contributorsMap[k] = true;
      });
      removed.forEach((k) => {
        delete contributorsMap[k];
      });
      return {
        blockHash,
        contributorsHex: Object.keys(contributorsMap)
      };
    }));
  }
  function contributions(instanceId, api) {
    return memo(instanceId, (paraId) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 ? _contributions(api, paraId, childKey2) : of({ blockHash: "-", contributorsHex: [] }))));
  }

  // ../../node_modules/@polkadot/api-derive/crowdloan/ownContributions.js
  function _getValues(api, childKey2, keys2) {
    return combineLatest(keys2.map((k) => api.rpc.childstate.getStorage(childKey2, k))).pipe(map2((values) => values.map((v3) => api.registry.createType("Option<StorageData>", v3)).map((o) => o.isSome ? api.registry.createType("Balance", o.unwrap()) : api.registry.createType("Balance")).reduce((all3, b, index) => objectSpread(all3, { [keys2[index]]: b }), {})));
  }
  function _watchOwnChanges(api, paraId, childkey, keys2) {
    return api.query.system.events().pipe(switchMap((events2) => {
      const changes = extractContributed(paraId, events2);
      const filtered = keys2.filter((k) => changes.added.includes(k) || changes.removed.includes(k));
      return filtered.length ? _getValues(api, childkey, filtered) : EMPTY;
    }), startWith({}));
  }
  function _contributions2(api, paraId, childKey2, keys2) {
    return combineLatest([
      _getValues(api, childKey2, keys2),
      _watchOwnChanges(api, paraId, childKey2, keys2)
    ]).pipe(map2(([all3, latest2]) => objectSpread({}, all3, latest2)));
  }
  function ownContributions(instanceId, api) {
    return memo(instanceId, (paraId, keys2) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 && keys2.length ? _contributions2(api, paraId, childKey2, keys2) : of({}))));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/index.js
  var democracy_exports = {};
  __export(democracy_exports, {
    _referendumInfo: () => _referendumInfo,
    _referendumVotes: () => _referendumVotes,
    _referendumsVotes: () => _referendumsVotes,
    dispatchQueue: () => dispatchQueue,
    locks: () => locks,
    nextExternal: () => nextExternal,
    preimage: () => preimage,
    preimages: () => preimages,
    proposals: () => proposals4,
    referendumIds: () => referendumIds,
    referendums: () => referendums,
    referendumsActive: () => referendumsActive,
    referendumsFinished: () => referendumsFinished,
    referendumsInfo: () => referendumsInfo,
    sqrtElectorate: () => sqrtElectorate
  });

  // ../../node_modules/@polkadot/api-derive/democracy/util.js
  function isOldInfo(info6) {
    return !!info6.proposalHash;
  }
  function isCurrentStatus(status) {
    return !!status.tally;
  }
  function compareRationals(n1, d1, n2, d2) {
    while (true) {
      const q1 = n1.div(d1);
      const q2 = n2.div(d2);
      if (q1.lt(q2)) {
        return true;
      } else if (q2.lt(q1)) {
        return false;
      }
      const r1 = n1.mod(d1);
      const r2 = n2.mod(d2);
      if (r2.isZero()) {
        return false;
      } else if (r1.isZero()) {
        return true;
      }
      n1 = d2;
      n2 = d1;
      d1 = r2;
      d2 = r1;
    }
  }
  function calcPassingOther(threshold, sqrtElectorate2, { votedAye, votedNay, votedTotal }) {
    const sqrtVoters = bnSqrt(votedTotal);
    return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate2) : compareRationals(votedNay, sqrtElectorate2, votedAye, sqrtVoters);
  }
  function calcPassing(threshold, sqrtElectorate2, state) {
    return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate2, state);
  }
  function calcVotesPrev(votesFor) {
    return votesFor.reduce((state, derived) => {
      const { balance, vote } = derived;
      const isDefault = vote.conviction.index === 0;
      const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);
      if (vote.isAye) {
        state.allAye.push(derived);
        state.voteCountAye++;
        state.votedAye.iadd(counted);
      } else {
        state.allNay.push(derived);
        state.voteCountNay++;
        state.votedNay.iadd(counted);
      }
      state.voteCount++;
      state.votedTotal.iadd(counted);
      return state;
    }, { allAye: [], allNay: [], voteCount: 0, voteCountAye: 0, voteCountNay: 0, votedAye: new import_bn.default(0), votedNay: new import_bn.default(0), votedTotal: new import_bn.default(0) });
  }
  function calcVotesCurrent(tally, votes2) {
    const allAye = [];
    const allNay = [];
    votes2.forEach((derived) => {
      if (derived.vote.isAye) {
        allAye.push(derived);
      } else {
        allNay.push(derived);
      }
    });
    return {
      allAye,
      allNay,
      voteCount: allAye.length + allNay.length,
      voteCountAye: allAye.length,
      voteCountNay: allNay.length,
      votedAye: tally.ayes,
      votedNay: tally.nays,
      votedTotal: tally.turnout
    };
  }
  function calcVotes(sqrtElectorate2, referendum, votes2) {
    const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes2) : calcVotesPrev(votes2);
    return objectSpread({}, state, {
      isPassing: calcPassing(referendum.status.threshold, sqrtElectorate2, state),
      votes: votes2
    });
  }
  function getStatus(info6) {
    if (info6.isNone) {
      return null;
    }
    const unwrapped = info6.unwrap();
    return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing : null;
  }
  function getImageHashBounded(hash4) {
    return hash4.isLegacy ? hash4.asLegacy.hash_.toHex() : hash4.isLookup ? hash4.asLookup.hash_.toHex() : hash4.isInline ? hash4.asInline.hash.toHex() : isString(hash4) ? isHex(hash4) ? hash4 : stringToHex(hash4) : isU8a(hash4) ? u8aToHex(hash4) : hash4.toHex();
  }
  function getImageHash(status) {
    return getImageHashBounded(status.proposal || status.proposalHash);
  }

  // ../../node_modules/@polkadot/api-derive/democracy/dispatchQueue.js
  var DEMOCRACY_ID = stringToHex("democrac");
  function isMaybeHashedOrBounded(call) {
    return call instanceof Enum;
  }
  function isBounded(call) {
    return call.isInline || call.isLegacy || call.isLookup;
  }
  function queryQueue(api) {
    return api.query.democracy.dispatchQueue().pipe(switchMap((dispatches) => combineLatest([
      of(dispatches),
      api.derive.democracy.preimages(dispatches.map(([, hash4]) => hash4))
    ])), map2(([dispatches, images]) => dispatches.map(([at2, imageHash, index], dispatchIndex) => ({
      at: at2,
      image: images[dispatchIndex],
      imageHash: getImageHashBounded(imageHash),
      index
    }))));
  }
  function schedulerEntries(api) {
    return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap((keys2) => {
      const blockNumbers = keys2.map(({ args: [blockNumber] }) => blockNumber);
      return blockNumbers.length ? combineLatest([
        of(blockNumbers),
        api.query.scheduler.agenda.multi(blockNumbers).pipe(catchError(() => of(blockNumbers.map(() => []))))
      ]) : of([[], []]);
    }));
  }
  function queryScheduler(api) {
    return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
      const result = [];
      blockNumbers.forEach((at2, index) => {
        (agendas[index] || []).filter((o) => o.isSome).forEach((o) => {
          const scheduled2 = o.unwrap();
          if (scheduled2.maybeId.isSome) {
            const id = scheduled2.maybeId.unwrap().toHex();
            if (id.startsWith(DEMOCRACY_ID)) {
              const imageHash = isMaybeHashedOrBounded(scheduled2.call) ? isBounded(scheduled2.call) ? getImageHashBounded(scheduled2.call) : scheduled2.call.isHash ? scheduled2.call.asHash.toHex() : scheduled2.call.asValue.args[0].toHex() : scheduled2.call.args[0].toHex();
              result.push({ at: at2, imageHash, index: api.registry.createType("(u64, ReferendumIndex)", id)[1] });
            }
          }
        });
      });
      return combineLatest([
        of(result),
        result.length ? api.derive.democracy.preimages(result.map(({ imageHash }) => imageHash)) : of([])
      ]);
    }), map2(([infos, images]) => infos.map((info6, index) => objectSpread({ image: images[index] }, info6))));
  }
  function dispatchQueue(instanceId, api) {
    return memo(instanceId, () => isFunction(api.query.scheduler?.agenda) ? queryScheduler(api) : api.query.democracy.dispatchQueue ? queryQueue(api) : of([]));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/locks.js
  var LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
  function parseEnd(api, vote, { approved, end: end2 }) {
    return [
      end2,
      approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end2.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : BN_ZERO
    ];
  }
  function parseLock(api, [referendumId, accountVote], referendum) {
    const { balance, vote } = accountVote.asStandard;
    const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [BN_ZERO, BN_ZERO];
    return { balance, isDelegated: false, isFinished: referendum.isFinished, referendumEnd, referendumId, unlockAt, vote };
  }
  function delegateLocks(api, { balance, conviction, target }) {
    return api.derive.democracy.locks(target).pipe(map2((available) => available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote }) => ({
      balance,
      isDelegated: true,
      isFinished,
      referendumEnd,
      referendumId,
      unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
      vote: api.registry.createType("Vote", { aye: vote.isAye, conviction })
    }))));
  }
  function directLocks(api, { votes: votes2 }) {
    if (!votes2.length) {
      return of([]);
    }
    return api.query.democracy.referendumInfoOf.multi(votes2.map(([referendumId]) => referendumId)).pipe(map2((referendums2) => votes2.map((vote, index) => [vote, referendums2[index].unwrapOr(null)]).filter((item) => !!item[1] && isUndefined(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
  }
  function locks(instanceId, api) {
    return memo(instanceId, (accountId2) => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId2).pipe(switchMap((voting) => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : of([]))) : of([]));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/nextExternal.js
  function withImage(api, nextOpt) {
    if (nextOpt.isNone) {
      return of(null);
    }
    const [hash4, threshold] = nextOpt.unwrap();
    return api.derive.democracy.preimage(hash4).pipe(map2((image) => ({
      image,
      imageHash: getImageHashBounded(hash4),
      threshold
    })));
  }
  function nextExternal(instanceId, api) {
    return memo(instanceId, () => api.query.democracy?.nextExternal ? api.query.democracy.nextExternal().pipe(switchMap((nextOpt) => withImage(api, nextOpt))) : of(null));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/preimages.js
  function isDemocracyPreimage(api, imageOpt) {
    return !!imageOpt && !api.query.democracy.dispatchQueue;
  }
  function constructProposal(api, [bytes3, proposer, balance, at2]) {
    let proposal6;
    try {
      proposal6 = api.registry.createType("Call", bytes3.toU8a(true));
    } catch (error) {
      console.error(error);
    }
    return { at: at2, balance, proposal: proposal6, proposer };
  }
  function parseDemocracy(api, imageOpt) {
    if (imageOpt.isNone) {
      return;
    }
    if (isDemocracyPreimage(api, imageOpt)) {
      const status = imageOpt.unwrap();
      if (status.isMissing) {
        return;
      }
      const { data, deposit, provider, since } = status.asAvailable;
      return constructProposal(api, [data, provider, deposit, since]);
    }
    return constructProposal(api, imageOpt.unwrap());
  }
  function parseImage(api, [proposalHash, status, bytes3]) {
    if (!status) {
      return void 0;
    }
    const [proposer, balance] = status.isUnrequested ? status.asUnrequested.deposit : status.asRequested.deposit.unwrapOrDefault();
    let proposal6;
    if (bytes3) {
      try {
        proposal6 = api.registry.createType("Call", bytes3.toU8a(true));
      } catch (error) {
        console.error(error);
      }
    }
    return { at: BN_ZERO, balance, proposal: proposal6, proposalHash, proposer };
  }
  function getDemocracyImages(api, bounded) {
    const hashes = bounded.map((b) => getImageHashBounded(b));
    return api.query.democracy.preimages.multi(hashes).pipe(map2((images) => images.map((imageOpt) => parseDemocracy(api, imageOpt))));
  }
  function getImages(api, bounded) {
    const hashes = bounded.map((b) => getImageHashBounded(b));
    const bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
    return api.query.preimage.statusFor.multi(hashes).pipe(switchMap((optStatus) => {
      const statuses = optStatus.map((o) => o.unwrapOr(null));
      const keys2 = statuses.map((s, i) => s ? bytesType === "H256" ? hashes[i] : s.isRequested ? [hashes[i], s.asRequested.len.unwrapOr(0)] : [hashes[i], s.asUnrequested.len] : null).filter((p) => !!p);
      return api.query.preimage.preimageFor.multi(keys2).pipe(map2((optBytes) => {
        let ptr = -1;
        return statuses.map((s, i) => s ? [hashes[i], s, optBytes[++ptr].unwrapOr(null)] : [hashes[i], null, null]).map((v3) => parseImage(api, v3));
      }));
    }));
  }
  function preimages(instanceId, api) {
    return memo(instanceId, (hashes) => hashes.length ? isFunction(api.query.democracy.preimages) ? getDemocracyImages(api, hashes) : isFunction(api.query.preimage.preimageFor) ? getImages(api, hashes) : of([]) : of([]));
  }
  var preimage = /* @__PURE__ */ firstMemo((api, hash4) => api.derive.democracy.preimages([hash4]));

  // ../../node_modules/@polkadot/api-derive/democracy/proposals.js
  function isNewDepositors(depositors) {
    return isFunction(depositors[1].mul);
  }
  function parse2([proposals8, images, optDepositors]) {
    return proposals8.filter(([, , proposer], index) => !!optDepositors[index]?.isSome && !proposer.isEmpty).map(([index, hash4, proposer], proposalIndex) => {
      const depositors = optDepositors[proposalIndex].unwrap();
      return objectSpread({
        image: images[proposalIndex],
        imageHash: getImageHashBounded(hash4),
        index,
        proposer
      }, isNewDepositors(depositors) ? { balance: depositors[1], seconds: depositors[0] } : { balance: depositors[0], seconds: depositors[1] });
    });
  }
  function proposals4(instanceId, api) {
    return memo(instanceId, () => isFunction(api.query.democracy?.publicProps) ? api.query.democracy.publicProps().pipe(switchMap((proposals8) => proposals8.length ? combineLatest([
      of(proposals8),
      api.derive.democracy.preimages(proposals8.map(([, hash4]) => hash4)),
      api.query.democracy.depositOf.multi(proposals8.map(([index]) => index))
    ]) : of([[], [], []])), map2(parse2)) : of([]));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/referendumIds.js
  function referendumIds(instanceId, api) {
    return memo(instanceId, () => api.query.democracy?.lowestUnbaked ? api.queryMulti([
      api.query.democracy.lowestUnbaked,
      api.query.democracy.referendumCount
    ]).pipe(map2(([first2, total]) => total.gt(first2) ? [...Array(total.sub(first2).toNumber())].map((_3, i) => first2.addn(i)) : [])) : of([]));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/referendums.js
  function referendums(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap((referendums2) => referendums2.length ? combineLatest([
      of(referendums2),
      api.derive.democracy._referendumsVotes(referendums2)
    ]) : of([[], []])), map2(([referendums2, votes2]) => referendums2.map((referendum, index) => objectSpread({}, referendum, votes2[index])))));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/referendumsActive.js
  function referendumsActive(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => ids.length ? api.derive.democracy.referendumsInfo(ids) : of([]))));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/referendumsFinished.js
  function referendumsFinished(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => api.query.democracy.referendumInfoOf.multi(ids)), map2((infos) => infos.map((o) => o.unwrapOr(null)).filter((info6) => !!info6 && info6.isFinished).map((info6) => info6.asFinished))));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/referendumsInfo.js
  function votesPrev(api, referendumId) {
    return api.query.democracy.votersFor(referendumId).pipe(switchMap((votersFor) => combineLatest([
      of(votersFor),
      votersFor.length ? api.query.democracy.voteOf.multi(votersFor.map((accountId2) => [referendumId, accountId2])) : of([]),
      api.derive.balances.votingBalances(votersFor)
    ])), map2(([votersFor, votes2, balances]) => votersFor.map((accountId2, index) => ({
      accountId: accountId2,
      balance: balances[index].votingBalance || api.registry.createType("Balance"),
      isDelegating: false,
      vote: votes2[index] || api.registry.createType("Vote")
    }))));
  }
  function extractVotes(mapped, referendumId) {
    return mapped.filter(([, voting]) => voting.isDirect).map(([accountId2, voting]) => [
      accountId2,
      voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))
    ]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId2, votes2]) => votes2.reduce((result2, [, vote]) => {
      if (vote.isStandard) {
        result2.push(objectSpread({
          accountId: accountId2,
          isDelegating: false
        }, vote.asStandard));
      }
      return result2;
    }, result), []);
  }
  function votesCurr(api, referendumId) {
    return api.query.democracy.votingOf.entries().pipe(map2((allVoting) => {
      const mapped = allVoting.map(([{ args: [accountId2] }, voting]) => [accountId2, voting]);
      const votes2 = extractVotes(mapped, referendumId);
      const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId2, voting]) => [accountId2, voting.asDelegating]);
      delegations.forEach(([accountId2, { balance, conviction, target }]) => {
        const toDelegator = delegations.find(([accountId3]) => accountId3.eq(target));
        const to = votes2.find(({ accountId: accountId3 }) => accountId3.eq(toDelegator ? toDelegator[0] : target));
        if (to) {
          votes2.push({
            accountId: accountId2,
            balance,
            isDelegating: true,
            vote: api.registry.createType("Vote", { aye: to.vote.isAye, conviction })
          });
        }
      });
      return votes2;
    }));
  }
  function _referendumVotes(instanceId, api) {
    return memo(instanceId, (referendum) => combineLatest([
      api.derive.democracy.sqrtElectorate(),
      isFunction(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)
    ]).pipe(map2(([sqrtElectorate2, votes2]) => calcVotes(sqrtElectorate2, referendum, votes2))));
  }
  function _referendumsVotes(instanceId, api) {
    return memo(instanceId, (referendums2) => referendums2.length ? combineLatest(referendums2.map((referendum) => api.derive.democracy._referendumVotes(referendum))) : of([]));
  }
  function _referendumInfo(instanceId, api) {
    return memo(instanceId, (index, info6) => {
      const status = getStatus(info6);
      return status ? api.derive.democracy.preimage(status.proposal || status.proposalHash).pipe(map2((image) => ({
        image,
        imageHash: getImageHash(status),
        index: api.registry.createType("ReferendumIndex", index),
        status
      }))) : of(null);
    });
  }
  function referendumsInfo(instanceId, api) {
    return memo(instanceId, (ids) => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap((infos) => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map2((infos) => infos.filter((r) => !!r))) : of([]));
  }

  // ../../node_modules/@polkadot/api-derive/democracy/sqrtElectorate.js
  function sqrtElectorate(instanceId, api) {
    return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map2(bnSqrt)));
  }

  // ../../node_modules/@polkadot/api-derive/elections/index.js
  var elections_exports = {};
  __export(elections_exports, {
    info: () => info2
  });

  // ../../node_modules/@polkadot/api-derive/elections/info.js
  function isSeatHolder(value) {
    return !Array.isArray(value);
  }
  function isCandidateTuple(value) {
    return Array.isArray(value);
  }
  function getAccountTuple(value) {
    return isSeatHolder(value) ? [value.who, value.stake] : value;
  }
  function getCandidate(value) {
    return isCandidateTuple(value) ? value[0] : value;
  }
  function sortAccounts([, balanceA], [, balanceB]) {
    return balanceB.cmp(balanceA);
  }
  function getConstants(api, elections) {
    return elections ? {
      candidacyBond: api.consts[elections].candidacyBond,
      desiredRunnersUp: api.consts[elections].desiredRunnersUp,
      desiredSeats: api.consts[elections].desiredMembers,
      termDuration: api.consts[elections].termDuration,
      votingBond: api.consts[elections].votingBond
    } : {};
  }
  function getModules(api) {
    const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName, "council") || ["council"];
    const elections = api.query.phragmenElection ? "phragmenElection" : api.query.electionsPhragmen ? "electionsPhragmen" : api.query.elections ? "elections" : null;
    return [council, elections];
  }
  function queryAll(api, council, elections) {
    return api.queryMulti([
      api.query[council].members,
      api.query[elections].candidates,
      api.query[elections].members,
      api.query[elections].runnersUp
    ]);
  }
  function queryCouncil(api, council) {
    return combineLatest([
      api.query[council].members(),
      of([]),
      of([]),
      of([])
    ]);
  }
  function info2(instanceId, api) {
    return memo(instanceId, () => {
      const [council, elections] = getModules(api);
      return (elections ? queryAll(api, council, elections) : queryCouncil(api, council)).pipe(map2(([councilMembers, candidates2, members7, runnersUp]) => objectSpread({}, getConstants(api, elections), {
        candidateCount: api.registry.createType("u32", candidates2.length),
        candidates: candidates2.map(getCandidate),
        members: members7.length ? members7.map(getAccountTuple).sort(sortAccounts) : councilMembers.map((a) => [a, api.registry.createType("Balance")]),
        runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
      })));
    });
  }

  // ../../node_modules/@polkadot/api-derive/imOnline/index.js
  var imOnline_exports = {};
  __export(imOnline_exports, {
    receivedHeartbeats: () => receivedHeartbeats
  });

  // ../../node_modules/@polkadot/api-derive/imOnline/receivedHeartbeats.js
  function mapResult([result, validators2, heartbeats, numBlocks]) {
    validators2.forEach((validator, index) => {
      const validatorId = validator.toString();
      const blockCount = numBlocks[index];
      const hasMessage = !heartbeats[index].isEmpty;
      const prev = result[validatorId];
      if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
        result[validatorId] = {
          blockCount,
          hasMessage,
          isOnline: hasMessage || blockCount.gt(BN_ZERO)
        };
      }
    });
    return result;
  }
  function receivedHeartbeats(instanceId, api) {
    return memo(instanceId, () => api.query.imOnline?.receivedHeartbeats ? api.derive.staking.overview().pipe(switchMap(({ currentIndex, validators: validators2 }) => combineLatest([
      of({}),
      of(validators2),
      api.query.imOnline.receivedHeartbeats.multi(validators2.map((_address, index) => [currentIndex, index])),
      api.query.imOnline.authoredBlocks.multi(validators2.map((address) => [currentIndex, address]))
    ])), map2(mapResult)) : of({}));
  }

  // ../../node_modules/@polkadot/api-derive/membership/index.js
  var membership_exports = {};
  __export(membership_exports, {
    hasProposals: () => hasProposals4,
    members: () => members4,
    prime: () => prime4,
    proposal: () => proposal4,
    proposalCount: () => proposalCount4,
    proposalHashes: () => proposalHashes4,
    proposals: () => proposals5
  });
  var members4 = /* @__PURE__ */ members("membership");
  var hasProposals4 = /* @__PURE__ */ hasProposals("membership");
  var proposal4 = /* @__PURE__ */ proposal("membership");
  var proposalCount4 = /* @__PURE__ */ proposalCount("membership");
  var proposalHashes4 = /* @__PURE__ */ proposalHashes("membership");
  var proposals5 = /* @__PURE__ */ proposals("membership");
  var prime4 = /* @__PURE__ */ prime("membership");

  // ../../node_modules/@polkadot/api-derive/parachains/index.js
  var parachains_exports = {};
  __export(parachains_exports, {
    info: () => info3,
    overview: () => overview
  });

  // ../../node_modules/@polkadot/api-derive/parachains/util.js
  function didUpdateToBool(didUpdate, id) {
    return didUpdate.isSome ? didUpdate.unwrap().some((paraId) => paraId.eq(id)) : false;
  }

  // ../../node_modules/@polkadot/api-derive/parachains/info.js
  function parseActive(id, active) {
    const found = active.find(([paraId]) => paraId === id);
    if (found && found[1].isSome) {
      const [collatorId, retriable] = found[1].unwrap();
      return objectSpread({ collatorId }, retriable.isWithRetries ? {
        isRetriable: true,
        retries: retriable.asWithRetries.toNumber()
      } : {
        isRetriable: false,
        retries: 0
      });
    }
    return null;
  }
  function parseCollators(id, collatorQueue) {
    return collatorQueue.map((queue) => {
      const found = queue.find(([paraId]) => paraId === id);
      return found ? found[1] : null;
    });
  }
  function parse3(id, [active, retryQueue, selectedThreads, didUpdate, info6, pendingSwap, heads, relayDispatchQueue]) {
    if (info6.isNone) {
      return null;
    }
    return {
      active: parseActive(id, active),
      didUpdate: didUpdateToBool(didUpdate, id),
      heads,
      id,
      info: objectSpread({ id }, info6.unwrap()),
      pendingSwapId: pendingSwap.unwrapOr(null),
      relayDispatchQueue,
      retryCollators: parseCollators(id, retryQueue),
      selectedCollators: parseCollators(id, selectedThreads)
    };
  }
  function info3(instanceId, api) {
    return memo(instanceId, (id) => api.query.registrar && api.query.parachains ? api.queryMulti([
      api.query.registrar.active,
      api.query.registrar.retryQueue,
      api.query.registrar.selectedThreads,
      api.query.parachains.didUpdate,
      [api.query.registrar.paras, id],
      [api.query.registrar.pendingSwap, id],
      [api.query.parachains.heads, id],
      [api.query.parachains.relayDispatchQueue, id]
    ]).pipe(map2((result) => parse3(api.registry.createType("ParaId", id), result))) : of(null));
  }

  // ../../node_modules/@polkadot/api-derive/parachains/overview.js
  function parse4([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {
    return ids.map((id, index) => ({
      didUpdate: didUpdateToBool(didUpdate, id),
      id,
      info: objectSpread({ id }, infos[index].unwrapOr(null)),
      pendingSwapId: pendingSwaps[index].unwrapOr(null),
      relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
    }));
  }
  function overview(instanceId, api) {
    return memo(instanceId, () => api.query.registrar?.parachains && api.query.parachains ? api.query.registrar.parachains().pipe(switchMap((paraIds) => combineLatest([
      of(paraIds),
      api.query.parachains.didUpdate(),
      api.query.registrar.paras.multi(paraIds),
      api.query.registrar.pendingSwap.multi(paraIds),
      api.query.parachains.relayDispatchQueueSize.multi(paraIds)
    ])), map2(parse4)) : of([]));
  }

  // ../../node_modules/@polkadot/api-derive/session/index.js
  var session_exports = {};
  __export(session_exports, {
    eraLength: () => eraLength,
    eraProgress: () => eraProgress,
    indexes: () => indexes2,
    info: () => info4,
    progress: () => progress,
    sessionProgress: () => sessionProgress
  });

  // ../../node_modules/@polkadot/api-derive/session/indexes.js
  function parse5([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
    return {
      activeEra,
      activeEraStart,
      currentEra,
      currentIndex,
      validatorCount
    };
  }
  function queryStaking(api) {
    return api.queryMulti([
      api.query.session.currentIndex,
      api.query.staking.activeEra,
      api.query.staking.currentEra,
      api.query.staking.validatorCount
    ]).pipe(map2(([currentIndex, activeOpt, currentEra, validatorCount]) => {
      const { index, start: start2 } = activeOpt.unwrapOrDefault();
      return parse5([
        currentIndex,
        index,
        start2,
        currentEra.unwrapOrDefault(),
        validatorCount
      ]);
    }));
  }
  function querySession(api) {
    return api.query.session.currentIndex().pipe(map2((currentIndex) => parse5([
      currentIndex,
      api.registry.createType("EraIndex"),
      api.registry.createType("Option<Moment>"),
      api.registry.createType("EraIndex"),
      api.registry.createType("u32")
    ])));
  }
  function empty(api) {
    return of(parse5([
      api.registry.createType("SessionIndex", 1),
      api.registry.createType("EraIndex"),
      api.registry.createType("Option<Moment>"),
      api.registry.createType("EraIndex"),
      api.registry.createType("u32")
    ]));
  }
  function indexes2(instanceId, api) {
    return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));
  }

  // ../../node_modules/@polkadot/api-derive/session/info.js
  function info4(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(map2((indexes3) => {
      const sessionLength = api.consts?.babe?.epochDuration || api.registry.createType("u64", 1);
      const sessionsPerEra = api.consts?.staking?.sessionsPerEra || api.registry.createType("SessionIndex", 1);
      return objectSpread({
        eraLength: api.registry.createType("BlockNumber", sessionsPerEra.mul(sessionLength)),
        isEpoch: !!api.query.babe,
        sessionLength,
        sessionsPerEra
      }, indexes3);
    })));
  }

  // ../../node_modules/@polkadot/api-derive/session/progress.js
  function withProgressField(field) {
    return (instanceId, api) => memo(instanceId, () => api.derive.session.progress().pipe(map2((info6) => info6[field])));
  }
  function createDerive(api, info6, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
    const epochStartSlot = epochIndex.mul(info6.sessionLength).iadd(epochOrGenesisStartSlot);
    const sessionProgress2 = currentSlot.sub(epochStartSlot);
    const eraProgress2 = info6.currentIndex.sub(activeEraStartSessionIndex).imul(info6.sessionLength).iadd(sessionProgress2);
    return objectSpread({
      eraProgress: api.registry.createType("BlockNumber", eraProgress2),
      sessionProgress: api.registry.createType("BlockNumber", sessionProgress2)
    }, info6);
  }
  function queryAura(api) {
    return api.derive.session.info().pipe(map2((info6) => objectSpread({
      eraProgress: api.registry.createType("BlockNumber"),
      sessionProgress: api.registry.createType("BlockNumber")
    }, info6)));
  }
  function queryBabe(api) {
    return api.derive.session.info().pipe(switchMap((info6) => combineLatest([
      of(info6),
      api.query.staking?.erasStartSessionIndex ? api.queryMulti([
        api.query.babe.currentSlot,
        api.query.babe.epochIndex,
        api.query.babe.genesisSlot,
        [api.query.staking.erasStartSessionIndex, info6.activeEra]
      ]) : api.queryMulti([
        api.query.babe.currentSlot,
        api.query.babe.epochIndex,
        api.query.babe.genesisSlot
      ])
    ])), map2(([info6, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [
      info6,
      [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType("SessionIndex", 1)]
    ]));
  }
  function progress(instanceId, api) {
    return memo(instanceId, () => api.query.babe ? queryBabe(api).pipe(map2(([info6, slots]) => createDerive(api, info6, slots))) : queryAura(api));
  }
  var eraLength = /* @__PURE__ */ withProgressField("eraLength");
  var eraProgress = /* @__PURE__ */ withProgressField("eraProgress");
  var sessionProgress = /* @__PURE__ */ withProgressField("sessionProgress");

  // ../../node_modules/@polkadot/api-derive/society/index.js
  var society_exports = {};
  __export(society_exports, {
    _members: () => _members,
    candidates: () => candidates,
    info: () => info5,
    member: () => member,
    members: () => members5
  });

  // ../../node_modules/@polkadot/api-derive/society/candidates.js
  function candidates(instanceId, api) {
    return memo(instanceId, () => api.query.society.candidates().pipe(switchMap((candidates2) => combineLatest([
      of(candidates2),
      api.query.society.suspendedCandidates.multi(candidates2.map(({ who }) => who))
    ])), map2(([candidates2, suspended]) => candidates2.map(({ kind, value, who }, index) => ({
      accountId: who,
      isSuspended: suspended[index].isSome,
      kind,
      value
    })))));
  }

  // ../../node_modules/@polkadot/api-derive/society/info.js
  function info5(instanceId, api) {
    return memo(instanceId, () => api.queryMulti([
      api.query.society.bids,
      api.query.society.defender,
      api.query.society.founder,
      api.query.society.head,
      api.query.society.maxMembers,
      api.query.society.pot
    ]).pipe(map2(([bids, defender, founder, head, maxMembers, pot]) => ({
      bids,
      defender: defender.unwrapOr(void 0),
      founder: founder.unwrapOr(void 0),
      hasDefender: defender.isSome && head.isSome && !head.eq(defender) || false,
      head: head.unwrapOr(void 0),
      maxMembers,
      pot
    }))));
  }

  // ../../node_modules/@polkadot/api-derive/society/member.js
  function member(instanceId, api) {
    return memo(instanceId, (accountId2) => api.derive.society._members([accountId2]).pipe(map2(([result]) => result)));
  }

  // ../../node_modules/@polkadot/api-derive/society/members.js
  function _members(instanceId, api) {
    return memo(instanceId, (accountIds) => combineLatest([
      of(accountIds),
      api.query.society.payouts.multi(accountIds),
      api.query.society.strikes.multi(accountIds),
      api.query.society.defenderVotes.multi(accountIds),
      api.query.society.suspendedMembers.multi(accountIds),
      api.query.society.vouching.multi(accountIds)
    ]).pipe(map2(([accountIds2, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds2.map((accountId2, index) => ({
      accountId: accountId2,
      isDefenderVoter: defenderVotes[index].isSome,
      isSuspended: suspended[index].isTrue,
      payouts: payouts[index],
      strikes: strikes[index],
      vote: defenderVotes[index].unwrapOr(void 0),
      vouching: vouching[index].unwrapOr(void 0)
    })))));
  }
  function members5(instanceId, api) {
    return memo(instanceId, () => api.query.society.members().pipe(switchMap((members7) => api.derive.society._members(members7))));
  }

  // ../../node_modules/@polkadot/api-derive/staking/index.js
  var staking_exports = {};
  __export(staking_exports, {
    _eraExposure: () => _eraExposure,
    _eraPrefs: () => _eraPrefs,
    _eraSlashes: () => _eraSlashes,
    _erasExposure: () => _erasExposure,
    _erasPoints: () => _erasPoints,
    _erasPrefs: () => _erasPrefs,
    _erasRewards: () => _erasRewards,
    _erasSlashes: () => _erasSlashes,
    _ownExposures: () => _ownExposures,
    _ownSlashes: () => _ownSlashes,
    _stakerExposures: () => _stakerExposures,
    _stakerPoints: () => _stakerPoints,
    _stakerPrefs: () => _stakerPrefs,
    _stakerRewards: () => _stakerRewards,
    _stakerRewardsEras: () => _stakerRewardsEras,
    _stakerSlashes: () => _stakerSlashes,
    account: () => account2,
    accounts: () => accounts,
    currentPoints: () => currentPoints,
    electedInfo: () => electedInfo,
    eraExposure: () => eraExposure,
    eraPrefs: () => eraPrefs,
    eraSlashes: () => eraSlashes,
    erasExposure: () => erasExposure,
    erasHistoric: () => erasHistoric,
    erasPoints: () => erasPoints,
    erasPrefs: () => erasPrefs,
    erasRewards: () => erasRewards,
    erasSlashes: () => erasSlashes,
    keys: () => keys,
    keysMulti: () => keysMulti,
    nextElected: () => nextElected,
    overview: () => overview2,
    ownExposure: () => ownExposure,
    ownExposures: () => ownExposures,
    ownSlash: () => ownSlash,
    ownSlashes: () => ownSlashes,
    query: () => query,
    queryMulti: () => queryMulti,
    stakerExposure: () => stakerExposure,
    stakerExposures: () => stakerExposures,
    stakerPoints: () => stakerPoints,
    stakerPrefs: () => stakerPrefs,
    stakerRewards: () => stakerRewards,
    stakerRewardsMulti: () => stakerRewardsMulti,
    stakerRewardsMultiEras: () => stakerRewardsMultiEras,
    stakerSlashes: () => stakerSlashes,
    stashes: () => stashes,
    validators: () => validators,
    waitingInfo: () => waitingInfo
  });

  // ../../node_modules/@polkadot/api-derive/staking/account.js
  var QUERY_OPTS = {
    withDestination: true,
    withLedger: true,
    withNominations: true,
    withPrefs: true
  };
  function groupByEra(list) {
    return list.reduce((map3, { era, value }) => {
      const key = era.toString();
      map3[key] = (map3[key] || BN_ZERO).add(value.unwrap());
      return map3;
    }, {});
  }
  function calculateUnlocking(api, stakingLedger, sessionInfo) {
    const results = Object.entries(groupByEra((stakingLedger?.unlocking || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
      remainingEras: new import_bn.default(eraString).isub(sessionInfo.activeEra),
      value: api.registry.createType("Balance", value)
    }));
    return results.length ? results : void 0;
  }
  function redeemableSum(api, stakingLedger, sessionInfo) {
    return api.registry.createType("Balance", (stakingLedger?.unlocking || []).reduce((total, { era, value }) => {
      return era.unwrap().gt(sessionInfo.currentEra) ? total : total.iadd(value.unwrap());
    }, new import_bn.default(0)));
  }
  function parseResult2(api, sessionInfo, keys2, query2) {
    return objectSpread({}, keys2, query2, {
      redeemable: redeemableSum(api, query2.stakingLedger, sessionInfo),
      unlocking: calculateUnlocking(api, query2.stakingLedger, sessionInfo)
    });
  }
  function accounts(instanceId, api) {
    return memo(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap((sessionInfo) => combineLatest([
      api.derive.staking.keysMulti(accountIds),
      api.derive.staking.queryMulti(accountIds, opts)
    ]).pipe(map2(([keys2, queries]) => queries.map((q, index) => parseResult2(api, sessionInfo, keys2[index], q)))))));
  }
  var account2 = /* @__PURE__ */ firstMemo((api, accountId2, opts) => api.derive.staking.accounts([accountId2], opts));

  // ../../node_modules/@polkadot/api-derive/staking/currentPoints.js
  function currentPoints(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => api.query.staking.erasRewardPoints(activeEra))));
  }

  // ../../node_modules/@polkadot/api-derive/staking/electedInfo.js
  var DEFAULT_FLAGS = { withController: true, withExposure: true, withPrefs: true };
  function combineAccounts(nextElected2, validators2) {
    return arrayFlatten([nextElected2, validators2.filter((v3) => !nextElected2.find((n) => n.eq(v3)))]);
  }
  function electedInfo(instanceId, api) {
    return memo(instanceId, (flags2 = DEFAULT_FLAGS) => api.derive.staking.validators().pipe(switchMap(({ nextElected: nextElected2, validators: validators2 }) => api.derive.staking.queryMulti(combineAccounts(nextElected2, validators2), flags2).pipe(map2((info6) => ({
      info: info6,
      nextElected: nextElected2,
      validators: validators2
    }))))));
  }

  // ../../node_modules/@polkadot/api-derive/staking/cache.js
  function getEraCache(CACHE_KEY6, era, withActive) {
    const cacheKey = `${CACHE_KEY6}-${era.toString()}`;
    return [
      cacheKey,
      withActive ? void 0 : deriveCache.get(cacheKey)
    ];
  }
  function getEraMultiCache(CACHE_KEY6, eras, withActive) {
    const cached = withActive ? [] : eras.map((e) => deriveCache.get(`${CACHE_KEY6}-${e.toString()}`)).filter((v3) => !!v3);
    return cached;
  }
  function setEraCache(cacheKey, withActive, value) {
    !withActive && deriveCache.set(cacheKey, value);
    return value;
  }
  function setEraMultiCache(CACHE_KEY6, withActive, values) {
    !withActive && values.forEach((v3) => deriveCache.set(`${CACHE_KEY6}-${v3.era.toString()}`, v3));
    return values;
  }
  function filterCachedEras(eras, cached, query2) {
    return eras.map((e) => cached.find(({ era }) => e.eq(era)) || query2.find(({ era }) => e.eq(era)));
  }

  // ../../node_modules/@polkadot/api-derive/staking/util.js
  var ERA_CHUNK_SIZE = 14;
  function chunkEras(eras, fn2) {
    const chunked = arrayChunk(eras, ERA_CHUNK_SIZE);
    let index = 0;
    const subject = new BehaviorSubject(chunked[index]);
    return subject.pipe(switchMap(fn2), tap(() => {
      nextTick(() => {
        index++;
        index === chunked.length ? subject.complete() : subject.next(chunked[index]);
      });
    }), toArray(), map2(arrayFlatten));
  }
  function filterEras(eras, list) {
    return eras.filter((e) => !list.some(({ era }) => e.eq(era)));
  }
  function erasHistoricApply(fn2) {
    return (instanceId, api) => memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn2](e, withActive))));
  }
  function erasHistoricApplyAccount(fn2) {
    return (instanceId, api) => memo(instanceId, (accountId2, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn2](accountId2, e, withActive))));
  }
  function singleEra(fn2) {
    return (instanceId, api) => memo(instanceId, (era) => api.derive.staking[fn2](era, true));
  }
  function combineEras(fn2) {
    return (instanceId, api) => memo(instanceId, (eras, withActive) => !eras.length ? of([]) : chunkEras(eras, (eras2) => combineLatest(eras2.map((e) => api.derive.staking[fn2](e, withActive)))));
  }

  // ../../node_modules/@polkadot/api-derive/staking/erasExposure.js
  var CACHE_KEY = "eraExposure";
  function mapStakers(era, stakers) {
    const nominators = {};
    const validators2 = {};
    stakers.forEach(([key, exposure]) => {
      const validatorId = key.args[1].toString();
      validators2[validatorId] = exposure;
      exposure.others.forEach(({ who }, validatorIndex) => {
        const nominatorId = who.toString();
        nominators[nominatorId] = nominators[nominatorId] || [];
        nominators[nominatorId].push({ validatorId, validatorIndex });
      });
    });
    return { era, nominators, validators: validators2 };
  }
  function _eraExposure(instanceId, api) {
    return memo(instanceId, (era, withActive = false) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
      return cached ? of(cached) : api.query.staking.erasStakersClipped.entries(era).pipe(map2((r) => setEraCache(cacheKey, withActive, mapStakers(era, r))));
    });
  }
  var eraExposure = /* @__PURE__ */ singleEra("_eraExposure");
  var _erasExposure = /* @__PURE__ */ combineEras("_eraExposure");
  var erasExposure = /* @__PURE__ */ erasHistoricApply("_erasExposure");

  // ../../node_modules/@polkadot/api-derive/staking/erasHistoric.js
  function erasHistoric(instanceId, api) {
    return memo(instanceId, (withActive) => combineLatest([
      api.query.staking.activeEra(),
      api.consts.staking.historyDepth ? of(api.consts.staking.historyDepth) : api.query.staking.historyDepth()
    ]).pipe(map2(([activeEraOpt, historyDepth]) => {
      const result = [];
      const max3 = historyDepth.toNumber();
      const activeEra = activeEraOpt.unwrapOrDefault().index;
      let lastEra = activeEra;
      while (lastEra.gte(BN_ZERO) && result.length < max3) {
        if (lastEra !== activeEra || withActive === true) {
          result.push(api.registry.createType("EraIndex", lastEra));
        }
        lastEra = lastEra.sub(BN_ONE);
      }
      return result.reverse();
    })));
  }

  // ../../node_modules/@polkadot/api-derive/staking/erasPoints.js
  var CACHE_KEY2 = "eraPoints";
  function mapValidators({ individual }) {
    return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO)).reduce((result, [validatorId, points]) => {
      result[validatorId.toString()] = points;
      return result;
    }, {});
  }
  function mapPoints(eras, points) {
    return eras.map((era, index) => ({
      era,
      eraPoints: points[index].total,
      validators: mapValidators(points[index])
    }));
  }
  function _erasPoints(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }
      const cached = getEraMultiCache(CACHE_KEY2, eras, withActive);
      const remaining = filterEras(eras, cached);
      return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map2((p) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY2, withActive, mapPoints(remaining, p)))));
    });
  }
  var erasPoints = /* @__PURE__ */ erasHistoricApply("_erasPoints");

  // ../../node_modules/@polkadot/api-derive/staking/erasPrefs.js
  var CACHE_KEY3 = "eraPrefs";
  function mapPrefs(era, all3) {
    const validators2 = {};
    all3.forEach(([key, prefs]) => {
      validators2[key.args[1].toString()] = prefs;
    });
    return { era, validators: validators2 };
  }
  function _eraPrefs(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY3, era, withActive);
      return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map2((r) => setEraCache(cacheKey, withActive, mapPrefs(era, r))));
    });
  }
  var eraPrefs = /* @__PURE__ */ singleEra("_eraPrefs");
  var _erasPrefs = /* @__PURE__ */ combineEras("_eraPrefs");
  var erasPrefs = /* @__PURE__ */ erasHistoricApply("_erasPrefs");

  // ../../node_modules/@polkadot/api-derive/staking/erasRewards.js
  var CACHE_KEY4 = "eraRewards";
  function mapRewards(eras, optRewards) {
    return eras.map((era, index) => ({
      era,
      eraReward: optRewards[index].unwrapOrDefault()
    }));
  }
  function _erasRewards(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }
      const cached = getEraMultiCache(CACHE_KEY4, eras, withActive);
      const remaining = filterEras(eras, cached);
      if (!remaining.length) {
        return of(cached);
      }
      return api.query.staking.erasValidatorReward.multi(remaining).pipe(map2((r) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY4, withActive, mapRewards(remaining, r)))));
    });
  }
  var erasRewards = /* @__PURE__ */ erasHistoricApply("_erasRewards");

  // ../../node_modules/@polkadot/api-derive/staking/erasSlashes.js
  var CACHE_KEY5 = "eraSlashes";
  function mapSlashes(era, noms, vals) {
    const nominators = {};
    const validators2 = {};
    noms.forEach(([key, optBalance]) => {
      nominators[key.args[1].toString()] = optBalance.unwrap();
    });
    vals.forEach(([key, optRes]) => {
      validators2[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
    });
    return { era, nominators, validators: validators2 };
  }
  function _eraSlashes(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY5, era, withActive);
      return cached ? of(cached) : combineLatest([
        api.query.staking.nominatorSlashInEra.entries(era),
        api.query.staking.validatorSlashInEra.entries(era)
      ]).pipe(map2(([n, v3]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v3))));
    });
  }
  var eraSlashes = /* @__PURE__ */ singleEra("_eraSlashes");
  var _erasSlashes = /* @__PURE__ */ combineEras("_eraSlashes");
  var erasSlashes = /* @__PURE__ */ erasHistoricApply("_erasSlashes");

  // ../../node_modules/@polkadot/api-derive/staking/keys.js
  function extractsIds(stashId, queuedKeys, nextKeys) {
    const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [void 0, []])[1];
    const nextSessionIds = nextKeys.unwrapOr([]);
    return {
      nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [...nextSessionIds.values()],
      sessionIds: Array.isArray(sessionIds) ? sessionIds : [...sessionIds.values()]
    };
  }
  var keys = /* @__PURE__ */ firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
  function keysMulti(instanceId, api) {
    return memo(instanceId, (stashIds) => stashIds.length ? api.query.session.queuedKeys().pipe(switchMap((queuedKeys) => combineLatest([
      of(queuedKeys),
      api.consts.session?.dedupKeyPrefix ? api.query.session.nextKeys.multi(stashIds.map((s) => [api.consts.session.dedupKeyPrefix, s])) : combineLatest(stashIds.map((s) => api.query.session.nextKeys(s)))
    ])), map2(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : of([]));
  }

  // ../../node_modules/@polkadot/api-derive/staking/overview.js
  function overview2(instanceId, api) {
    return memo(instanceId, () => combineLatest([
      api.derive.session.indexes(),
      api.derive.staking.validators()
    ]).pipe(map2(([indexes3, { nextElected: nextElected2, validators: validators2 }]) => objectSpread({}, indexes3, {
      nextElected: nextElected2,
      validators: validators2
    }))));
  }

  // ../../node_modules/@polkadot/api-derive/staking/ownExposure.js
  function _ownExposures(instanceId, api) {
    return memo(instanceId, (accountId2, eras, _withActive) => eras.length ? combineLatest([
      combineLatest(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId2))),
      combineLatest(eras.map((e) => api.query.staking.erasStakers(e, accountId2)))
    ]).pipe(map2(([clp, exp]) => eras.map((era, index) => ({ clipped: clp[index], era, exposure: exp[index] })))) : of([]));
  }
  var ownExposure = /* @__PURE__ */ firstMemo((api, accountId2, era) => api.derive.staking._ownExposures(accountId2, [era], true));
  var ownExposures = /* @__PURE__ */ erasHistoricApplyAccount("_ownExposures");

  // ../../node_modules/@polkadot/api-derive/staking/ownSlashes.js
  function _ownSlashes(instanceId, api) {
    return memo(instanceId, (accountId2, eras, _withActive) => eras.length ? combineLatest([
      combineLatest(eras.map((e) => api.query.staking.validatorSlashInEra(e, accountId2))),
      combineLatest(eras.map((e) => api.query.staking.nominatorSlashInEra(e, accountId2)))
    ]).pipe(map2(([vals, noms]) => eras.map((era, index) => ({
      era,
      total: vals[index].isSome ? vals[index].unwrap()[1] : noms[index].unwrapOrDefault()
    })))) : of([]));
  }
  var ownSlash = /* @__PURE__ */ firstMemo((api, accountId2, era) => api.derive.staking._ownSlashes(accountId2, [era], true));
  var ownSlashes = /* @__PURE__ */ erasHistoricApplyAccount("_ownSlashes");

  // ../../node_modules/@polkadot/api-derive/staking/query.js
  function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
    return {
      accountId: stashId,
      controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
      exposure,
      nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
      rewardDestination,
      stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
      stashId,
      validatorPrefs
    };
  }
  function getLedgers(api, optIds, { withLedger = false }) {
    const ids = optIds.filter((o) => withLedger && !!o && o.isSome).map((o) => o.unwrap());
    const emptyLed = api.registry.createType("Option<StakingLedger>");
    return (ids.length ? combineLatest(ids.map((s) => api.query.staking.ledger(s))) : of([])).pipe(map2((optLedgers) => {
      let offset2 = -1;
      return optIds.map((o) => o && o.isSome ? optLedgers[++offset2] || emptyLed : emptyLed);
    }));
  }
  function getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {
    const emptyNoms = api.registry.createType("Option<Nominations>");
    const emptyRewa = api.registry.createType("RewardDestination");
    const emptyExpo = api.registry.createType("Exposure");
    const emptyPrefs = api.registry.createType("ValidatorPrefs");
    return combineLatest([
      withController || withLedger ? combineLatest(stashIds.map((s) => api.query.staking.bonded(s))) : of(stashIds.map(() => null)),
      withNominations ? combineLatest(stashIds.map((s) => api.query.staking.nominators(s))) : of(stashIds.map(() => emptyNoms)),
      withDestination ? combineLatest(stashIds.map((s) => api.query.staking.payee(s))) : of(stashIds.map(() => emptyRewa)),
      withPrefs ? combineLatest(stashIds.map((s) => api.query.staking.validators(s))) : of(stashIds.map(() => emptyPrefs)),
      withExposure ? combineLatest(stashIds.map((s) => api.query.staking.erasStakers(activeEra, s))) : of(stashIds.map(() => emptyExpo))
    ]);
  }
  function getBatch(api, activeEra, stashIds, flags2) {
    return getStashInfo(api, stashIds, activeEra, flags2).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags2).pipe(map2((stakingLedgerOpts) => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
  }
  var query = /* @__PURE__ */ firstMemo((api, accountId2, flags2) => api.derive.staking.queryMulti([accountId2], flags2));
  function queryMulti(instanceId, api) {
    return memo(instanceId, (accountIds, flags2) => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => {
      const stashIds = accountIds.map((a) => api.registry.createType("AccountId", a));
      return stashIds.length ? getBatch(api, activeEra, stashIds, flags2) : of([]);
    })));
  }

  // ../../node_modules/@polkadot/api-derive/staking/stakerExposure.js
  function _stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => {
      const stakerIds = accountIds.map((a) => api.registry.createType("AccountId", a).toString());
      return api.derive.staking._erasExposure(eras, withActive).pipe(map2((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {
        const isValidator = !!allValidators[stakerId];
        const validators2 = {};
        const nominating = allNominators[stakerId] || [];
        if (isValidator) {
          validators2[stakerId] = allValidators[stakerId];
        } else if (nominating) {
          nominating.forEach(({ validatorId }) => {
            validators2[validatorId] = allValidators[validatorId];
          });
        }
        return { era, isEmpty: !Object.keys(validators2).length, isValidator, nominating, validators: validators2 };
      }))));
    });
  }
  function stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
  }
  var stakerExposure = /* @__PURE__ */ firstMemo((api, accountId2, withActive) => api.derive.staking.stakerExposures([accountId2], withActive));

  // ../../node_modules/@polkadot/api-derive/staking/stakerPoints.js
  function _stakerPoints(instanceId, api) {
    return memo(instanceId, (accountId2, eras, withActive) => {
      const stakerId = api.registry.createType("AccountId", accountId2).toString();
      return api.derive.staking._erasPoints(eras, withActive).pipe(map2((points) => points.map(({ era, eraPoints, validators: validators2 }) => ({
        era,
        eraPoints,
        points: validators2[stakerId] || api.registry.createType("RewardPoint")
      }))));
    });
  }
  var stakerPoints = /* @__PURE__ */ erasHistoricApplyAccount("_stakerPoints");

  // ../../node_modules/@polkadot/api-derive/staking/stakerPrefs.js
  function _stakerPrefs(instanceId, api) {
    return memo(instanceId, (accountId2, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map((e) => [e, accountId2])).pipe(map2((all3) => all3.map((validatorPrefs, index) => ({
      era: eras[index],
      validatorPrefs
    })))));
  }
  var stakerPrefs = /* @__PURE__ */ erasHistoricApplyAccount("_stakerPrefs");

  // ../../node_modules/@polkadot/api-derive/staking/stakerRewards.js
  function parseRewards(api, stashId, [erasPoints2, erasPrefs2, erasRewards2], exposures) {
    return exposures.map(({ era, isEmpty, isValidator, nominating, validators: eraValidators }) => {
      const { eraPoints, validators: allValPoints } = erasPoints2.find((p) => p.era.eq(era)) || { eraPoints: BN_ZERO, validators: {} };
      const { eraReward } = erasRewards2.find((r) => r.era.eq(era)) || { eraReward: api.registry.createType("Balance") };
      const { validators: allValPrefs } = erasPrefs2.find((p) => p.era.eq(era)) || { validators: {} };
      const validators2 = {};
      const stakerId = stashId.toString();
      Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
        const valPoints = allValPoints[validatorId] || BN_ZERO;
        const valComm = allValPrefs[validatorId]?.commission.unwrap() || BN_ZERO;
        const expTotal = exposure.total?.unwrap() || BN_ZERO;
        let avail = BN_ZERO;
        let value;
        if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
          avail = eraReward.mul(valPoints).div(eraPoints);
          const valCut = valComm.mul(avail).div(BN_BILLION);
          let staked;
          if (validatorId === stakerId) {
            staked = exposure.own.unwrap();
          } else {
            const stakerExp = exposure.others.find(({ who }) => who.eq(stakerId));
            staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;
          }
          value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);
        }
        validators2[validatorId] = {
          total: api.registry.createType("Balance", avail),
          value: api.registry.createType("Balance", value)
        };
      });
      return {
        era,
        eraReward,
        isEmpty,
        isValidator,
        nominating,
        validators: validators2
      };
    });
  }
  function allUniqValidators(rewards) {
    return rewards.reduce(([all3, perStash], rewards2) => {
      const uniq = [];
      perStash.push(uniq);
      rewards2.forEach(({ validators: validators2 }) => Object.keys(validators2).forEach((validatorId) => {
        if (!uniq.includes(validatorId)) {
          uniq.push(validatorId);
          if (!all3.includes(validatorId)) {
            all3.push(validatorId);
          }
        }
      }));
      return [all3, perStash];
    }, [[], []]);
  }
  function removeClaimed(validators2, queryValidators, reward) {
    const rm = [];
    Object.keys(reward.validators).forEach((validatorId) => {
      const index = validators2.indexOf(validatorId);
      if (index !== -1) {
        const valLedger = queryValidators[index].stakingLedger;
        if (valLedger?.claimedRewards.some((e) => reward.era.eq(e))) {
          rm.push(validatorId);
        }
      }
    });
    rm.forEach((validatorId) => {
      delete reward.validators[validatorId];
    });
  }
  function filterRewards(eras, valInfo, { rewards, stakingLedger }) {
    const filter2 = eras.filter((e) => !stakingLedger.claimedRewards.some((s) => s.eq(e)));
    const validators2 = valInfo.map(([v3]) => v3);
    const queryValidators = valInfo.map(([, q]) => q);
    return rewards.filter(({ isEmpty }) => !isEmpty).filter((reward) => {
      if (!filter2.some((e) => reward.era.eq(e))) {
        return false;
      }
      removeClaimed(validators2, queryValidators, reward);
      return true;
    }).filter(({ validators: validators3 }) => Object.keys(validators3).length !== 0).map((reward) => objectSpread({}, reward, {
      nominators: reward.nominating.filter((n) => reward.validators[n.validatorId])
    }));
  }
  function _stakerRewardsEras(instanceId, api) {
    return memo(instanceId, (eras, withActive = false) => combineLatest([
      api.derive.staking._erasPoints(eras, withActive),
      api.derive.staking._erasPrefs(eras, withActive),
      api.derive.staking._erasRewards(eras, withActive)
    ]));
  }
  function _stakerRewards(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => combineLatest([
      api.derive.staking.queryMulti(accountIds, { withLedger: true }),
      api.derive.staking._stakerExposures(accountIds, eras, withActive),
      api.derive.staking._stakerRewardsEras(eras, withActive)
    ]).pipe(switchMap(([queries, exposures, erasResult]) => {
      const allRewards = queries.map(({ stakingLedger, stashId }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));
      if (withActive) {
        return of(allRewards);
      }
      const [allValidators, stashValidators] = allUniqValidators(allRewards);
      return api.derive.staking.queryMulti(allValidators, { withLedger: true }).pipe(map2((queriedVals) => queries.map(({ stakingLedger }, index) => filterRewards(eras, stashValidators[index].map((validatorId) => [
        validatorId,
        queriedVals.find((q) => q.accountId.eq(validatorId))
      ]), {
        rewards: allRewards[index],
        stakingLedger
      }))));
    })));
  }
  var stakerRewards = /* @__PURE__ */ firstMemo((api, accountId2, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerRewards([accountId2], eras, withActive))));
  function stakerRewardsMultiEras(instanceId, api) {
    return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));
  }
  function stakerRewardsMulti(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
  }

  // ../../node_modules/@polkadot/api-derive/staking/stakerSlashes.js
  function _stakerSlashes(instanceId, api) {
    return memo(instanceId, (accountId2, eras, withActive) => {
      const stakerId = api.registry.createType("AccountId", accountId2).toString();
      return api.derive.staking._erasSlashes(eras, withActive).pipe(map2((slashes) => slashes.map(({ era, nominators, validators: validators2 }) => ({
        era,
        total: nominators[stakerId] || validators2[stakerId] || api.registry.createType("Balance")
      }))));
    });
  }
  var stakerSlashes = /* @__PURE__ */ erasHistoricApplyAccount("_stakerSlashes");

  // ../../node_modules/@polkadot/api-derive/staking/stashes.js
  function onBondedEvent(api) {
    let current = Date.now();
    return api.query.system.events().pipe(map2((events2) => {
      current = events2.filter(({ event, phase }) => {
        try {
          return phase.isApplyExtrinsic && event.section === "staking" && event.method === "Bonded";
        } catch {
          return false;
        }
      }) ? Date.now() : current;
      return current;
    }), startWith(current), drr({ skipTimeout: true }));
  }
  function stashes(instanceId, api) {
    return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map2((keys2) => keys2.map(({ args: [v3] }) => v3).filter((a) => a))));
  }

  // ../../node_modules/@polkadot/api-derive/staking/validators.js
  function nextElected(instanceId, api) {
    return memo(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe(
      switchMap(({ currentEra }) => api.query.staking.erasStakers.keys(currentEra)),
      map2((keys2) => keys2.map(({ args: [, accountId2] }) => accountId2))
    ) : api.query.staking.currentElected());
  }
  function validators(instanceId, api) {
    return memo(instanceId, () => combineLatest([
      api.query.session ? api.query.session.validators() : of([]),
      api.query.staking ? api.derive.staking.nextElected() : of([])
    ]).pipe(map2(([validators2, nextElected2]) => ({
      nextElected: nextElected2.length ? nextElected2 : validators2,
      validators: validators2
    }))));
  }

  // ../../node_modules/@polkadot/api-derive/staking/waitingInfo.js
  var DEFAULT_FLAGS2 = { withController: true, withPrefs: true };
  function waitingInfo(instanceId, api) {
    return memo(instanceId, (flags2 = DEFAULT_FLAGS2) => combineLatest([
      api.derive.staking.validators(),
      api.derive.staking.stashes()
    ]).pipe(switchMap(([{ nextElected: nextElected2 }, stashes2]) => {
      const elected = nextElected2.map((a) => a.toString());
      const waiting = stashes2.filter((v3) => !elected.includes(v3.toString()));
      return api.derive.staking.queryMulti(waiting, flags2).pipe(map2((info6) => ({
        info: info6,
        waiting
      })));
    })));
  }

  // ../../node_modules/@polkadot/api-derive/technicalCommittee/index.js
  var technicalCommittee_exports = {};
  __export(technicalCommittee_exports, {
    hasProposals: () => hasProposals5,
    members: () => members6,
    prime: () => prime5,
    proposal: () => proposal5,
    proposalCount: () => proposalCount5,
    proposalHashes: () => proposalHashes5,
    proposals: () => proposals6
  });
  var members6 = /* @__PURE__ */ members("technicalCommittee");
  var hasProposals5 = /* @__PURE__ */ hasProposals("technicalCommittee");
  var proposal5 = /* @__PURE__ */ proposal("technicalCommittee");
  var proposalCount5 = /* @__PURE__ */ proposalCount("technicalCommittee");
  var proposalHashes5 = /* @__PURE__ */ proposalHashes("technicalCommittee");
  var proposals6 = /* @__PURE__ */ proposals("technicalCommittee");
  var prime5 = /* @__PURE__ */ prime("technicalCommittee");

  // ../../node_modules/@polkadot/api-derive/treasury/index.js
  var treasury_exports = {};
  __export(treasury_exports, {
    proposals: () => proposals7
  });

  // ../../node_modules/@polkadot/api-derive/treasury/proposals.js
  function parseResult3(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount6 }) {
    const approvals = [];
    const proposals8 = [];
    const councilTreasury = councilProposals.filter(({ proposal: proposal6 }) => proposal6 && (api.tx.treasury.approveProposal.is(proposal6) || api.tx.treasury.rejectProposal.is(proposal6)));
    allIds.forEach((id, index) => {
      if (allProposals[index].isSome) {
        const council = councilTreasury.filter(({ proposal: proposal6 }) => proposal6 && id.eq(proposal6.args[0])).sort((a, b) => a.proposal && b.proposal ? a.proposal.method.localeCompare(b.proposal.method) : a.proposal ? -1 : 1);
        const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));
        const derived = { council, id, proposal: allProposals[index].unwrap() };
        if (isApproval) {
          approvals.push(derived);
        } else {
          proposals8.push(derived);
        }
      }
    });
    return { approvals, proposalCount: proposalCount6, proposals: proposals8 };
  }
  function retrieveProposals(api, proposalCount6, approvalIds) {
    const proposalIds = [];
    const count = proposalCount6.toNumber();
    for (let index = 0; index < count; index++) {
      if (!approvalIds.some((id) => id.eqn(index))) {
        proposalIds.push(api.registry.createType("ProposalIndex", index));
      }
    }
    const allIds = [...proposalIds, ...approvalIds];
    return combineLatest([
      api.query.treasury.proposals.multi(allIds),
      api.derive.council ? api.derive.council.proposals() : of([])
    ]).pipe(map2(([allProposals, councilProposals]) => parseResult3(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount6 })));
  }
  function proposals7(instanceId, api) {
    return memo(instanceId, () => api.query.treasury ? combineLatest([
      api.query.treasury.proposalCount(),
      api.query.treasury.approvals()
    ]).pipe(switchMap(([proposalCount6, approvalIds]) => retrieveProposals(api, proposalCount6, approvalIds))) : of({
      approvals: [],
      proposalCount: api.registry.createType("ProposalIndex"),
      proposals: []
    }));
  }

  // ../../node_modules/@polkadot/api-derive/tx/index.js
  var tx_exports = {};
  __export(tx_exports, {
    events: () => events,
    signingInfo: () => signingInfo
  });

  // ../../node_modules/@polkadot/api-derive/tx/events.js
  function events(instanceId, api) {
    return memo(instanceId, (blockHash) => combineLatest([
      api.rpc.chain.getBlock(blockHash),
      api.queryAt(blockHash).pipe(switchMap((queryAt) => queryAt.system.events()))
    ]).pipe(map2(([block, events2]) => ({ block, events: events2 }))));
  }

  // ../../node_modules/@polkadot/api-derive/tx/constants.js
  var FALLBACK_MAX_HASH_COUNT = 250;
  var FALLBACK_PERIOD = new import_bn.default(6 * 1e3);
  var MAX_FINALITY_LAG = new import_bn.default(5);
  var MORTAL_PERIOD = new import_bn.default(5 * 60 * 1e3);

  // ../../node_modules/@polkadot/api-derive/tx/signingInfo.js
  function latestNonce(api, address) {
    return api.derive.balances.account(address).pipe(map2(({ accountNonce }) => accountNonce));
  }
  function nextNonce(api, address) {
    return api.rpc.system?.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
  }
  function signingHeader(api) {
    return combineLatest([
      api.rpc.chain.getHeader().pipe(switchMap((header) => header.parentHash.isEmpty ? of(header) : api.rpc.chain.getHeader(header.parentHash).pipe(catchError(() => of(header))))),
      api.rpc.chain.getFinalizedHead().pipe(switchMap((hash4) => api.rpc.chain.getHeader(hash4).pipe(catchError(() => of(null)))))
    ]).pipe(map2(([current, finalized]) => !finalized || unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG) ? current : finalized));
  }
  function signingInfo(_instanceId, api) {
    return (address, nonce, era) => combineLatest([
      isUndefined(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType("Index", nonce)),
      isUndefined(era) || isNumber(era) && era > 0 ? signingHeader(api) : of(null)
    ]).pipe(map2(([nonce2, header]) => ({
      header,
      mortalLength: Math.min(api.consts.system?.blockHashCount?.toNumber() || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(api.consts.babe?.expectedBlockTime || api.consts.timestamp?.minimumPeriod.muln(2) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
      nonce: nonce2
    })));
  }

  // ../../node_modules/@polkadot/api-derive/derive.js
  var derive = { accounts: accounts_exports, alliance: alliance_exports, bagsList: bagsList_exports, balances: balances_exports, bounties: bounties_exports, chain: chain_exports, contracts: contracts_exports, council: council_exports, crowdloan: crowdloan_exports, democracy: democracy_exports, elections: elections_exports, imOnline: imOnline_exports, membership: membership_exports, parachains: parachains_exports, session: session_exports, society: society_exports, staking: staking_exports, technicalCommittee: technicalCommittee_exports, treasury: treasury_exports, tx: tx_exports };

  // ../../node_modules/@polkadot/api-derive/bundle.js
  var checks = {
    allianceMotion: {
      instances: ["allianceMotion"],
      methods: []
    },
    bagsList: {
      instances: ["voterBagsList", "voterList", "bagsList"],
      methods: [],
      withDetect: true
    },
    contracts: {
      instances: ["contracts"],
      methods: []
    },
    council: {
      instances: ["council"],
      methods: [],
      withDetect: true
    },
    crowdloan: {
      instances: ["crowdloan"],
      methods: []
    },
    democracy: {
      instances: ["democracy"],
      methods: []
    },
    elections: {
      instances: ["phragmenElection", "electionsPhragmen", "elections", "council"],
      methods: [],
      withDetect: true
    },
    imOnline: {
      instances: ["imOnline"],
      methods: []
    },
    membership: {
      instances: ["membership"],
      methods: []
    },
    parachains: {
      instances: ["parachains", "registrar"],
      methods: []
    },
    session: {
      instances: ["session"],
      methods: []
    },
    society: {
      instances: ["society"],
      methods: []
    },
    staking: {
      instances: ["staking"],
      methods: ["erasRewardPoints"]
    },
    technicalCommittee: {
      instances: ["technicalCommittee"],
      methods: [],
      withDetect: true
    },
    treasury: {
      instances: ["treasury"],
      methods: []
    }
  };
  function getModuleInstances(api, specName, moduleName) {
    return api.registry.getModuleInstances(specName, moduleName) || [];
  }
  function injectFunctions(instanceId, api, derives) {
    const result = {};
    const names = Object.keys(derives);
    const keys2 = Object.keys(api.query);
    const specName = api.runtimeVersion.specName;
    const filterKeys = (q) => keys2.includes(q);
    const filterInstances = (q) => getModuleInstances(api, specName, q).some(filterKeys);
    const filterMethods = (all3) => (m) => all3.some((q) => keys2.includes(q) && api.query[q][m]);
    const getKeys2 = (s) => Object.keys(derives[s]);
    const creator = (s, m) => derives[s][m](instanceId, api);
    const isIncluded = (c2) => !checks[c2] || (checks[c2].instances.some(filterKeys) && (!checks[c2].methods.length || checks[c2].methods.every(filterMethods(checks[c2].instances))) || checks[c2].withDetect && checks[c2].instances.some(filterInstances));
    for (let i = 0, count = names.length; i < count; i++) {
      const name = names[i];
      isIncluded(name) && lazyDeriveSection(result, name, getKeys2, creator);
    }
    return result;
  }
  function getAvailableDerives(instanceId, api, custom = {}) {
    return {
      ...injectFunctions(instanceId, api, derive),
      ...injectFunctions(instanceId, api, custom)
    };
  }

  // ../../node_modules/@polkadot/api/util/decorate.js
  function decorateDeriveSections(decorateMethod, derives) {
    const getKeys2 = (s) => Object.keys(derives[s]);
    const creator = (s, m) => decorateMethod(derives[s][m]);
    const result = {};
    const names = Object.keys(derives);
    for (let i = 0, count = names.length; i < count; i++) {
      lazyDeriveSection(result, names[i], getKeys2, creator);
    }
    return result;
  }

  // ../../node_modules/@polkadot/api/submittable/Result.js
  var recordIdentity = (record) => record;
  function filterAndApply(events2, section2, methods, onFound) {
    return events2.filter(({ event }) => section2 === event.section && methods.includes(event.method)).map((record) => onFound(record));
  }
  function getDispatchError({ event: { data: [dispatchError] } }) {
    return dispatchError;
  }
  function getDispatchInfo({ event: { data, method } }) {
    return method === "ExtrinsicSuccess" ? data[0] : data[1];
  }
  function extractError(events2 = []) {
    return filterAndApply(events2, "system", ["ExtrinsicFailed"], getDispatchError)[0];
  }
  function extractInfo(events2 = []) {
    return filterAndApply(events2, "system", ["ExtrinsicFailed", "ExtrinsicSuccess"], getDispatchInfo)[0];
  }
  var SubmittableResult = class {
    constructor({ blockNumber, dispatchError, dispatchInfo, events: events2, internalError, status, txHash, txIndex }) {
      this.dispatchError = dispatchError || extractError(events2);
      this.dispatchInfo = dispatchInfo || extractInfo(events2);
      this.events = events2 || [];
      this.internalError = internalError;
      this.status = status;
      this.txHash = txHash;
      this.txIndex = txIndex;
      this.blockNumber = blockNumber;
    }
    get isCompleted() {
      return this.isError || this.status.isInBlock || this.status.isFinalized;
    }
    get isError() {
      return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
    }
    get isFinalized() {
      return this.status.isFinalized;
    }
    get isInBlock() {
      return this.status.isInBlock;
    }
    get isWarning() {
      return this.status.isRetracted;
    }
    filterRecords(section2, method) {
      return filterAndApply(this.events, section2, Array.isArray(method) ? method : [method], recordIdentity);
    }
    findRecord(section2, method) {
      return this.filterRecords(section2, method)[0];
    }
    toHuman(isExtended) {
      return {
        dispatchError: this.dispatchError?.toHuman(),
        dispatchInfo: this.dispatchInfo?.toHuman(),
        events: this.events.map((e) => e.toHuman(isExtended)),
        internalError: this.internalError?.message.toString(),
        status: this.status.toHuman(isExtended)
      };
    }
  };

  // ../../node_modules/@polkadot/api/submittable/createClass.js
  function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
    if (!header) {
      if (partialOptions.era && !partialOptions.blockHash) {
        throw new Error("Expected blockHash to be passed alongside non-immortal era options");
      }
      if (isNumber(partialOptions.era)) {
        delete partialOptions.era;
        delete partialOptions.blockHash;
      }
      return makeSignOptions(api, partialOptions, { nonce });
    }
    return makeSignOptions(api, partialOptions, {
      blockHash: header.hash,
      era: registry.createTypeUnsafe("ExtrinsicEra", [{
        current: header.number,
        period: partialOptions.era || mortalLength
      }]),
      nonce
    });
  }
  function makeSignAndSendOptions(partialOptions, statusCb) {
    let options = {};
    if (isFunction(partialOptions)) {
      statusCb = partialOptions;
    } else {
      options = objectSpread({}, partialOptions);
    }
    return [options, statusCb];
  }
  function makeSignOptions(api, partialOptions, extras) {
    return objectSpread({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });
  }
  function optionsOrNonce(partialOptions = {}) {
    return isBn(partialOptions) || isNumber(partialOptions) ? { nonce: partialOptions } : partialOptions;
  }
  function createClass({ api, apiType, blockHash, decorateMethod }) {
    const ExtrinsicBase2 = api.registry.createClass("Extrinsic");
    class Submittable extends ExtrinsicBase2 {
      constructor(registry, extrinsic) {
        super(registry, extrinsic, { version: api.extrinsicType });
        this.__internal__transformResult = identity;
        this.__internal__observeSign = (account3, partialOptions) => {
          const address = isKeyringPair(account3) ? account3.address : account3.toString();
          const options = optionsOrNonce(partialOptions);
          return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async (signingInfo2) => {
            const eraOptions = makeEraOptions(api, this.registry, options, signingInfo2);
            let updateId = -1;
            if (isKeyringPair(account3)) {
              this.sign(account3, eraOptions);
            } else {
              updateId = await this.__internal__signViaSigner(address, eraOptions, signingInfo2.header);
            }
            return { options: eraOptions, updateId };
          }));
        };
        this.__internal__observeStatus = (txHash, status) => {
          if (!status.isFinalized && !status.isInBlock) {
            return of(this.__internal__transformResult(new SubmittableResult({
              status,
              txHash
            })));
          }
          const blockHash2 = status.isInBlock ? status.asInBlock : status.asFinalized;
          return api.derive.tx.events(blockHash2).pipe(map2(({ block, events: events2 }) => this.__internal__transformResult(new SubmittableResult({
            ...filterEvents(txHash, block, events2, status),
            status,
            txHash
          }))), catchError((internalError) => of(this.__internal__transformResult(new SubmittableResult({
            internalError,
            status,
            txHash
          })))));
        };
        this.__internal__observeSend = (info6) => {
          return api.rpc.author.submitExtrinsic(this).pipe(tap((hash4) => {
            this.__internal__updateSigner(hash4, info6);
          }));
        };
        this.__internal__observeSubscribe = (info6) => {
          const txHash = this.hash;
          return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap((status) => this.__internal__observeStatus(txHash, status)), tap((status) => {
            this.__internal__updateSigner(status, info6);
          }));
        };
        this.__internal__signViaSigner = async (address, options, header) => {
          const signer = options.signer || api.signer;
          if (!signer) {
            throw new Error("No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
          }
          const payload = this.registry.createTypeUnsafe("SignerPayload", [objectSpread({}, options, {
            address,
            blockNumber: header ? header.number : 0,
            method: this.method
          })]);
          let result;
          if (isFunction(signer.signPayload)) {
            result = await signer.signPayload(payload.toPayload());
          } else if (isFunction(signer.signRaw)) {
            result = await signer.signRaw(payload.toRaw());
          } else {
            throw new Error("Invalid signer interface, it should implement either signPayload or signRaw (or both)");
          }
          super.addSignature(address, result.signature, payload.toPayload());
          return result.id;
        };
        this.__internal__updateSigner = (status, info6) => {
          if (info6 && info6.updateId !== -1) {
            const { options, updateId } = info6;
            const signer = options.signer || api.signer;
            if (signer && isFunction(signer.update)) {
              signer.update(updateId, status);
            }
          }
        };
        this.__internal__ignoreStatusCb = apiType === "rxjs";
      }
      get hasDryRun() {
        return isFunction(api.rpc.system?.dryRun);
      }
      get hasPaymentInfo() {
        return isFunction(api.call.transactionPaymentApi?.queryInfo);
      }
      dryRun(account3, optionsOrHash) {
        if (!this.hasDryRun) {
          throw new Error("The system.dryRun RPC call is not available in your environment");
        }
        if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
          return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
        }
        return decorateMethod(() => this.__internal__observeSign(account3, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
      }
      paymentInfo(account3, optionsOrHash) {
        if (!this.hasPaymentInfo) {
          throw new Error("The transactionPaymentApi.queryInfo runtime call is not available in your environment");
        }
        if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
          return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap((callAt) => {
            const u8a2 = this.toU8a();
            return callAt.transactionPaymentApi.queryInfo(u8a2, u8a2.length);
          })));
        }
        const [allOptions] = makeSignAndSendOptions(optionsOrHash);
        const address = isKeyringPair(account3) ? account3.address : account3.toString();
        return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap((signingInfo2) => {
          const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo2);
          const signOptions = makeSignOptions(api, eraOptions, {});
          const u8a2 = this.isSigned ? api.tx(this).signFake(address, signOptions).toU8a() : this.signFake(address, signOptions).toU8a();
          return api.call.transactionPaymentApi.queryInfo(u8a2, u8a2.length);
        })))();
      }
      send(statusCb) {
        const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
        return decorateMethod(isSubscription2 ? this.__internal__observeSubscribe : this.__internal__observeSend)(statusCb);
      }
      signAsync(account3, partialOptions) {
        return decorateMethod(() => this.__internal__observeSign(account3, partialOptions).pipe(map2(() => this)))();
      }
      signAndSend(account3, partialOptions, optionalStatusCb) {
        const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
        const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
        return decorateMethod(
          () => this.__internal__observeSign(account3, options).pipe(switchMap((info6) => isSubscription2 ? this.__internal__observeSubscribe(info6) : this.__internal__observeSend(info6)))
        )(statusCb);
      }
      withResultTransform(transform) {
        this.__internal__transformResult = transform;
        return this;
      }
    }
    return Submittable;
  }

  // ../../node_modules/@polkadot/api/submittable/createSubmittable.js
  function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
    const Submittable = createClass({ api, apiType, blockHash, decorateMethod });
    return (extrinsic) => new Submittable(registry || api.registry, extrinsic);
  }

  // ../../node_modules/@polkadot/api/base/find.js
  function findCall(registry, callIndex) {
    return registry.findMetaCall(u8aToU8a(callIndex));
  }
  function findError(registry, errorIndex) {
    return registry.findMetaError(u8aToU8a(errorIndex));
  }

  // ../../node_modules/@polkadot/types-known/chain/index.js
  var typesChain = {};

  // ../../node_modules/@polkadot/types-known/spec/centrifuge-chain.js
  var sharedTypes = {
    AnchorData: {
      anchoredBlock: "u64",
      docRoot: "H256",
      id: "H256"
    },
    DispatchErrorModule: "DispatchErrorModuleU8",
    PreCommitData: {
      expirationBlock: "u64",
      identity: "H256",
      signingRoot: "H256"
    },
    Fee: {
      key: "Hash",
      price: "Balance"
    },
    MultiAccountData: {
      deposit: "Balance",
      depositor: "AccountId",
      signatories: "Vec<AccountId>",
      threshold: "u16"
    },
    ChainId: "u8",
    DepositNonce: "u64",
    ResourceId: "[u8; 32]",
    "chainbridge::ChainId": "u8",
    RegistryId: "H160",
    TokenId: "U256",
    AssetId: {
      registryId: "RegistryId",
      tokenId: "TokenId"
    },
    AssetInfo: {
      metadata: "Bytes"
    },
    MintInfo: {
      anchorId: "Hash",
      proofs: "Vec<ProofMint>",
      staticHashes: "[Hash; 3]"
    },
    Proof: {
      leafHash: "H256",
      sortedHashes: "H256"
    },
    ProofMint: {
      hashes: "Vec<Hash>",
      property: "Bytes",
      salt: "[u8; 32]",
      value: "Bytes"
    },
    RegistryInfo: {
      fields: "Vec<Bytes>",
      ownerCanBurn: "bool"
    },
    ProxyType: {
      _enum: [
        "Any",
        "NonTransfer",
        "Governance",
        "Staking",
        "NonProxy"
      ]
    }
  };
  var standaloneTypes = {
    ...sharedTypes,
    AccountInfo: "AccountInfoWithRefCount",
    Address: "LookupSource",
    LookupSource: "IndicesLookupSource",
    Multiplier: "Fixed64",
    RefCount: "RefCountTo259"
  };
  var versioned = [
    {
      minmax: [240, 243],
      types: {
        ...standaloneTypes,
        ProxyType: {
          _enum: [
            "Any",
            "NonTransfer",
            "Governance",
            "Staking",
            "Vesting"
          ]
        }
      }
    },
    {
      minmax: [244, 999],
      types: { ...standaloneTypes }
    },
    {
      minmax: [1e3, void 0],
      types: { ...sharedTypes }
    }
  ];

  // ../../node_modules/@polkadot/types-known/spec/kusama.js
  var sharedTypes2 = {
    CompactAssignments: "CompactAssignmentsWith24",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith24",
    Keys: "SessionKeys6",
    ProxyType: {
      _enum: ["Any", "NonTransfer", "Governance", "Staking", "IdentityJudgement", "CancelProxy", "Auction"]
    },
    Weight: "WeightV1"
  };
  var addrIndicesTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "LookupSource",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys5",
    LookupSource: "IndicesLookupSource",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
  };
  var addrAccountIdTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys5",
    LookupSource: "AccountId",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
  };
  var versioned2 = [
    {
      minmax: [1019, 1031],
      types: {
        ...addrIndicesTypes,
        BalanceLock: "BalanceLockTo212",
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchError: "DispatchErrorTo198",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        IdentityInfo: "IdentityInfoTo198",
        Keys: "SessionKeys5",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        SlashingSpans: "SlashingSpansTo204",
        StakingLedger: "StakingLedgerTo223",
        Votes: "VotesTo230",
        Weight: "u32"
      }
    },
    {
      minmax: [1032, 1042],
      types: {
        ...addrIndicesTypes,
        BalanceLock: "BalanceLockTo212",
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Keys: "SessionKeys5",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        SlashingSpans: "SlashingSpansTo204",
        StakingLedger: "StakingLedgerTo223",
        Votes: "VotesTo230",
        Weight: "u32"
      }
    },
    {
      minmax: [1043, 1045],
      types: {
        ...addrIndicesTypes,
        BalanceLock: "BalanceLockTo212",
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Keys: "SessionKeys5",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        StakingLedger: "StakingLedgerTo223",
        Votes: "VotesTo230",
        Weight: "u32"
      }
    },
    {
      minmax: [1046, 1049],
      types: {
        ...sharedTypes2,
        ...addrAccountIdTypes,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        StakingLedger: "StakingLedgerTo223",
        Weight: "u32"
      }
    },
    {
      minmax: [1050, 1054],
      types: {
        ...sharedTypes2,
        ...addrAccountIdTypes,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        StakingLedger: "StakingLedgerTo240",
        Weight: "u32"
      }
    },
    {
      minmax: [1055, 1056],
      types: {
        ...sharedTypes2,
        ...addrAccountIdTypes,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        Scheduled: "ScheduledTo254",
        StakingLedger: "StakingLedgerTo240",
        Weight: "u32"
      }
    },
    {
      minmax: [1057, 1061],
      types: {
        ...sharedTypes2,
        ...addrAccountIdTypes,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        Scheduled: "ScheduledTo254"
      }
    },
    {
      minmax: [1062, 2012],
      types: {
        ...sharedTypes2,
        ...addrAccountIdTypes,
        CompactAssignments: "CompactAssignmentsTo257",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [2013, 2022],
      types: {
        ...sharedTypes2,
        ...addrAccountIdTypes,
        CompactAssignments: "CompactAssignmentsTo257",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [2023, 2024],
      types: {
        ...sharedTypes2,
        ...addrAccountIdTypes,
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [2025, 2027],
      types: {
        ...sharedTypes2,
        ...addrAccountIdTypes
      }
    },
    {
      minmax: [2028, 2029],
      types: {
        ...sharedTypes2,
        AccountInfo: "AccountInfoWithDualRefCount",
        CompactAssignments: "CompactAssignmentsWith16",
        RawSolution: "RawSolutionWith16"
      }
    },
    {
      minmax: [2030, 9e3],
      types: {
        ...sharedTypes2,
        CompactAssignments: "CompactAssignmentsWith16",
        RawSolution: "RawSolutionWith16"
      }
    },
    {
      minmax: [9010, 9099],
      types: {
        ...sharedTypes2,
        ...mapXcmTypes("V0")
      }
    },
    {
      minmax: [9100, 9105],
      types: {
        ...sharedTypes2,
        ...mapXcmTypes("V1")
      }
    },
    {
      minmax: [9106, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
  ];

  // ../../node_modules/@polkadot/types-known/spec/node.js
  var versioned3 = [
    {
      minmax: [0, void 0],
      types: {
        Weight: "WeightV2"
      }
    }
  ];

  // ../../node_modules/@polkadot/types-known/spec/node-template.js
  var versioned4 = [
    {
      minmax: [0, void 0],
      types: {
        Weight: "WeightV2"
      }
    }
  ];

  // ../../node_modules/@polkadot/types-known/spec/polkadot.js
  var sharedTypes3 = {
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys6",
    ProxyType: {
      _enum: {
        Any: 0,
        NonTransfer: 1,
        Governance: 2,
        Staking: 3,
        UnusedSudoBalances: 4,
        IdentityJudgement: 5,
        CancelProxy: 6,
        Auction: 7
      }
    },
    Weight: "WeightV1"
  };
  var addrAccountIdTypes2 = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    DispatchErrorModule: "DispatchErrorModuleU8",
    Keys: "SessionKeys5",
    LookupSource: "AccountId",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
  };
  var versioned5 = [
    {
      minmax: [0, 12],
      types: {
        ...sharedTypes3,
        ...addrAccountIdTypes2,
        CompactAssignments: "CompactAssignmentsTo257",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [13, 22],
      types: {
        ...sharedTypes3,
        ...addrAccountIdTypes2,
        CompactAssignments: "CompactAssignmentsTo257",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [23, 24],
      types: {
        ...sharedTypes3,
        ...addrAccountIdTypes2,
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [25, 27],
      types: {
        ...sharedTypes3,
        ...addrAccountIdTypes2
      }
    },
    {
      minmax: [28, 29],
      types: {
        ...sharedTypes3,
        AccountInfo: "AccountInfoWithDualRefCount"
      }
    },
    {
      minmax: [30, 9109],
      types: {
        ...sharedTypes3
      }
    },
    {
      minmax: [9110, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
  ];

  // ../../node_modules/@polkadot/types-known/spec/rococo.js
  var sharedTypes4 = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    FullIdentification: "()",
    Keys: "SessionKeys7B",
    Weight: "WeightV1"
  };
  var versioned6 = [
    {
      minmax: [0, 200],
      types: {
        ...sharedTypes4,
        AccountInfo: "AccountInfoWithDualRefCount",
        Address: "AccountId",
        LookupSource: "AccountId"
      }
    },
    {
      minmax: [201, 214],
      types: {
        ...sharedTypes4,
        AccountInfo: "AccountInfoWithDualRefCount"
      }
    },
    {
      minmax: [215, 228],
      types: {
        ...sharedTypes4,
        Keys: "SessionKeys6"
      }
    },
    {
      minmax: [229, 9099],
      types: {
        ...sharedTypes4,
        ...mapXcmTypes("V0")
      }
    },
    {
      minmax: [9100, 9105],
      types: {
        ...sharedTypes4,
        ...mapXcmTypes("V1")
      }
    },
    {
      minmax: [9106, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
  ];

  // ../../node_modules/@polkadot/types-known/spec/shell.js
  var versioned7 = [
    {
      minmax: [0, void 0],
      types: {}
    }
  ];

  // ../../node_modules/@polkadot/types-known/spec/statemint.js
  var sharedTypes5 = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    TAssetBalance: "u128",
    ProxyType: {
      _enum: [
        "Any",
        "NonTransfer",
        "CancelProxy",
        "Assets",
        "AssetOwner",
        "AssetManager",
        "Staking"
      ]
    },
    Weight: "WeightV1"
  };
  var versioned8 = [
    {
      minmax: [0, 3],
      types: {
        DispatchError: "DispatchErrorPre6First",
        ...sharedTypes5,
        ...mapXcmTypes("V0")
      }
    },
    {
      minmax: [4, 5],
      types: {
        DispatchError: "DispatchErrorPre6First",
        ...sharedTypes5,
        ...mapXcmTypes("V1")
      }
    },
    {
      minmax: [500, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
  ];

  // ../../node_modules/@polkadot/types-known/spec/westend.js
  var sharedTypes6 = {
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys6",
    ProxyType: {
      _enum: ["Any", "NonTransfer", "Staking", "SudoBalances", "IdentityJudgement", "CancelProxy"]
    },
    Weight: "WeightV1"
  };
  var addrAccountIdTypes3 = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    LookupSource: "AccountId",
    Keys: "SessionKeys5",
    RawSolution: "RawSolutionWith16",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
  };
  var versioned9 = [
    {
      minmax: [1, 2],
      types: {
        ...sharedTypes6,
        ...addrAccountIdTypes3,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        Weight: "u32"
      }
    },
    {
      minmax: [3, 22],
      types: {
        ...sharedTypes6,
        ...addrAccountIdTypes3,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [23, 42],
      types: {
        ...sharedTypes6,
        ...addrAccountIdTypes3,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [43, 44],
      types: {
        ...sharedTypes6,
        ...addrAccountIdTypes3,
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [45, 47],
      types: {
        ...sharedTypes6,
        ...addrAccountIdTypes3
      }
    },
    {
      minmax: [48, 49],
      types: {
        ...sharedTypes6,
        AccountInfo: "AccountInfoWithDualRefCount"
      }
    },
    {
      minmax: [50, 9099],
      types: {
        ...sharedTypes6,
        ...mapXcmTypes("V0")
      }
    },
    {
      minmax: [9100, 9105],
      types: {
        ...sharedTypes6,
        ...mapXcmTypes("V1")
      }
    },
    {
      minmax: [9106, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
  ];

  // ../../node_modules/@polkadot/types-known/spec/index.js
  var typesSpec = {
    "centrifuge-chain": versioned,
    kusama: versioned2,
    node: versioned3,
    "node-template": versioned4,
    polkadot: versioned5,
    rococo: versioned6,
    shell: versioned7,
    statemine: versioned8,
    statemint: versioned8,
    westend: versioned9,
    westmint: versioned8
  };

  // ../../node_modules/@polkadot/types-known/upgrades/e2e/index.js
  var e2e_exports = {};
  __export(e2e_exports, {
    kusama: () => upgrades,
    polkadot: () => upgrades2,
    westend: () => upgrades3
  });

  // ../../node_modules/@polkadot/types-known/upgrades/e2e/kusama.js
  var upgrades = [
    [
      0,
      1020,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      26669,
      1021,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      38245,
      1022,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      54248,
      1023,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      59659,
      1024,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      67651,
      1025,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      82191,
      1027,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      83238,
      1028,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      101503,
      1029,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      203466,
      1030,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      295787,
      1031,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      461692,
      1032,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      504329,
      1033,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      569327,
      1038,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      587687,
      1039,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      653183,
      1040,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      693488,
      1042,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      901442,
      1045,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1375086,
      1050,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1445458,
      1051,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1472960,
      1052,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1475648,
      1053,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1491596,
      1054,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1574408,
      1055,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2064961,
      1058,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2201991,
      1062,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2671528,
      2005,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2704202,
      2007,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2728002,
      2008,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2832534,
      2011,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2962294,
      2012,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      324e4,
      2013,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3274408,
      2015,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3323565,
      2019,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3534175,
      2022,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3860281,
      2023,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4143129,
      2024,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4401242,
      2025,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4841367,
      2026,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5961600,
      2027,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6137912,
      2028,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6561855,
      2029,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7100891,
      2030,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7468792,
      9010,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7668600,
      9030,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7812476,
      9040,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8010981,
      9050,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8073833,
      9070,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8555825,
      9080,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8945245,
      9090,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9611377,
      9100,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9625129,
      9111,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9866422,
      9122,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10403784,
      9130,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10960765,
      9150,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11006614,
      9151,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11404482,
      9160,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11601803,
      9170,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12008022,
      9180,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12405451,
      9190,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12665416,
      9200,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12909508,
      9220,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      13109752,
      9230,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      13555777,
      9250,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      13727747,
      9260,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      14248044,
      9271,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      14433840,
      9280,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      14645900,
      9291,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      15048375,
      9300,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      15426015,
      9320,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      15680713,
      9340,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      15756296,
      9350,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ]
  ];

  // ../../node_modules/@polkadot/types-known/upgrades/e2e/polkadot.js
  var upgrades2 = [
    [
      0,
      0,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      29231,
      1,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      188836,
      5,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      199405,
      6,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      214264,
      7,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      244358,
      8,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      303079,
      9,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      314201,
      10,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      342400,
      11,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      443963,
      12,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      528470,
      13,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      687751,
      14,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      746085,
      15,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      787923,
      16,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      799302,
      17,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1205128,
      18,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1603423,
      23,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1733218,
      24,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2005673,
      25,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2436698,
      26,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3613564,
      27,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3899547,
      28,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4345767,
      29,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4876134,
      30,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5661442,
      9050,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6321619,
      9080,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6713249,
      9090,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7217907,
      9100,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7229126,
      9110,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7560558,
      9122,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8115869,
      9140,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8638103,
      9151,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9280179,
      9170,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9738717,
      9180,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10156856,
      9190,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10458576,
      9200,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10655116,
      9220,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10879371,
      9230,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11328884,
      9250,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11532856,
      9260,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11933818,
      9270,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12217535,
      9280,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ]
      ]
    ],
    [
      12245277,
      9281,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ]
      ]
    ],
    [
      12532644,
      9291,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ]
      ]
    ],
    [
      12876189,
      9300,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ]
      ]
    ]
  ];

  // ../../node_modules/@polkadot/types-known/upgrades/e2e/westend.js
  var upgrades3 = [
    [
      214356,
      4,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      392764,
      7,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      409740,
      8,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      809976,
      20,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      877581,
      24,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      879238,
      25,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      889472,
      26,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      902937,
      27,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      932751,
      28,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      991142,
      29,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1030162,
      31,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1119657,
      32,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1199282,
      33,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1342534,
      34,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1392263,
      35,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1431703,
      36,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1433369,
      37,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1490972,
      41,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2087397,
      43,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2316688,
      44,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2549864,
      45,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3925782,
      46,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3925843,
      47,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4207800,
      48,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4627944,
      49,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5124076,
      50,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5478664,
      900,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5482450,
      9e3,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5584305,
      9010,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5784566,
      9030,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5879822,
      9031,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5896856,
      9032,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5897316,
      9033,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6117927,
      9050,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6210274,
      9070,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6379314,
      9080,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6979141,
      9090,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7568453,
      9100,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7766394,
      9111,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7911691,
      9120,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7968866,
      9121,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7982889,
      9122,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8514322,
      9130,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9091726,
      9140,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9091774,
      9150,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9406726,
      9160,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9921066,
      9170,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10007115,
      9180,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10480973,
      9190,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10578091,
      9200,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10678509,
      9210,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10811001,
      9220,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11096116,
      9230,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11409279,
      9250,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11584820,
      9251,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11716837,
      9260,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11876919,
      9261,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11987927,
      9270,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      12077324,
      9271,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      12301871,
      9280,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      12604343,
      9290,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      12841034,
      9300,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13128237,
      9310,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13272363,
      9320,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13483497,
      9330,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13649433,
      9340,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13761100,
      9350,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ]
  ];

  // ../../node_modules/@polkadot/types-known/upgrades/index.js
  var NET_EXTRA = {
    westend: {
      genesisHash: ["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"]
    }
  };
  function mapRaw([network, versions]) {
    const chain2 = selectableNetworks.find((n) => n.network === network) || NET_EXTRA[network];
    if (!chain2) {
      throw new Error(`Unable to find info for chain ${network}`);
    }
    return {
      genesisHash: hexToU8a(chain2.genesisHash[0]),
      network,
      versions: versions.map(([blockNumber, specVersion, apis]) => ({
        apis,
        blockNumber: new import_bn.default(blockNumber),
        specVersion: new import_bn.default(specVersion)
      }))
    };
  }
  var upgrades4 = Object.entries(e2e_exports).map(mapRaw);

  // ../../node_modules/@polkadot/types-known/util.js
  function withNames(chainName, specName, fn2) {
    return fn2(chainName.toString(), specName.toString());
  }
  function filterVersions(versions = [], specVersion) {
    return versions.filter(({ minmax: [min2, max3] }) => (min2 === void 0 || min2 === null || specVersion >= min2) && (max3 === void 0 || max3 === null || specVersion <= max3)).reduce((result, { types: types2 }) => ({ ...result, ...types2 }), {});
  }
  function getSpecExtensions({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c2, s) => ({
      ...knownTypes2.typesBundle?.spec?.[s]?.signedExtensions ?? {},
      ...knownTypes2.typesBundle?.chain?.[c2]?.signedExtensions ?? {}
    }));
  }
  function getSpecTypes({ knownTypes: knownTypes2 }, chainName, specName, specVersion) {
    const _specVersion = bnToBn(specVersion).toNumber();
    return withNames(chainName, specName, (c2, s) => ({
      ...filterVersions(typesSpec[s], _specVersion),
      ...filterVersions(typesChain[c2], _specVersion),
      ...filterVersions(knownTypes2.typesBundle?.spec?.[s]?.types, _specVersion),
      ...filterVersions(knownTypes2.typesBundle?.chain?.[c2]?.types, _specVersion),
      ...knownTypes2.typesSpec?.[s] ?? {},
      ...knownTypes2.typesChain?.[c2] ?? {},
      ...knownTypes2.types ?? {}
    }));
  }
  function getSpecHasher({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c2, s) => knownTypes2.hasher || knownTypes2.typesBundle?.chain?.[c2]?.hasher || knownTypes2.typesBundle?.spec?.[s]?.hasher || null);
  }
  function getSpecRpc({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c2, s) => ({
      ...knownTypes2.typesBundle?.spec?.[s]?.rpc ?? {},
      ...knownTypes2.typesBundle?.chain?.[c2]?.rpc ?? {}
    }));
  }
  function getSpecRuntime({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c2, s) => ({
      ...knownTypes2.typesBundle?.spec?.[s]?.runtime ?? {},
      ...knownTypes2.typesBundle?.chain?.[c2]?.runtime ?? {}
    }));
  }
  function getSpecAlias({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c2, s) => ({
      ...knownTypes2.typesBundle?.spec?.[s]?.alias ?? {},
      ...knownTypes2.typesBundle?.chain?.[c2]?.alias ?? {},
      ...knownTypes2.typesAlias ?? {}
    }));
  }
  function getUpgradeVersion(genesisHash, blockNumber) {
    const known2 = upgrades4.find((u) => genesisHash.eq(u.genesisHash));
    return known2 ? [
      known2.versions.reduce((last2, version) => {
        return blockNumber.gt(version.blockNumber) ? version : last2;
      }, void 0),
      known2.versions.find((version) => blockNumber.lte(version.blockNumber))
    ] : [void 0, void 0];
  }

  // ../../node_modules/@polkadot/api/util/augmentObject.js
  var l10 = logger("api/augment");
  function logLength(type, values, and = []) {
    return values.length ? ` ${values.length} ${type}${and.length ? " and" : ""}` : "";
  }
  function logValues(type, values) {
    return values.length ? `
	${type.padStart(7)}: ${values.sort().join(", ")}` : "";
  }
  function warn(prefix2, type, [added, removed]) {
    if (added.length || removed.length) {
      l10.warn(`api.${prefix2}: Found${logLength("added", added, removed)}${logLength("removed", removed)} ${type}:${logValues("added", added)}${logValues("removed", removed)}`);
    }
  }
  function findSectionExcludes(a, b) {
    return a.filter((s) => !b.includes(s));
  }
  function findSectionIncludes(a, b) {
    return a.filter((s) => b.includes(s));
  }
  function extractSections(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = Object.keys(dst);
    return [
      findSectionExcludes(srcSections, dstSections),
      findSectionExcludes(dstSections, srcSections)
    ];
  }
  function findMethodExcludes(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
    const excludes = [];
    for (let s = 0, scount = dstSections.length; s < scount; s++) {
      const section2 = dstSections[s];
      const srcMethods = Object.keys(src[section2]);
      const dstMethods = Object.keys(dst[section2]);
      for (let d = 0, mcount = dstMethods.length; d < mcount; d++) {
        const method = dstMethods[d];
        if (!srcMethods.includes(method)) {
          excludes.push(`${section2}.${method}`);
        }
      }
    }
    return excludes;
  }
  function extractMethods(src, dst) {
    return [
      findMethodExcludes(dst, src),
      findMethodExcludes(src, dst)
    ];
  }
  function augmentObject(prefix2, src, dst, fromEmpty = false) {
    fromEmpty && objectClear(dst);
    if (prefix2 && Object.keys(dst).length) {
      warn(prefix2, "modules", extractSections(src, dst));
      warn(prefix2, "calls", extractMethods(src, dst));
    }
    const sections = Object.keys(src);
    for (let i = 0, count = sections.length; i < count; i++) {
      const section2 = sections[i];
      const methods = src[section2];
      if (!dst[section2]) {
        dst[section2] = {};
      }
      lazyMethods(dst[section2], Object.keys(methods), (m) => methods[m]);
    }
    return dst;
  }

  // ../../node_modules/@polkadot/api/util/validate.js
  function sig({ lookup }, { method, section: section2 }, args) {
    return `${section2}.${method}(${args.map((a) => lookup.getTypeDef(a).type).join(", ")})`;
  }
  function extractStorageArgs(registry, creator, _args) {
    const args = _args.filter((a) => !isUndefined(a));
    if (creator.meta.type.isPlain) {
      if (args.length !== 0) {
        throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
      }
    } else {
      const { hashers, key } = creator.meta.type.asMap;
      const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map((t) => t);
      if (args.length !== keys2.length) {
        throw new Error(`${sig(registry, creator, keys2)} is a map, requiring ${keys2.length} arguments, ${args.length} found`);
      }
    }
    return [creator, args];
  }

  // ../../node_modules/@polkadot/api/base/Events.js
  var Events = class {
    constructor() {
      this.__internal__eventemitter = new import_index.default();
    }
    emit(type, ...args) {
      return this.__internal__eventemitter.emit(type, ...args);
    }
    on(type, handler) {
      this.__internal__eventemitter.on(type, handler);
      return this;
    }
    off(type, handler) {
      this.__internal__eventemitter.removeListener(type, handler);
      return this;
    }
    once(type, handler) {
      this.__internal__eventemitter.once(type, handler);
      return this;
    }
  };

  // ../../node_modules/@polkadot/api/base/Decorate.js
  var PAGE_SIZE_K2 = 1e3;
  var PAGE_SIZE_V = 250;
  var PAGE_SIZE_Q = 50;
  var l11 = logger("api/init");
  var instanceCounter = 0;
  function getAtQueryFn(api, { method, section: section2 }) {
    return assertReturn(api.rx.query[section2] && api.rx.query[section2][method], () => `query.${section2}.${method} is not available in this version of the metadata`);
  }
  var Decorate = class extends Events {
    constructor(options, type, decorateMethod) {
      super();
      this.__internal__runtimeLog = {};
      this.__internal__storageGetQ = [];
      this.__internal__storageSubQ = [];
      this.__phantom = new import_bn.default(0);
      this._call = {};
      this._consts = {};
      this._errors = {};
      this._events = {};
      this._extrinsicType = GenericExtrinsic.LATEST_EXTRINSIC_VERSION;
      this._isReady = false;
      this._query = {};
      this._runtimeMap = {};
      this._rx = { call: {}, consts: {}, query: {}, tx: {} };
      this._rxDecorateMethod = (method) => {
        return method;
      };
      this.__internal__instanceId = `${++instanceCounter}`;
      this.__internal__registry = options.source?.registry || options.registry || new TypeRegistry();
      this._rx.callAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map2((a) => a.rx.call));
      this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map2((a) => a.rx.query));
      this._rx.registry = this.__internal__registry;
      this._decorateMethod = decorateMethod;
      this._options = options;
      this._type = type;
      const provider = options.source ? options.source._rpcCore.provider.isClonable ? options.source._rpcCore.provider.clone() : options.source._rpcCore.provider : options.provider || new WsProvider2();
      this._rpcCore = new RpcCore(this.__internal__instanceId, this.__internal__registry, {
        isPedantic: this._options.isPedantic,
        provider,
        userRpc: this._options.rpc
      });
      this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
      this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
    }
    get registry() {
      return this.__internal__registry;
    }
    createType(type, ...params) {
      return this.__internal__registry.createType(type, ...params);
    }
    registerTypes(types2) {
      types2 && this.__internal__registry.register(types2);
    }
    get hasSubscriptions() {
      return this._rpcCore.provider.hasSubscriptions;
    }
    get supportMulti() {
      return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
    }
    _emptyDecorated(registry, blockHash) {
      return {
        call: {},
        consts: {},
        errors: {},
        events: {},
        query: {},
        registry,
        rx: {
          call: {},
          query: {}
        },
        tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
      };
    }
    _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
      if (!decoratedApi) {
        decoratedApi = this._emptyDecorated(registry.registry, blockHash);
      }
      if (fromEmpty || !registry.decoratedMeta) {
        registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
      }
      const runtime30 = this._decorateCalls(registry, this._decorateMethod, blockHash);
      const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
      const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
      const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
      augmentObject("consts", registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
      augmentObject("errors", registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
      augmentObject("events", registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
      augmentObject("query", storage, decoratedApi.query, fromEmpty);
      augmentObject("query", storageRx, decoratedApi.rx.query, fromEmpty);
      augmentObject("call", runtime30, decoratedApi.call, fromEmpty);
      augmentObject("call", runtimeRx, decoratedApi.rx.call, fromEmpty);
      decoratedApi.findCall = (callIndex) => findCall(registry.registry, callIndex);
      decoratedApi.findError = (errorIndex) => findError(registry.registry, errorIndex);
      decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
      decoratedApi.runtimeVersion = registry.runtimeVersion;
      return {
        createdAt: blockHash,
        decoratedApi,
        decoratedMeta: registry.decoratedMeta
      };
    }
    _injectMetadata(registry, fromEmpty = false) {
      if (fromEmpty || !registry.decoratedApi) {
        registry.decoratedApi = this._emptyDecorated(registry.registry);
      }
      const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
      this._call = decoratedApi.call;
      this._consts = decoratedApi.consts;
      this._errors = decoratedApi.errors;
      this._events = decoratedApi.events;
      this._query = decoratedApi.query;
      this._rx.call = decoratedApi.rx.call;
      this._rx.query = decoratedApi.rx.query;
      const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
      const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
      if (fromEmpty || !this._extrinsics) {
        this._extrinsics = tx;
        this._rx.tx = rxtx;
      } else {
        augmentObject("tx", tx, this._extrinsics, false);
        augmentObject(null, rxtx, this._rx.tx, false);
      }
      augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
      this.emit("decorated");
    }
    injectMetadata(metadata, fromEmpty, registry) {
      this._injectMetadata({ counter: 0, metadata, registry: registry || this.__internal__registry, runtimeVersion: this.__internal__registry.createType("RuntimeVersionPartial") }, fromEmpty);
    }
    _decorateFunctionMeta(input, output2) {
      output2.meta = input.meta;
      output2.method = input.method;
      output2.section = input.section;
      output2.toJSON = input.toJSON;
      if (input.callIndex) {
        output2.callIndex = input.callIndex;
      }
      return output2;
    }
    _filterRpc(methods, additional) {
      if (Object.keys(additional).length !== 0) {
        this._rpcCore.addUserInterfaces(additional);
        this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
        this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
      }
      const sectionMap = {};
      for (let i = 0, count = methods.length; i < count; i++) {
        const [section2] = methods[i].split("_");
        sectionMap[section2] = true;
      }
      const sections = Object.keys(sectionMap);
      for (let i = 0, count = sections.length; i < count; i++) {
        const nameA = stringUpperFirst(sections[i]);
        const nameB = `${nameA}Api`;
        this._runtimeMap[blake2AsHex(nameA, 64)] = nameA;
        this._runtimeMap[blake2AsHex(nameB, 64)] = nameB;
      }
      this._filterRpcMethods(methods);
    }
    _filterRpcMethods(exposed) {
      const hasResults = exposed.length !== 0;
      const allKnown = [...this._rpcCore.mapping.entries()];
      const allKeys = [];
      const count = allKnown.length;
      for (let i = 0; i < count; i++) {
        const [, { alias: alias2, endpoint, method, pubsub, section: section2 }] = allKnown[i];
        allKeys.push(`${section2}_${method}`);
        if (pubsub) {
          allKeys.push(`${section2}_${pubsub[1]}`);
          allKeys.push(`${section2}_${pubsub[2]}`);
        }
        if (alias2) {
          allKeys.push(...alias2);
        }
        if (endpoint) {
          allKeys.push(endpoint);
        }
      }
      const unknown = exposed.filter((k) => !allKeys.includes(k) && !k.includes("_unstable_"));
      if (unknown.length && !this._options.noInitWarn) {
        l11.warn(`RPC methods not decorated: ${unknown.join(", ")}`);
      }
      for (let i = 0; i < count; i++) {
        const [k, { method, section: section2 }] = allKnown[i];
        if (hasResults && !exposed.includes(k) && k !== "rpc_methods") {
          if (this._rpc[section2]) {
            delete this._rpc[section2][method];
            delete this._rx.rpc[section2][method];
          }
        }
      }
    }
    _rpcSubmitter(decorateMethod) {
      const method = (method2, ...params) => {
        return from(this._rpcCore.provider.send(method2, params));
      };
      return decorateMethod(method);
    }
    _decorateRpc(rpc18, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
      const out = input;
      const decorateFn = (section2, method) => {
        const source = rpc18[section2][method];
        const fn2 = decorateMethod(source, { methodName: method });
        fn2.meta = source.meta;
        fn2.raw = decorateMethod(source.raw, { methodName: method });
        return fn2;
      };
      for (let s = 0, scount = rpc18.sections.length; s < scount; s++) {
        const section2 = rpc18.sections[s];
        if (!Object.prototype.hasOwnProperty.call(out, section2)) {
          const methods = Object.keys(rpc18[section2]);
          const decorateInternal = (method) => decorateFn(section2, method);
          for (let m = 0, mcount = methods.length; m < mcount; m++) {
            const method = methods[m];
            if (this.hasSubscriptions || !(method.startsWith("subscribe") || method.startsWith("unsubscribe"))) {
              if (!Object.prototype.hasOwnProperty.call(out, section2)) {
                out[section2] = {};
              }
              lazyMethod(out[section2], method, decorateInternal);
            }
          }
        }
      }
      return out;
    }
    _addRuntimeDef(result, additional) {
      if (!additional) {
        return;
      }
      const entries = Object.entries(additional);
      for (let j = 0, ecount = entries.length; j < ecount; j++) {
        const [key, defs] = entries[j];
        if (result[key]) {
          for (let k = 0, dcount = defs.length; k < dcount; k++) {
            const def = defs[k];
            const prev = result[key].find(({ version }) => def.version === version);
            if (prev) {
              objectSpread(prev.methods, def.methods);
            } else {
              result[key].push(def);
            }
          }
        } else {
          result[key] = defs;
        }
      }
    }
    _getRuntimeDefs(registry, specName, chain2 = "") {
      const result = {};
      const defValues = Object.values(definitions_exports);
      for (let i = 0, count = defValues.length; i < count; i++) {
        this._addRuntimeDef(result, defValues[i].runtime);
      }
      this._addRuntimeDef(result, getSpecRuntime(registry, chain2, specName));
      this._addRuntimeDef(result, this._options.runtime);
      return Object.entries(result);
    }
    _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
      const result = {};
      const named = {};
      const hashes = {};
      const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
      const older = [];
      const implName = `${specName.toString()}/${specVersion.toString()}`;
      const hasLogged = this.__internal__runtimeLog[implName] || false;
      this.__internal__runtimeLog[implName] = true;
      for (let i = 0, scount = sections.length; i < scount; i++) {
        const [_section, secs] = sections[i];
        const sectionHash = blake2AsHex(_section, 64);
        const rtApi = apis.find(([a]) => a.eq(sectionHash));
        hashes[sectionHash] = true;
        if (rtApi) {
          const all3 = secs.map(({ version }) => version).sort();
          const sec = secs.find(({ version }) => rtApi[1].eq(version));
          if (sec) {
            const section2 = stringCamelCase(_section);
            const methods = Object.entries(sec.methods);
            if (methods.length) {
              if (!named[section2]) {
                named[section2] = {};
              }
              for (let m = 0, mcount = methods.length; m < mcount; m++) {
                const [_method, def] = methods[m];
                const method = stringCamelCase(_method);
                named[section2][method] = objectSpread({ method, name: `${_section}_${_method}`, section: section2, sectionHash }, def);
              }
            }
          } else {
            older.push(`${_section}/${rtApi[1].toString()} (${all3.join("/")} known)`);
          }
        }
      }
      const notFound = apis.map(([a, v3]) => [a.toHex(), v3.toString()]).filter(([a]) => !hashes[a]).map(([a, v3]) => `${this._runtimeMap[a] || a}/${v3}`);
      if (!this._options.noInitWarn && !hasLogged) {
        if (older.length) {
          l11.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(", ")}`);
        }
        if (notFound.length) {
          l11.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(", ")}`);
        }
      }
      const stateCall = blockHash ? (name, bytes3) => this._rpcCore.state.call(name, bytes3, blockHash) : (name, bytes3) => this._rpcCore.state.call(name, bytes3);
      const lazySection = (section2) => lazyMethods({}, Object.keys(named[section2]), (method) => this._decorateCall(registry, named[section2][method], stateCall, decorateMethod));
      const modules = Object.keys(named);
      for (let i = 0, count = modules.length; i < count; i++) {
        lazyMethod(result, modules[i], lazySection);
      }
      return result;
    }
    _decorateCall(registry, def, stateCall, decorateMethod) {
      const decorated = decorateMethod((...args) => {
        if (args.length !== def.params.length) {
          throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
        }
        const bytes3 = registry.createType("Raw", u8aConcatStrict(args.map((a, i) => registry.createTypeUnsafe(def.params[i].type, [a]).toU8a())));
        return stateCall(def.name, bytes3).pipe(map2((r) => registry.createTypeUnsafe(def.type, [r])));
      });
      decorated.meta = def;
      return decorated;
    }
    _decorateMulti(decorateMethod) {
      return decorateMethod((keys2) => keys2.length ? (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys2.map((args) => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])) : of([]));
    }
    _decorateMultiAt(atApi, decorateMethod, blockHash) {
      return decorateMethod((calls) => calls.length ? this._rpcCore.state.queryStorageAt(calls.map((args) => {
        if (Array.isArray(args)) {
          const { creator } = getAtQueryFn(atApi, args[0].creator);
          return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
        }
        return [getAtQueryFn(atApi, args.creator).creator];
      }), blockHash) : of([]));
    }
    _decorateExtrinsics({ tx }, decorateMethod) {
      const result = createSubmittable(this._type, this._rx, decorateMethod);
      const lazySection = (section2) => lazyMethods({}, Object.keys(tx[section2]), (method) => method.startsWith("$") ? tx[section2][method] : this._decorateExtrinsicEntry(tx[section2][method], result));
      const sections = Object.keys(tx);
      for (let i = 0, count = sections.length; i < count; i++) {
        lazyMethod(result, sections[i], lazySection);
      }
      return result;
    }
    _decorateExtrinsicEntry(method, creator) {
      const decorated = (...params) => creator(method(...params));
      decorated.is = (other) => method.is(other);
      return this._decorateFunctionMeta(method, decorated);
    }
    _decorateStorage({ query: query2, registry }, decorateMethod, blockHash) {
      const result = {};
      const lazySection = (section2) => lazyMethods({}, Object.keys(query2[section2]), (method) => blockHash ? this._decorateStorageEntryAt(registry, query2[section2][method], decorateMethod, blockHash) : this._decorateStorageEntry(query2[section2][method], decorateMethod));
      const sections = Object.keys(query2);
      for (let i = 0, count = sections.length; i < count; i++) {
        lazyMethod(result, sections[i], lazySection);
      }
      return result;
    }
    _decorateStorageEntry(creator, decorateMethod) {
      const getArgs = (args, registry) => extractStorageArgs(registry || this.__internal__registry, creator, args);
      const getQueryAt = (blockHash) => from(this.at(blockHash)).pipe(map2((api) => getAtQueryFn(api, creator)));
      const decorated = this._decorateStorageCall(creator, decorateMethod);
      decorated.creator = creator;
      decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => q(...args))));
      decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
      decorated.is = (key) => key.section === creator.section && key.method === creator.method;
      decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
      decorated.keyPrefix = (...args) => u8aToHex(creator.keyPrefix(...args));
      decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
      decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
      if (creator.iterKey && creator.meta.type.isMap) {
        decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
        decorated.entriesAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapEntries(q.creator, blockHash, args)))));
        decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, void 0, opts)));
        decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
        decorated.keysAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapKeys(q.creator, blockHash, args)))));
        decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, void 0, opts)));
      }
      if (this.supportMulti && creator.meta.type.isMap) {
        decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]])) : this._retrieveMulti(args.map((a) => [creator, a])));
      }
      return this._decorateFunctionMeta(creator, decorated);
    }
    _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
      const getArgs = (args) => extractStorageArgs(registry, creator, args);
      const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
      decorated.creator = creator;
      decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
      decorated.is = (key) => key.section === creator.section && key.method === creator.method;
      decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
      decorated.keyPrefix = (...keys2) => u8aToHex(creator.keyPrefix(...keys2));
      decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
      if (creator.iterKey && creator.meta.type.isMap) {
        decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
        decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
        decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
        decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, blockHash, opts)));
      }
      if (this.supportMulti && creator.meta.type.isMap) {
        decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]]), blockHash) : this._retrieveMulti(args.map((a) => [creator, a]), blockHash));
      }
      return this._decorateFunctionMeta(creator, decorated);
    }
    _queueStorage(call, queue) {
      const query2 = queue === this.__internal__storageSubQ ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
      let queueIdx = queue.length - 1;
      let valueIdx = 0;
      let valueObs;
      if (queueIdx === -1 || !queue[queueIdx] || queue[queueIdx][1].length === PAGE_SIZE_Q) {
        queueIdx++;
        valueObs = from(
          new Promise((resolve) => {
            nextTick(() => {
              const calls = queue[queueIdx][1];
              delete queue[queueIdx];
              resolve(calls);
            });
          })
        ).pipe(switchMap((calls) => query2(calls)));
        queue.push([valueObs, [call]]);
      } else {
        valueObs = queue[queueIdx][0];
        valueIdx = queue[queueIdx][1].length;
        queue[queueIdx][1].push(call);
      }
      return valueObs.pipe(
        map2((values) => values[valueIdx])
      );
    }
    _decorateStorageCall(creator, decorateMethod) {
      const memoed = memo(this.__internal__instanceId, (...args) => {
        const call = extractStorageArgs(this.__internal__registry, creator, args);
        if (!this.hasSubscriptions) {
          return this._rpcCore.state.getStorage(call);
        }
        return this._queueStorage(call, this.__internal__storageSubQ);
      });
      return decorateMethod(memoed, {
        methodName: creator.method,
        overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(this.__internal__registry, creator, args), this.__internal__storageGetQ)
      });
    }
    _retrieveMulti(keys2, blockHash) {
      if (!keys2.length) {
        return of([]);
      }
      const query2 = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
      if (keys2.length <= PAGE_SIZE_V) {
        return blockHash ? query2(keys2, blockHash) : query2(keys2);
      }
      return combineLatest(arrayChunk(keys2, PAGE_SIZE_V).map((k) => blockHash ? query2(k, blockHash) : query2(k))).pipe(map2(arrayFlatten));
    }
    _retrieveMapKeys({ iterKey, meta, method, section: section2 }, at2, args) {
      if (!iterKey || !meta.type.isMap) {
        throw new Error("keys can only be retrieved on maps");
      }
      const headKey = iterKey(...args).toHex();
      const startSubject = new BehaviorSubject(headKey);
      const query2 = at2 ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey, at2) : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey);
      const setMeta = (key) => key.setMeta(meta, section2, method);
      return startSubject.pipe(
        switchMap(query2),
        map2((keys2) => keys2.map(setMeta)),
        tap((keys2) => nextTick(() => {
          keys2.length === PAGE_SIZE_K2 ? startSubject.next(keys2[PAGE_SIZE_K2 - 1].toHex()) : startSubject.complete();
        })),
        toArray(),
        map2(arrayFlatten)
      );
    }
    _retrieveMapKeysPaged({ iterKey, meta, method, section: section2 }, at2, opts) {
      if (!iterKey || !meta.type.isMap) {
        throw new Error("keys can only be retrieved on maps");
      }
      const setMeta = (key) => key.setMeta(meta, section2, method);
      const query2 = at2 ? (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at2) : (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
      return query2(iterKey(...opts.args).toHex()).pipe(map2((keys2) => keys2.map(setMeta)));
    }
    _retrieveMapEntries(entry, at2, args) {
      const query2 = at2 ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at2) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
      return this._retrieveMapKeys(entry, at2, args).pipe(switchMap((keys2) => keys2.length ? combineLatest(arrayChunk(keys2, PAGE_SIZE_V).map(query2)).pipe(map2((valsArr) => arrayFlatten(valsArr).map((value, index) => [keys2[index], value]))) : of([])));
    }
    _retrieveMapEntriesPaged(entry, at2, opts) {
      const query2 = at2 ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at2) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
      return this._retrieveMapKeysPaged(entry, at2, opts).pipe(switchMap((keys2) => keys2.length ? query2(keys2).pipe(map2((valsArr) => valsArr.map((value, index) => [keys2[index], value]))) : of([])));
    }
    _decorateDeriveRx(decorateMethod) {
      const specName = this._runtimeVersion?.specName.toString();
      const available = getAvailableDerives(this.__internal__instanceId, this._rx, objectSpread({}, this._options.derives, this._options.typesBundle?.spec?.[specName || ""]?.derives));
      return decorateDeriveSections(decorateMethod, available);
    }
    _decorateDerive(decorateMethod) {
      return decorateDeriveSections(decorateMethod, this._rx.derive);
    }
  };

  // ../../node_modules/@polkadot/api/base/Init.js
  var KEEPALIVE_INTERVAL = 1e4;
  var WITH_VERSION_SHORTCUT = false;
  var l12 = logger("api/init");
  function textToString(t) {
    return t.toString();
  }
  var Init = class extends Decorate {
    constructor(options, type, decorateMethod) {
      super(options, type, decorateMethod);
      this.__internal__atLast = null;
      this.__internal__healthTimer = null;
      this.__internal__registries = [];
      this.__internal__updateSub = null;
      this.__internal__waitingRegistries = {};
      this.registry.setKnownTypes(options);
      if (!options.source) {
        this.registerTypes(options.types);
      } else {
        this.__internal__registries = options.source.__internal__registries;
      }
      this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
      this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
      if (this.supportMulti) {
        this._queryMulti = this._decorateMulti(this._decorateMethod);
        this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
      }
      this._rx.signer = options.signer;
      this._rpcCore.setRegistrySwap((blockHash) => this.getBlockRegistry(blockHash));
      this._rpcCore.setResolveBlockHash((blockNumber) => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));
      if (this.hasSubscriptions) {
        this._rpcCore.provider.on("disconnected", () => this.__internal__onProviderDisconnect());
        this._rpcCore.provider.on("error", (e) => this.__internal__onProviderError(e));
        this._rpcCore.provider.on("connected", () => this.__internal__onProviderConnect());
      } else if (!this._options.noInitWarn) {
        l12.warn("Api will be available in a limited mode since the provider does not support subscriptions");
      }
      if (this._rpcCore.provider.isConnected) {
        this.__internal__onProviderConnect();
      }
    }
    _initRegistry(registry, chain2, version, metadata, chainProps) {
      registry.clearCache();
      registry.setChainProperties(chainProps || this.registry.getChainProperties());
      registry.setKnownTypes(this._options);
      registry.register(getSpecTypes(registry, chain2, version.specName, version.specVersion));
      registry.setHasher(getSpecHasher(registry, chain2, version.specName));
      if (registry.knownTypes.typesBundle) {
        registry.knownTypes.typesAlias = getSpecAlias(registry, chain2, version.specName);
      }
      registry.setMetadata(metadata, void 0, objectSpread({}, getSpecExtensions(registry, chain2, version.specName), this._options.signedExtensions), this._options.noInitWarn);
    }
    _getDefaultRegistry() {
      return assertReturn(this.__internal__registries.find(({ isDefault }) => isDefault), "Initialization error, cannot find the default registry");
    }
    async at(blockHash, knownVersion) {
      const u8aHash = u8aToU8a(blockHash);
      const u8aHex = u8aToHex(u8aHash);
      const registry = await this.getBlockRegistry(u8aHash, knownVersion);
      if (!this.__internal__atLast || this.__internal__atLast[0] !== u8aHex) {
        this.__internal__atLast = [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi];
      }
      return this.__internal__atLast[1];
    }
    async _createBlockRegistry(blockHash, header, version) {
      const registry = new TypeRegistry(blockHash);
      const metadata = new Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));
      this._initRegistry(registry, this._runtimeChain, version, metadata);
      const result = { counter: 0, lastBlockHash: blockHash, metadata, registry, runtimeVersion: version };
      this.__internal__registries.push(result);
      return result;
    }
    _cacheBlockRegistryProgress(key, creator) {
      let waiting = this.__internal__waitingRegistries[key];
      if (isUndefined(waiting)) {
        waiting = this.__internal__waitingRegistries[key] = new Promise((resolve, reject) => {
          creator().then((registry) => {
            delete this.__internal__waitingRegistries[key];
            resolve(registry);
          }).catch((error) => {
            delete this.__internal__waitingRegistries[key];
            reject(error);
          });
        });
      }
      return waiting;
    }
    _getBlockRegistryViaVersion(blockHash, version) {
      if (version) {
        const existingViaVersion = this.__internal__registries.find(({ runtimeVersion: { specName, specVersion } }) => specName.eq(version.specName) && specVersion.eq(version.specVersion));
        if (existingViaVersion) {
          existingViaVersion.counter++;
          existingViaVersion.lastBlockHash = blockHash;
          return existingViaVersion;
        }
      }
      return null;
    }
    async _getBlockRegistryViaHash(blockHash) {
      if (!this._genesisHash || !this._runtimeVersion) {
        throw new Error("Cannot retrieve data on an uninitialized chain");
      }
      const header = this.registry.createType("HeaderPartial", this._genesisHash.eq(blockHash) ? { number: BN_ZERO, parentHash: this._genesisHash } : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
      if (header.parentHash.isEmpty) {
        throw new Error("Unable to retrieve header and parent from supplied hash");
      }
      const [firstVersion, lastVersion] = getUpgradeVersion(this._genesisHash, header.number);
      const version = this.registry.createType("RuntimeVersionPartial", WITH_VERSION_SHORTCUT && (firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion))) ? { apis: firstVersion.apis, specName: this._runtimeVersion.specName, specVersion: firstVersion.specVersion } : await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
      return this._getBlockRegistryViaVersion(blockHash, version) || await this._cacheBlockRegistryProgress(version.toHex(), () => this._createBlockRegistry(blockHash, header, version));
    }
    async getBlockRegistry(blockHash, knownVersion) {
      return this.__internal__registries.find(({ lastBlockHash }) => lastBlockHash && u8aEq(lastBlockHash, blockHash)) || this._getBlockRegistryViaVersion(blockHash, knownVersion) || await this._cacheBlockRegistryProgress(u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash));
    }
    async _loadMeta() {
      if (this._isReady) {
        return true;
      }
      this._unsubscribeUpdates();
      [this._genesisHash, this._runtimeMetadata] = this._options.source?._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
      return this._initFromMeta(this._runtimeMetadata);
    }
    async _metaFromSource(source) {
      this._extrinsicType = source.extrinsicVersion;
      this._runtimeChain = source.runtimeChain;
      this._runtimeVersion = source.runtimeVersion;
      const sections = Object.keys(source.rpc);
      const rpcs = [];
      for (let s = 0, scount = sections.length; s < scount; s++) {
        const section2 = sections[s];
        const methods = Object.keys(source.rpc[section2]);
        for (let m = 0, mcount = methods.length; m < mcount; m++) {
          rpcs.push(`${section2}_${methods[m]}`);
        }
      }
      this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));
      return [source.genesisHash, source.runtimeMetadata];
    }
    _subscribeUpdates() {
      if (this.__internal__updateSub || !this.hasSubscriptions) {
        return;
      }
      this.__internal__updateSub = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap((version) => this._runtimeVersion?.specVersion.eq(version.specVersion) ? of(false) : this._rpcCore.state.getMetadata().pipe(map2((metadata) => {
        l12.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
        this._runtimeMetadata = metadata;
        this._runtimeVersion = version;
        this._rx.runtimeVersion = version;
        const thisRegistry = this._getDefaultRegistry();
        thisRegistry.metadata = metadata;
        thisRegistry.runtimeVersion = version;
        this._initRegistry(this.registry, this._runtimeChain, version, metadata);
        this._injectMetadata(thisRegistry, true);
        return true;
      })))).subscribe();
    }
    async _metaFromChain(optMetadata) {
      const [genesisHash, runtimeVersion, chain2, chainProps, rpcMethods, chainMetadata] = await Promise.all([
        firstValueFrom(this._rpcCore.chain.getBlockHash(0)),
        firstValueFrom(this._rpcCore.state.getRuntimeVersion()),
        firstValueFrom(this._rpcCore.system.chain()),
        firstValueFrom(this._rpcCore.system.properties()),
        firstValueFrom(this._rpcCore.rpc.methods()),
        optMetadata ? Promise.resolve(null) : firstValueFrom(this._rpcCore.state.getMetadata())
      ]);
      this._runtimeChain = chain2;
      this._runtimeVersion = runtimeVersion;
      this._rx.runtimeVersion = runtimeVersion;
      const metadataKey = `${genesisHash.toHex() || "0x"}-${runtimeVersion.specVersion.toString()}`;
      const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey] ? new Metadata(this.registry, optMetadata[metadataKey]) : await firstValueFrom(this._rpcCore.state.getMetadata()));
      this._initRegistry(this.registry, chain2, runtimeVersion, metadata, chainProps);
      this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain2, runtimeVersion.specName));
      this._subscribeUpdates();
      if (!this.__internal__registries.length) {
        this.__internal__registries.push({ counter: 0, isDefault: true, metadata, registry: this.registry, runtimeVersion });
      }
      metadata.getUniqTypes(this._options.throwOnUnknown || false);
      return [genesisHash, metadata];
    }
    _initFromMeta(metadata) {
      this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
      this._rx.extrinsicType = this._extrinsicType;
      this._rx.genesisHash = this._genesisHash;
      this._rx.runtimeVersion = this._runtimeVersion;
      this._injectMetadata(this._getDefaultRegistry(), true);
      this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
      this._derive = this._decorateDerive(this._decorateMethod);
      return true;
    }
    _subscribeHealth() {
      this._unsubscribeHealth();
      this.__internal__healthTimer = this.hasSubscriptions ? setInterval(() => {
        firstValueFrom(this._rpcCore.system.health.raw()).catch(() => void 0);
      }, KEEPALIVE_INTERVAL) : null;
    }
    _unsubscribeHealth() {
      if (this.__internal__healthTimer) {
        clearInterval(this.__internal__healthTimer);
        this.__internal__healthTimer = null;
      }
    }
    _unsubscribeUpdates() {
      if (this.__internal__updateSub) {
        this.__internal__updateSub.unsubscribe();
        this.__internal__updateSub = null;
      }
    }
    _unsubscribe() {
      this._unsubscribeHealth();
      this._unsubscribeUpdates();
    }
    async __internal__onProviderConnect() {
      this._isConnected.next(true);
      this.emit("connected");
      try {
        const cryptoReady = this._options.initWasm === false ? true : await cryptoWaitReady();
        const hasMeta = await this._loadMeta();
        this._subscribeHealth();
        if (hasMeta && !this._isReady && cryptoReady) {
          this._isReady = true;
          this.emit("ready", this);
        }
      } catch (_error) {
        const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
        l12.error(error);
        this.emit("error", error);
      }
    }
    __internal__onProviderDisconnect() {
      this._isConnected.next(false);
      this._unsubscribe();
      this.emit("disconnected");
    }
    __internal__onProviderError(error) {
      this.emit("error", error);
    }
  };

  // ../../node_modules/@polkadot/api/base/Getters.js
  function assertResult(value) {
    if (value === void 0) {
      throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
    }
    return value;
  }
  var Getters = class extends Init {
    get call() {
      return assertResult(this._call);
    }
    get consts() {
      return assertResult(this._consts);
    }
    get derive() {
      return assertResult(this._derive);
    }
    get errors() {
      return assertResult(this._errors);
    }
    get events() {
      return assertResult(this._events);
    }
    get extrinsicVersion() {
      return this._extrinsicType;
    }
    get genesisHash() {
      return assertResult(this._genesisHash);
    }
    get isConnected() {
      return this._isConnected.getValue();
    }
    get libraryInfo() {
      return `${packageInfo.name} v${packageInfo.version}`;
    }
    get query() {
      return assertResult(this._query);
    }
    get queryMulti() {
      return assertResult(this._queryMulti);
    }
    get rpc() {
      return assertResult(this._rpc);
    }
    get runtimeChain() {
      return assertResult(this._runtimeChain);
    }
    get runtimeMetadata() {
      return assertResult(this._runtimeMetadata);
    }
    get runtimeVersion() {
      return assertResult(this._runtimeVersion);
    }
    get rx() {
      return assertResult(this._rx);
    }
    get stats() {
      return this._rpcCore.provider.stats;
    }
    get type() {
      return this._type;
    }
    get tx() {
      return assertResult(this._extrinsics);
    }
    findCall(callIndex) {
      return findCall(this.registry, callIndex);
    }
    findError(errorIndex) {
      return findError(this.registry, errorIndex);
    }
  };

  // ../../node_modules/@polkadot/api/base/index.js
  var ApiBase = class extends Getters {
    constructor(options = {}, type, decorateMethod) {
      super(options, type, decorateMethod);
    }
    connect() {
      return this._rpcCore.connect();
    }
    disconnect() {
      this._unsubscribe();
      return this._rpcCore.disconnect();
    }
    setSigner(signer) {
      this._rx.signer = signer;
    }
    async sign(address, data, { signer } = {}) {
      if (isString(address)) {
        const _signer = signer || this._rx.signer;
        if (!_signer || !_signer.signRaw) {
          throw new Error("No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
        }
        return (await _signer.signRaw(objectSpread({ type: "bytes" }, data, { address }))).signature;
      }
      return u8aToHex(address.sign(u8aToU8a(data.data)));
    }
  };

  // ../../node_modules/@polkadot/api/promise/Combinator.js
  var Combinator = class {
    constructor(fns, callback) {
      this.__internal__allHasFired = false;
      this.__internal__fired = [];
      this.__internal__fns = [];
      this.__internal__isActive = true;
      this.__internal__results = [];
      this.__internal__subscriptions = [];
      this.__internal__callback = callback;
      this.__internal__subscriptions = fns.map(async (input, index) => {
        const [fn2, ...args] = Array.isArray(input) ? input : [input];
        this.__internal__fired.push(false);
        this.__internal__fns.push(fn2);
        return fn2(...args, this._createCallback(index));
      });
    }
    _allHasFired() {
      this.__internal__allHasFired ||= this.__internal__fired.filter((hasFired) => !hasFired).length === 0;
      return this.__internal__allHasFired;
    }
    _createCallback(index) {
      return (value) => {
        this.__internal__fired[index] = true;
        this.__internal__results[index] = value;
        this._triggerUpdate();
      };
    }
    _triggerUpdate() {
      if (!this.__internal__isActive || !isFunction(this.__internal__callback) || !this._allHasFired()) {
        return;
      }
      try {
        this.__internal__callback(this.__internal__results);
      } catch {
      }
    }
    unsubscribe() {
      if (!this.__internal__isActive) {
        return;
      }
      this.__internal__isActive = false;
      this.__internal__subscriptions.forEach(async (subscription) => {
        try {
          const unsubscribe = await subscription;
          if (isFunction(unsubscribe)) {
            unsubscribe();
          }
        } catch {
        }
      });
    }
  };

  // ../../node_modules/@polkadot/api/promise/decorateMethod.js
  function promiseTracker(resolve, reject) {
    let isCompleted = false;
    return {
      reject: (error) => {
        if (!isCompleted) {
          isCompleted = true;
          reject(error);
        }
        return EMPTY;
      },
      resolve: (value) => {
        if (!isCompleted) {
          isCompleted = true;
          resolve(value);
        }
      }
    };
  }
  function extractArgs(args, needsCallback) {
    const actualArgs = args.slice();
    const callback = args.length && isFunction(args[args.length - 1]) ? actualArgs.pop() : void 0;
    if (needsCallback && !isFunction(callback)) {
      throw new Error("Expected a callback to be passed with subscriptions");
    }
    return [actualArgs, callback];
  }
  function decorateCall(method, args) {
    return new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      const subscription = method(...args).pipe(catchError((error) => tracker.reject(error))).subscribe((result) => {
        tracker.resolve(result);
        nextTick(() => subscription.unsubscribe());
      });
    });
  }
  function decorateSubscribe(method, args, resultCb) {
    return new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      const subscription = method(...args).pipe(catchError((error) => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe((result) => {
        nextTick(() => resultCb(result));
      });
    });
  }
  function toPromiseMethod(method, options) {
    const needsCallback = !!(options && options.methodName && options.methodName.includes("subscribe"));
    return function(...args) {
      const [actualArgs, resultCb] = extractArgs(args, needsCallback);
      return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall(options?.overrideNoSub || method, actualArgs);
    };
  }

  // ../../node_modules/@polkadot/api/promise/Api.js
  var ApiPromise2 = class extends ApiBase {
    constructor(options) {
      super(options, "promise", toPromiseMethod);
      this.__internal__isReadyPromise = new Promise((resolve) => {
        super.once("ready", () => resolve(this));
      });
      this.__internal__isReadyOrErrorPromise = new Promise((resolve, reject) => {
        const tracker = promiseTracker(resolve, reject);
        super.once("ready", () => tracker.resolve(this));
        super.once("error", (error) => tracker.reject(error));
      });
    }
    static create(options) {
      const instance = new ApiPromise2(options);
      if (options && options.throwOnConnect) {
        return instance.isReadyOrError;
      }
      instance.isReadyOrError.catch(() => {
      });
      return instance.isReady;
    }
    get isReady() {
      return this.__internal__isReadyPromise;
    }
    get isReadyOrError() {
      return this.__internal__isReadyOrErrorPromise;
    }
    clone() {
      return new ApiPromise2(objectSpread({}, this._options, { source: this }));
    }
    async combineLatest(fns, callback) {
      const combinator = new Combinator(fns, callback);
      return () => {
        combinator.unsubscribe();
      };
    }
  };

  // ../../node_modules/@polkadot/api-contract/Abi/toV1.js
  function v0ToV1Names(all3) {
    return all3.map((e) => objectSpread({}, e, {
      name: Array.isArray(e.name) ? e.name : [e.name]
    }));
  }
  function v0ToV1(registry, v03) {
    if (!v03.metadataVersion.length) {
      throw new Error("Invalid format for V0 (detected) contract metadata");
    }
    return registry.createType("ContractMetadataV1", objectSpread({}, v03, {
      spec: objectSpread({}, v03.spec, {
        constructors: v0ToV1Names(v03.spec.constructors),
        messages: v0ToV1Names(v03.spec.messages)
      }),
      types: toV1(registry, v03.types)
    }));
  }

  // ../../node_modules/@polkadot/api-contract/Abi/toV2.js
  var ARG_TYPES = {
    ContractConstructorSpec: "ContractMessageParamSpecV2",
    ContractEventSpec: "ContractEventParamSpecV2",
    ContractMessageSpec: "ContractMessageParamSpecV2"
  };
  function v1ToV2Label(entry) {
    return objectSpread({}, entry, {
      label: Array.isArray(entry.name) ? entry.name.join("::") : entry.name
    });
  }
  function v1ToV2Labels(registry, outType, all3) {
    return all3.map((e) => registry.createType(`${outType}V2`, objectSpread(v1ToV2Label(e), {
      args: e.args.map((a) => registry.createType(ARG_TYPES[outType], v1ToV2Label(a)))
    })));
  }
  function v1ToV2(registry, v17) {
    return registry.createType("ContractMetadataV2", objectSpread({}, v17, {
      spec: objectSpread({}, v17.spec, {
        constructors: v1ToV2Labels(registry, "ContractConstructorSpec", v17.spec.constructors),
        events: v1ToV2Labels(registry, "ContractEventSpec", v17.spec.events),
        messages: v1ToV2Labels(registry, "ContractMessageSpec", v17.spec.messages)
      })
    }));
  }

  // ../../node_modules/@polkadot/api-contract/Abi/toV3.js
  function v2ToV3(registry, v22) {
    return registry.createType("ContractMetadataV3", objectSpread({}, v22, {
      spec: objectSpread({}, v22.spec, {
        constructors: v22.spec.constructors.map((c2) => registry.createType("ContractConstructorSpecV3", objectSpread({}, c2, { payable: true })))
      })
    }));
  }

  // ../../node_modules/@polkadot/api-contract/Abi/toV4.js
  function v3ToV4(_registry, v3) {
    return v3;
  }

  // ../../node_modules/@polkadot/api-contract/Abi/toLatest.js
  var enumVersions = ["V4", "V3", "V2", "V1"];
  function createConverter(next, step) {
    return (registry, input) => next(registry, step(registry, input));
  }
  function v4ToLatest(_registry, v4) {
    return v4;
  }
  var v3ToLatest = /* @__PURE__ */ createConverter(v4ToLatest, v3ToV4);
  var v2ToLatest = /* @__PURE__ */ createConverter(v3ToLatest, v2ToV3);
  var v1ToLatest = /* @__PURE__ */ createConverter(v2ToLatest, v1ToV2);
  var v0ToLatest = /* @__PURE__ */ createConverter(v1ToLatest, v0ToV1);
  var convertVersions = [
    ["V4", v4ToLatest],
    ["V3", v3ToLatest],
    ["V2", v2ToLatest],
    ["V1", v1ToLatest],
    ["V0", v0ToLatest]
  ];

  // ../../node_modules/@polkadot/api-contract/Abi/index.js
  var l13 = logger("Abi");
  var PRIMITIVE_ALWAYS = ["AccountId", "AccountIndex", "Address", "Balance"];
  function findMessage(list, messageOrId) {
    const message = isNumber(messageOrId) ? list[messageOrId] : isString(messageOrId) ? list.find(({ identifier }) => [identifier, stringCamelCase(identifier)].includes(messageOrId.toString())) : messageOrId;
    return assertReturn(message, () => `Attempted to call an invalid contract interface, ${stringify(messageOrId)}`);
  }
  function getLatestMeta(registry, json) {
    const vx = enumVersions.find((v3) => isObject(json[v3]));
    const jsonVersion = json.version;
    if (!vx && jsonVersion && !enumVersions.find((v3) => v3 === `V${jsonVersion}`)) {
      throw new Error(`Unable to handle version ${jsonVersion}`);
    }
    const metadata = registry.createType("ContractMetadata", vx ? { [vx]: json[vx] } : jsonVersion ? { [`V${jsonVersion}`]: json } : { V0: json });
    const converter3 = convertVersions.find(([v3]) => metadata[`is${v3}`]);
    if (!converter3) {
      throw new Error(`Unable to convert ABI with version ${metadata.type} to latest`);
    }
    return converter3[1](registry, metadata[`as${converter3[0]}`]);
  }
  function parseJson(json, chainProperties) {
    const registry = new TypeRegistry();
    const info6 = registry.createType("ContractProjectInfo", json);
    const latest2 = getLatestMeta(registry, json);
    const lookup = registry.createType("PortableRegistry", { types: latest2.types }, true);
    registry.setLookup(lookup);
    if (chainProperties) {
      registry.setChainProperties(chainProperties);
    }
    lookup.types.forEach(({ id }) => lookup.getTypeDef(id));
    return [json, registry, latest2, info6];
  }
  var Abi = class {
    constructor(abiJson, chainProperties) {
      this.__internal__createArgs = (args, spec2) => {
        return args.map(({ label, type }, index) => {
          try {
            if (!isObject(type)) {
              throw new Error("Invalid type definition found");
            }
            const displayName = type.displayName.length ? type.displayName[type.displayName.length - 1].toString() : void 0;
            const camelName = stringCamelCase(label);
            if (displayName && PRIMITIVE_ALWAYS.includes(displayName)) {
              return {
                name: camelName,
                type: {
                  info: TypeDefInfo.Plain,
                  type: displayName
                }
              };
            }
            const typeDef = this.registry.lookup.getTypeDef(type.type);
            return {
              name: camelName,
              type: displayName && !typeDef.type.startsWith(displayName) ? { displayName, ...typeDef } : typeDef
            };
          } catch (error) {
            l13.error(`Error expanding argument ${index} in ${stringify(spec2)}`);
            throw error;
          }
        });
      };
      this.__internal__createEvent = (spec2, index) => {
        const args = this.__internal__createArgs(spec2.args, spec2);
        const event = {
          args,
          docs: spec2.docs.map((d) => d.toString()),
          fromU8a: (data) => ({
            args: this.__internal__decodeArgs(args, data),
            event
          }),
          identifier: spec2.label.toString(),
          index
        };
        return event;
      };
      this.__internal__createMessage = (spec2, index, add2 = {}) => {
        const args = this.__internal__createArgs(spec2.args, spec2);
        const identifier = spec2.label.toString();
        const message = {
          ...add2,
          args,
          docs: spec2.docs.map((d) => d.toString()),
          fromU8a: (data) => ({
            args: this.__internal__decodeArgs(args, data),
            message
          }),
          identifier,
          index,
          method: stringCamelCase(identifier),
          path: identifier.split("::").map((s) => stringCamelCase(s)),
          selector: spec2.selector,
          toU8a: (params) => this.__internal__encodeArgs(spec2, args, params)
        };
        return message;
      };
      this.__internal__decodeArgs = (args, data) => {
        let offset2 = 0;
        return args.map(({ type: { lookupName, type } }) => {
          const value = this.registry.createType(lookupName || type, data.subarray(offset2));
          offset2 += value.encodedLength;
          return value;
        });
      };
      this.__internal__decodeMessage = (type, list, data) => {
        const [, trimmed] = compactStripLength(data);
        const selector = trimmed.subarray(0, 4);
        const message = list.find((m) => m.selector.eq(selector));
        if (!message) {
          throw new Error(`Unable to find ${type} with selector ${u8aToHex(selector)}`);
        }
        return message.fromU8a(trimmed.subarray(4));
      };
      this.__internal__encodeArgs = ({ label, selector }, args, data) => {
        if (data.length !== args.length) {
          throw new Error(`Expected ${args.length} arguments to contract message '${label.toString()}', found ${data.length}`);
        }
        return compactAddLength(u8aConcat(this.registry.createType("ContractSelector", selector).toU8a(), ...args.map(({ type: { lookupName, type } }, index) => this.registry.createType(lookupName || type, data[index]).toU8a())));
      };
      [this.json, this.registry, this.metadata, this.info] = parseJson(isString(abiJson) ? JSON.parse(abiJson) : abiJson, chainProperties);
      this.constructors = this.metadata.spec.constructors.map((spec2, index) => this.__internal__createMessage(spec2, index, {
        isConstructor: true,
        isPayable: spec2.payable.isTrue
      }));
      this.events = this.metadata.spec.events.map((spec2, index) => this.__internal__createEvent(spec2, index));
      this.messages = this.metadata.spec.messages.map((spec2, index) => {
        const typeSpec = spec2.returnType.unwrapOr(null);
        return this.__internal__createMessage(spec2, index, {
          isMutating: spec2.mutates.isTrue,
          isPayable: spec2.payable.isTrue,
          returnType: typeSpec ? this.registry.lookup.getTypeDef(typeSpec.type) : null
        });
      });
    }
    decodeEvent(data) {
      const index = data[0];
      const event = this.events[index];
      if (!event) {
        throw new Error(`Unable to find event with index ${index}`);
      }
      return event.fromU8a(data.subarray(1));
    }
    decodeConstructor(data) {
      return this.__internal__decodeMessage("message", this.constructors, data);
    }
    decodeMessage(data) {
      return this.__internal__decodeMessage("message", this.messages, data);
    }
    findConstructor(constructorOrId) {
      return findMessage(this.constructors, constructorOrId);
    }
    findMessage(messageOrId) {
      return findMessage(this.messages, messageOrId);
    }
  };

  // ../../node_modules/@polkadot/api-contract/util.js
  function applyOnEvent(result, types2, fn2) {
    if (result.isInBlock || result.isFinalized) {
      const records = result.filterRecords("contracts", types2);
      if (records.length) {
        return fn2(records);
      }
    }
    return void 0;
  }

  // ../../node_modules/@polkadot/api-contract/base/Base.js
  var Base = class {
    constructor(api, abi, decorateMethod) {
      if (!api || !api.isConnected || !api.tx) {
        throw new Error("Your API has not been initialized correctly and is not connected to a chain");
      } else if (!api.tx.contracts || !isFunction(api.tx.contracts.instantiateWithCode) || api.tx.contracts.instantiateWithCode.meta.args.length !== 6) {
        throw new Error("The runtime does not expose api.tx.contracts.instantiateWithCode with storageDepositLimit");
      } else if (!api.call.contractsApi || !isFunction(api.call.contractsApi.call)) {
        throw new Error("Your runtime does not expose the api.call.contractsApi.call runtime interfaces");
      }
      this.abi = abi instanceof Abi ? abi : new Abi(abi, api.registry.getChainProperties());
      this.api = api;
      this._decorateMethod = decorateMethod;
      this._isWeightV1 = !api.registry.createType("Weight").proofSize;
    }
    get registry() {
      return this.api.registry;
    }
  };

  // ../../node_modules/@polkadot/api-contract/base/util.js
  var EMPTY_SALT = new Uint8Array();
  function withMeta(meta, creator) {
    creator.meta = meta;
    return creator;
  }
  function convertWeight(weight) {
    const [refTime, proofSize] = isWeightV2(weight) ? [weight.refTime.toBn(), weight.proofSize.toBn()] : [bnToBn(weight), void 0];
    return {
      v1Weight: refTime,
      v2Weight: { proofSize, refTime }
    };
  }
  function isWeightV2(weight) {
    return !!weight.proofSize;
  }

  // ../../node_modules/@polkadot/api-contract/base/Contract.js
  var MAX_CALL_GAS = new import_bn.default(5e12).isub(BN_ONE);
  var l14 = logger("Contract");
  function createQuery(meta, fn2) {
    return withMeta(meta, (origin, options, ...params) => fn2(origin, options, params));
  }
  function createTx(meta, fn2) {
    return withMeta(meta, (options, ...params) => fn2(options, params));
  }
  var ContractSubmittableResult = class extends SubmittableResult {
    constructor(result, contractEvents) {
      super(result);
      this.contractEvents = contractEvents;
    }
  };
  var Contract = class extends Base {
    constructor(api, abi, address, decorateMethod) {
      super(api, abi, decorateMethod);
      this.__internal__query = {};
      this.__internal__tx = {};
      this.__internal__getGas = (_gasLimit, isCall = false) => {
        const weight = convertWeight(_gasLimit);
        if (weight.v1Weight.gt(BN_ZERO)) {
          return weight;
        }
        return convertWeight(isCall ? MAX_CALL_GAS : convertWeight(this.api.consts.system.blockWeights ? this.api.consts.system.blockWeights.maxBlock : this.api.consts.system.maximumBlockWeight).v1Weight.muln(64).div(BN_HUNDRED));
      };
      this.__internal__exec = (messageOrId, { gasLimit = BN_ZERO, storageDepositLimit = null, value = BN_ZERO }, params) => {
        return this.api.tx.contracts.call(
          this.address,
          value,
          this._isWeightV1 ? convertWeight(gasLimit).v1Weight : convertWeight(gasLimit).v2Weight,
          storageDepositLimit,
          this.abi.findMessage(messageOrId).toU8a(params)
        ).withResultTransform((result) => new ContractSubmittableResult(result, applyOnEvent(result, ["ContractEmitted", "ContractExecution"], (records) => records.map(({ event: { data: [, data] } }) => {
          try {
            return this.abi.decodeEvent(data);
          } catch (error) {
            l14.error(`Unable to decode contract event: ${error.message}`);
            return null;
          }
        }).filter((decoded) => !!decoded))));
      };
      this.__internal__read = (messageOrId, { gasLimit = BN_ZERO, storageDepositLimit = null, value = BN_ZERO }, params) => {
        const message = this.abi.findMessage(messageOrId);
        return {
          send: this._decorateMethod((origin) => this.api.rx.call.contractsApi.call(
            origin,
            this.address,
            value,
            this._isWeightV1 ? this.__internal__getGas(gasLimit, true).v1Weight : this.__internal__getGas(gasLimit, true).v2Weight,
            storageDepositLimit,
            message.toU8a(params)
          ).pipe(map2(({ debugMessage, gasConsumed, gasRequired, result, storageDeposit }) => ({
            debugMessage,
            gasConsumed,
            gasRequired: gasRequired && !convertWeight(gasRequired).v1Weight.isZero() ? gasRequired : gasConsumed,
            output: result.isOk && message.returnType ? this.abi.registry.createTypeUnsafe(message.returnType.lookupName || message.returnType.type, [result.asOk.data.toU8a(true)], { isPedantic: true }) : null,
            result,
            storageDeposit
          }))))
        };
      };
      this.address = this.registry.createType("AccountId", address);
      this.abi.messages.forEach((m) => {
        if (isUndefined(this.__internal__tx[m.method])) {
          this.__internal__tx[m.method] = createTx(m, (o, p) => this.__internal__exec(m, o, p));
        }
        if (isUndefined(this.__internal__query[m.method])) {
          this.__internal__query[m.method] = createQuery(m, (f, o, p) => this.__internal__read(m, o, p).send(f));
        }
      });
    }
    get query() {
      return this.__internal__query;
    }
    get tx() {
      return this.__internal__tx;
    }
  };

  // ../../node_modules/@polkadot/api-contract/promise/index.js
  var ContractPromise = class extends Contract {
    constructor(api, abi, address) {
      super(api, abi, address, toPromiseMethod);
    }
  };

  // ../../node_modules/@polkadot/extension-dapp/util.js
  function documentReadyPromise(creator) {
    return new Promise((resolve) => {
      if (document.readyState === "complete") {
        resolve(creator());
      } else {
        window.addEventListener("load", () => resolve(creator()));
      }
    });
  }

  // ../../node_modules/@polkadot/extension-dapp/bundle.js
  var win = window;
  win.injectedWeb3 = win.injectedWeb3 || {};
  var isWeb3Injected = web3IsInjected();
  var web3EnablePromise = null;
  function web3IsInjected() {
    return Object.values(win.injectedWeb3).filter(({ connect: connect2, enable }) => !!(connect2 || enable)).length !== 0;
  }
  function throwError(method) {
    throw new Error(`${method}: web3Enable(originName) needs to be called before ${method}`);
  }
  function mapAccounts(source, list, ss58Format) {
    return list.map(({ address, genesisHash, name, type }) => ({
      address: address.length === 42 ? address : encodeAddress(decodeAddress(address), ss58Format),
      meta: { genesisHash, name, source },
      type
    }));
  }
  function filterAccounts(list, genesisHash, type) {
    return list.filter((a) => (!a.type || !type || type.includes(a.type)) && (!a.genesisHash || !genesisHash || a.genesisHash === genesisHash));
  }
  function getWindowExtensions(originName) {
    return Promise.all(Object.entries(win.injectedWeb3).map(([nameOrHash, { connect: connect2, enable, version }]) => Promise.resolve().then(() => connect2 ? connect2(originName) : enable ? enable(originName).then((e) => objectSpread({ name: nameOrHash, version: version || "unknown" }, e)) : Promise.reject(new Error("No connect(..) or enable(...) hook found"))).catch(({ message }) => {
      console.error(`Error initializing ${nameOrHash}: ${message}`);
    }))).then((exts) => exts.filter((e) => !!e));
  }
  async function filterEnable(caller, extensions) {
    if (!web3EnablePromise) {
      return throwError(caller);
    }
    const sources = await web3EnablePromise;
    return sources.filter(({ name }) => !extensions || extensions.includes(name));
  }
  function web3Enable(originName, compatInits = []) {
    if (!originName) {
      throw new Error("You must pass a name for your app to the web3Enable function");
    }
    const initCompat = compatInits.length ? Promise.all(compatInits.map((c2) => c2().catch(() => false))) : Promise.resolve([true]);
    web3EnablePromise = documentReadyPromise(() => initCompat.then(() => getWindowExtensions(originName).then((values) => values.map((e) => {
      if (!e.accounts.subscribe) {
        e.accounts.subscribe = (cb) => {
          e.accounts.get().then(cb).catch(console.error);
          return () => {
          };
        };
      }
      return e;
    })).catch(() => []).then((values) => {
      const names = values.map(({ name, version }) => `${name}/${version}`);
      isWeb3Injected = web3IsInjected();
      console.info(`web3Enable: Enabled ${values.length} extension${values.length !== 1 ? "s" : ""}: ${names.join(", ")}`);
      return values;
    })));
    return web3EnablePromise;
  }
  async function web3Accounts({ accountType, extensions, genesisHash, ss58Format } = {}) {
    const accounts2 = [];
    const sources = await filterEnable("web3Accounts", extensions);
    const retrieved = await Promise.all(sources.map(async ({ accounts: accounts3, name: source }) => {
      try {
        const list = await accounts3.get();
        return mapAccounts(source, filterAccounts(list, genesisHash, accountType), ss58Format);
      } catch {
        return [];
      }
    }));
    retrieved.forEach((result) => {
      accounts2.push(...result);
    });
    console.info(`web3Accounts: Found ${accounts2.length} address${accounts2.length !== 1 ? "es" : ""}`);
    return accounts2;
  }
  async function web3FromSource(source) {
    if (!web3EnablePromise) {
      return throwError("web3FromSource");
    }
    const sources = await web3EnablePromise;
    const found = source && sources.find(({ name }) => name === source);
    if (!found) {
      throw new Error(`web3FromSource: Unable to find an injected ${source}`);
    }
    return found;
  }
  async function web3FromAddress(address) {
    if (!web3EnablePromise) {
      return throwError("web3FromAddress");
    }
    const accounts2 = await web3Accounts();
    let found;
    if (address) {
      const accountU8a = decodeAddress(address);
      found = accounts2.find((account3) => u8aEq(decodeAddress(account3.address), accountU8a));
    }
    if (!found) {
      throw new Error(`web3FromAddress: Unable to find injected ${address}`);
    }
    return web3FromSource(found.meta.source);
  }

  // ../../node_modules/@scio-labs/use-inkathon/dist/index.js
  var import_react = __toESM(require_react(), 1);
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  var Et = Object.defineProperty;
  var Bt = Object.defineProperties;
  var Ut = Object.getOwnPropertyDescriptors;
  var it = Object.getOwnPropertySymbols;
  var Ot = Object.prototype.hasOwnProperty;
  var Wt = Object.prototype.propertyIsEnumerable;
  var at = (t, r, e) => r in t ? Et(t, r, { enumerable: true, configurable: true, writable: true, value: e }) : t[r] = e;
  var v = (t, r) => {
    for (var e in r || (r = {}))
      Ot.call(r, e) && at(t, e, r[e]);
    if (it)
      for (var e of it(r))
        Wt.call(r, e) && at(t, e, r[e]);
    return t;
  };
  var M = (t, r) => Bt(t, Ut(r));
  var c = (t, r, e) => new Promise((o, n) => {
    var s = (a) => {
      try {
        i(e.next(a));
      } catch (d) {
        n(d);
      }
    }, l15 = (a) => {
      try {
        i(e.throw(a));
      } catch (d) {
        n(d);
      }
    }, i = (a) => a.done ? o(a.value) : Promise.resolve(a.value).then(s, l15);
    i((e = e.apply(t, r)).next());
  });
  var $2 = (t, r) => {
    let e = t.abi.messages.find((o) => stringCamelCase(o.method) === stringCamelCase(r));
    if (!e)
      throw new Error(`"${r}" not found in Contract`);
    return e;
  };
  function pt(t) {
    return typeof t == "object" && t !== null && "Err" in t;
  }
  function mt(t) {
    return typeof t == "object" && t !== null && "Ok" in t;
  }
  function Mt(t) {
    return (t == null ? void 0 : t.lookupName) || (t == null ? void 0 : t.type) || "";
  }
  function X({ result: t }, r, e) {
    var l15, i, a, d;
    let o, n = "", s = true;
    if (t.isOk) {
      s = t.asOk.flags.toHuman().includes("Revert");
      let m = $2(r, e).returnType, u = Mt(m), S = r.abi.registry, p = m ? S.createTypeUnsafe(u, [t.asOk.data]).toHuman() : "()";
      o = mt(p) ? p.Ok : pt(p) ? p.Err : p;
      let A = pt(o) ? typeof o.Err == "object" ? JSON.stringify(o.Err, null, 2) : (i = (l15 = o.Err) == null ? void 0 : l15.toString()) != null ? i : "Error" : o !== "Ok" && (o == null ? void 0 : o.toString()) || "Error", I = mt(p) ? typeof o == "object" ? JSON.stringify(o, null, "	") : (a = o == null ? void 0 : o.toString()) != null ? a : "()" : (d = JSON.stringify(o, null, "	")) != null ? d : "()";
      n = s ? A : I;
    }
    return { output: o, decodedOutput: n, isError: s };
  }
  var Ht = (t, r, e) => {
    let o = bnToBn(r), n = bnToBn(e);
    return t.registry.createType("WeightV2", { refTime: o, proofSize: n });
  };
  var V = (t, r = 0.8) => {
    var l15, i;
    let e = t.consts.system.blockWeights.toPrimitive(), o = (i = (l15 = e == null ? void 0 : e.perClass) == null ? void 0 : l15.normal) == null ? void 0 : i.maxExtrinsic, n = o != null && o.refTime ? bnToBn(o.refTime).mul(new import_bn.default(r * 100)).div(new import_bn.default(100)) : new import_bn.default(0), s = o != null && o.proofSize ? bnToBn(o.proofSize).mul(new import_bn.default(r * 100)).div(new import_bn.default(100)) : new import_bn.default(0);
    return Ht(t, n, s);
  };
  var Kt = (l15, i, a, d, ...y) => c(void 0, [l15, i, a, d, ...y], function* (t, r, e, o, n = {}, s = []) {
    let f = $2(e, o), m = (r == null ? void 0 : r.address) || r, { value: u, gasLimit: S, storageDepositLimit: p } = n;
    return yield t.call.contractsApi.call(m, e.address, u != null ? u : new import_bn.default(0), S != null ? S : null, p != null ? p : null, f.toU8a(s));
  });
  var Pe = (l15, i, a, d, ...y) => c(void 0, [l15, i, a, d, ...y], function* (t, r, e, o, n = {}, s = []) {
    let f = V(t), m = e.query[stringCamelCase(o)];
    return yield m(r, M(v({}, n), { gasLimit: f }), ...s);
  });
  var ve = (i, a, d, y, ...f) => c(void 0, [i, a, d, y, ...f], function* (t, r, e, o, n = {}, s = [], l15) {
    delete n.gasLimit;
    let m = yield Kt(t, r, e, o, n, s), { isError: u, decodedOutput: S } = X(m, e, o);
    if (u)
      return Promise.reject({ dryResult: m, errorMessage: S || "Error" });
    let p = m.gasRequired;
    return new Promise((A, I) => c(void 0, null, function* () {
      let g = e.tx[stringCamelCase(o)](M(v({}, n), { gasLimit: p }), ...s);
      try {
        let h = yield g.signAndSend(r, (x) => {
          var U;
          l15 == null || l15(x);
          let W = (U = x == null ? void 0 : x.status) == null ? void 0 : U.isInBlock;
          if (!W)
            return;
          let B = x == null ? void 0 : x.events.find(({ event: { method: C } }) => C === "ExtrinsicFailed");
          W && B ? (I({ dryResult: m, errorMessage: X || "ExtrinsicFailed", errorEvent: B }), h == null || h()) : W && (A({ dryResult: m, result: x }), h == null || h());
        });
      } catch (h) {
        console.error("Error while performing transaction:", h), I({ errorMessage: "UserCancelled" });
      }
    }));
  });
  var Yt = ((o) => (o.Browser = "browser", o.Android = "android", o.iOS = "ios", o))(Yt || {});
  var ie = ((o) => (o[o.InitializationError = 0] = "InitializationError", o[o.NoSubstrateExtensionDetected = 1] = "NoSubstrateExtensionDetected", o[o.NoAccountInjected = 2] = "NoAccountInjected", o))(ie || {});
  var xt = (0, import_react.createContext)(null);

  // src/polkadotjs.js
  window.ContractPromise = ContractPromise;
  window.ApiPromise = ApiPromise2;
  window.BN = import_bn.default;
  window.WsProvider = WsProvider2;
  window.web3Accounts = web3Accounts;
  window.web3Enable = web3Enable;
  window.web3FromAddress = web3FromAddress;
  var POLKADOTJS = {
    activatePolkadotjsExtension: async () => {
      if ($(".polkadotjs").length) {
        let polkadotConnectButtonSelector = ".polkadot-connect-button";
        $(polkadotConnectButtonSelector).removeClass("d-none");
        document.querySelectorAll(polkadotConnectButtonSelector).forEach((item) => {
          item.addEventListener("click", async (evt) => {
            await POLKADOTJS.connectPolkadotjsExtension();
          });
        });
        return await POLKADOTJS.connectPolkadotjsExtension();
      }
    },
    connectPolkadotjsExtension: async () => {
      document.disableButton(".polkadot-connect-button");
      try {
        const extensions = await web3Enable("Escrow Demo | btn.group");
        if (extensions.length === 0) {
          throw "Please install Subwallet, Polkadotjs or Talisman browser extension. If you have one of these extensions installed already, please goto the setttings and allow this site access.";
        }
        const allAccounts = await web3Accounts();
        POLKADOTJS.initAccountList(allAccounts);
        return {
          extensions,
          allAccounts
        };
      } catch (err) {
        document.showAlertDanger(err);
        document.enableButton(".polkadot-connect-button");
      }
    },
    contractQuery: Pe,
    contractTx: async (api, account3, contract, method, options = {}, args = [], statusCb = void 0) => {
      try {
        return await ve(
          api,
          account3,
          contract,
          method,
          options,
          args,
          statusCb
        );
      } catch (err) {
        if (typeof err.errorMessage == "string") {
          throw err;
        }
        let decodeOutput = err.errorMessage;
        let result = await Kt(
          api,
          account3,
          contract,
          method,
          options,
          args
        );
        const { isError, decodedOutput } = decodeOutput(result, contract, method);
        if (isError) {
          return Promise.reject({
            result,
            errorMessage: decodedOutput || "Error"
          });
        }
      }
    },
    initAccountList: (accounts2) => {
      $("#polkadot-account-list .list").html("");
      _.sortBy(accounts2, ["meta.source", "meta.name"]).forEach(function(account3) {
        $("#polkadot-account-list .list").append(
          `<li class='p-0' data-account-address= '${account3.address}', data-account-name= '${account3.meta.name}', data-account-source= '${account3.meta.source}'><a href='#' class='d-flex align-items-center'><div class='text-center me-3' style='width: 40px; height: 40px;'><img class="h-100" src='https://res.cloudinary.com/hv5cxagki/image/upload/c_pad,dpr_2,f_auto,h_25,w_25,q_100/v1/${HELPERS.walletCloudinaryPublicId(
            account3.meta.source
          )}'></div><div class="d-block"><div class="fw-bold text-light">${account3.meta.name}</div><div class="text-muted"><div class="lh-base">${account3.address}</div></div></div>`
        );
        if (accounts2.length) {
          $("#change-account-link").removeClass("d-none");
        } else {
          $("#change-account-link").addClass("d-none");
        }
        $("#change-account-link").click(function(e) {
          e.preventDefault();
          $("#polkadot-account-list").modal("show");
        });
      });
    },
    listenForAccountSelect: function(scope) {
      $("#polkadot-account-list li").click(function(e) {
        e.preventDefault();
        $("#polkadot-account-list").modal("hide");
        scope.updateAfterAccountSelect(e);
      });
    }
  };

  // src/toastr.js
  var import_toastr = __toESM(require_toastr());
  document.showAlertInfo = function(text, autoHide = true) {
    import_toastr.default.options.closeButton = true;
    import_toastr.default.options.closeDuration = 0;
    import_toastr.default.options.extendedTimeOut = 0;
    import_toastr.default.options.preventDuplicates = true;
    import_toastr.default.options.tapToDismiss = false;
    import_toastr.default.options.timeOut = 0;
    if (autoHide) {
      import_toastr.default.options = {
        progressBar: true,
        preventDuplicates: false,
        showDuration: "300",
        hideDuration: "1000",
        timeOut: "5000",
        extendedTimeOut: "1000",
        showEasing: "swing",
        hideEasing: "linear",
        showMethod: "fadeIn",
        hideMethod: "fadeOut"
      };
    }
    import_toastr.default.info(text);
  };
  document.showAlertWarning = function(error, autoHide = true) {
    import_toastr.default.options.closeButton = true;
    import_toastr.default.options.closeDuration = 0;
    import_toastr.default.options.extendedTimeOut = 0;
    import_toastr.default.options.preventDuplicates = true;
    import_toastr.default.options.tapToDismiss = false;
    import_toastr.default.options.timeOut = 0;
    if (autoHide) {
      import_toastr.default.options = {
        progressBar: true,
        preventDuplicates: false,
        showDuration: "300",
        hideDuration: "1000",
        timeOut: "5000",
        extendedTimeOut: "1000",
        showEasing: "swing",
        hideEasing: "linear",
        showMethod: "fadeIn",
        hideMethod: "fadeOut"
      };
    }
    import_toastr.default.warning(error);
  };
  document.showAlertDanger = function(error, autoHide = false) {
    document.eeeeee = error;
    if (error.errorMessage) {
      error = error.errorMessage;
    }
    if (error != "usercancelled") {
      import_toastr.default.options.closeButton = true;
      import_toastr.default.options.closeDuration = 0;
      import_toastr.default.options.extendedTimeOut = 0;
      import_toastr.default.options.preventDuplicates = true;
      import_toastr.default.options.tapToDismiss = false;
      import_toastr.default.options.timeOut = 0;
      if (autoHide) {
        import_toastr.default.options = {
          progressBar: true,
          preventDuplicates: false,
          showDuration: "300",
          hideDuration: "1000",
          timeOut: "5000",
          extendedTimeOut: "1000",
          showEasing: "swing",
          hideEasing: "linear",
          showMethod: "fadeIn",
          hideMethod: "fadeOut"
        };
      }
      import_toastr.default.error(error);
    }
  };
  document.showAlertSuccess = function(text, autoHide = false) {
    import_toastr.default.options.closeButton = true;
    import_toastr.default.options.closeDuration = 0;
    import_toastr.default.options.extendedTimeOut = 0;
    import_toastr.default.options.preventDuplicates = true;
    import_toastr.default.options.tapToDismiss = false;
    import_toastr.default.options.timeOut = 0;
    if (autoHide) {
      import_toastr.default.options = {
        progressBar: true,
        preventDuplicates: false,
        showDuration: "300",
        hideDuration: "1000",
        timeOut: "5000",
        extendedTimeOut: "1000",
        showEasing: "swing",
        hideEasing: "linear",
        showMethod: "fadeIn",
        hideMethod: "fadeOut"
      };
    }
    import_toastr.default.success(text);
  };

  // src/aleph_zero.js
  var ALEPH_ZERO = {
    account: void 0,
    allAccounts: void 0,
    apisLocal: void 0,
    apisStaging: void 0,
    apisProduction: void 0,
    extensions: void 0,
    escrow: {},
    activatePolkadotJsExtension: async () => {
      let response = await POLKADOTJS.activatePolkadotjsExtension();
      ALEPH_ZERO.extensions = response.extensions;
      ALEPH_ZERO.allAccounts = response.allAccounts;
      if (ALEPH_ZERO.allAccounts.length) {
        POLKADOTJS.listenForAccountSelect(ALEPH_ZERO);
        if (HELPERS.cookies.get("polkadot_account_name") && HELPERS.cookies.get("polkadot_extension")) {
          ALEPH_ZERO.allAccounts.forEach(function(account3) {
            if (account3.meta.name == HELPERS.cookies.get("polkadot_account_name") && account3.meta.source == HELPERS.cookies.get("polkadot_extension")) {
              ALEPH_ZERO.account = account3;
              ALEPH_ZERO.updateAfterAccountSet();
            }
          });
        }
        if (!ALEPH_ZERO.account) {
          if (ALEPH_ZERO.allAccounts.length == 1) {
            ALEPH_ZERO.account = ALEPH_ZERO.allAccounts[0];
            ALEPH_ZERO.updateAfterAccountSet();
          } else {
            $("#polkadot-account-list").modal("show");
            document.enableButton(".polkadot-connect-button");
          }
        }
      }
    },
    getSigner: () => {
      let signer;
      ALEPH_ZERO.extensions.forEach(function(extension) {
        if (extension.name == ALEPH_ZERO.account.meta.source) {
          signer = extension.signer;
        }
      });
      return signer;
    },
    api: async (environment = "production") => {
      let apis;
      let httpUrls = await ALEPH_ZERO.httpUrls(environment);
      switch (environment) {
        case "staging":
          if (!ALEPH_ZERO.apisStaging) {
            ALEPH_ZERO.apisStaging = [];
            for (const url of httpUrls) {
              let wsProvider = new WsProvider(url);
              let c2 = await ApiPromise.create({ provider: wsProvider });
              ALEPH_ZERO.apisStaging.push(c2);
            }
          }
          apis = ALEPH_ZERO.apisStaging;
          break;
        case "local":
          if (!ALEPH_ZERO.apisLocal) {
            ALEPH_ZERO.apisLocal = [];
            let c2 = await ApiPromise.create({ provider: "ws://127.0.0.1:9944" });
            ALEPH_ZERO.apisLocal.push(c2);
          }
          apis = ALEPH_ZERO.apisLocal;
          break;
        default:
          if (!ALEPH_ZERO.apisProduction) {
            ALEPH_ZERO.apisProduction = [];
            for (const url of httpUrls) {
              let wsProvider = new WsProvider(url);
              let c2 = await ApiPromise.create({ provider: wsProvider });
              ALEPH_ZERO.apisProduction.push(c2);
            }
          }
          apis = ALEPH_ZERO.apisProduction;
          break;
      }
      return _.sample(apis);
    },
    httpUrls: async (environment = "production") => {
      let urls = ["wss://ws.azero.dev"];
      if (environment == "staging") {
        urls = ["wss://ws.test.azero.dev"];
      }
      return urls;
    },
    updateAfterAccountSelect: (event) => {
      let setNewAccount = false;
      let newAddress = event.currentTarget.dataset.accountAddress;
      let newSource = event.currentTarget.dataset.accountSource;
      if (ALEPH_ZERO.account) {
        if (ALEPH_ZERO.account.address != newAddress || ALEPH_ZERO.account.meta.source != newSource) {
          setNewAccount = true;
        }
      } else {
        setNewAccount = true;
      }
      if (setNewAccount) {
        ALEPH_ZERO.allAccounts.forEach(function(account3) {
          if (account3.address == newAddress && account3.meta.source == newSource) {
            ALEPH_ZERO.account = account3;
            ALEPH_ZERO.updateAfterAccountSet();
          }
        });
      }
    },
    updateAfterAccountSet: () => {
      $("#wallet-toggle").removeClass("d-none");
      $(".wallet-address").text(ALEPH_ZERO.account.address);
      document.cookie = `polkadot_account_name=${ALEPH_ZERO.account.meta.name};`;
      document.cookie = `polkadot_extension=${ALEPH_ZERO.account.meta.source};`;
      $(".polkadot-connect-button").addClass("d-none");
      document.enableButton(".polkadot-connect-button");
      HELPERS.setUserAccountMenuToggle(
        ALEPH_ZERO.account.address,
        ALEPH_ZERO.account.meta.name,
        ALEPH_ZERO.account.meta.source
      );
    }
  };

  // src/listings/index.js
  $(document).ready(function() {
    if ($("#listings-index").length) {
      ALEPH_ZERO.escrow.index = {
        init: async () => {
          await ALEPH_ZERO.activatePolkadotJsExtension();
        }
      };
      ALEPH_ZERO.escrow.index.init();
    }
  });

  // application.js
  var HELPERS = {
    cookies: {
      get: (id) => {
        return document.cookie.split("; ").find((row) => row.startsWith(`${id}=`))?.split("=")[1];
      }
    },
    setUserAccountMenuToggle: (address, name, source) => {
      $("#wallet-toggle img.user-address-alias-avatar").attr(
        "src",
        `https://res.cloudinary.com/hv5cxagki/image/upload/c_scale,dpr_2,f_auto,h_25,q_100/${HELPERS.walletCloudinaryPublicId(
          source
        )}`
      );
      $("#wallet-toggle .account-name").text(name);
      $("#wallet-toggle .account-address-abbreviated").text(
        `${address.substring(0, 3)}...${address.slice(-3)}`
      );
    },
    walletCloudinaryPublicId: function(id) {
      switch (id) {
        case "polkadot-js":
          return "logos/download_qbpd9p";
        case "subwallet-js":
          return "logos/subwallet.3be275bc71284f30e5bc_cwag5o";
        case "talisman":
          return "logos/Talisman-Icon-Red_e75eas.png";
        default:
          return "external-content.duckduckgo-1_memqe7";
      }
    }
  };
  document.disableButton = function(selector) {
    let $button = $(selector);
    $button.prop("disabled", true);
    $button.find(".loading").removeClass("d-none");
    $button.find(".ready").addClass("d-none");
  };
  document.enableButton = function(selector) {
    let $button = $(selector);
    $button.prop("disabled", false);
    $button.find(".loading").addClass("d-none");
    $button.find(".ready").removeClass("d-none");
  };
})();
/*!
  * Bootstrap v5.2.3 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
/*!
 * jQuery JavaScript Library v3.7.0
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-05-11T18:29Z
 */
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
